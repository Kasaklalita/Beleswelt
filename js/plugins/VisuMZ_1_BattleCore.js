//=============================================================================
// VisuStella MZ - Battle Core
// VisuMZ_1_BattleCore.js
//=============================================================================

var Imported = Imported || {};
Imported.VisuMZ_1_BattleCore = true;

var VisuMZ = VisuMZ || {};
VisuMZ.BattleCore = VisuMZ.BattleCore || {};
VisuMZ.BattleCore.version = 1.50;

//=============================================================================
 /*:
 * @target MZ
 * @plugindesc [RPG Maker MZ] [Tier 1] [Version 1.50] [BattleCore]
 * @author VisuStella
 * @url http://www.yanfly.moe/wiki/Battle_Core_VisuStella_MZ
 * @orderAfter VisuMZ_0_CoreEngine
 *
 * @help
 * ============================================================================
 * Introduction
 * ============================================================================
 *
 * The Battle Core plugin revamps the battle engine provided by RPG Maker MZ to
 * become more flexible, streamlined, and support a variety of features. The
 * updated battle engine allows for custom Action Sequences, battle layout
 * styles, and a lot of control over the battle mechanics, too.
 *
 * Features include all (but not limited to) the following:
 * 
 * * Action Sequence Plugin Commands to give you full control over what happens
 *   during the course of a skill or item.
 * * Animated Sideview Battler support for enemies!
 * * Auto Battle options for party-wide and actor-only instances.
 * * Base Troop Events to quickly streamline events for all Troop events.
 * * Battle Command control to let you change which commands appear for actors.
 * * Battle Layout styles to change the way the battle scene looks.
 * * Casting animation support for skills.
 * * Critical Hit control over the success rate formula and damage multipliers.
 * * Custom target scopes added for skills and items.
 * * Damage formula control, including Damage Styles.
 * * Damage caps, both hard caps and soft caps.
 * * Damage traits such Armor Penetration/Reduction to bypass defenses.
 * * Elements & Status Menu Core support for traits.
 * * Multitude of JavaScript notetags and global Plugin Parameters to let you
 *   make a variety of effects across various instances during battle.
 * * Party Command window can be skipped/disabled entirely.
 * * Weather effects now show in battle.
 * * Streamlined Battle Log to remove redundant information and improve the
 *   flow of battle.
 * * Visual HP Gauges can be displayed above the heads of actors and/or enemies
 *   with a possible requirement for enemies to be defeated at least once first
 *   in order for them to show.
 *
 * ============================================================================
 * Requirements
 * ============================================================================
 *
 * This plugin is made for RPG Maker MZ. This will not work in other iterations
 * of RPG Maker.
 *
 * ------ Tier 1 ------
 *
 * This plugin is a Tier 1 plugin. Place it under other plugins of lower tier
 * value on your Plugin Manager list (ie: 0, 1, 2, 3, 4, 5). This is to ensure
 * that your plugins will have the best compatibility with the rest of the
 * VisuStella MZ library.
 *
 * ============================================================================
 * Major Changes
 * ============================================================================
 *
 * This plugin will overwrite some core parts of the RPG Maker MZ base code in
 * order to ensure the Battle Core plugin will work at full capacity. The
 * following are explanations of what has been changed.
 *
 * ---
 *
 * Action Sequences
 *
 * - Action sequences are now done either entirely by the Battle Log Window or
 * through common events if the <Custom Action Sequence> notetag is used.
 * In RPG Maker MZ by default, Action Sequences would be a mixture of using the
 * Battle Log Window, the Battle Manager, and the Battle Scene, making it hard
 * to fully grab control of the situation.
 *
 * ---
 *
 * Action Speed
 *
 * - Action speeds determine the turn order in the default battle system. The
 * AGI of a battle unit is also taken into consideration. However, the random
 * variance applied to the action speed system makes the turn order extremely
 * chaotic and hard for the player to determine. Thus, the random variance
 * aspect of it has been turned off. This can be reenabled by default through
 * Plugin Parameters => Mechanics Settings => Allow Random Speed?
 *
 * ---
 *
 * Animated Sideview Battler Support For Enemies
 *
 * - Enemies can now use Sideview Actor sprites for themselves! They will
 * behave like actors and can even carry their own set of weapons for physical
 * attacks. These must be set up using notetags. More information can be found
 * in the notetag section.
 *
 * - As the sprites are normally used for actors, some changes have been made
 * to Sprite_Actor to be able to support both actors and enemies. These changes
 * should have minimal impact on other plugins.
 *
 * ---
 *
 * Battle Sprite Updates
 *
 * - A lot of functions in Sprite_Battler, Sprite_Actor, and Sprite_Enemy have
 * been overwritten to make the new Action Sequence system added by this plugin
 * possible. These changes make it possible for the sprites to move anywhere on
 * the screen, jump, float, change visibility, and more.
 *
 * ---
 *
 * Change Battle Back in Battle
 * 
 * - By default, the Change Battle Back event command does not work in battle.
 * Any settings made to it will only reflect in the following battle. Now, if
 * the battle back event command is used during battle, it will reflect upon
 * any new changes immediately.
 *
 * ---
 *
 * Critical Hit - LUK Influence
 *
 * - The LUK Buffs now affect the critical hit rate based off how the formula
 * is now calculated. Each stack of a LUK Buff will double the critical hit
 * rate and compound upon that. That means a x1 LUK Buff stack will raise it by
 * x2, a x2 LUK Buff stack will raise the critical hit rate by x4, a x3 LUK
 * Buff Stack will raise the critical hit rate stack by x8, and so on.
 *
 * - LUK also plays a role in how much damage is dealt with critical hits. The
 * default critical hit multiplier has been reduced from x3 to x2. However, a
 * percentage of LUK will added on (based off the user's CRI rate) onto the
 * finalized critical damage. If the user's CRI rate is 4%, then 4% of the user
 * LUK value will also be added onto the damage.
 *
 * - This change can be altered through Plugin Parameters => Damage Settings =>
 * Critical Hits => JS: Rate Formula and JS: Damage Formula.
 *
 * ---
 * 
 * Damage Popups
 * 
 * - Damage popups are now formatted with + and - to determine healing and
 * damage. MP Damage will also include "MP" at the back. This is to make it
 * clearer what each colored variant of the damage popup means as well as help
 * color blind players read the on-screen data properly.
 * 
 * - Damage popups have also been rewritten to show all changed aspects instead
 * of just one. Previously with RPG Maker MZ, if an action would deal both HP
 * and MP damage, only one of them would show. Now, everything is separated and
 * both HP and MP changes will at a time.
 * 
 * ---
 * 
 * Dual Wielding
 * 
 * - Previously, RPG Maker MZ had "Dual Wielding" attack using both weapon
 * animations at once, with the combined ATK of each weapon. It's confusing to
 * look at and does not portray the nature of "Dual Wielding".
 * 
 * - Dual Wielding, or in the case of users adding in third and fourth weapons,
 * Multi Wielding is now changed. Each weapon is displayed individually, each
 * producing its own attack animation, showing each weapon type, and applying
 * only that weapon's ATK, Traits, and related effects. It is no longer a
 * combined effect to display everything at once like RPG Maker MZ default.
 * 
 * - If an actor has multiple weapon slots but some of them are unequipped,
 * then the action will treat the attack as a single attack. There will be no
 * barehanded attack to add on top of it. This is to match RPG Maker MZ's
 * decision to omit a second animation if the same scenario is applied.
 * 
 * ---
 *
 * Force Action
 *
 * - Previously, Forced Actions would interrupt the middle of an event to
 * perform an action. However, with the addition of more flexible Action
 * Sequences, the pre-existing Force Action system would not be able to exist
 * and would require being remade.
 *
 * - Forced Actions now are instead, added to a separate queue from the action
 * battler list. Whenever an action and/or common event is completed, then if
 * there's a Forced Action battler queued, then the Forced Action battler will
 * have its turn. This is the cleanest method available and avoids the most
 * conflicts possible.
 *
 * - This means if you planned to make cinematic sequences with Forced Actions,
 * you will need to account for the queued Force Actions. However, in the case
 * of battle cinematics, we would highly recommend that you use the newly added
 * Action Sequence Plugin Commands instead as those give you more control than
 * any Force Action ever could.
 *
 * ---
 *
 * Random Scope
 *
 * - The skill and item targeting scopes for Random Enemy, 2 Random Enemies,
 * 3 Random Enemies, 4 Random Enemies will now ignore TGR and utilize true
 * randomness.
 *
 * ---
 *
 * Spriteset_Battle Update
 *
 * - The spriteset now has extra containers to separate battlers (actors and
 * enemies), animations, and damage. This is to make actors and enemy battler
 * sprites more efficient to sort (if enabled), so that animations won't
 * interfere with and cover damage sprites, and to make sure damage sprites are
 * unaffected by screen tints in order to ensure the player will always have a
 * clear read on the information relaying sprites.
 *
 * ---
 * 
 * TPB/ATB Active Battle Actor Shifting
 * 
 * - Pressing cancel on the Actor Command Window no longer switches between
 * actors with a full TPB/ATB gauge before reaching the Party Command Window.
 * This is to accomplish a couple of things: 1) reduce the number of button
 * presses to reach the Party Command Window and 2) to prevent motion resets
 * and disrupting action sequences. If this feature is vital to your battle
 * system, we recommend that you do not use this plugin or any of the Battle
 * Core-required plugins.
 * 
 * ---
 *
 * Weather Displayed in Battle
 *
 * - Previously, weather has not been displayed in battle. This means that any
 * weather effects placed on the map do not transfer over to battle and causes
 * a huge disconnect for players. The Battle Core plugin will add weather
 * effects to match the map's weather conditions. Any changes made to weather
 * through event commands midway through battle will also be reflected.
 *
 * ---
 *
 * ============================================================================
 * Base Troops
 * ============================================================================
 *
 * Base Troops can be found, declared, and modified in the Plugin Parameters =>
 * Mechanics Settings => Base Troop ID's. All of the listed Troop ID's here
 * will have their page events replicated and placed under all other troops
 * found in the database.
 *
 * ---
 *
 * This means that if you have an event that runs on Turn 1 of a Base Troop,
 * then for every troop out there, that same event will also run on Turn 1,
 * as well. This is useful for those who wish to customize their battle system
 * further and to reduce the amount of work needed to copy/paste said event
 * pages into every database troop object manually.
 *
 * ---
 *
 * ============================================================================
 * Damage Styles
 * ============================================================================
 *
 * Damage Styles are a new feature added through the Battle Core plugin. When
 * using certain Battle Styles, you can completely ignore typing in the whole
 * damage formula inside the damage formula input box, and instead, insert
 * either a power amount or a multiplier depending on the Damage Style. The
 * plugin will then automatically calculate damage using that value factoring
 * in ATK, DEF, MAT, MDF values.
 *
 * ---
 *
 * Here is a list of the Damage Styles that come with this plugin by default.
 * You can add in your own and even edit them to your liking.
 * Or just remove them if you want.
 *
 * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
 * Style          Use Formula As   PH/MA Disparity   Stat Scale   Damage Scale
 * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
 * Standard       Formula          No                Varies       Varies
 * ArmorScaling   Formula          No                Varies       Varies
 * CT             Multiplier       Yes               Low          Normal
 * D4             Multiplier       No                High         Normal
 * DQ             Multiplier       No                Low          Low
 * FF7            Power            Yes               Low          High
 * FF8            Power            Yes               Medium       Normal
 * FF9            Power            Yes               Low          Normal
 * FF10           Power            Yes               Medium       High
 * MK             Multiplier       No                Medium       Low
 * MOBA           Multiplier       No                Medium       Normal
 * PKMN           Power            No                Low          Normal
 *
 * Use the above chart to figure out which Damage Style best fits your game,
 * if you plan on using them.
 *
 * The 'Standard' style is the same as the 'Manual' formula input, except that
 * it allows for the support of <Armor Penetration> and <Armor Reduction>
 * notetags.
 *
 * The 'Armor Scaling' style allows you to type in the base damage calculation
 * without the need to type in any defending modifiers.
 *
 * NOTE: While these are based off the damage formulas found in other games,
 * not all of them are exact replicas. Many of them are adapted for use in
 * RPG Maker MZ since not all RPG's use the same set of parameters and not all
 * external multipliers function the same way as RPG Maker MZ.
 * 
 * ---
 *
 * Style:
 * - This is what the Damage Style is.
 *
 * Use Formula As:
 * - This is what you insert into the formula box.
 * - Formula: Type in the formula for the action just as you would normally.
 * - Multiplier: Type in the multiplier for the action.
 *     Use float values. This means 250% is typed out as 2.50
 * - Power: Type in the power constant for the action.
 *     Use whole numbers. Type in something like 16 for a power constant.
 * 
 * PH/MA Disparity:
 * - Is there a disparity between how Physical Attacks and Magical Attacks
 *   are calculated?
 * - If yes, then physical attacks and magical attacks will have different
 *   formulas used.
 * - If no, then physical attacks and magical attacks will share similar
 *   formulas for how they're calculated.
 *
 * Stat Scale:
 * - How much should stats scale throughout the game?
 * - Low: Keep them under 100 for the best results.
 * - Medium: Numbers work from low to mid 400's for best results.
 * - High: The numbers really shine once they're higher.
 *
 * Damage Scale:
 * - How much does damage vary depending on small parameter changes?
 * - Low: Very little increase from parameter changes.
 * - Normal: Damage scales close to proportionally with parameter changes.
 * - High: Damage can boost itself drastically with parameter changes.
 *
 * ---
 *
 * To determine what kind of parameters are used for the Damage Styles, they
 * will depend on two things: the action's 'Hit Type' (ie Physical Attack,
 * Magical Attack, and Certain Hit) and the action's 'Damage Type' (ie. Damage,
 * Recovery, or Drain).
 *
 * Certain Hit tends to use whichever value is higher: ATK or MAT, and then
 * ignores the target's defense values. Use Certain Hits for 'True Damage'.
 *
 * Use the chart below to figure out everything else:
 * 
 * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
 * Hit Type      Damage Type   Attacker Parameter   Defender Parameter
 * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
 * Physical      Damage        ATK                  DEF
 * Magical       Damage        MAT                  MDF
 * Certain Hit   Damage        Larger (ATK, MAT)    -Ignores-
 * Physical      Recover       DEF                  -Ignores-
 * Magical       Recover       MDF                  -Ignores-
 * Certain Hit   Recover       Larger (ATK, MAT)    -Ignores-
 * Physical      Drain         ATK                  DEF
 * Magical       Drain         MAT                  MDF
 * Certain Hit   Drain         Larger (ATK, MAT)    -Ignores-
 *
 * These can be modified within the Plugin Parameters in the individual
 * Damage Styles themselves.
 *
 * ---
 *
 * Skills and Items can use different Damage Styles from the setting you've
 * selected in the Plugin Parameters. They can be altered to have different
 * Damage Styles through the usage of a notetag:
 *
 * <Damage Style: name>
 *
 * This will use whichever style is found in the Plugin Parameters.
 *
 * If "Manual" is used, then no style will be used and all calculations will be
 * made strictly based off the formula found inside the formula box.
 *
 * ---
 *
 * ============================================================================
 * VisuStella MZ Compatibility
 * ============================================================================
 *
 * While this plugin is compatible with the majority of the VisuStella MZ
 * plugin library, it is not compatible with specific plugins or specific
 * features. This section will highlight the main plugins/features that will
 * not be compatible with this plugin or put focus on how the make certain
 * features compatible.
 *
 * ---
 * 
 * VisuMZ_1_BattleCore
 * 
 * When using Action Sequences, Boost effects for damage, turn extensions,
 * analyze, etc. will not occur for anything other than the Action Sequence:
 * "MECH: Action Effect" in order to maintain controlled effects. However, if
 * you do want to apply bonuses for Boosts, utilize "MECH: Boost Store Data" to
 * store inside a variable how many times Boosts were used. This can be used
 * however which way you want it to as long as it is manageable through events
 * and Common Events.
 * 
 * ---
 *
 * ============================================================================
 * Notetags
 * ============================================================================
 *
 * The following are notetags that have been added through this plugin. These
 * notetags will not work with your game if this plugin is OFF or not present.
 * 
 * === HP Gauge-Related Notetags ===
 * 
 * The following notetags allow you to set whether or not HP Gauges can be
 * displayed by enemies regardless of Plugin Parameter settings.
 * 
 * ---
 *
 * <Show HP Gauge>
 *
 * - Used for: Enemy Notetags
 * - Will always show the HP Gauge for the enemy regardless of the defeat
 *   requirement setting.
 * - This does not bypass the player's Options preferences.
 * - This does not bypass disabling enemy HP Gauges as a whole.
 * 
 * ---
 *
 * <Hide HP Gauge>
 *
 * - Used for: Enemy Notetags
 * - Will always hide the HP Gauge for the enemy regardless of the defeat
 *   requirement setting.
 * - This does not bypass the player's Options preferences.
 * 
 * ---
 * 
 * <Battle UI Offset: +x, +y>
 * <Battle UI Offset: -x, -y>
 * 
 * <Battle UI Offset X: +x>
 * <Battle UI Offset X: -x>
 * 
 * <Battle UI Offset Y: +y>
 * <Battle UI Offset Y: -y>
 * 
 * - Used for: Actor and Enemy Notetags
 * - Adjusts the offset of HP Gauges and State Icons above the heads of actors
 *   and enemies.
 * - Replace 'x' with a number value that offsets the x coordinate.
 * - Negative x values offset left. Positive x values offset right.
 * - Replace 'y' with a number value that offsets the y coordinate.
 * - Negative y values offset up. Positive x values offset down.
 * 
 * ---
 *
 * === Animation-Related Notetags ===
 *
 * The following notetags allow you to set animations to play at certain
 * instances and/or conditions.
 *
 * ---
 *
 * <Slip Animation: x>
 *
 * - Requires VisuMZ_0_CoreEngine!
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - During the phase at which the user regenerates HP, MP, or TP, this
 *   animation will play as long as the user is alive and visible.
 * - Replace 'x' with a number value representing the Animation ID to play.
 *
 * ---
 *
 * <Cast Animation: x>
 *
 * - Used for: Skill Notetags
 * - Plays a battle animation at the start of the skill.
 * - Replace 'x' with a number value representing the Animation ID to play.
 *
 * ---
 *
 * <Attack Animation: x>
 *
 * - Used for: Enemy Notetags
 * - Gives an enemy an attack animation to play for its basic attack.
 * - Replace 'x' with a number value representing the Animation ID to play.
 *
 * ---
 *
 * === Battleback-Related Notetags ===
 *
 * You can apply these notetags to have some control over the battlebacks that
 * appear in different regions of the map for random or touch encounters.
 *
 * ---
 *
 * <Region x Battleback1: filename>
 * <Region x Battleback2: filename>
 * 
 * - Used for: Map Notetags
 * - If the player starts a battle while standing on 'x' region, then the
 *   'filename' battleback will be used.
 * - Replace 'x' with a number representing the region ID you wish to use.
 * - Replace 'filename' with the filename of the graphic to use. Do not insert
 *   any extensions. This means the file 'Castle1.png' will be only inserted
 *   as 'Castle1' without the '.png' at the end.
 * - *NOTE: This will override any specified battleback settings.
 *
 * ---
 *
 * === Battle Command-Related Notetags ===
 *
 * You can use notetags to change how the battle commands of playable
 * characters appear in battle as well as whether or not they can be used.
 *
 * ---
 *
 * <Seal Attack>
 * <Seal Guard>
 * <Seal Item>
 *
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Prevents specific battle commands from being able to be used.
 *
 * ---
 *
 * <Battle Commands>
 *  Attack
 *  Skills
 *  SType: x
 *  SType: name
 *  All Skills
 *  Skill: x
 *  Skill: name
 *  Guard
 *  Item
 *  Party
 *  Escape
 *  Auto Battle
 *  Combat Log
 *  Talk
 *  Weapon Swap
 * </Battle Commands>
 *
 * - Used for: Class Notetags
 * - Changes which commands appear in the Actor Command Window in battle.
 *   If this notetag is not used, then the default commands determined in
 *   Plugin Parameters => Actor Command Window => Command List will be used.
 * - Add/remove/modify entries as needed.
 *
 * - Attack 
 *   - Adds the basic attack command.
 * 
 * - Skills
 *   - Displays all the skill types available to the actor.
 * 
 * - SType: x
 * - Stype: name
 *   - Adds in a specific skill type.
 *   - Replace 'x' with the ID of the skill type.
 *   - Replace 'name' with the name of the skill type (without text codes).
 *
 * - All Skills
 *   - Adds all usable battle skills as individual actions.
 * 
 * - Skill: x
 * - Skill: name
 *   - Adds in a specific skill as a usable action.
 *   - Replace 'x' with the ID of the skill.
 *   - Replace 'name' with the name of the skill.
 * 
 * - Guard
 *   - Adds the basic guard command.
 * 
 * - Item
 *   - Adds the basic item command.
 *
 * - Party
 *   - Requires VisuMZ_2_PartySystem.
 *   - Allows this actor to switch out with a different party member.
 * 
 * - Escape
 *   - Adds the escape command.
 * 
 * - Auto Battle
 *   - Adds the auto battle command.
 * 
 * - Combat Log
 *   - Requires VisuMZ_4_CombatLog.
 *   - Opens up the combat log.
 * 
 * - Talk
 *   - Requires VisuMZ_3_BattleCmdTalk!
 *   - Shows talk command if applicable.
 * 
 * - Weapon Swap
 *   - Requires VisuMZ_2_WeaponSwapSystem.
 *   - Swaps the current weapon.
 *
 * Example:
 *
 * <Battle Commands>
 *  Attack
 *  Skill: Heal
 *  Skills
 *  Guard
 *  Item
 *  Escape
 * </Battle Commands>
 *
 * ---
 *
 * <Command Text: x>
 *
 * - Used for: Skill Notetags
 * - When a skill is used in a <Battle Commands> notetag set, you can change
 *   the skill name text that appears to something else.
 * - Replace 'x' with the skill's name you want to shown in the Actor Battle
 *   Command window.
 * - Recommended Usage: Shorten skill names that are otherwise too big to fit
 *   inside of the Actor Battle Command window.
 *
 * ---
 *
 * <Command Icon: x>
 *
 * - Used for: Skill Notetags
 * - When a skill is used in a <Battle Commands> notetag set, you can change
 *   the skill icon that appears to something else.
 * - Replace 'x' with the ID of icon you want shown in the Actor Battle Command
 *   window to represent the skill.
 * 
 * ---
 * 
 * <Command Require Learn>
 * 
 * - Used for: Skill Notetags
 * - Determines if a battle command is visible or not by whether the actor has
 *   learned the skill.
 * - Learning the skill is a requirement. Acquiring the skill through traits
 *   does not count as learning the skill.
 * 
 * ---
 * 
 * <Command Require Access>
 * 
 * - Used for: Skill Notetags
 * - Determines if a battle command is visible or not by whether the actor has
 *   access to the skill.
 * - Having access to the skill can come through either learning the skill or
 *   temporarily acquiring it through trait objects.
 * 
 * ---
 * 
 * <Command Show Switch: x>
 * 
 * <Command Show All Switches: x,x,x>
 * <Command Show Any Switches: x,x,x>
 * 
 * - Used for: Skill Notetags
 * - Determines if a battle command is visible or not through switches.
 * - Replace 'x' with the switch ID to determine the skill's visibility.
 * - If 'All' notetag variant is used, item will be hidden until all
 *   switches are ON. Then, it would be shown.
 * - If 'Any' notetag variant is used, item will be shown if any of the
 *   switches are ON. Otherwise, it would be hidden.
 * - This can be applied to Attack and Guard commands, too.
 * 
 * ---
 * 
 * <Command Hide Switch: x>
 * 
 * <Command Hide All Switches: x,x,x>
 * <Command Hide Any Switches: x,x,x>
 * 
 * - Used for: Skill Notetags
 * - Determines if a battle command is visible or not through switches.
 * - Replace 'x' with the switch ID to determine the skill's visibility.
 * - If 'All' notetag variant is used, item will be shown until all
 *   switches are ON. Then, it would be hidden.
 * - If 'Any' notetag variant is used, item will be hidden if any of the
 *   switches are ON. Otherwise, it would be shown.
 * - This can be applied to Attack and Guard commands, too.
 * 
 * ---
 * 
 * <Battle Portrait: filename>
 *
 * - Used for: Actor
 * - This is used with the "Portrait" Battle Layout.
 * - Sets the battle portrait image for the actor to 'filename'.
 * - Replace 'filename' with a picture found within your game project's
 *   img/pictures/ folder. Filenames are case sensitive. Leave out the filename
 *   extension from the notetag.
 * - This will override any menu images used for battle only.
 * 
 * ---
 * 
 * <Battle Portrait Offset: +x, +y>
 * <Battle Portrait Offset: -x, -y>
 * 
 * <Battle Portrait Offset X: +x>
 * <Battle Portrait Offset X: -x>
 * 
 * <Battle Portrait Offset Y: +y>
 * <Battle Portrait Offset Y: -y>
 *
 * - Used for: Actor
 * - This is used with the "Portrait" and "Border" Battle Layouts.
 * - Offsets the X and Y coordinates for the battle portrait.
 * - Replace 'x' with a number value that offsets the x coordinate.
 * - Negative x values offset left. Positive x values offset right.
 * - Replace 'y' with a number value that offsets the y coordinate.
 * - Negative y values offset up. Positive x values offset down.
 * 
 * ---
 * 
 * === JavaScript Notetag: Battle Command-Related ===
 *
 * The following are notetags made for users with JavaScript knowledge to
 * determine if skill-based battle commands are visible or hidden.
 * 
 * ---
 * 
 * <JS Command Visible>
 *  code
 *  code
 *  visible = code;
 * </JS Command Visible>
 * 
 * - Used for: Skill Notetags
 * - The 'visible' variable is the final returned variable to determine the
 *   skill's visibility in the Battle Command Window.
 * - Replace 'code' with JavaScript code to determine the skill's visibility in
 *   the Battle Command Window.
 * - The 'user' variable represents the user who will perform the skill.
 * - The 'skill' variable represents the skill to be used.
 * 
 * ---
 *
 * === Targeting-Related Notetags ===
 *
 * The following notetags are related to the targeting aspect of skills and
 * items and may adjust the scope of how certain skills/items work.
 *
 * ---
 *
 * <Always Hit>
 *
 * <Always Hit Rate: x%>
 *
 * - Used for: Skill, Item Notetags
 * - Causes the action to always hit or to always have a hit rate of exactly
 *   the marked x%.
 * - Replace 'x' with a number value representing the hit success percentage.
 *
 * ---
 *
 * <Repeat Hits: x>
 *
 * - Used for: Skill, Item Notetags
 * - Changes the number of hits the action will produce.
 * - Replace 'x' with a number value representing the number of hits to incur.
 *
 * ---
 *
 * <Target: x Random Any>
 *
 * - Used for: Skill, Item Notetags
 * - Makes the skill pick 'x' random targets when used.
 * - Targets can be both actors and enemies.
 * - Replace 'x' with a number value representing the number of random targets.
 *
 * ---
 *
 * <Target: x Random Enemies>
 *
 * - Used for: Skill, Item Notetags
 * - Makes the skill pick 'x' random targets when used.
 * - Targets are only enemies.
 * - Replace 'x' with a number value representing the number of random targets.
 *
 * ---
 *
 * <Target: x Random Allies>
 *
 * - Used for: Skill, Item Notetags
 * - Makes the skill pick 'x' random targets when used.
 * - Targets are only actors.
 * - Replace 'x' with a number value representing the number of random targets.
 *
 * ---
 *
 * <Target: All Allies But User>
 *
 * - Used for: Skill, Item Notetags
 * - Targets all allies with the exception of the user.
 *
 * ---
 *
 * === JavaScript Notetag: Targeting-Related ===
 *
 * ---
 * 
 * <JS Targets>
 *  code
 *  code
 *  targets = [code];
 * </JS Targets>
 *
 * - Used for: Skill, Item Notetags
 * - The 'targets' variable is an array that is returned to be used as a
 *   container for all the valid action targets.
 * - The 'targets' variable will include the original set of targets determined
 *   by the skill/item's original scale.
 * - If you wish to clear it out, simply do 'targets = []' first.
 * - Replace 'code' with JavaScript code to determine valid targets.
 *
 * ---
 *
 * === Damage-Related Notetags ===
 *
 * ---
 *
 * <Damage Style: name>
 *
 * - Used for: Skill, Item Notetags
 * - Replace 'name' with a Damage Style name to change the way calculations are
 *   made using the damage formula input box.
 * - Names can be found in Plugin Parameters => Damage Settings => Style List
 *
 * ---
 *
 * <Armor Reduction: x>
 * <Armor Reduction: x%>
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, sets the current skill/item's armor
 *   reduction properties to 'x' and/or 'x%'.
 * - If used on trait objects, adds 'x' and/or 'x%' armor reduction properties
 *   when calculating one's own armor.
 * - This applies to physical attacks.
 * - Use the 'x' notetag variant to determine a flat reduction value.
 * - Use the 'x%' notetag variant to determine a percentile reduction value.
 *
 * ---
 *
 * <Armor Penetration: x>
 * <Armor Penetration: x%>
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, sets the current skill/item's armor
 *   penetration properties to 'x' and/or 'x%'.
 * - If used on trait objects, adds 'x' and/or 'x%' armor penetration
 *   properties when calculating a target's armor.
 * - This applies to physical attacks.
 * - Use the 'x' notetag variant to determine a flat penetration value.
 * - Use the 'x%' notetag variant to determine a percentile penetration value.
 *
 * ---
 *
 * <Magic Reduction: x>
 * <Magic Reduction: x%>
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, sets the current skill/item's armor
 *   reduction properties to 'x' and/or 'x%'.
 * - If used on trait objects, adds 'x' and/or 'x%' armor reduction properties
 *   when calculating one's own armor.
 * - This applies to magical attacks.
 * - Use the 'x' notetag variant to determine a flat reduction value.
 * - Use the 'x%' notetag variant to determine a percentile reduction value.
 *
 * ---
 *
 * <Magic Penetration: x>
 * <Magic Penetration: x%>
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, sets the current skill/item's armor
 *   penetration properties to 'x' and/or 'x%'.
 * - If used on trait objects, adds 'x' and/or 'x%' armor penetration
 *   properties when calculating a target's armor.
 * - This applies to magical attacks.
 * - Use the 'x' notetag variant to determine a flat penetration value.
 * - Use the 'x%' notetag variant to determine a percentile penetration value.
 *
 * ---
 *
 * <Bypass Damage Cap>
 * 
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, this will cause the action to never have
 *   its damage capped.
 * - If used on trait objects, this will cause the affected unit to never have
 *   its damage capped.
 *
 * ---
 *
 * <Damage Cap: x>
 *
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, this will declare the hard damage cap to
 *   be the 'x' value.
 * - If used on trait objects, this will raise the affect unit's hard damage
 *   cap to 'x' value. If another trait object has a higher value, use that
 *   value instead.
 *
 * ---
 *
 * <Bypass Soft Damage Cap>
 *
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, this will cause the action to never have
 *   its damage scaled downward to the soft cap.
 * - If used on trait objects, this will cause the affected unit to never have
 *   its damage scaled downward to the soft cap.
 *
 * ---
 *
 * <Soft Damage Cap: +x%>
 * <Soft Damage Cap: -x%>
 *
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, this will increase/decrease the action's
 *   soft cap by x% where 'x' is a percentage value representing the increment
 *   changed by the hard cap value.
 * - If used on trait objects, this will raise the affect unit's soft damage
 *   limit by x% where 'x' is a percentage value representing the increment
 *   changed by the hard cap value.
 *
 * ---
 *
 * <Unblockable>
 *
 * - Used for: Skill, Item Notetags
 * - Using "Guard" against this skill will not reduce any damage.
 *
 * ---
 *
 * === Critical-Related Notetags ===
 *
 * The following notetags affect skill and item critical hit rates and the
 * critical damage multiplier.
 *
 * ---
 *
 * <Always Critical>
 *
 * - Used for: Skill, Item Notetags
 * - This skill/item will always land a critical hit regardless of the
 *   user's CRI parameter value.
 *
 * ---
 *
 * <Set Critical Rate: x%>
 *
 * - Used for: Skill, Item Notetags
 * - This skill/item will always have a x% change to land a critical hit
 *   regardless of user's CRI parameter value.
 * - Replace 'x' with a percerntage value representing the success rate.
 *
 * ---
 *
 * <Modify Critical Rate: x%>
 * <Modify Critical Rate: +x%>
 * <Modify Critical Rate: -x%>
 *
 * - Used for: Skill, Item Notetags
 * - Modifies the user's CRI parameter calculation for this skill/item.
 * - The 'x%' notetag variant will multiply the user's CRI parameter value
 *   for this skill/item.
 * - The '+x%' and '-x%' notetag variants will incremenetally increase/decrease
 *   the user's CRI parameter value for this skill/item.
 *
 * ---
 *
 * <Modify Critical Multiplier: x%>
 * <Modify Critical Multiplier: +x%>
 * <Modify Critical Multiplier: -x%>
 *
 * - Used for: Skill, Item Notetags
 * - These notetags determine the damage multiplier when a critical hit lands.
 * - The 'x%' notetag variant multiply the multiplier to that exact percentage.
 * - The '+x%' and '-x%' notetag variants will change the multiplier with an
 *   incremenetal rate for this skill/item.
 *
 * ---
 *
 * <Modify Critical Bonus Damage: x%>
 * <Modify Critical Bonus Damage: +x%>
 * <Modify Critical Bonus Damage: -x%>
 *
 * - Used for: Skill, Item Notetags
 * - These notetags determine the bonus damage added when a critical hit lands.
 * - The 'x%' notetag variant multiply the damage to that exact percentage.
 * - The '+x%' and '-x%' notetag variants will change the bonus damage with an
 *   incremenetal rate for this skill/item.
 *
 * ---
 *
 * === JavaScript Notetags: Critical-Related ===
 *
 * The following are notetags made for users with JavaScript knowledge to
 * determine how critical hit-related aspects are calculated.
 *
 * ---
 *
 * <JS Critical Rate>
 *  code
 *  code
 *  rate = code;
 * </JS Critical Rate>
 *
 * - Used for: Skill, Item Notetags
 * - The 'rate' variable is the final returned amount to determine the
 *   critical hit success rate.
 * - Replace 'code' with JavaScript code to determine the final 'rate' to be
 *   returned as the critical hit success rate.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * <JS Critical Damage>
 *  code
 *  code
 *  multiplier = code;
 *  bonusDamage = code;
 * </JS Critical Damage>
 *
 * - Used for: Skill, Item Notetags
 * - The 'multiplier' variable is returned later and used as the damage
 *   multiplier used to amplify the critical damage amount.
 * - The 'bonusDamage' variable is returned later and used as extra added
 *   damage for the critical damage amount.
 * - Replace 'code' with JavaScript code to determine how the 'multiplier' and
 *   'bonusDamage' variables are calculated.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * === Action Sequence-Related Notetags ===
 *
 * Action Sequences allow you full control over how a skill and/or item plays
 * through its course. These notetags give you control over various aspects of
 * those Action Sequences. More information is found in the Action Sequences
 * help section.
 *
 * ---
 *
 * <Custom Action Sequence>
 *
 * - Used for: Skill, Item Notetags
 * - Removes all automated Action Sequence parts from the skill.
 * - Everything Action Sequence-related will be done by Common Events.
 * - Insert Common Event(s) into the skill/item's effects list to make use of
 *   the Custom Action Sequences.
 * - This will prevent common events from loading in the Item Scene and Skill
 *   Scene when used outside of battle.
 *
 * ---
 * 
 * <Auto Action Sequence>
 * 
 * - Used for: Skill, Item Notetags
 * - If the Action Sequence Plugin Parameter "Auto Notetag" is enabled, this
 *   plugin will prevent custom action sequences from happening for the skill
 *   or item, and instead, use an Automatic Action Sequence instead.
 * - Ignore this if you have "Auto Notetag" disabled or set to false.
 * 
 * ---
 * 
 * <Common Event: name>
 *
 * - Used for: Skill, Item Notetags
 * - Battle only: calls forth a Common Event of a matching name.
 * - Replace 'name' with the name of a Common Event to call from when this
 *   skill/item is used in battle.
 *   - Remove any \I[x] in the name.
 * - Insert multiple notetags to call multiple Common Events in succession.
 * - This will occur after any Common Event Trait Effects for the skill/item's
 *   database entry.
 * - This is primarily used for users who are reorganizing around their Common
 *   Events and would still like to have their skills/items perform the correct
 *   Action Sequences in case the ID's are different.
 * 
 * ---
 *
 * <Display Icon: x>
 * <Display Text: string>
 *
 * - Used for: Skill, Item Notetags
 * - When displaying the skill/item name in the Action Sequence, determine the
 *   icon and/or text displayed.
 * - Replace 'x' with a number value representing the icon ID to be displayed.
 * - Replace 'string' with a text value representing the displayed name.
 *
 * ---
 * 
 * <Common Event Key: name>
 * <Common Event Keys: name, name, name>
 * 
 * <Common Event Keys>
 *  key
 *  key
 *  key
 * </Common Event Keys>
 * 
 * - Used for: Skill, Item Notetags
 * - Will generate Common Events for the skill/item with a corresponding key.
 * - Replace 'name' with the name of the Common Event's key that you want to
 *   reference. That key will be converted into a Common Event effect for the
 *   skill/item and be treated as an action sequence.
 *   - The notetag variants that use multiple keys will have the keys added in
 *     the order they are listed.
 *   - If keys do not reference any Common Events, no Common Events will be
 *     added for that key.
 * - To mark a Common Event with a key, insert inside a Common Event's name the
 *   [ and ] brackets around the text that will be used as the Common Event's
 *   key text.
 *   - For example, if Common Event's name is "Penta Slash [PENTA]", then the
 *     key used is "PENTA" without the quotes.
 *   - This key could then be referenced by <Common Event Key: PENTA> notetag.
 *   - Do not use commas (,) inside the key text as it will be automatically
 *     removed for the sake of consistency.
 * - This feature is made for make the process of sharing Action Sequences to
 *   become easier without needing to line up Common Event ID's.
 * 
 * ---
 *
 * === Animated Sideview Battler-Related Notetags ===
 *
 * Enemies can use Animated Sideview Actor graphics thanks to this plugin.
 * These notetags give you control over that aspect. Some of these also affect
 * actors in addition to enemies.
 *
 * ---
 *
 * <Sideview Battler: filename>
 *
 * <Sideview Battlers>
 *  filename: weight
 *  filename: weight
 *  filename: weight
 * </Sideview Battlers>
 *
 * - Used for: Enemy Notetags
 * - Replaces the enemy's battler graphic with an animated Sideview Actor
 *   graphic found in the img/sv_actors/ folder.
 * - Replace 'filename' with the filename of the graphic to use. Do not insert
 *   any extensions. This means the file 'Actor1_1.png' will be only inserted
 *   as 'Actor1_1' without the '.png' at the end.
 * - If the multiple notetag vaiant is used, then a random filename is selected
 *   from the list upon the enemy's creation.
 * - Replace 'weight' with a number value representing how often the 'filename'
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'filename' instead.
 * - Add/remove lines as you see fit.
 *
 * Example:
 *
 * <Sideview Battlers>
 *  Actor1_1: 25
 *  Actor1_3: 10
 *  Actor1_5
 *  Actor1_7
 * </Sideview Battlers>
 *
 * ---
 *
 * <Sideview Anchor: x, y>
 *
 * - Used for: Actor, Enemy Notetags
 * - Sets the sprite anchor positions for the sideview sprite.
 * - Replace 'x' and 'y' with numbers depicting where the anchors should be for
 *   the sideview sprite.
 * - By default, the x and y anchors are 0.5 and 1.0.
 *
 * ---
 * 
 * <Sideview Home Offset: +x, +y>
 * <Sideview Home Offset: -x, -y>
 * 
 * - Used for: Actor, Class, Weapon, Armor, State Notetags
 * - Offsets the sideview actor sprite's home position by +/-x, +/-y.
 * - Replace 'x' and 'y' with numbers depicting how much to offset each of the
 *   coordinates by. For '0' values, use +0 or -0.
 * - This notetag will not work if you remove it from the JavaScript code in
 *   Plugin Parameters > Actor > JS:  Home Position
 * 
 * ---
 * 
 * <Sideview Weapon Offset: +x, +y>
 * <Sideview Weapon Offset: -x, -y>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy State Notetags
 * - Offsets the sideview weapon sprite's position by +/-x, +/-y.
 * - Replace 'x' and 'y' with numbers depicting how much to offset each of the
 *   coordinates by. For '0' values, use +0 or -0.
 * 
 * ---
 *
 * <Sideview Show Shadow>
 * <Sideview Hide Shadow>
 *
 * - Used for: Actor, Enemy Notetags
 * - Sets it so the sideview battler's shadow will be visible or hidden.
 *
 * ---
 * 
 * <Sideview Shadow Scale: x%>
 * <Sideview Shadow Scale: x.y>
 * 
 * - Used for: Actor, Enemy Notetags
 * - Adjusts the scaling size of the sideview battler's shadow.
 * - This affects both the X and Y scale.
 * 
 * ---
 * 
 * <Sideview Shadow Scale X: x%>
 * <Sideview Shadow Scale X: x.y>
 * 
 * <Sideview Shadow Scale Y: x%>
 * <Sideview Shadow Scale Y: x.y>
 * 
 * - Used for: Actor, Enemy Notetags
 * - Adjusts the scaling size of the sideview battler's shadow.
 * - These affect their respective X and Y scales separately.
 * 
 * ---
 *
 * <Sideview Collapse>
 * <Sideview No Collapse>
 *
 * - Used for: Enemy Notetags
 * - Either shows the collapse graphic or does not show the collapse graphic.
 * - Collapse graphic means the enemy will 'fade away' once it's defeated.
 * - No collapse graphic means the enemy's corpse will remain on the screen.
 *
 * ---
 *
 * <Sideview Idle Motion: name>
 *
 * <Sideview Idle Motions>
 *  name: weight
 *  name: weight
 *  name: weight
 * </Sideview Idle Motions>
 *
 * - Used for: Enemy Notetags
 * - Changes the default idle motion for the enemy.
 * - Replace 'name' with any of the following motion names:
 *   - 'walk', 'wait', 'chant', 'guard', 'damage', 'evade', 'thrust', 'swing',
 *     'missile', 'skill', 'spell', 'item', 'escape', 'victory', 'dying',
 *     'abnormal', 'sleep', 'dead'
 * - If the multiple notetag vaiant is used, then a random motion name is
 *   selected from the list upon the enemy's creation.
 * - Replace 'weight' with a number value representing how often the 'name'
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'name' instead.
 * - Add/remove lines as you see fit.
 *
 * Example:
 *
 * <Sideview Idle Motions>
 *  walk: 25
 *  wait: 50
 *  guard
 *  victory
 *  abnormal
 * </Sideview Idle Motions>
 *
 * ---
 *
 * <Sideview Size: width, height>
 *
 * - Used for: Enemy Notetags
 * - When using a sideview battler, its width and height will default to the
 *   setting made in Plugin Parameters => Enemy Settings => Size: Width/Height.
 * - This notetag lets you change that value to something else.
 * - Replace 'width' and 'height' with numbers representing how many pixels
 *   wide/tall the sprite will be treated as.
 *
 * ---
 *
 * <Sideview Weapon: weapontype>
 *
 * <Sideview Weapons>
 *  weapontype: weight
 *  weapontype: weight
 *  weapontype: weight
 * </Sideview Weapons>
 *
 * - Used for: Enemy Notetags
 * - Give your sideview enemies weapons to use.
 * - Replace 'weapontype' with the name of the weapon type found under the
 *   Database => Types => Weapon Types list (without text codes).
 * - If the multiple notetag vaiant is used, then a random weapon type is
 *   selected from the list upon the enemy's creation.
 * - Replace 'weight' with a number value representing how often the weapontype
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'weapontype' instead.
 * - Add/remove lines as you see fit.
 *
 * Example:
 *
 * <Sideview Weapons>
 *  Dagger: 25
 *  Sword: 25
 *  Axe
 * </Sideview Weapons>
 *
 * ---
 *
 * <traitname Sideview Battler: filename>
 *
 * <traitname Sideview Battlers>
 *  filename: weight
 *  filename: weight
 *  filename: weight
 * </traitname Sideview Battlers>
 *
 * - Used for: Enemy Notetags
 * - Requires VisuMZ_1_ElementStatusCore
 * - Allows certain Trait Sets to cause battlers to have a unique appearance.
 * - Replace 'filename' with the filename of the graphic to use. Do not insert
 *   any extensions. This means the file 'Actor1_1.png' will be only inserted
 *   as 'Actor1_1' without the '.png' at the end.
 * - If the multiple notetag vaiant is used, then a random filename is selected
 *   from the list upon the enemy's creation.
 * - Replace 'weight' with a number value representing how often the 'filename'
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'filename' instead.
 * - Add/remove lines as you see fit.
 *
 * Examples:
 *
 * <Male Sideview Battlers>
 *  Actor1_1: 25
 *  Actor1_3: 10
 *  Actor1_5
 *  Actor1_7
 * </Male Sideview Battlers>
 *
 * <Female Sideview Battlers>
 *  Actor1_2: 25
 *  Actor1_4: 10
 *  Actor1_6
 *  Actor1_8
 * </Female Sideview Battlers>
 *
 * ---
 *
 * <traitname Sideview Idle Motion: name>
 *
 * <traitname Sideview Idle Motions>
 *  name: weight
 *  name: weight
 *  name: weight
 * </traitname Sideview Idle Motions>
 *
 * - Used for: Enemy Notetags
 * - Requires VisuMZ_1_ElementStatusCore
 * - Allows certain Trait Sets to cause battlers to have unique idle motions.
 * - Replace 'name' with any of the following motion names:
 *   - 'walk', 'wait', 'chant', 'guard', 'damage', 'evade', 'thrust', 'swing',
 *     'missile', 'skill', 'spell', 'item', 'escape', 'victory', 'dying',
 *     'abnormal', 'sleep', 'dead'
 * - If the multiple notetag vaiant is used, then a random motion name is
 *   selected from the list upon the enemy's creation.
 * - Replace 'weight' with a number value representing how often the 'name'
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'name' instead.
 * - Add/remove lines as you see fit.
 *
 * Examples:
 *
 * <Jolly Sideview Idle Motions>
 *  wait: 25
 *  victory: 10
 *  walk
 * </Jolly Sideview Idle Motions>
 *
 * <Serious Sideview Idle Motions>
 *  walk: 25
 *  guard: 10
 *  wait
 * </Jolly Sideview Idle Motions>
 *
 * ---
 *
 * <traitname Sideview Weapon: weapontype>
 *
 * <traitname Sideview Weapons>
 *  weapontype: weight
 *  weapontype: weight
 *  weapontype: weight
 * </traitname Sideview Weapons>
 *
 * - Used for: Enemy Notetags
 * - Requires VisuMZ_1_ElementStatusCore
 * - Allows certain Trait Sets to cause battlers to have unique weapons.
 * - Replace 'weapontype' with the name of the weapon type found under the
 *   Database => Types => Weapon Types list (without text codes).
 * - If the multiple notetag vaiant is used, then a random weapon type is
 *   selected from the list upon the enemy's creation.
 * - Replace 'weight' with a number value representing how often the weapontype
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'weapontype' instead.
 * - Add/remove lines as you see fit.
 *
 * Examples:
 *
 * <Male Sideview Weapons>
 *  Dagger: 25
 *  Sword: 25
 *  Axe
 * </Male Sideview Weapons>
 *
 * <Female Sideview Weapons>
 *  Dagger: 25
 *  Spear: 25
 *  Cane
 * </Female Sideview Weapons>
 *
 * ---
 *
 * === Enemy-Related Notetags ===
 *
 * ---
 *
 * <Battler Sprite Cannot Move>
 *
 * - Used for: Enemy Notetags
 * - Prevents the enemy from being able to move, jump, and/or float due to
 *   Action Sequences. Useful for rooted enemies.
 *
 * ---
 * 
 * <Battler Sprite Grounded>
 *
 * - Used for: Enemy Notetags
 * - Prevents the enemy from being able to jumping and/or floating due to
 *   Action Sequences but still able to move. Useful for rooted enemies.
 * 
 * ---
 *
 * <Swap Enemies>
 *  name: weight
 *  name: weight
 *  name: weight
 * </Swap Enemies>
 *
 * - Used for: Enemy Notetags
 * - Causes this enemy database object to function as a randomizer for any of
 *   the listed enemies inside the notetag. When the enemy is loaded into the
 *   battle scene, the enemy is immediately replaced with one of the enemies
 *   listed. The randomization is based off the 'weight' given to each of the
 *   enemy 'names'.
 * - Replace 'name' with the database enemy of the enemy you wish to replace
 *   the enemy with.
 * - Replace 'weight' with a number value representing how often the 'name'
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'name' instead.
 * - Add/remove lines as you see fit.
 *
 * Example:
 *
 * <Swap Enemies>
 *  Bat: 50
 *  Slime: 25
 *  Orc
 *  Minotaur
 * </Swap Enemies>
 *
 * ---
 *
 * === JavaScript Notetags: Mechanics-Related ===
 *
 * These JavaScript notetags allow you to run code at specific instances during
 * battle provided that the unit has that code associated with them in a trait
 * object (actor, class, weapon, armor, enemy, or state). How you use these is
 * entirely up to you and will depend on your ability to understand the code
 * used and driven for each case.
 *
 * ---
 *
 * <JS Pre-Start Battle>
 *  code
 *  code
 *  code
 * </JS Pre-Start Battle>
 *
 * <JS Post-Start Battle>
 *  code
 *  code
 *  code
 * </JS Post-Start Battle>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the start of battle aimed at the function:
 *   BattleManager.startBattle()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Pre-Start Turn>
 *  code
 *  code
 *  code
 * </JS Pre-Start Turn>
 *
 * <JS Post-Start Turn>
 *  code
 *  code
 *  code
 * </JS Post-Start Turn>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the start of a turn aimed at the function:
 *   BattleManager.startTurn()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Pre-Start Action>
 *  code
 *  code
 *  code
 * </JS Pre-Start Action>
 *
 * <JS Post-Start Action>
 *  code
 *  code
 *  code
 * </JS Post-Start Action>
 * 
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the start of an action aimed at the function:
 *   BattleManager.startAction()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - If used on skills and/or items, this will only apply to the skill/item
 *   being used and does not affect other skills and items.
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Pre-Apply>
 *  code
 *  code
 *  code
 * </JS Pre-Apply>
 * 
 * - Used for: Skill, Item Notetags
 * - Runs JavaScript code at the start of an action hit aimed at the function:
 *   Game_Action.prototype.apply()
 *   - 'Pre' runs before the function runs.
 * - If used on skills and/or items, this will only apply to the skill/item
 *   being used and does not affect other skills and items.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * <JS Pre-Apply as User>
 *  code
 *  code
 *  code
 * </JS Pre-Apply as User>
 *
 * <JS Pre-Apply as Target>
 *  code
 *  code
 *  code
 * </JS Pre-Apply as Target>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the start of an action hit aimed at the function:
 *   Game_Action.prototype.apply()
 *   - 'Pre' runs before the function runs.
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - If the 'as User' notetag variant is used, this code will be run as a
 *   response to the action from the action user end.
 * - If the 'as Target' notetag variant is used, this code will be run as a
 *   response to the action from the action target end.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * <JS Pre-Damage>
 *  code
 *  code
 *  code
 * </JS Pre-Damage>
 * 
 * - Used for: Skill, Item Notetags
 * - Runs JavaScript code before damage is dealt aimed at the function:
 *   Game_Action.prototype.executeDamage()
 *   - 'Pre' runs before the function runs.
 * - If used on skills and/or items, this will only apply to the skill/item
 *   being used and does not affect other skills and items.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * <JS Pre-Damage as User>
 *  code
 *  code
 *  code
 * </JS Pre-Damage as User>
 *
 * <JS Pre-Damage as Target>
 *  code
 *  code
 *  code
 * </JS Pre-Damage as Target>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code before damage is dealt aimed at the function:
 *   Game_Action.prototype.executeDamage()
 *   - 'Pre' runs before the function runs.
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - If the 'as User' notetag variant is used, this code will be run as a
 *   response to the action from the action user end.
 * - If the 'as Target' notetag variant is used, this code will be run as a
 *   response to the action from the action target end.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * <JS Post-Damage>
 *  code
 *  code
 *  code
 * </JS Post-Damage>
 * 
 * - Used for: Skill, Item Notetags
 * - Runs JavaScript code after damage is dealt aimed at the function:
 *   Game_Action.prototype.executeDamage()
 *   - 'Post' runs after the function runs.
 * - If used on skills and/or items, this will only apply to the skill/item
 *   being used and does not affect other skills and items.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * <JS Post-Damage as User>
 *  code
 *  code
 *  code
 * </JS Post-Damage as User>
 *
 * <JS Post-Damage as Target>
 *  code
 *  code
 *  code
 * </JS Post-Damage as Target>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code after damage is dealt aimed at the function:
 *   Game_Action.prototype.executeDamage()
 *   - 'Post' runs after the function runs.
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - If the 'as User' notetag variant is used, this code will be run as a
 *   response to the action from the action user end.
 * - If the 'as Target' notetag variant is used, this code will be run as a
 *   response to the action from the action target end.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * <JS Post-Apply>
 *  code
 *  code
 *  code
 * </JS Post-Apply>
 * 
 * - Used for: Skill, Item Notetags
 * - Runs JavaScript code at the end of an action hit aimed at the function:
 *   Game_Action.prototype.apply()
 *   - 'Post' runs after the function runs.
 * - If used on skills and/or items, this will only apply to the skill/item
 *   being used and does not affect other skills and items.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * <JS Post-Apply as User>
 *  code
 *  code
 *  code
 * </JS Post-Apply as User>
 *
 * <JS Post-Apply as Target>
 *  code
 *  code
 *  code
 * </JS Post-Apply as Target>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the end of an action hit aimed at the function:
 *   Game_Action.prototype.apply()
 *   - 'Post' runs after the function runs.
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - If the 'as User' notetag variant is used, this code will be run as a
 *   response to the action from the action user end.
 * - If the 'as Target' notetag variant is used, this code will be run as a
 *   response to the action from the action target end.
 * - Replace 'code' with JavaScript code to run desired effects.
 *
 * ---
 *
 * <JS Pre-End Action>
 *  code
 *  code
 *  code
 * </JS Pre-End Action>
 *
 * <JS Post-End Action>
 *  code
 *  code
 *  code
 * </JS Post-End Action>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the end of an action aimed at the function:
 *   BattleManager.endAction()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Pre-End Turn>
 *  code
 *  code
 *  code
 * </JS Pre-End Turn>
 *
 * <JS Post-End Turn>
 *  code
 *  code
 *  code
 * </JS Post-End Turn>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the end of a turn aimed at the function:
 *   Game_Battler.prototype.onTurnEnd()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Pre-Regenerate>
 *  code
 *  code
 *  code
 * </JS Pre-Regenerate>
 *
 * <JS Post-Regenerate>
 *  code
 *  code
 *  code
 * </JS Post-Regenerate>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code when a unit regenerates HP/MP aimed at the function:
 *   Game_Battler.prototype.regenerateAll()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Battle Victory>
 *  code
 *  code
 *  code
 * </JS Battle Victory>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code when a battle is won aimed at the function:
 *   BattleManager.processVictory()
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Escape Success>
 *  code
 *  code
 *  code
 * </JS Escape Success>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code when escaping succeeds aimed at the function:
 *   BattleManager.onEscapeSuccess()
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Escape Failure>
 *  code
 *  code
 *  code
 * </JS Escape Failure>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code when escaping fails aimed at the function:
 *   BattleManager.onEscapeFailure()
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Battle Defeat>
 *  code
 *  code
 *  code
 * </JS Battle Defeat>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code when a battle is lost aimed at the function:
 *   BattleManager.processDefeat()
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Pre-End Battle>
 *  code
 *  code
 *  code
 * </JS Pre-End Battle>
 *
 * <JS Post-End Battle>
 *  code
 *  code
 *  code
 * </JS Post-End Battle>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code when the battle is over aimed at the function:
 *   BattleManager.endBattle()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 * 
 * === Battle Layout-Related Notetags ===
 * 
 * These tags will change the battle layout for a troop regardless of how the
 * plugin parameters are set up normally. Insert these tags in either the
 * noteboxes of maps or the names of troops for them to take effect. If both
 * are present for a specific battle, then priority goes to the setting found
 * in the troop name.
 * 
 * ---
 * 
 * <Layout: type>
 * <Battle Layout: type>
 * 
 * - Used for: Map Notetags, Troop Name Tags, and Troop Comment Tags
 * - Changes the battle layout style used for this specific map or battle.
 * - Replace 'type' with 'default', 'list', 'xp', 'portrait', or 'border'.
 * - If using Troop Comment Tags, then as long as the tag appears in a comment
 *   found on any of the Troop's pages (even if they don't run), the tag will
 *   be considered in effect.
 * 
 * ---
 *
 * ============================================================================
 * Action Sequence - Plugin Commands
 * ============================================================================
 *
 * Skills and items, when used in battle, have a pre-determined series of
 * actions to display to the player as a means of representing what's going on
 * with the action. For some game devs, this may not be enough and they would
 * like to get more involved with the actions themselves.
 *
 * Action Sequences, added through this plugin, enable this. To give a skill or
 * item a Custom Action Sequence, a couple of steps must be followed:
 *
 * ---
 *
 * 1. Insert the <Custom Action Sequence> notetag into the skill or item's
 *    notebox (or else this would not work as intended).
 * 2. Give that skill/item a Common Event through the Effects box. The selected
 *    Common Event will contain all the Action Sequence data.
 * 3. Create the Common Event with Action Sequence Plugin Commands and/or event
 *    commands to make the skill/item do what you want it to do.
 *
 * ---
 *
 * The Plugin Commands added through the Battle Core plugin focus entirely on
 * Action Sequences. However, despite the fact that they're made for skills and
 * items, some of these Action Sequence Plugin Commands can still be used for
 * regular Troop events and Common Events.
 *
 * ---
 *
 * === Action Sequence - Action Sets ===
 *
 * Action Sequence Action Sets are groups of commonly used
 * Action Sequence Commands put together for more efficient usage.
 *
 * ---
 *
 * ACSET: Setup Action Set
 * - The generic start to most actions.
 *
 *   Display Action:
 *   Immortal: On:
 *   Battle Step:
 *   Wait For Movement:
 *   Cast Animation:
 *   Wait For Animation:
 *   - Use this part of the action sequence?
 *
 * ---
 *
 * ACSET: All Targets Action Set
 * - Affects all targets simultaneously performing the following.
 *
 *   Dual/Multi Wield?
 *   - Add times struck based on weapon quantity equipped?
 * 
 *   Perform Action:
 *   Wait Count:
 *   Action Animation:
 *   Wait For Animation:
 *   Action Effect:
 *   Immortal: Off:
 *   - Use this part of the action sequence?
 *   - Insert values for the Wait Count(s).
 *
 * ---
 *
 * ACSET: Each Target Action Set
 * - Goes through each target one by one to perform the following.
 *
 *   Dual/Multi Wield?
 *   - Add times struck based on weapon quantity equipped?
 *
 *   Perform Action:
 *   Wait Count:
 *   Action Animation:
 *   Wait Count:
 *   Action Effect:
 *   Immortal: Off:
 *   - Use this part of the action sequence?
 *   - Insert values for the Wait Count(s).
 *
 * ---
 *
 * ACSET: Finish Action
 * - The generic ending to most actions.
 *
 *   Wait For New Line:
 *   Wait For Effects:
 *   Clear Battle Log:
 *   Home Reset:
 *   Wait For Movement:
 *   - Use this part of the action sequence?
 *
 * ---
 * 
 * === Action Sequences - Angle ===
 * 
 * These action sequences allow you to have control over the camera angle.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * ---
 *
 * ANGLE: Change Angle
 * - Changes the camera angle.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Angle:
 *   - Change the camera angle to this many degrees.
 *
 *   Duration:
 *   - Duration in frames to change camera angle.
 *
 *   Angle Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Angle?:
 *   - Wait for angle changes to complete before performing next command?
 *
 * ---
 *
 * ANGLE: Reset Angle
 * - Reset any angle settings.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Duration:
 *   - Duration in frames to reset camera angle.
 *
 *   Angle Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Angle?:
 *   - Wait for angle changes to complete before performing next command?
 *
 * ---
 *
 * ANGLE: Wait For Angle
 * - Waits for angle changes to complete before performing next command.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 * ---
 *
 * === Action Sequences - Animations ===
 *
 * These Action Sequences are related to the 'Animations' that can be found in
 * the Animations tab of the Database.
 *
 * ---
 *
 * ANIM: Action Animation
 * - Plays the animation associated with the action.
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 *
 * ANIM: Attack Animation
 * - Plays the animation associated with the user's weapon.
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 *
 * ANIM: Attack Animation 2+
 * - Plays the animation associated with the user's other weapons.
 * - Plays nothing if there is no other weapon equipped.
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 * 
 *   Slot:
 *   - Which weapon slot to get this data from?
 *   - Main-hand weapon is weapon slot 1.
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 *
 * ANIM: Cast Animation
 * - Plays the cast animation associated with the action.
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 *
 * ANIM: Change Battle Portrait
 * - Changes the battle portrait of the actor (if it's an actor).
 * - Can be used outside of battle/action sequences.
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *   - Valid units can only be actors.
 *
 *   Filename:
 *   - Select the file to change the actor's portrait to.
 * 
 * ---
 *
 * ANIM: Play at Coordinate
 * - Plays an animation on the screen at a specific x, y coordinate.
 * - Requires VisuMZ_0_CoreEngine!
 * 
 *   Animation ID:
 *   - Plays this animation.
 * 
 *   Coordinates:
 * 
 *     X:
 *     Y:
 *     - X/Y coordinate used for the animation.
 *       You may use JavaScript code.
 * 
 *   Mirror Animation?:
 *   - Mirror the animation?
 * 
 *   Mute Animation?:
 *   - Mute the animation?
 * 
 *   Wait for Completion?:
 *   - Wait the animation to finish before continuing?
 *
 * ---
 *
 * ANIM: Show Animation
 * - Plays the a specific animation on unit(s).
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *
 *   Animation ID:
 *   - Select which animation to play on unit(s).
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 *
 * ANIM: Wait For Animation
 * - Causes the interpreter to wait for any animation(s) to finish.
 *
 * ---
 *
 * === Action Sequences - Battle Log ===
 *
 * These Action Sequences are related to the Battle Log Window, the window
 * found at the top of the battle screen.
 *
 * ---
 *
 * BTLOG: Add Text
 * - Adds a new line of text into the Battle Log.
 *
 *   Text:
 *   - Add this text into the Battle Log.
 *   - Text codes allowed.
 * 
 *   Copy to Combat Log?:
 *   - Copies text to the Combat Log.
 *   - Requires VisuMZ_4_CombatLog
 * 
 *     Combat Log Icon:
 *     - What icon would you like to bind to this entry?
 *     - Requires VisuMZ_4_CombatLog
 *
 * ---
 *
 * BTLOG: Clear Battle Log
 * - Clears all the text in the Battle Log.
 *
 * ---
 *
 * BTLOG: Display Action
 * - plays the current action in the Battle Log.
 *
 * ---
 *
 * BTLOG: Pop Base Line
 * - Removes the Battle Log's last added base line and  all text up to its
 *   former location.
 *
 * ---
 *
 * BTLOG: Push Base Line
 * - Adds a new base line to where the Battle Log currently is at.
 *
 * ---
 *
 * BTLOG: Refresh Battle Log
 * - Refreshes the Battle Log.
 *
 * ---
 *
 * BTLOG: UI Show/Hide
 * - Shows or hides the Battle UI (including the Battle Log).
 *
 *   Show/Hide?:
 *   - Shows/hides the Battle UI.
 *
 * ---
 *
 * BTLOG: Wait For Battle Log
 * - Causes the interpreter to wait for the Battle Log to finish.
 *
 * ---
 *
 * BTLOG: Wait For New Line
 * - Causes the interpreter to wait for a new line in the Battle Log.
 *
 * ---
 *
 * === Action Sequences - Camera ===
 *
 * These Action Sequences are battle camera-related.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * ---
 *
 * CAMERA: Clamp ON/OFF
 * - Turns battle camera clamping on/off.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Setting:
 *   - Turns camera clamping on/off.
 *
 * ---
 *
 * CAMERA: Focus Point
 * - Focus the battle camera on a certain point in the screen.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   X Coordinate:
 *   - Insert the point to focus the camera on.
 *   - You may use JavaScript code.
 *
 *   Y Coordinate:
 *   - Insert the point to focus the camera on.
 *   - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for camera focus change.
 *
 *   Camera Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Camera?
 *   - Wait for camera changes to complete before performing next command?
 *
 * ---
 *
 * CAMERA: Focus Target(s)
 * - Focus the battle camera on certain battler target(s).
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Targets:
 *   - Select unit(s) to focus the battle camera on.
 *
 *   Duration:
 *   - Duration in frames for camera focus change.
 *
 *   Camera Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Camera?
 *   - Wait for camera changes to complete before performing next command?
 *
 * ---
 *
 * CAMERA: Offset
 * - Offset the battle camera from the focus target.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Offset X:
 *   - How much to offset the camera X by.
 *   - Negative: left. Positive: right.
 *
 *   Offset Y:
 *   - How much to offset the camera Y by.
 *   - Negative: up. Positive: down.
 *
 *   Duration:
 *   - Duration in frames for offset change.
 *
 *   Camera Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Camera?
 *   - Wait for camera changes to complete before performing next command?
 *
 * ---
 *
 * CAMERA: Reset
 * - Reset the battle camera settings.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Reset Focus?:
 *   - Reset the focus point?
 *
 *   Reset Offset?:
 *   - Reset the camera offset?
 *
 *   Duration:
 *   - Duration in frames for reset change.
 *
 *   Camera Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Camera?
 *   - Wait for camera changes to complete before performing next command?
 *
 * ---
 *
 * CAMERA: Wait For Camera
 * - Waits for camera changes to complete before performing next command.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 * ---
 *
 * === Action Sequences - Dragonbones ===
 *
 * These Action Sequences are Dragonbones-related.
 * Requires VisuMZ_2_DragonbonesUnion!
 *
 * ---
 *
 * DB: Dragonbones Animation
 * - Causes the unit(s) to play a Dragonbones motion animation.
 * - Requires VisuMZ_2_DragonbonesUnion!
 *
 *   Targets:
 *   - Select which unit(s) to perform a motion animation.
 *
 *   Motion Animation:
 *   - What is the name of the Dragonbones motion animation you wish to play?
 *
 * ---
 *
 * DB: Dragonbones Time Scale
 * - Causes the unit(s) to change their Dragonbones time scale.
 * - Requires VisuMZ_2_DragonbonesUnion!
 *
 *   Targets:
 *   - Select which unit(s) to perform a motion animation.
 *
 *   Time Scale:
 *   - Change the value of the Dragonbones time scale to this.
 *
 * ---
 *
 * === Action Sequences - Elements ===
 *
 * These Action Sequences can change up the element(s) used for the action's
 * damage calculation midway through an action.
 *
 * They also require the VisuMZ_1_ElementStatusCore plugin to be present in
 * order for them to work.
 *
 * ---
 *
 * ELE: Add Elements
 * - Adds element(s) to be used when calculating damage.
 * - Requires VisuMZ_1_ElementStatusCore!
 *
 *   Elements:
 *   - Select which element ID to add onto the action.
 *   - Insert multiple element ID's to add multiple at once.
 *
 * ---
 *
 * ELE: Clear Element Changes
 * - Clears all element changes made through Action Sequences.
 * - Requires VisuMZ_1_ElementStatusCore!
 *
 * ---
 *
 * ELE: Force Elements
 * - Forces only specific element(s) when calculating damage.
 * - Requires VisuMZ_1_ElementStatusCore!
 *
 *   Elements:
 *   - Select which element ID to force in the action.
 *   - Insert multiple element ID's to force multiple at once.
 *
 * ---
 *
 * ELE: Null Element
 * - Forces no element to be used when calculating damage.
 * - Requires VisuMZ_1_ElementStatusCore!
 *
 * ---
 * 
 * === Action Sequences - Horror Effects ===
 * 
 * These Action Sequences are Horror Effects-related.
 * Requires VisuMZ_2_HorrorEffects!
 * 
 * ---
 *
 * HORROR: Clear All Filters
 * - Clear all Horror Effects filters on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to remove Horror Effects for.
 *
 * ---
 *
 * HORROR: Glitch Create
 * - Creates the glitch effect on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to create the Horror Effect for.
 *
 *   Glitch Slices:
 *   - Glitch slices to be used with the target.
 *
 *   Glitch Offset:
 *   - Default offset value.
 *
 *   Glitch Animated?:
 *   - Animate the glitch effect?
 *
 *   Glitch Frequency:
 *   - If animated, how frequent to make the glitch effect?
 *   - Lower = often     Higher = rarer
 *
 *   Glitch Strength:
 *   - If animated, how strong is the glitch effect?
 *   - Lower = weaker     Higher = stronger
 *
 * ---
 *
 * HORROR: Glitch Remove
 * - Removes the glitch effect on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to remove the Horror Effect for.
 *
 * ---
 *
 * HORROR: Noise Create
 * - Creates the noise effect on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to create the Horror Effect for.
 *
 *   Noise Rate:
 *   - Noise rate to be used with the target.
 *
 *   Noise Animated:
 *   - Animate the noise for the target?
 *
 * ---
 *
 * HORROR: Noise Remove
 * - Removes the noise effect on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to remove the Horror Effect for.
 *
 * ---
 *
 * HORROR: TV Create
 * - Creates the TV effect on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to create the Horror Effect for.
 *
 *   TV Line Thickness:
 *   - Default TV line thickness
 *   - Lower = thinner     Higher = thicker
 *
 *   TV Corner Size:
 *   - Default TV line corner size
 *   - Lower = smaller     Higher = bigger
 *
 *   TV Animated:
 *   - Animate the TV?
 *
 *   TV Speed:
 *   - Speed used to animate the TV if animated
 *   - Lower = slower     Higher = faster
 *
 * ---
 *
 * HORROR: TV Remove
 * - Removes the TV effect on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to remove the Horror Effect for.
 *
 * ---
 * 
 * === Action Sequences - Impact ===
 * 
 * These Action Sequences are related to creating impact.
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * ---
 *
 * IMPACT: Color Break
 * - Breaks the colors on the screen before reassembling.
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Intensity:
 *   - What is the intensity of the color break effect?
 *
 *   Duration:
 *   - What is the duration of the color break effect?
 *
 *   Easing Type:
 *   - Select which easing type you wish to apply.
 *
 * ---
 *
 * IMPACT: Motion Blur Screen
 * - Creates a motion blur on the whole screen.
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Angle:
 *   - Determine what angle to make the motion blur at.
 *
 *   Intensity Rate:
 *   - This determines intensity rate of the motion blur.
 *   - Use a number between 0 and 1.
 *
 *   Duration:
 *   - How many frames should the motion blur last?
 *   - What do you want to be its duration?
 *
 *   Easing Type:
 *   - Select which easing type you wish to apply.
 *
 * ---
 *
 * IMPACT: Motion Blur Target(s)
 * - Creates a motion blur on selected target(s).
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Targets:
 *   - Select unit(s) to create motion blur effects for.
 *
 *   Angle:
 *   - Determine what angle to make the motion blur at.
 *
 *   Intensity Rate:
 *   - This determines intensity rate of the motion blur.
 *   - Use a number between 0 and 1.
 *
 *   Duration:
 *   - How many frames should the motion blur last?
 *   - What do you want to be its duration?
 *
 *   Easing Type:
 *   - Select which easing type you wish to apply.
 *
 * ---
 *
 * IMPACT: Motion Trail Create
 * - Creates a motion trail effect for the target(s).
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Targets:
 *   - Select unit(s) to create motion trail effects for.
 *
 *   Delay:
 *   - How many frames to delay by when creating a motion trail?
 *   - The higher the delay, the less motion trails there are.
 *
 *   Duration:
 *   - How many frames should the motion trail last?
 *   - What do you want to be its duration?
 *
 *   Hue:
 *   - What do you want to be the hue for the motion trail?
 *
 *   Starting Opacity:
 *   - What starting opacity value do you want for the motion trail?
 *   - Opacity values decrease over time.
 *
 *   Tone:
 *   - What tone do you want for the motion trail?
 *   - Format: [Red, Green, Blue, Gray]
 *
 * ---
 *
 * IMPACT: Motion Trail Remove
 * - Removes the motion trail effect from the target(s).
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Targets:
 *   - Select unit(s) to clear motion trail effects for.
 *
 * ---
 *
 * IMPACT: Shockwave at Point
 * - Creates a shockwave at the designated coordinates.
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Point: X:
 *   Point: Y:
 *   - What x/y coordinate do you want to create a shockwave at?
 *   - You can use JavaScript code.
 *
 *   Amplitude:
 *   - What is the aplitude of the shockwave effect?
 *
 *   Wavelength:
 *   - What is the wavelength of the shockwave effect?
 *
 *   Duration:
 *   - What is the duration of the shockwave?
 *
 * ---
 *
 * IMPACT: Shockwave from Each Target(s)
 * - Creates a shockwave at each of the target(s) location(s).
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Targets:
 *   - Select unit(s) to start a shockwave from.
 *
 *   Target Location:
 *   - Select which part target group to start a shockwave from.
 * 
 *     Offset X:
 *     Offset Y:
 *     - How much to offset the shockwave X/Y point by.
 *
 *   Amplitude:
 *   - What is the aplitude of the shockwave effect?
 *
 *   Wavelength:
 *   - What is the wavelength of the shockwave effect?
 *
 *   Duration:
 *   - What is the duration of the shockwave?
 *
 * ---
 *
 * IMPACT: Shockwave from Target(s) Center
 * - Creates a shockwave from the center of the target(s).
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Targets:
 *   - Select unit(s) to start a shockwave from.
 *
 *   Target Location:
 *   - Select which part target group to start a shockwave from.
 * 
 *     Offset X:
 *     Offset Y:
 *     - How much to offset the shockwave X/Y point by.
 *
 *   Amplitude:
 *   - What is the aplitude of the shockwave effect?
 *
 *   Wavelength:
 *   - What is the wavelength of the shockwave effect?
 *
 *   Duration:
 *   - What is the duration of the shockwave?
 *
 * ---
 *
 * IMPACT: Zoom Blur at Point
 * - Creates a zoom blur at the designated coordinates.
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Point: X:
 *   Point: Y:
 *   - What x/y coordinate do you want to focus the zoom at?
 *   - You can use JavaScript code.
 *
 *   Zoom Strength:
 *   - What is the strength of the zoom effect?
 *   - Use a number between 0 and 1.
 *
 *   Visible Radius:
 *   - How much of a radius should be visible from the center?
 *
 *   Duration:
 *   - What is the duration of the zoom blur?
 *
 *   Easing Type:
 *   - Select which easing type you wish to apply.
 *
 * ---
 *
 * IMPACT: Zoom Blur at Target(s) Center
 * - Creates a zoom blur at the center of targets.
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Targets:
 *   - Select unit(s) to start a zoom blur from.
 *
 *   Target Location:
 *   - Select which part target group to start a zoom blur from.
 * 
 *     Offset X:
 *     Offset Y:
 *     - How much to offset the zoom blur X/Y point by.
 *
 *   Zoom Strength:
 *   - What is the strength of the zoom effect?
 *   - Use a number between 0 and 1.
 *
 *   Visible Radius:
 *   - How much of a radius should be visible from the center?
 *
 *   Duration:
 *   - What is the duration of the zoom blur?
 *
 *   Easing Type:
 *   - Select which easing type you wish to apply.
 *
 * ---
 *
 * === Action Sequences - Mechanics ===
 *
 * These Action Sequences are related to various mechanics related to the
 * battle system.
 *
 * ---
 *
 * MECH: Action Effect
 * - Causes the unit(s) to take damage/healing from action and incurs any
 *   changes made such as buffs and states.
 *
 *   Targets:
 *   - Select unit(s) to receive the current action's effects.
 *
 * ---
 *
 * MECH: Add Buff/Debuff
 * - Adds buff(s)/debuff(s) to unit(s). 
 * - Determine which parameters are affected and their durations.
 *
 *   Targets:
 *   - Select unit(s) to receive the buff(s) and/or debuff(s).
 *
 *   Buff Parameters:
 *   - Select which parameter(s) to buff.
 *   - Insert a parameter multiple times to raise its stacks.
 *
 *   Debuff Parameters:
 *   - Select which parameter(s) to debuff.
 *   - Insert a parameter multiple times to raise its stacks.
 *
 *   Turns:
 *   - Number of turns to set the parameter(s) buffs to.
 *   - You may use JavaScript code.
 *
 * ---
 *
 * MECH: Add State
 * - Adds state(s) to unit(s).
 *
 *   Targets:
 *   - Select unit(s) to receive the buff(s).
 *
 *   States:
 *   - Select which state ID(s) to add to unit(s).
 *   - Insert multiple state ID's to add multiple at once.
 *
 * ---
 * 
 * MECH: Analyze Weakness
 * - Reveal elemental weakness(es) from target(s).
 * - Requires VisuMZ_3_WeaknessDisplay!
 * 
 *   Targets:
 *   - Select unit(s) to reveal elemental weaknesses for.
 * 
 *   Reveal:
 *   - How many elemental weaknesses do you wish to reveal?
 *   - You may use JavaScript code.
 * 
 * ---
 *
 * MECH: Armor Penetration
 * - Adds an extra layer of defensive penetration/reduction.
 * - You may use JavaScript code for any of these.
 *
 *   Armor/Magic Penetration:
 *
 *     Rate:
 *     - Penetrates an extra multiplier of armor by this value.
 *
 *     Flat:
 *     - Penetrates a flat amount of armor by this value.
 *
 *   Armor/Magic Reduction:
 *
 *     Rate:
 *     - Reduces an extra multiplier of armor by this value.
 *
 *     Flat:
 *     - Reduces a flat amount of armor by this value.
 *
 * ---
 * 
 * MECH: ATB Gauge
 * - Alters the ATB/TPB Gauges.
 * - Requires VisuMZ_2_BattleSystemATB!
 * 
 *   Targets:
 *   - Select unit(s) to alter the ATB/TPB Gauges for.
 * 
 *   Charging:
 *   
 *     Charge Rate:
 *     - Changes made to the ATB Gauge if it is currently charging.
 * 
 *   Casting:
 *   
 *     Cast Rate:
 *     - Changes made to the ATB Gauge if it is currently casting.
 *   
 *     Interrupt?:
 *     - Interrupt the ATB Gauge if it is currently casting?
 * 
 * ---
 * 
 * MECH: Boost Points Change
 * - Changes Boost Points for target(s).
 * - Requires VisuMZ_3_BoostAction!
 * 
 *   Targets:
 *   - Select unit(s) to alter the Boost Points for.
 * 
 *   Alter Boost Points By:
 *   - Alters the unit(s) Boost Points.
 *   - Positive for gaining points. Negative for losing points.
 * 
 * ---
 * 
 * MECH: Boost Store Data
 * - Stores the number of Boosts used this action inside a variable.
 * - Requires VisuMZ_3_BoostAction!
 * 
 *   Variable ID:
 *   - Which variable do you want to store the data inside?
 * 
 * ---
 * 
 * MECH: Break Shield Change
 * - Changes Break Shields for target(s) if not Break Stunned.
 * - Requires VisuMZ_4_BreakShields!
 * 
 *   Targets:
 *   - Select unit(s) to alter the Break Shields for.
 * 
 *   Alter Break Shields By:
 *   - Alters the unit(s) Break Shields.
 *   - Positive for gaining shields. Negative for losing shields.
 * 
 * ---
 * 
 * MECH: Break Shield Reset
 * - Resets Break Shields for target(s) if not Break Stunned.
 * - Requires VisuMZ_4_BreakShields!
 * 
 *   Targets:
 *   - Select unit(s) to reset the Break Shields for.
 * 
 * ---
 * 
 * MECH: BTB Brave Points
 * - Alters the target(s) Brave Points to an exact value.
 * - Requires VisuMZ_2_BattleSystemBTB!
 * 
 *   Targets:
 *   - Select unit(s) to alter the ATB/TPB Gauges for.
 * 
 *   Alter Brave Points By:
 *   - Alters the target(s) Brave Points.
 *   - Positive for gaining BP.
 *   - Negative for losing BP.
 * 
 * ---
 *
 * MECH: Collapse
 * - Causes the unit(s) to perform its collapse animation if the unit(s)
 *   has died.
 *
 *   Targets:
 *   - Select unit(s) to process a death collapse.
 *
 *   Force Death:
 *   - Force death even if the unit has not reached 0 HP?
 *   - This will remove immortality.
 *
 *   Wait For Effect?:
 *   - Wait for the collapse effect to complete before performing next command?
 *
 * ---
 * 
 * MECH: CTB Order
 * - Alters the CTB Turn Order.
 * - Requires VisuMZ_2_BattleSystemCTB!
 * 
 *   Targets:
 *   - Select unit(s) to alter the CTB Turn Order for.
 * 
 *   Change Order By:
 *   - Changes turn order for target(s) by this amount.
 *   - Positive increases wait. Negative decreases wait.
 * 
 * ---
 * 
 * MECH: CTB Speed
 * - Alters the CTB Speed.
 * - Requires VisuMZ_2_BattleSystemCTB!
 * 
 *   Targets:
 *   - Select unit(s) to alter the CTB Speed for.
 * 
 *   Charge Rate:
 *   - Changes made to the CTB Speed if it is currently charging.
 * 
 *   Cast Rate:
 *   - Changes made to the CTB Speed if it is currently casting.
 * 
 * ---
 * 
 * MECH: Custom Damage Formula
 * - Changes the current action's damage formula to custom.
 * - This will assume the MANUAL damage style.
 * 
 *   Formula:
 *   - Changes the current action's damage formula to custom.
 *   - Use 'default' to revert the damage formula.
 * 
 * ---
 *
 * MECH: Damage Popup
 * - Causes the unit(s) to display the current state of damage received
 *   or healed.
 *
 *   Targets:
 *   - Select unit(s) to prompt a damage popup.
 *
 * ---
 *
 * MECH: Dead Label Jump
 * - If the active battler is dead, jump to a specific label in the
 *   common event.
 *
 *   Jump To Label:
 *   - If the active battler is dead, jump to this specific label in the
 *     common event.
 *
 * ---
 *
 * MECH: Enemy Escape
 * - Causes the enemy unit(s) to escape.
 *
 *   Targets:
 *   - Select unit(s) to escape.
 *
 * ---
 *
 * MECH: ETB Energy Count
 * - Alters the subject team's available Energy Count.
 * - Requires VisuMZ_2_BattleSystemETB!
 *
 *   Energy Count:
 *   - Alters the subject team's available Energy Count.
 *   - Positive for gaining energy. Negative for losing energy.
 *
 * ---
 *
 * MECH: FTB Action Count
 * - Alters the subject team's available Action Count.
 * - Requires VisuMZ_2_BattleSystemFTB!
 *
 *   Action Count:
 *   - Alters the subject team's available Action Count.
 *   - Positive for gaining actions. Negative for losing actions.
 *
 * ---
 *
 * MECH: HP, MP, TP
 * - Alters the HP, MP, and TP values for unit(s).
 * - Positive values for healing. Negative values for damage.
 *
 *   Targets:
 *   - Select unit(s) to receive the current action's effects.
 *
 *   HP, MP, TP:
 *
 *     Rate:
 *     - Changes made to the parameter based on rate.
 *     - Positive values for healing. Negative values for damage.
 *
 *     Flat:
 *     - Flat changes made to the parameter.
 *     - Positive values for healing. Negative values for damage.
 *
 *   Damage Popup?:
 *   - Display a damage popup after?
 *
 * ---
 *
 * MECH: Immortal
 * - Changes the immortal flag of targets. If immortal flag is removed and a
 *   unit would die, collapse that unit.
 *
 *   Targets:
 *   - Alter the immortal flag of these groups. If immortal flag is removed and
 *     a unit would die, collapse that unit.
 *
 *   Immortal:
 *   - Turn immortal flag for unit(s) on/off?
 *
 * ---
 *
 * MECH: Multipliers
 * - Changes the multipliers for the current action.
 * - You may use JavaScript code for any of these.
 *
 *   Critical Hit%:
 *
 *     Rate:
 *     - Affects chance to land a critical hit by this multiplier.
 *
 *     Flat:
 *     - Affects chance to land a critical hit by this flat bonus.
 *
 *   Critical Damage
 *
 *     Rate:
 *     - Affects critical damage by this multiplier.
 *
 *     Flat:
 *     - Affects critical damage by this flat bonus.
 *
 *   Damage/Healing
 *
 *     Rate:
 *     - Sets the damage/healing multiplier for current action.
 *
 *     Flat:
 *     - Sets the damage/healing bonus for current action.
 *
 *   Hit Rate
 *
 *     Rate:
 *     - Affects chance to connect attack by this multiplier.
 *
 *     Flat:
 *     - Affects chance to connect attack by this flat bonus.
 *
 * ---
 * 
 * MECH: Once Parallel
 * - Plays a Common Event parallel to the battle event once without repeating
 *   itself when done.
 * 
 *   Common Event ID:
 *   - The ID of the parallel Common Event to play.
 *   - Does NOT repeat itself when finished.
 *   - When exiting battle scene, all Once Parallels are cleared.
 *   - Once Parallels are not retained upon reentering the scene.
 *   - Once Parallels are not stored in memory and cannot be saved.
 * 
 * ---
 * 
 * MECH: OTB Order
 * - Alters the OTB Turn Order. Best used with single targets.
 * - Requires VisuMZ_2_BattleSystemOTB!
 * 
 *   Targets:
 *   - Select unit(s) to alter the OTB Turn Order for.
 * 
 *   Current Turn By:
 *   - Changes turn order for target(s) by this amount.
 *   - Positive increases wait. Negative decreases wait.
 * 
 *   Next Turn By:
 *   - Changes turn order for target(s) by this amount.
 *   - Positive increases wait. Negative decreases wait.
 * 
 *   Follow Turn By:
 *   - Changes turn order for target(s) by this amount.
 *   - Positive increases wait. Negative decreases wait.
 * 
 * ---
 * 
 * MECH: PTB Alter Cost
 * - Alters the action's cost settings.
 * - Requires VisuMZ_2_BattleSystemPTB!
 * 
 *   Override?:
 *   - Overrides any 'permanent' settings for Changeability?
 * 
 *   Alter Changeability:
 *   - Allow the cost type and value to be changeable?
 * 
 *   Alter Cost Type:
 *   - Change the cost type to this scenario.
 *   - Use 'Unchanged' for no changes.
 * 
 *   Alter Cost Value:
 *   - What is the default action cost for this scenario?
 * 
 *   Priority:
 *   - What is this scenario's priority? Scenario outcomes with equal or lower
 *     priorities cannot override types and costs.
 * 
 * ---
 * 
 * MECH: PTB Conversion
 * - Converts full actions into half actions.
 * - Requires VisuMZ_2_BattleSystemPTB!
 * 
 *   Conversion Count:
 *   - Converts full actions into half actions.
 *   - If not enough, consume half actions.
 * 
 * ---
 * 
 * MECH: PTB Full/Half Action(s)
 * - Alters the subject team's available Full/Half Actions.
 * - Requires VisuMZ_2_BattleSystemPTB!
 * 
 *   Full Actions:
 *   - Alters the subject team's available Full Actions.
 *   - Positive for gaining. Negative for losing.
 * 
 *   Half Actions:
 *   - Alters the subject team's available Half Actions.
 *   - Positive for gaining. Negative for losing.
 * 
 * ---
 *
 * MECH: Remove Buff/Debuff
 * - Removes buff(s)/debuff(s) from unit(s). 
 * - Determine which parameters are removed.
 *
 *   Targets:
 *   - Select unit(s) to have the buff(s) and/or debuff(s) removed.
 *
 *   Buff Parameters:
 *   - Select which buffed parameter(s) to remove.
 *
 *   Debuff Parameters:
 *   - Select which debuffed parameter(s) to remove.
 *
 * ---
 *
 * MECH: Remove State
 * - Remove state(s) from unit(s).
 *
 *   Targets:
 *   - Select unit(s) to have states removed from.
 *
 *   States:
 *   - Select which state ID(s) to remove from unit(s).
 *   - Insert multiple state ID's to remove multiple at once.
 *
 * ---
 * 
 * MECH: STB Exploit Effect
 * - Utilize the STB Exploitation mechanics!
 * - Requires VisuMZ_2_BattleSystemSTB!
 * 
 *   Target(s) Exploited?:
 *   - Exploit the below targets?
 * 
 *     Targets:
 *     - Select unit(s) to become exploited.
 * 
 *     Force Exploitation:
 *     - Force the exploited status?
 * 
 *   User Exploiter?:
 *   - Allow the user to become the exploiter?
 * 
 *     Force Exploitation:
 *     - Force the exploiter status?
 * 
 * ---
 * 
 * MECH: STB Extra Action
 * - Adds an extra action for the currently active battler.
 * - Requires VisuMZ_2_BattleSystemSTB!
 * 
 *   Extra Actions:
 *   - How many extra actions should the active battler gain?
 *   - You may use JavaScript code.
 * 
 * ---
 * 
 * MECH: STB Remove Excess Actions
 * - Removes excess actions from the active battler.
 * - Requires VisuMZ_2_BattleSystemSTB!
 * 
 *   Remove Actions:
 *   - How many actions to remove from the active battler?
 *   - You may use JavaScript code.
 * 
 * ---
 * 
 * MECH: Swap Weapon
 * - Causes the unit(s) to swap their weapon for another.
 * - Requires VisuMZ_2_WeaponSwapSystem!
 * 
 *   Targets:
 *   - Select unit(s) to swap weapons for.
 * 
 *   Weapon Type ID:
 *   - Which weapon type to swap to?
 *   - This is NOT the weapon's ID.
 *   - It's the weapon TYPE.
 * 
 * ---
 * 
 * MECH: Text Popup
 * - Causes the unit(s) to display a text popup.
 * 
 *   Targets:
 *   - Select unit(s) to prompt a text popup.
 * 
 *   Text:
 *   - What text do you wish to display?
 * 
 *   Text Color:
 *   - Use #rrggbb for custom colors or regular numbers for text colors from
 *     the Window Skin.
 * 
 *   Flash Color:
 *   - Adjust the popup's flash color.
 *   - Format: [red, green, blue, alpha]
 * 
 *   Flash Duration:
 *   - What is the frame duration of the flash effect?
 * 
 * ---
 * 
 * MECH: Variable Popup
 * - Causes the unit(s) to display a popup using the data stored inside
 *   a variable.
 * 
 *   Targets:
 *   - Select unit(s) to prompt a text popup.
 * 
 *   Variable:
 *   - Get data from which variable to display as a popup?
 * 
 *   Digit Grouping:
 *   - Use digit grouping to separate numbers?
 *   - Requires VisuMZ_0_CoreEngine!
 * 
 *   Text Color:
 *   - Use #rrggbb for custom colors or regular numbers for text colors from
 *     the Window Skin.
 * 
 *   Flash Color:
 *   - Adjust the popup's flash color.
 *   - Format: [red, green, blue, alpha]
 * 
 *   Flash Duration:
 *   - What is the frame duration of the flash effect?
 * 
 * ---
 *
 * MECH: Wait For Effect
 * - Waits for the effects to complete before performing next command.
 *
 * ---
 *
 * === Action Sequences - Motion ===
 *
 * These Action Sequences allow you the ability to control the motions of
 * sideview sprites.
 *
 * ---
 * 
 * MOTION: Clear Freeze Frame
 * - Clears any freeze frames from the unit(s).
 * 
 *   Targets:
 *   - Select which unit(s) to clear freeze frames for.
 * 
 * ---
 * 
 * MOTION: Freeze Motion Frame
 * - Forces a freeze frame instantly at the selected motion.
 * - Automatically clears with a new motion.
 * 
 *   Targets:
 *   - Select which unit(s) to freeze motions for.
 * 
 *   Motion Type:
 *   - Freeze this motion for the unit(s).
 * 
 *   Frame Index:
 *   - Which frame do you want to freeze the motion on?
 *   - Frame index values start at 0.
 * 
 *   Show Weapon?:
 *   - If using 'attack', 'thrust', 'swing', or 'missile', display the
 *     weapon sprite?
 * 
 * ---
 *
 * MOTION: Motion Type
 * - Causes the unit(s) to play the selected motion.
 *
 *   Targets:
 *   - Select which unit(s) to perform a motion.
 *
 *   Motion Type:
 *   - Play this motion for the unit(s).
 *
 *   Show Weapon?:
 *   - If using 'attack', 'thrust', 'swing', or 'missile', display the
 *     weapon sprite?
 *
 * ---
 *
 * MOTION: Perform Action
 * - Causes the unit(s) to play the proper motion based on the current action.
 *
 *   Targets:
 *   - Select which unit(s) to perform a motion.
 *
 * ---
 *
 * MOTION: Refresh Motion
 * - Cancels any set motions unit(s) has to do and use their most natural
 *   motion at the moment.
 *
 *   Targets:
 *   - Select which unit(s) to refresh their motion state.
 *
 * ---
 *
 * MOTION: Wait By Motion Frame
 * - Creates a wait equal to the number of motion frames passing.
 * - Time is based on Plugin Parameters => Actors => Motion Speed.
 *
 *   Motion Frames to Wait?:
 *   - Each "frame" is equal to the value found in 
 *     Plugin Parameters => Actors => Motion Speed
 *
 * ---
 *
 * === Action Sequences - Movement ===
 *
 * These Action Sequences allow you the ability to control the sprites of
 * actors and enemies in battle.
 *
 * ---
 *
 * MOVE: Battle Step
 * - Causes the unit(s) to move forward past their home position to prepare
 *   for action.
 *
 *   Targets:
 *   - Select which unit(s) to move.
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Face Direction
 * - Causes the unit(s) to face forward or backward.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to change direction.
 *
 *   Direction:
 *   - Select which direction to face.
 *
 * ---
 *
 * MOVE: Face Point
 * - Causes the unit(s) to face a point on the screen.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to change direction.
 *
 *   Point:
 *   - Select which point to face.
 *     - Home
 *     - Center
 *     - Point X, Y
 *       - Replace 'x' and 'y' with coordinates
 *
 *   Face Away From?:
 *   - Face away from the point instead?
 *
 * ---
 *
 * MOVE: Face Target(s)
 * - Causes the unit(s) to face other targets on the screen.
 * - Sideview-only!
 *
 *   Targets (facing):
 *   - Select which unit(s) to change direction.
 *
 *   Targets (destination):
 *   - Select which unit(s) for the turning unit(s) to face.
 *
 *   Face Away From?:
 *   - Face away from the unit(s) instead?
 *
 * ---
 *
 * MOVE: Float
 * - Causes the unit(s) to float above the ground.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to make float.
 *
 *   Desired Height:
 *   - Vertical distance to float upward.
 *   - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total float amount.
 *
 *   Float Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Float?:
 *   - Wait for floating to complete before performing next command?
 *
 * ---
 *
 * MOVE: Home Reset
 * - Causes the unit(s) to move back to their home position(s) and face back to
 *   their original direction(s).
 *
 *   Targets:
 *   - Select which unit(s) to move.
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Jump
 * - Causes the unit(s) to jump into the air.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to make jump.
 *
 *   Desired Height:
 *   - Max jump height to go above the ground
 *   - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total jump amount.
 *
 *   Wait For Jump?:
 *   - Wait for jumping to complete before performing next command?
 *
 * ---
 *
 * MOVE: Move Distance
 * - Moves unit(s) by a distance from their current position(s).
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to move.
 *
 *   Distance Adjustment:
 *   - Makes adjustments to distance values to determine which direction to
 *     move unit(s).
 *     - Normal - No adjustments made
 *     - Horizontal - Actors adjust left, Enemies adjust right
 *     - Vertical - Actors adjust Up, Enemies adjust down
 *     - Both - Applies both Horizontal and Vertical
 *
 *     Distance: X:
 *     - Horizontal distance to move.
 *     - You may use JavaScript code.
 *
 *     Distance: Y:
 *     - Vertical distance to move.
 *     - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total movement amount.
 *
 *   Face Destination?:
 *   - Turn and face the destination?
 *
 *   Movement Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Movement Motion:
 *   - Play this motion for the unit(s).
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Move To Point
 * - Moves unit(s) to a designated point on the screen.
 * - Sideview-only! Points based off Graphics.boxWidth/Height.
 *
 *   Targets:
 *   - Select which unit(s) to move.
 *
 *   Destination Point:
 *   - Select which point to face.
 *     - Home
 *     - Center
 *     - Point X, Y
 *       - Replace 'x' and 'y' with coordinates
 *
 *   Offset Adjustment:
 *   - Makes adjustments to offset values to determine which direction to
 *     adjust the destination by.
 *
 *     Offset: X:
 *     - Horizontal offset to move.
 *     - You may use JavaScript code.
 *
 *     Offset: Y:
 *     - Vertical offset to move.
 *     - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total movement amount.
 *
 *   Face Destination?:
 *   - Turn and face the destination?
 *
 *   Movement Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Movement Motion:
 *   - Play this motion for the unit(s).
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Move To Target(s)
 * - Moves unit(s) to another unit(s) on the battle field.
 * - Sideview-only!
 *
 *   Targets (Moving):
 *   - Select which unit(s) to move.
 *
 *   Targets (Destination):
 *   - Select which unit(s) to move to.
 *
 *     Target Location:
 *     - Select which part target group to move to.
 *       - front head
 *       - front center
 *       - front base
 *       - middle head
 *       - middle center
 *       - middle base
 *       - back head
 *       - back center
 *       - back base
 *
 *     Melee Distance:
 *     - The melee distance away from the target location in addition to the
 *       battler's width.
 *
 *   Offset Adjustment:
 *   - Makes adjustments to offset values to determine which direction to
 *     adjust the destination by.
 *
 *     Offset: X:
 *     - Horizontal offset to move.
 *     - You may use JavaScript code.
 *
 *     Offset: Y:
 *     - Vertical offset to move.
 *     - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total movement amount.
 *
 *   Face Destination?:
 *   - Turn and face the destination?
 *
 *   Movement Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Movement Motion:
 *   - Play this motion for the unit(s).
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Opacity
 * - Causes the unit(s) to change opacity.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to change opacity.
 *
 *   Desired Opacity:
 *   - Change to this opacity value.
 *   - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for opacity change.
 *
 *   Opacity Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Opacity?:
 *   - Wait for opacity changes to complete before performing next command?
 *
 * ---
 *
 * MOVE: Scale/Grow/Shrink
 * - Causes the unit(s) to scale, grow, or shrink?.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to change the scale of.
 *
 *   Scale X:
 *   Scale Y:
 *   - What target scale value do you want?
 *   - 1.0 is normal size.
 *
 *   Duration:
 *   - Duration in frames to scale for.
 *
 *   Scale Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Scale?:
 *   - Wait for scaling to complete before performing next command?
 *
 * ---
 *
 * MOVE: Skew/Distort
 * - Causes the unit(s) to skew.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to skew.
 *
 *   Skew X:
 *   Skew Y:
 *   - What variance to skew?
 *   - Use small values for the best results.
 *
 *   Duration:
 *   - Duration in frames to skew for.
 *
 *   Skew Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Skew?:
 *   - Wait for skew to complete before performing next command?
 *
 * ---
 *
 * MOVE: Spin/Rotate
 * - Causes the unit(s) to spin.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to spin.
 *
 *   Angle:
 *   - How many degrees to spin?
 *
 *   Duration:
 *   - Duration in frames to spin for.
 *
 *   Spin Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 * 
 *   Revert Angle on Finish:
 *   - Upon finishing the spin, revert the angle back to 0.
 *
 *   Wait For Spin?:
 *   - Wait for spin to complete before performing next command?
 *
 * ---
 *
 * MOVE: Wait For Float
 * - Waits for floating to complete before performing next command.
 *
 * ---
 *
 * MOVE: Wait For Jump
 * - Waits for jumping to complete before performing next command.
 *
 * ---
 *
 * MOVE: Wait For Movement
 * - Waits for movement to complete before performing next command.
 *
 * ---
 *
 * MOVE: Wait For Opacity
 * - Waits for opacity changes to complete before performing next command.
 *
 * ---
 *
 * MOVE: Wait For Scale
 * - Waits for scaling to complete before performing next command.
 *
 * ---
 *
 * MOVE: Wait For Skew
 * - Waits for skewing to complete before performing next command.
 *
 * ---
 *
 * MOVE: Wait For Spin
 * - Waits for spinning to complete before performing next command.
 *
 * ---
 * 
 * === Action Sequences - Projectiles ===
 * 
 * Create projectiles on the screen and fire them off at a target.
 * Requires VisuMZ_3_ActSeqProjectiles!
 * 
 * ---
 *
 * PROJECTILE: Animation
 * - Create an animation projectile and fire it at a target.
 * - Requires VisuMZ_3_ActSeqProjectiles!
 *
 *   Coordinates:
 *
 *     Start Location:
 *     - Settings to determine where the projectile(s) start from.
 *
 *       Type:
 *       - Select where the projectile should start from.
 *         - Target - Start from battler target(s)
 *         - Point - Start from a point on the screen
 *
 *         Target(s):
 *         - Select which unit(s) to start the projectile from.
 *
 *           Centralize:
 *           - Create one projectile at the center of the targets?
 *           - Or create a projectile for each target?
 * 
 *           Target Location:
 *           - Select which part of the target to send the projectile from.
 *           - front head
 *           - front center
 *           - front base
 *           - middle head
 *           - middle center
 *           - middle base
 *           - back head
 *           - back center
 *           - back base
 *
 *         Point X:
 *         Point Y:
 *         - Insert the X/Y coordinate to start the projectile at.
 *         - You may use JavaScript code.
 *
 *       Offset X:
 *       Offset Y:
 *       - Insert how many pixels to offset the X/Y coordinate by.
 *       - You may use JavaScript code.
 *
 *     Goal Location:
 *     - Settings to determine where the projectile(s) start from.
 *
 *       Type:
 *       - Select where the projectile should go to.
 *         - Target - Goal is battler target(s)
 *         - Point - Goal is a point on the screen
 *
 *         Target(s):
 *         - Select which unit(s) for projectile to go to.
 *
 *           Centralize:
 *           - Create one projectile at the center of the targets?
 *           - Or create a projectile for each target?
 * 
 *           Target Location:
 *           - Select which part of the target to send the projectile to.
 *           - front head
 *           - front center
 *           - front base
 *           - middle head
 *           - middle center
 *           - middle base
 *           - back head
 *           - back center
 *           - back base
 *
 *         Point X:
 *         Point Y:
 *         - Insert the X/Y coordinate to send the projectile to.
 *         - You may use JavaScript code.
 *
 *       Offset X:
 *       Offset Y:
 *       - Insert how many pixels to offset the X/Y coordinate by.
 *       - You may use JavaScript code.
 *
 *   Settings:
 *
 *     Animation ID:
 *     - Determine which animation to use as a projectile.
 *
 *     Duration:
 *     - Duration for the projectile(s) to travel.
 *
 *     Wait For Projectile?:
 *     - Wait for projectile(s) to reach their destination before going onto
 *       the next command?
 *
 *     Extra Settings:
 *     - Add extra settings to the projectile?
 *
 *       Auto Angle?:
 *       - Automatically angle the projectile to tilt the direction
 *         it's moving?
 *
 *       Angle Offset:
 *       - Alter the projectile's tilt by this many degrees.
 *
 *       Arc Peak:
 *       - This is the height of the project's trajectory arc in pixels.
 *
 *       Easing:
 *       - Select which easing type to apply to the projectile's trajectory.
 *
 *       Spin Speed:
 *       - Determine how much angle the projectile spins per frame.
 *       - Does not work well with "Auto Angle".
 *
 * ---
 *
 * PROJECTILE: Icon
 * - Create an icon projectile and fire it at a target.
 * - Requires VisuMZ_3_ActSeqProjectiles!
 *
 *   Coordinates:
 *
 *     Start Location:
 *     - Settings to determine where the projectile(s) start from.
 *
 *       Type:
 *       - Select where the projectile should start from.
 *         - Target - Start from battler target(s)
 *         - Point - Start from a point on the screen
 *
 *         Target(s):
 *         - Select which unit(s) to start the projectile from.
 *
 *           Centralize:
 *           - Create one projectile at the center of the targets?
 *           - Or create a projectile for each target?
 * 
 *           Target Location:
 *           - Select which part of the target to send the projectile from.
 *           - front head
 *           - front center
 *           - front base
 *           - middle head
 *           - middle center
 *           - middle base
 *           - back head
 *           - back center
 *           - back base
 *
 *         Point X:
 *         Point Y:
 *         - Insert the X/Y coordinate to start the projectile at.
 *         - You may use JavaScript code.
 *
 *       Offset X:
 *       Offset Y:
 *       - Insert how many pixels to offset the X/Y coordinate by.
 *       - You may use JavaScript code.
 *
 *     Goal Location:
 *     - Settings to determine where the projectile(s) start from.
 *
 *       Type:
 *       - Select where the projectile should go to.
 *         - Target - Goal is battler target(s)
 *         - Point - Goal is a point on the screen
 *
 *         Target(s):
 *         - Select which unit(s) for projectile to go to.
 *
 *           Centralize:
 *           - Create one projectile at the center of the targets?
 *           - Or create a projectile for each target?
 * 
 *           Target Location:
 *           - Select which part of the target to send the projectile to.
 *           - front head
 *           - front center
 *           - front base
 *           - middle head
 *           - middle center
 *           - middle base
 *           - back head
 *           - back center
 *           - back base
 *
 *         Point X:
 *         Point Y:
 *         - Insert the X/Y coordinate to send the projectile to.
 *         - You may use JavaScript code.
 *
 *       Offset X:
 *       Offset Y:
 *       - Insert how many pixels to offset the X/Y coordinate by.
 *       - You may use JavaScript code.
 *
 *   Settings:
 *
 *     Icon:
 *     - Determine which icon to use as a projectile.
 *       - You may use JavaScript code.
 *
 *     Duration:
 *     - Duration for the projectile(s) to travel.
 *
 *     Wait For Projectile?:
 *     - Wait for projectile(s) to reach their destination before going onto
 *       the next command?
 *
 *     Extra Settings:
 *     - Add extra settings to the projectile?
 *
 *       Auto Angle?:
 *       - Automatically angle the projectile to tilt the direction
 *         it's moving?
 *
 *       Angle Offset:
 *       - Alter the projectile's tilt by this many degrees.
 *
 *       Arc Peak:
 *       - This is the height of the project's trajectory arc in pixels.
 *
 *       Blend Mode:
 *       - What kind of blend mode do you wish to apply to the projectile?
 *         - Normal
 *         - Additive
 *         - Multiply
 *         - Screen
 *
 *       Easing:
 *       - Select which easing type to apply to the projectile's trajectory.
 *
 *       Hue:
 *       - Adjust the hue of the projectile.
 *       - Insert a number between 0 and 360.
 *
 *       Scale:
 *       - Adjust the size scaling of the projectile.
 *       - Use decimals for exact control.
 *
 *       Spin Speed:
 *       - Determine how much angle the projectile spins per frame.
 *       - Does not work well with "Auto Angle".
 *
 * ---
 *
 * PROJECTILE: Picture
 * - Create a picture projectile and fire it at a target.
 * - Requires VisuMZ_3_ActSeqProjectiles!
 *
 *   Coordinates:
 *
 *     Start Location:
 *     - Settings to determine where the projectile(s) start from.
 *
 *       Type:
 *       - Select where the projectile should start from.
 *         - Target - Start from battler target(s)
 *         - Point - Start from a point on the screen
 *
 *         Target(s):
 *         - Select which unit(s) to start the projectile from.
 *
 *           Centralize:
 *           - Create one projectile at the center of the targets?
 *           - Or create a projectile for each target?
 * 
 *           Target Location:
 *           - Select which part of the target to send the projectile from.
 *           - front head
 *           - front center
 *           - front base
 *           - middle head
 *           - middle center
 *           - middle base
 *           - back head
 *           - back center
 *           - back base
 *
 *         Point X:
 *         Point Y:
 *         - Insert the X/Y coordinate to start the projectile at.
 *         - You may use JavaScript code.
 *
 *       Offset X:
 *       Offset Y:
 *       - Insert how many pixels to offset the X/Y coordinate by.
 *       - You may use JavaScript code.
 *
 *     Goal Location:
 *     - Settings to determine where the projectile(s) start from.
 *
 *       Type:
 *       - Select where the projectile should go to.
 *         - Target - Goal is battler target(s)
 *         - Point - Goal is a point on the screen
 *
 *         Target(s):
 *         - Select which unit(s) for projectile to go to.
 *
 *           Centralize:
 *           - Create one projectile at the center of the targets?
 *           - Or create a projectile for each target?
 * 
 *           Target Location:
 *           - Select which part of the target to send the projectile to.
 *           - front head
 *           - front center
 *           - front base
 *           - middle head
 *           - middle center
 *           - middle base
 *           - back head
 *           - back center
 *           - back base
 *
 *         Point X:
 *         Point Y:
 *         - Insert the X/Y coordinate to send the projectile to.
 *         - You may use JavaScript code.
 *
 *       Offset X:
 *       Offset Y:
 *       - Insert how many pixels to offset the X/Y coordinate by.
 *       - You may use JavaScript code.
 *
 *   Settings:
 *
 *     Picture Filename:
 *     - Determine which picture to use as a projectile.
 *
 *     Duration:
 *     - Duration for the projectile(s) to travel.
 *
 *     Wait For Projectile?:
 *     - Wait for projectile(s) to reach their destination before going onto
 *       the next command?
 *
 *     Extra Settings:
 *     - Add extra settings to the projectile?
 *
 *       Auto Angle?:
 *       - Automatically angle the projectile to tilt the direction
 *         it's moving?
 *
 *       Angle Offset:
 *       - Alter the projectile's tilt by this many degrees.
 *
 *       Arc Peak:
 *       - This is the height of the project's trajectory arc in pixels.
 *
 *       Blend Mode:
 *       - What kind of blend mode do you wish to apply to the projectile?
 *         - Normal
 *         - Additive
 *         - Multiply
 *         - Screen
 *
 *       Easing:
 *       - Select which easing type to apply to the projectile's trajectory.
 *
 *       Hue:
 *       - Adjust the hue of the projectile.
 *       - Insert a number between 0 and 360.
 *
 *       Scale:
 *       - Adjust the size scaling of the projectile.
 *       - Use decimals for exact control.
 *
 *       Spin Speed:
 *       - Determine how much angle the projectile spins per frame.
 *       - Does not work well with "Auto Angle".
 *
 * ---
 * 
 * === Action Sequences - Skew ===
 * 
 * These action sequences allow you to have control over the camera skew.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * ---
 *
 * SKEW: Change Skew
 * - Changes the camera skew.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Skew X:
 *   - Change the camera skew X to this value.
 *
 *   Skew Y:
 *   - Change the camera skew Y to this value.
 *
 *   Duration:
 *   - Duration in frames to change camera skew.
 *
 *   Skew Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Skew?:
 *   - Wait for skew changes to complete before performing next command?
 *
 * ---
 *
 * SKEW: Reset Skew
 * - Reset any skew settings.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Duration:
 *   - Duration in frames to reset camera skew.
 *
 *   Skew Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Skew?:
 *   - Wait for skew changes to complete before performing next command?
 *
 * ---
 *
 * SKEW: Wait For Skew
 * - Waits for skew changes to complete before performing next command.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 * ---
 *
 * === Action Sequences - Target ===
 *
 * If using a manual target by target Action Sequence, these commands will give
 * you full control over its usage.
 *
 * ---
 *
 * TARGET: Current Index
 * - Sets the current index to this value.
 * - Then decide to jump to a label (optional).
 *
 *   Set Index To:
 *   - Sets current targeting index to this value.
 *   - 0 is the starting index of a target group.
 *
 *   Jump To Label:
 *   - If a target is found after the index change, jump to this label in the
 *     Common Event.
 *
 * ---
 *
 * TARGET: Next Target
 * - Moves index forward by 1 to select a new current target.
 * - Then decide to jump to a label (optional).
 *
 *   Jump To Label:
 *   - If a target is found after the index change, jump to this label in the
 *     Common Event.
 *
 * ---
 *
 * TARGET: Previous Target
 * - Moves index backward by 1 to select a new current target.
 * - Then decide to jump to a label (optional).
 *
 *   Jump To Label:
 *   - If a target is found after the index change, jump to this label in the
 *     Common Event.
 *
 * ---
 *
 * TARGET: Random Target
 * - Sets index randomly to determine new currernt target.
 * - Then decide to jump to a label (optional).
 *
 *   Force Random?:
 *   - Index cannot be its previous index amount after random.
 *
 *   Jump To Label:
 *   - If a target is found after the index change, jump to this label in the
 *     Common Event.
 *
 * ---
 *
 * === Action Sequences - Weapon ===
 *
 * Allows for finer control over Dual/Multi Wielding actors.
 * Only works for Actors.
 *
 * ---
 *
 * WEAPON: Clear Weapon Slot
 * - Clears the active weapon slot (making others valid again).
 * - Only works for Actors.
 *
 *   Targets:
 *   - Select unit(s) to clear the active weapon slot for.
 *
 * ---
 *
 * WEAPON: Next Weapon Slot
 * - Goes to next active weapon slot (making others invalid).
 * - If next slot is weaponless, don't label jump.
 *
 *   Targets:
 *   - Select unit(s) to change the next active weapon slot for.
 *
 * ---
 *
 * WEAPON: Set Weapon Slot
 * - Sets the active weapon slot (making others invalid).
 * - Only works for Actors.
 *
 *   Targets:
 *   - Select unit(s) to change the active weapon slot for.
 *
 *   Weapon Slot ID:
 *   - Select weapon slot to make active (making others invalid).
 *   - Use 0 to clear and normalize. You may use JavaScript code.
 *
 * ---
 *
 * === Action Sequences - Zoom ===
 *
 * These Action Sequences are zoom-related.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * ---
 *
 * ZOOM: Change Scale
 * - Changes the zoom scale.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Scale:
 *   - The zoom scale to change to.
 *
 *   Duration:
 *   - Duration in frames to reset battle zoom.
 *
 *   Zoom Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Zoom?
 *   - Wait for zoom changes to complete before performing next command?
 *
 * ---
 *
 * ZOOM: Reset Zoom
 * - Reset any zoom settings.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Duration:
 *   - Duration in frames to reset battle zoom.
 *
 *   Zoom Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Zoom?
 *   - Wait for zoom changes to complete before performing next command?
 *
 * ---
 *
 * ZOOM: Wait For Zoom
 * - Waits for zoom changes to complete before performing next command.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Auto Battle Settings
 * ============================================================================
 *
 * These Plugin Parameter settings allow you to change the aspects added by
 * this plugin that support Auto Battle and the Auto Battle commands.
 *
 * Auto Battle commands can be added to the Party Command Window and/or Actor
 * Command Window. The one used by the Party Command Window will cause the
 * whole party to enter an Auto Battle state until stopped by a button input.
 * The command used by the Actor Command Window, however, will cause the actor
 * to select an action based off the Auto Battle A.I. once for the current turn
 * instead.
 *
 * ---
 *
 * Battle Display
 * 
 *   Message:
 *   - Message that's displayed when Auto Battle is on.
 *     Text codes allowed. %1 - OK button, %2 - Cancel button
 * 
 *   OK Button:
 *   - Text used to represent the OK button.
 *   - If VisuMZ_0_CoreEngine is present, ignore this.
 * 
 *   Cancel Button:
 *   - Text used to represent the Cancel button.
 *   - If VisuMZ_0_CoreEngine is present, ignore this.
 * 
 *   Background Type:
 *   - Select background type for Auto Battle window.
 *     - 0 - Window
 *     - 1 - Dim
 *     - 2 - Transparent
 * 
 *   JS: X, Y, W, H:
 *   - Code used to determine the dimensions for this window.
 *
 * ---
 *
 * Options
 * 
 *   Add Option?:
 *   - Add the Auto Battle options to the Options menu?
 * 
 *   Adjust Window Height:
 *   - Automatically adjust the options window height?
 * 
 *   Startup Name:
 *   - Command name of the option.
 * 
 *   Style Name:
 *   - Command name of the option.
 * 
 *   OFF:
 *   - Text displayed when Auto Battle Style is OFF.
 * 
 *   ON:
 *   - Text displayed when Auto Battle Style is ON.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Damage Settings
 * ============================================================================
 *
 * These Plugin Parameters add a variety of things to how damage is handled in
 * battle. These range from hard damage caps to soft damage caps to how damage
 * popups appear, how the formulas for various aspects are handled and more.
 *
 * Damage Styles are also a feature added through this plugin. More information
 * can be found in the help section above labeled 'Damage Styles'.
 *
 * ---
 *
 * Damage Styles
 * 
 *   Default Style:
 *   - Which Damage Style do you want to set as default?
 *   - Use 'Manual' to not use any styles at all.
 *     - The 'Manual' style will not support <Armor Penetration> notetags.
 *     - The 'Manual' style will not support <Armor Reduction> notetags.
 * 
 *   Style List:
 *   - A list of the damage styles available.
 *   - These are used to calculate base damage.
 * 
 *     Name:
 *     - Name of this Damage Style.
 *     -Used for notetags and such.
 * 
 *     JS: Formula:
 *     - The base formula for this Damage Style.
 * 
 *     Items & Equips Core:
 * 
 *       HP Damage:
 *       MP Damage:
 *       HP Recovery:
 *       MP Recovery:
 *       HP Drain:
 *       MP Drain:
 *       - Vocabulary used for this data entry.
 * 
 *       JS: Damage Display:
 *       - Code used the data displayed for this category.
 *
 * ---
 *
 * Damage Cap
 * 
 *   Enable Damage Cap?:
 *   - Put a maximum hard damage cap on how far damage can go?
 *   - This can be broken through the usage of notetags.
 * 
 *   Default Hard Cap:
 *   - The default hard damage cap used before applying damage.
 * 
 *   Enable Soft Cap?:
 *   - Soft caps ease in the damage values leading up to the  hard damage cap.
 *   - Requires hard Damage Cap enabled.
 * 
 *     Base Soft Cap Rate:
 *     - The default soft damage cap used before applying damage.
 * 
 *     Soft Scale Constant:
 *     - The default soft damage cap used before applying damage.
 *
 * ---
 *
 * Popups
 * 
 *   Popup Duration:
 *   - Adjusts how many frames a popup stays visible.
 * 
 *   Newest Popups Bottom:
 *   - Puts the newest popups at the bottom.
 * 
 *   Offset X:
 *   Offset Y:
 *   - Sets how much to offset the sprites by horizontally/vertically.
 * 
 *   Shift X:
 *   Shift Y:
 *   - Sets how much to shift the sprites by horizontally/vertically.
 * 
 *   Shift Y:
 * 
 *   Critical Flash Color:
 *   - Adjust the popup's flash color.
 *   - Format: [red, green, blue, alpha]
 * 
 *   Critical Duration:
 *   - Adjusts how many frames a the flash lasts.
 *
 * ---
 *
 * Formulas
 * 
 *   JS: Overall Formula:
 *   - The overall formula used when calculating damage.
 * 
 *   JS: Variance Formula:
 *   - The formula used when damage variance.
 * 
 *   JS: Guard Formula:
 *   - The formula used when damage is guarded.
 *
 * ---
 *
 * Critical Hits
 * 
 *   JS: Rate Formula:
 *   - The formula used to calculate Critical Hit Rates.
 * 
 *   JS: Damage Formula:
 *   - The formula used to calculate Critical Hit Damage modification.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Mechanics Settings
 * ============================================================================
 *
 * Some of the base settings for the various mechanics found in the battle
 * system can be altered here in these Plugin Parameters. Most of these will
 * involve JavaScript code and require you to have to good understanding of
 * how the RPG Maker MZ code works before tampering with it.
 *
 * ---
 *
 * Action Speed
 * 
 *   Allow Random Speed?:
 *   - Allow speed to be randomized base off the user's AGI?
 * 
 *   JS: Calculate:
 *   - Code used to calculate action speed.
 *
 * ---
 *
 * Base Troop
 * 
 *   Base Troop ID's:
 *   - Select the Troop ID(s) to duplicate page events from for all
 *     other troops.
 *   - More information can be found in the dedicated Help section above.
 *
 * ---
 * 
 * Common Events (on Map)
 * 
 *   Pre-Battle Event:
 *   Post-Battle Event:
 *   Victory Event:
 *   Defeat Event:
 *   Escape Success Event:
 *   Escape Fail Event:
 *   - Queued Common Event to run upon meeting the condition.
 *   - Use to 0 to not run any Common Event at all.
 *   - "Post-Battle Event" will always run regardless.
 *   - If any events are running before the battle, they will continue running
 *     to the end first before the queued Common Events will run.
 *   - These common events only run on the map scene. They're not meant to run
 *     in the battle scene.
 *   - If the "Defeat Event" has a common event attached to it, then random
 *     encounters will be changed to allow defeat without being sent to the
 *     Game Over scene. Instead, the game will send the player to the map scene
 *     where the Defeat Event will run.
 *
 * ---
 *
 * Escape
 * 
 *   JS: Calc Escape Ratio:
 *   - Code used to calculate the escape success ratio.
 * 
 *   JS: Calc Escape Raise:
 *   - Code used to calculate how much the escape success ratio raises upon
 *     each failure.
 * 
 * ---
 * 
 * Switches
 * 
 *   Switch: Critical:
 *   - Turns switch ON if the action performs a critical hit.
 *   - Switch reverts to OFF whenever an action starts.
 *   - If multiple targets/hits are struck, as long as one hit lands a critical
 *     hit, then the switch will remain ON for the rest of the action.
 * 
 *   Switch: Miss/Evade:
 *   - Turns switch ON if the action misses/is evaded.
 *   - Switch reverts to OFF whenever an action starts.
 *   - If multiple targets/hits are struck, as long as one hit fails to land,
 *     then the switch will remain ON for the rest of the action.
 * 
 * ---
 * 
 * Variables
 * 
 *   Variable: Damage:
 *   - Variable records target damage during action.
 *   - Variable reverts to 0 whenever an action starts.
 *   - If multiple targets/hits are struck, the variable will record the total
 *     amount of damage done for the remainder of the action (unless manually
 *     reseting to 0 during an Action Sequence).
 * 
 *   Variable: Healing:
 *   - Variable records target healing during action.
 *   - Variable reverts to 0 whenever an action starts.
 *   - If multiple targets/hits are struck, the variable will record the total
 *     amount of healing done for the remainder of the action (unless manually
 *     reseting to 0 during an Action Sequence).
 * 
 * ---
 *
 * JS: Battle-Related
 * 
 *   JS: Pre-Start Battle:
 *   - Target function: BattleManager.startBattle()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-Start Battle:
 *   - Target function: BattleManager.startBattle()
 *   - JavaScript code occurs after function is run.
 * 
 *   JS: Battle Victory:
 *   - Target function: BattleManager.processVictory()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Escape Success:
 *   - Target function: BattleManager.onEscapeSuccess()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Escape Failure:
 *   - Target function: BattleManager.onEscapeFailure()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Battle Defeat:
 *   - Target function: BattleManager.processDefeat()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Pre-End Battle:
 *   - Target function: BattleManager.endBattle()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-End Battle:
 *   - Target function: BattleManager.endBattle()
 *   - JavaScript code occurs after function is run.
 *
 * ---
 *
 * JS: Turn-Related
 * 
 *   JS: Pre-Start Turn:
 *   - Target function: BattleManager.startTurn()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-Start Turn:
 *   - Target function: BattleManager.startTurn()
 *   - JavaScript code occurs after function is run.
 * 
 *   JS: Pre-End Turn:
 *   - Target function: Game_Battler.prototype.onTurnEnd()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-End Turn:
 *   - Target function: Game_Battler.prototype.onTurnEnd()
 *   - JavaScript code occurs after function is run.
 * 
 *   JS: Pre-Regenerate:
 *   - Target function: Game_Battler.prototype.regenerateAll()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-Regenerate:
 *   - Target function: Game_Battler.prototype.regenerateAll()
 *   - JavaScript code occurs after function is run.
 *
 * ---
 *
 * JS: Action-Related
 * 
 *   JS: Pre-Start Action:
 *   - Target function: BattleManager.startAction()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-Start Action:
 *   - Target function: BattleManager.startAction()
 *   - JavaScript code occurs after function is run.
 * 
 *   JS: Pre-Apply:
 *   - Target function: Game_Action.prototype.apply()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Pre-Damage:
 *   - Target function: Game_Action.prototype.executeDamage()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-Damage:
 *   - Target function: Game_Action.prototype.executeDamage()
 *   - JavaScript code occurs after function is run.
 * 
 *   JS: Post-Apply:
 *   - Target function: Game_Action.prototype.apply()
 *   - JavaScript code occurs after function is run.
 * 
 *   JS: Pre-End Action:
 *   - Target function: BattleManager.endAction()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-End Action:
 *   - DescriTarget function: BattleManager.endAction()
 *   - JavaScript code occurs after function is run.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Battle Layout Settings
 * ============================================================================
 *
 * The Battle Layout Settings Plugin Parameter gives you control over the look,
 * style, and appearance of certain UI elements. These range from the way the
 * Battle Status Window presents its information to the way certain windows
 * like the Party Command Window and Actor Command Window appear.
 *
 * ---
 *
 * Battle Layout Style
 * - The style used for the battle layout.
 * 
 *   Default:
 *   - Shows actor faces in Battle Status.
 * 
 *   List:
 *   - Lists actors in Battle Status.
 * 
 *   XP:
 *   - Shows actor battlers in a stretched Battle Status.
 * 
 *   Portrait:
 *   - Shows portraits in a stretched Battle Status.
 * 
 *   Border:
 *   - Displays windows around the screen border.
 *
 * ---
 *
 * List Style
 * 
 *   Show Faces:
 *   - Shows faces in List Style?
 * 
 *   Command Window Width:
 *   - Determine the window width for the Party and Actor Command Windows.
 *   - Affects Default and List Battle Layout styles.
 *
 * ---
 *
 * XP Style
 * 
 *   Command Lines:
 *   - Number of action lines in the Actor Command Window for the XP Style.
 * 
 *   Sprite Height:
 *   - Default sprite height used when if the sprite's height has not been
 *     determined yet.
 * 
 *   Sprite Base Location:
 *   - Determine where the sprite is located on the Battle Status Window.
 *     - Above Name - Sprite is located above the name.
 *     - Bottom - Sprite is located at the bottom of the window.
 *     - Centered - Sprite is centered in the window.
 *     - Top - Sprite is located at the top of the window.
 *
 * ---
 *
 * Portrait Style
 * 
 *   Show Portraits?:
 *   - Requires VisuMZ_1_MainMenuCore.
 *   - Shows the actor's portrait instead of a face.
 * 
 *   Portrait Scaling:
 *   - If portraits are used, scale them by this much.
 *
 * ---
 *
 * Border Style
 * 
 *   Columns:
 *   - The total number of columns for Skill & Item Windows in the battle scene
 * 
 *   Show Portraits?:
 *   - Requires VisuMZ_1_MainMenuCore.
 *   - Shows the actor's portrait at the edge of the screen.
 * 
 *   Portrait Scaling:
 *   - If portraits are used, scale them by this much.
 *
 * ---
 *
 * Skill & Item Windows
 * 
 *   Middle Layout:
 *   - Shows the Skill & Item Windows in mid-screen?
 * 
 *   Columns:
 *   - The total number of columns for Skill & Item Windows in the battle scene
 *
 * ---
 * 
 * Status Window Elements
 * 
 *   Battler Name:
 *   Gauge 1 (HP):
 *   Gauge 2 (MP):
 *   Gauge 3 (TP):
 *   State Icon:
 *   TPB/ATB Gauge:
 * 
 *     Offset: X/Y:
 *     - Offset this Battle Status Window element's X/Y.
 *     - For X: Negative goes left. Positive goes right.
 *     - For Y: Negative goes up. Positive goes down.
 * 
 *   Window Skin:
 * 
 *     Filename:
 *     - Filename used for the Battle Status Window skin.
 *     - Leave this empty to use the default window skin.
 * 
 *     Hide Window Skin?:
 *     - Hide the window skin for the Battle Status Window?
 * 
 *   Selectable Background:
 * 
 *     Hide Selectable BG?:
 *     - Show/Hide the selectable background box for the Battle Status Window?
 * 
 *   Attachments:
 * 
 *     Back Attachment:
 * 
 *       Filename:
 *       - Filename used for an image to attach to the back of the Battle
 *         Status Window. Leave empty for none.
 * 
 *       Offset: X/Y:
 *       - Offset this Battle Status Window element's X/Y.
 *       - For X: Negative goes left. Positive goes right.
 *       - For Y: Negative goes up. Positive goes down.
 * 
 *     Front Attachment:
 * 
 *       Filename:
 *       - Filename used for an image to attach to the front of the Battle
 *         Status Window. Leave empty for none.
 * 
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Battle Log Settings
 * ============================================================================
 *
 * These Plugin Parameters give you control over how the Battle Log Window, the
 * window shown at the top of the screen in the battle layout, appears, its
 * various properties, and which text will be displayed.
 *
 * The majority of the text has been disabled by default with this plugin to
 * make the flow of battle progress faster.
 *
 * ---
 *
 * General
 * 
 *   Back Color:
 *   - Use #rrggbb for a hex color.
 * 
 *   Max Lines:
 *   - Maximum number of lines to be displayed.
 * 
 *   Message Wait:
 *   - Number of frames for a usual message wait.
 * 
 *   Text Align:
 *   - Text alignment for the Window_BattleLog.
 * 
 *   JS: X, Y, W, H:
 *   - Code used to determine the dimensions for the battle log.
 *
 * ---
 *
 * Start Turn
 * 
 *   Show Start Turn?:
 *   - Display turn changes at the start of the turn?
 * 
 *   Start Turn Message:
 *   - Message displayed at turn start.
 *   - %1 - Turn Count
 * 
 *   Start Turn Wait:
 *   - Number of frames to wait after a turn started.
 *
 * ---
 *
 * Display Action
 * 
 *   Show Centered Action?:
 *   - Display a centered text of the action name?
 * 
 *   Show Skill Message 1?:
 *   - Display the 1st skill message?
 * 
 *   Show Skill Message 2?:
 *   - Display the 2nd skill message?
 * 
 *   Show Item Message?:
 *   - Display the item use message?
 *
 * ---
 *
 * Action Changes
 * 
 *   Show Counter?:
 *   - Display counter text?
 * 
 *   Show Reflect?:
 *   - Display magic reflection text?
 * 
 *   Show Substitute?:
 *   - Display substitute text?
 *
 * ---
 *
 * Action Results
 * 
 *   Show No Effect?:
 *   - Display no effect text?
 * 
 *   Show Critical?:
 *   - Display critical text?
 * 
 *   Show Miss/Evasion?:
 *   - Display miss/evasion text?
 * 
 *   Show HP Damage?:
 *   - Display HP Damage text?
 * 
 *   Show MP Damage?:
 *   - Display MP Damage text?
 * 
 *   Show TP Damage?:
 *   - Display TP Damage text?
 *
 * ---
 *
 * Display States
 * 
 *   Show Added States?:
 *   - Display added states text?
 * 
 *   Show Removed States?:
 *   - Display removed states text?
 * 
 *   Show Current States?:
 *   - Display the currently affected state text?
 * 
 *   Show Added Buffs?:
 *   - Display added buffs text?
 * 
 *   Show Added Debuffs?:
 *   - Display added debuffs text?
 * 
 *   Show Removed Buffs?:
 *   - Display removed de/buffs text?
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Battleback Scaling Settings
 * ============================================================================
 *
 * By default, the battlebacks in RPG Maker MZ scale as if the screen size is
 * a static 816x624 resolution, which isn't always the case. These settings
 * here allow you to dictate how you want the battlebacks to scale for the
 * whole game. These settings CANNOT be changed midgame or per battle.
 *
 * ---
 *
 * Settings
 * 
 *   Default Style:
 *   - The default scaling style used for battlebacks.
 *   - MZ (MZ's default style)
 *   - 1:1 (No Scaling)
 *   - Scale To Fit (Scale to screen size)
 *   - Scale Down (Scale Downward if Larger than Screen)
 *   - Scale Up (Scale Upward if Smaller than Screen)
 * 
 *   JS: 1:1:
 *   JS: Scale To Fit:
 *   JS: Scale Down:
 *   JS: Scale Up:
 *   JS: 1:1:
 *   JS: 1:1:
 *   - This code gives you control over the scaling for this style.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Party Command Window
 * ============================================================================
 *
 * These Plugin Parameters allow you control over how the Party Command Window
 * operates in the battle scene. You can turn disable it from appearing or make
 * it so that it doesn't 
 *
 * ---
 *
 * Command Window
 * 
 *   Style:
 *   - How do you wish to draw commands in the Party Command Window?
 *   - Text Only: Display only the text.
 *   - Icon Only: Display only the icon.
 *   - Icon + Text: Display the icon first, then the text.
 *   - Auto: Determine which is better to use based on the size of the cell.
 * 
 *   Text Align:
 *   - Text alignment for the Party Command Window.
 * 
 *   Fight Icon:
 *   - The icon used for the Fight command.
 * 
 *   Add Auto Battle?:
 *   - Add the "Auto Battle" command to the Command Window?
 * 
 *     Auto Battle Icon:
 *     - The icon used for the Auto Battle command.
 * 
 *     Auto Battle Text:
 *     - The text used for the Auto Battle command.
 * 
 *   Add Options?:
 *   - Add the "Options" command to the Command Window?
 * 
 *     Options Icon:
 *     - The icon used for the Options command.
 * 
 *     Active TPB Message:
 *     - Message that will be displayed when selecting options during the
 *       middle of an action.
 * 
 *   Escape Icon:
 *   - The icon used for the Escape command.
 *
 * ---
 *
 * Access
 * 
 *   Skip Party Command:
 *   - DTB: Skip Party Command selection on turn start.
 *   - TPB: Skip Party Command selection at battle start.
 * 
 *   Disable Party Command:
 *   - Disable the Party Command Window entirely?
 *
 * ---
 *
 * Help Window
 * 
 *   Fight:
 *   - Text displayed when selecting a skill type.
 *   - %1 - Skill Type Name
 * 
 *   Auto Battle:
 *   - Text displayed when selecting the Auto Battle command.
 * 
 *   Options:
 *   - Text displayed when selecting the Options command.
 * 
 *   Escape:
 *   - Text displayed when selecting the escape command.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Actor Command Window
 * ============================================================================
 *
 * These Plugin Parameters allow you to change various aspects regarding the
 * Actor Command Window and how it operates in the battle scene. This ranges
 * from how it appears to the default battle commands given to all players
 * without a custom <Battle Commands> notetag.
 *
 * ---
 *
 * Command Window
 * 
 *   Style:
 *   - How do you wish to draw commands in the Actor Command Window?
 *   - Text Only: Display only the text.
 *   - Icon Only: Display only the icon.
 *   - Icon + Text: Display the icon first, then the text.
 *   - Auto: Determine which is better to use based on the size of the cell.
 * 
 *   Text Align:
 *   - Text alignment for the Actor Command Window.
 * 
 *   Item Icon:
 *   - The icon used for the Item command.
 * 
 *   Normal SType Icon:
 *   - Icon used for normal skill types that aren't assigned any icons.
 *   - Ignore if VisuMZ_1_SkillsStatesCore is installed.
 * 
 *   Magic SType Icon:
 *   - Icon used for magic skill types that aren't assigned any icons.
 *   - Ignore if VisuMZ_1_SkillsStatesCore is installed.
 *
 * ---
 *
 * Battle Commands
 * 
 *   Command List:
 *   - List of battle commands that appear by default if the <Battle Commands>
 *     notetag isn't present.
 *
 *     - Attack 
 *       - Adds the basic attack command.
 * 
 *     - Skills
 *       - Displays all the skill types available to the actor.
 * 
 *     - SType: x
 *     - Stype: name
 *       - Adds in a specific skill type.
 *       - Replace 'x' with the ID of the skill type.
 *       - Replace 'name' with the name of the skill type (without text codes).
 *
 *     - All Skills
 *       - Adds all usable battle skills as individual actions.
 * 
 *     - Skill: x
 *     - Skill: name
 *       - Adds in a specific skill as a usable action.
 *       - Replace 'x' with the ID of the skill.
 *       - Replace 'name' with the name of the skill.
 * 
 *     - Guard
 *       - Adds the basic guard command.
 * 
 *     - Item
 *       - Adds the basic item command.
 * 
 *     - Escape
 *       - Adds the escape command.
 * 
 *     - Auto Battle
 *       - Adds the auto battle command.
 * 
 *     - Party
 *       - Requires VisuMZ_2_PartySystem!
 *       - Switches out the current actor for another.
 * 
 *     - Combat Log
 *       - Requires VisuMZ_4_CombatLog!
 *       - Shows combat log.
 * 
 *     - Talk
 *       - Requires VisuMZ_3_BattleCmdTalk!
 *       - Shows talk command if applicable.
 * 
 *     - Weapon Swap
 *       - Requires VisuMZ_2_WeaponSwapSystem!
 *       - Swaps current weapon for next one.
 * 
 *   Show Command Costs:
 *   - If a battle command has a resource cost, show it?
 *
 * ---
 *
 * Help Window
 * 
 *   Skill Types:
 *   - Text displayed when selecting a skill type.
 *   - %1 - Skill Type Name
 * 
 *   Items:
 *   - Text displayed when selecting the item command.
 * 
 *   Escape:
 *   - Text displayed when selecting the escape command.
 * 
 *   Auto Battle:
 *   - Text displayed when selecting the Auto Battle command.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Actor Battler Settings
 * ============================================================================
 *
 * These Plugin Parameter settings adjust how the sideview battlers behave for
 * the actor sprites. Some of these settings are shared with enemies if they
 * use sideview battler graphics.
 *
 * ---
 *
 * Flinch
 * 
 *   Flinch Distance X:
 *   - The normal X distance when flinching.
 * 
 *   Flinch Distance Y:
 *   - The normal Y distance when flinching.
 * 
 *   Flinch Duration:
 *   - The number of frames for a flinch to complete.
 *
 * ---
 *
 * Sideview Battlers
 * 
 *   Anchor: X:
 *   - Default X anchor for Sideview Battlers.
 * 
 *   Anchor: Y:
 *   - Default Y anchor for Sideview Battlers.
 * 
 *   Chant Style:
 *   - What determines the chant motion?
 *   - Hit type or skill type?
 * 
 *   Offset X:
 *   - Offsets X position where actor is positioned.
 *   - Negative values go left. Positive values go right.
 * 
 *   Offset Y:
 *   - Offsets Y position where actor is positioned.
 *   - Negative values go up. Positive values go down.
 * 
 *   Motion Speed:
 *   - The number of frames in between each motion.
 * 
 *   Priority: Active:
 *   - Place the active actor on top of actor and enemy sprites.
 * 
 *   Priority: Actors:
 *   - Prioritize actors over enemies when placing sprites on top of each other
 * 
 *   Shadow Visible:
 *   - Show or hide the shadow for Sideview Battlers.
 * 
 *   Smooth Image:
 *   - Smooth out the battler images or pixelate them?
 * 
 *   JS: Home Position:
 *   - Code used to calculate the home position of actors.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Enemy Battler Settings
 * ============================================================================
 *
 * These Plugin Parameter settings adjust how enemies appear visually in the
 * battle scene. Some of these settings will override the settings used for
 * actors if used as sideview battlers. Other settings include changing up the
 * default attack animation for enemies, how the enemy select window functions,
 * and more.
 *
 * ---
 *
 * Visual
 * 
 *   Attack Animation:
 *   - Default attack animation used for enemies.
 *   - Use <Attack Animation: x> for custom animations.
 * 
 *   Emerge Text:
 *   - Show or hide the 'Enemy emerges!' text at the start of battle.
 * 
 *   Offset X:
 *   - Offsets X position where enemy is positioned.
 *   - Negative values go left. Positive values go right.
 * 
 *   Offset Y:
 *   - Offsets Y position where enemy is positioned.
 *   - Negative values go up. Positive values go down.
 * 
 *   Smooth Image:
 *   - Smooth out the battler images or pixelate them?
 *
 * ---
 *
 * Select Window
 * 
 *   Any: Last Selected:
 *   - Prioritize last selected enemy over front view or sideview settings?
 * 
 *   FV: Right Priority:
 *   - If using frontview, auto select the enemy furthest right.
 * 
 *   SV: Right Priority:
 *   - If using sideview, auto select the enemy furthest right.
 * 
 * ---
 * 
 * Name:
 * 
 *   Legacy Option:
 *   - Use the legacy version (window) or new version (sprite).
 *   - WARNING: Legacy version is no longer supported for bugs.
 *   - Not all settings available here in the Plugin Parameters will be
 *     available to the legacy version (ie Always Visible and Attach States).
 * 
 *   Font Size:
 *   - Font size used for enemy names.
 * 
 *   Name Position:
 * 
 *     Offset X:
 *     Offset Y:
 *     - Offset the enemy name's position by this much.
 *     - For X: Negative goes left. Positive goes right.
 *     - For Y: Negative goes up. Positive goes down.
 * 
 *   Name: Attach States:
 *   - Attach the enemy's state icon to the enemy name?
 * 
 *     Attach: Offset X:
 *     Attach: Offset Y:
 *     - How much to offset the attached icon's X/Y position by?
 *     - For X: Negative goes left. Positive goes right.
 *     - For Y: Negative goes up. Positive goes down.
 * 
 *   Name Visibility:
 * 
 *     Always Hidden:
 *     - Determines if the enemy name will always be visible.
 *     - Highest priority.
 * 
 *     Always Visible:
 *     - Determines if the enemy name will always be visible.
 *     - Medium priority.
 * 
 *     By Selection?:
 *     - Determines the conditions for enemy name visibility.
 *     - Lowest priority.
 *
 * ---
 *
 * Sideview Battlers
 * 
 *   Allow Collapse:
 *   - Causes defeated enemies with SV Battler graphics to "fade away"
 *     when defeated?
 * 
 *   Anchor: X:
 *   - Default X anchor for Sideview Battlers.
 *   - Use values between 0 and 1 to be safe.
 * 
 *   Anchor: Y:
 *   - Default Y anchor for Sideview Battlers.
 *   - Use values between 0 and 1 to be safe.
 * 
 *   Motion: Idle:
 *   - Sets default idle animation used by Sideview Battlers.
 * 
 *   Shadow Visible:
 *   - Show or hide the shadow for Sideview Battlers.
 * 
 *   Size: Width:
 *   - Default width for enemies that use Sideview Battlers.
 * 
 *   Size: Height:
 *   - Default height for enemies that use Sideview Battlers.
 * 
 *   Weapon Type:
 *   - Sets default weapon type used by Sideview Battlers.
 *   - Use 0 for Bare Hands.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: HP Gauge Settings
 * ============================================================================
 *
 * Settings that adjust the visual HP Gauge displayed in battle.
 *
 * ---
 *
 * Show Gauges For
 * 
 *   Actors:
 *   - Show HP Gauges over the actor sprites' heads?
 *   - Requires SV Actors to be visible.
 * 
 *   Enemies:
 *   - Show HP Gauges over the enemy sprites' heads?
 *   - Can be bypassed with <Hide HP Gauge> notetag.
 * 
 *     Requires Defeat?:
 *     - Requires defeating the enemy once to show HP Gauge?
 *     - Can be bypassed with <Show HP Gauge> notetag.
 * 
 *       Battle Test Bypass?:
 *       - Bypass the defeat requirement in battle test?
 *
 * ---
 *
 * Settings
 * 
 *   Anchor X:
 *   Anchor Y:
 *   - Where do you want the HP Gauge sprite's anchor X/Y to be?
 *     Use values between 0 and 1 to be safe.
 * 
 *   Scale:
 *   - How large/small do you want the HP Gauge to be scaled?
 * 
 *   Offset X:
 *   Offset Y:
 *   - How many pixels to offset the HP Gauge's X/Y by?
 *
 * ---
 *
 * Options
 * 
 *   Add Option?:
 *   - Add the 'Show HP Gauge' option to the Options menu?
 * 
 *   Adjust Window Height:
 *   - Automatically adjust the options window height?
 * 
 *   Option Name:
 *   - Command name of the option.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Action Sequence Settings
 * ============================================================================
 *
 * Action Sequence Plugin Parameters allow you to decide if you want automatic
 * Action Sequences to be used for physical attacks, the default casting
 * animations used, how counters and reflects appear visually, and what the
 * default stepping distances are.
 *
 * ---
 *
 * Automatic Sequences
 * 
 *   Melee Single Target:
 *   - Allow this auto sequence for physical, single target actions?
 * 
 *   Melee Multi Target:
 *   - Allow this auto sequence for physical, multi-target actions?
 *
 * ---
 * 
 * Quality of Life
 * 
 *   Auto Notetag:
 *   - Automatically apply the <Custom Action Sequence> notetag effect to any
 *     item or skill that has a Common Event?
 *   - Any item or skill without a Common Event attached to it will use the
 *     Automatic Action Sequences instead.
 *   - The <Auto Action Sequence> notetag will disable this effect for that
 *     particular skill or item.
 * 
 * ---
 *
 * Cast Animations
 * 
 *   Certain Hit:
 *   - Cast animation for Certain Hit skills.
 * 
 *   Physical:
 *   - Cast animation for Physical skills.
 * 
 *   Magical:
 *   - Cast animation for Magical skills.
 *
 * ---
 *
 * Counter/Reflect
 * 
 *   Counter Back:
 *   - Play back the attack animation used?
 * 
 *   Reflect Animation:
 *   - Animation played when an action is reflected.
 * 
 *   Reflect Back:
 *   - Play back the attack animation used?
 *
 * ---
 *
 * Stepping
 * 
 *   Melee Distance:
 *   - Minimum distance in pixels for Movement Action Sequences.
 * 
 *   Step Distance X:
 *   - The normal X distance when stepping forward.
 * 
 *   Step Distance Y:
 *   - The normal Y distance when stepping forward.
 * 
 *   Step Duration:
 *   - The number of frames for a stepping action to complete.
 *
 * ---
 *
 * ============================================================================
 * Terms of Use
 * ============================================================================
 *
 * 1. These plugins may be used in free or commercial games provided that they
 * have been acquired through legitimate means at VisuStella.com and/or any
 * other official approved VisuStella sources. Exceptions and special
 * circumstances that may prohibit usage will be listed on VisuStella.com.
 * 
 * 2. All of the listed coders found in the Credits section of this plugin must
 * be given credit in your games or credited as a collective under the name:
 * "VisuStella".
 * 
 * 3. You may edit the source code to suit your needs, so long as you do not
 * claim the source code belongs to you. VisuStella also does not take
 * responsibility for the plugin if any changes have been made to the plugin's
 * code, nor does VisuStella take responsibility for user-provided custom code
 * used for custom control effects including advanced JavaScript notetags
 * and/or plugin parameters that allow custom JavaScript code.
 * 
 * 4. You may NOT redistribute these plugins nor take code from this plugin to
 * use as your own. These plugins and their code are only to be downloaded from
 * VisuStella.com and other official/approved VisuStella sources. A list of
 * official/approved sources can also be found on VisuStella.com.
 *
 * 5. VisuStella is not responsible for problems found in your game due to
 * unintended usage, incompatibility problems with plugins outside of the
 * VisuStella MZ library, plugin versions that aren't up to date, nor
 * responsible for the proper working of compatibility patches made by any
 * third parties. VisuStella is not responsible for errors caused by any
 * user-provided custom code used for custom control effects including advanced
 * JavaScript notetags and/or plugin parameters that allow JavaScript code.
 *
 * 6. If a compatibility patch needs to be made through a third party that is
 * unaffiliated with VisuStella that involves using code from the VisuStella MZ
 * library, contact must be made with a member from VisuStella and have it
 * approved. The patch would be placed on VisuStella.com as a free download
 * to the public. Such patches cannot be sold for monetary gain, including
 * commissions, crowdfunding, and/or donations.
 *
 * ============================================================================
 * Credits
 * ============================================================================
 * 
 * If you are using this plugin, credit the following people in your game:
 * 
 * Team VisuStella
 * * Yanfly
 * * Arisu
 * * Olivia
 * * Irina
 *
 * ============================================================================
 * Changelog
 * ============================================================================
 * 
 * Version 1.50: November 4, 2021
 * * Bug Fixes!
 * ** <Seal Attack> and <Seal Guard> should no longer be bypassed by
 *    auto-battle status. Fix made by Yanfly.
 * 
 * Version 1.49: October 28, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** Action Sequence: MOTION: Freeze Motion Frame will now only show weapons
 *    when using a motion that is named either "attack", "thrust", "swing", or
 *    "missile". Update made by Irina.
 * ** Fail safe added to prevent Scene_Battle going into unsupported scenes
 *    like Scene_Equip and Scene_Skill. Update made by Olivia.
 * * New Feature!
 * ** New Action Sequence Plugin Command added by Arisu and sponsored by Anon:
 * *** MECH: Once Parallel
 * **** Plays a Common Event parallel to the battle event once without
 *      repeating itself when done.
 * **** When exiting battle scene, all Once Parallels are cleared.
 * **** Once Parallels are not retained upon reentering the scene.
 * **** Once Parallels are not stored in memory and cannot be saved.
 * 
 * Version 1.48: October 21, 2021
 * * Feature Update!
 * ** Animations are now played on top of battlers in the Front View XP Battle
 *    Layout appearance. Update made by Irina.
 * ** Battle Log, if decided to be shown, now updates faster. Update by Irina.
 * ** Default Critical Damage Bonus increase is now updated to account for
 *    HP Healing and MP Recovery. To update this, create a new project, with
 *    the newest version of Battle Core installed. Copy over the Plugin
 *    Parameters for the Damage Settings > Critical Hits > JS: Damage Formula
 *    to your own project's version. Update made by Irina.
 * 
 * Version 1.47: October 14, 2021
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * * Feature Update!
 * ** Back attachment sprites are now automatically updated with sprite
 *    battlers to be shifted towards the very back.
 * 
 * Version 1.46: September 23, 2021
 * * Bug Fixes!
 * ** Fixed problem with skills and items without action sequences preventing
 *    actions from occurring. Fix made by Yanfly.
 * 
 * Version 1.45: September 17, 2021
 * * Bug Fixes!
 * ** <JS Pre-End Action> and <JS Post-End Action> effects now have multiple
 *    checks to make sure that they don't launch multiple times when a battler
 *    without actions has a turn after one that does. Fix made by Olivia.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Action Sequence notetags added by Yanfly and Arisu:
 * *** <Common Event Key: name>
 * *** <Common Event Keys: name, name, name>
 * *** <Common Event Keys>
 *      key
 *      key
 *      key
 *     </Common Event Keys>
 * **** Will generate Common Events for the skill/item with a corresponding
 *      key.
 * **** More information will be explained inside of the help file.
 * **** This feature is made for make the process of sharing Action Sequences
 *      to become easier without needing to line up Common Event ID's.
 * 
 * Version 1.44: August 20, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Action Sequence added by Irina and sponsored by Anon.
 * *** "ANIM: Play at Coordinate"
 * **** Plays an animation on the screen at a specific x, y coordinate even if
 *      there is no sprite attached.
 * **** Requires VisuMZ_0_CoreEngine!
 * 
 * Version 1.43: July 23, 2021
 * * Feature Update!
 * ** Immortality now works different with instant death mechanics. Skill
 *    effects that apply instant death or attack states that apply instant
 *    death will now trigger a flag instead of cancelling immortality. The
 *    flag will remain until immortality is manually cancelled via Action
 *    Sequence and then proc the death effect. This way, animations can remain
 *    to the end with instant death mechanics in mind. This does not affect
 *    script calls.
 * 
 * Version 1.42: July 16, 2021
 * * Bug Fixes!
 * ** Added another fail safe for empty common events used for pre-battle
 *    common events. Fix made by Olivia.
 * 
 * Version 1.41: July 2, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * ** Added entries to <Battle Command> notetags and Plugin Parameters for
 *    "Party", "Combat Log", and "Weapon Swap" which weren't updated before.
 * * Optimization Update!
 * ** Plugin should run more optimized.
 * * New Features!
 * ** New Action Sequence added by Arisu:
 * *** MECH: Enemy Escape
 * **** Causes the enemy unit(s) to escape.
 * 
 * Version 1.40: June 25, 2021
 * * Bug Fixes!
 * ** Transformations from static enemies to and from animated SV enemies
 *    should no longer show both sprites. Fix made by Irina.
 * * Compatibility Update
 * ** Compatibility update with RPG Maker MZ 1.3.0+.
 * 
 * Version 1.39: June 18, 2021
 * * Bug Fixes!
 * ** MOVE: Home Reset should no longer trigger an end action function and
 *    cause plugins such as "Boost Action" to malfunction. Fix made by Olivia.
 * * Compatibility Update
 * ** Added compatibility functionality for future plugins.
 * * Documentation Update!
 * ** Help file updated for updated features.
 * * Feature Update!
 * ** <Battle Layout: x> Troop Name tags can now work with comment tags. Update
 *    made by Irina.
 * ** Random encounter lists are now better shuffled for more variety with how
 *    the RNG seed works. Update made by Arisu.
 * 
 * Version 1.38: June 11, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Updates!
 * ** Location calculations will now be based off the a battler's base position
 *    in order for animations, popups, and other aspects to line up properly
 *    when scaled. Update made by Irina.
 * ** Plugin Parameters for Enemy Battler Settings > Name have been rearranged
 *    for better organization. Update by Olivia.
 * * New Features!
 * ** New Notetags added by Olivia and sponsored by NSG:
 * *** <Sideview Shadow Scale X: x%>
 * *** <Sideview Shadow Scale X: x.y>
 * *** <Sideview Shadow Scale Y: x%>
 * *** <Sideview Shadow Scale Y: x.y>
 * **** These new notetags allow you to adjust the X and Y scale of the SV
 *      shadow sprite separately.
 * ** New Plugin Parameters added by Olivia and sponsored by NSG:
 * *** Enemy Battler Settings > Name > Name Visibility > Always Hidden
 * *** Enemy Battler Settings > Name > Name Visibility > By Selection?
 * **** Choose to have the names always hidden or by selection.
 * **** These are adjusted on a priority list.
 * 
 * Version 1.37: May 21, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New notetags added by Olivia.
 * *** <Command Require Learn>
 * *** <Command Require Access>
 * **** These two commands determine the visibility of a battle command by
 *      whether or not the skill has been learned or accessible.
 * * Feature Update!
 * ** For those using TPB, each battler's regeneration phase will no longer
 *    tick multiple times in a single frame to prevent irregularities. Update
 *    made by Olivia.
 * 
 * Version 1.36: May 14, 2021
 * * Bug Fixes!
 * ** Reversed an HP/MP regeneration bug that was incorrectly reported for TPB.
 *    Fix made by Olivia.
 * * Documentation Update
 * ** Added "TPB/ATB Active Battle Actor Shifting" to Major Changes section:
 * *** This change has been active since the start of this plugin. It was not
 *     documented until now.
 * *** Pressing cancel on the Actor Command Window no longer switches between
 *     actors with a full TPB/ATB gauge before reaching the Party Command
 *     Window. This is to accomplish a couple of things: 1) reduce the number
 *     of button presses to reach the Party Command Window and 2) to prevent
 *     motion resets and disrupting action sequences. If this feature is vital
 *     to your battle system, we recommend that you do not use this plugin or
 *     any of the Battle Core-required plugins.
 * ** Feature Updates
 * *** Distortion sprite Y calculations will now be rounded upward for better
 *     visuals and prevent odd pixelation effects. Update made by Irina.
 * 
 * Version 1.35: May 7, 2021
 * * Bug Fixes!
 * ** Pre-Battle Common Events without a wait command at the end should no
 *    longer lock up by coincidentally pressing the menu key at the same time.
 *    Fix made by Olivia.
 * * Feature Update!
 * ** Added an extra check for TPB-based battle systems to not run turn end
 *    functions when it's not actually the actual turn end timing. Update made
 *    by Olivia.
 * ** "Damage Styles" plugin parameters are now moved to the top of the
 *    Damage Settings category. This should make it easier to acknowledge the
 *    existence of and not have it be an unknown entity. Update made by Irina.
 * 
 * Version 1.34: April 23, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** Uses a better algorithm for determining shadow positioning. Update made
 *    by Olivia.
 * * New Features!
 * ** New additions made for Projectile action sequences.
 * ** "Start Location" and "Goal Location" now have "Target Location" parameter
 *    to determine which part of the target's body to send the projectile from
 *    or towards. Added by Olivia.
 * ** Requires VisuMZ_1_BattleCore version 1.34 to have affect.
 * 
 * Version 1.33: April 9, 2021
 * * Bug Fixes!
 * ** Skill costs should now be displayed on battle commands again. Bug fix
 *    made by Olivia.
 * ** Pre-Battle Common Events should no longer cause stalling when used with
 *    specific event commands. Bug fix made by Olivia.
 * * Compatibility Update!
 * ** Added "Weapon Swap" to the list of battle commands that can be added.
 * * Documentation Update!
 * ** Added "Weapon Swap" and "Combat Log" to the list of <Battle Commands> in
 *    the notetags section.
 * ** Help file updated for new features.
 * * New Features!
 * ** New notetags added by Olivia:
 * *** <Sideview Shadow Scale: x%> and <Sideview Shadow Scale: x.y>
 * **** Used for: Actor, Enemy Notetags
 * **** Adjusts the scaling size of the sideview battler's shadow.
 * 
 * Version 1.32: April 2, 2021
 * * Feature Update!
 * ** Sideview battler sprites when using front view will now factor in the
 *    window padding and appear properly centered to their focus point. Update
 *    made by Olivia.
 * 
 * Version 1.31: March 26, 2021
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * * Documentation Update!
 * ** Added "VisuStella MZ Compatibility" section for detailed compatibility
 *    explanations with the VisuMZ_3_BoostAction plugin.
 * 
 * Version 1.30: March 19, 2021
 * * Documentation Update!
 * ** Help file updated for updated features.
 * * Feature Update!
 * ** <JS Targets> is now updated to include the default set of targets
 *    selected by the skill/item's original scope. Update made by Yanfly.
 * *** If you wish to clear it out, simply do 'targets = []' first.
 * 
 * Version 1.29: March 12, 2021
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Plugin Parameter added by Olivia:
 * *** Plugin Parameters > Enemy Battler Settings > Name > Legacy Option
 * **** Use the legacy version (window) or new version (sprite).
 * **** WARNING: Legacy version is no longer supported for bugs.
 * **** Not all settings available here in the Plugin Parameters will be
 *      available to the legacy version (ie Always Visible and Attach States).
 * 
 * Version 1.28: March 5, 2021
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Plugin Parameters added by Arisu:
 * *** Plugin Parameters > Actor Command > Show Command Costs
 * **** If you don't want to show skill costs for your commands in the Actor
 *      Command Window, you can now hide them.
 * ** New Plugin Parameters added by Irina:
 * *** Plugin Parameters > Battle Layout Settings > Status Window Elements
 * *** Battle Layout Settings > Status Window Elements > Battler Name
 * *** Battle Layout Settings > Status Window Elements > Gauge 1 (HP)
 * *** Battle Layout Settings > Status Window Elements > Gauge 2 (MP)
 * *** Battle Layout Settings > Status Window Elements > Gauge 3 (TP)
 * *** Battle Layout Settings > Status Window Elements > State Icon
 * *** Battle Layout Settings > Status Window Elements > TPB/ATB Gauge
 * **** These new Plugin Parameters allow you to offset the positions of the
 *      various Battle Status Window elements. Their base positions will be
 *      calculated by the Battle Layout used and then offset from there.
 * *** Battle Layout Settings > Status Window Elements > Window Skin
 * **** These settings allow you to set a specific window skin for the
 *      Battle Status Window or hide it from view completely.
 * *** Battle Layout Settings > Status Window Elements > Selectable Background
 * **** This option allows you to hide the black box that comes with the
 *      majority of selectable elements found in RPG Maker MZ in case it does
 *      not fit with how you want the Battle Status Window to look.
 * *** Battle Layout Settings > Status Window Elements > Back Attachment
 * *** Battle Layout Settings > Status Window Elements > Front Attachment
 * **** These settings allow you to attach images to the back/front of the
 *      Battle Status Window from the img/system/ folder.
 * **** You may offset X and Y positions for them as well.
 * ** New Plugin Parameters added by Olivia:
 * *** Plugin Parameters > Enemy Settings > Name: Always Visible
 * **** Determines if the enemy name will always be visible.
 * *** Plugin Parameters > Enemy Settings > Name: Attach States
 * **** Attach the enemy's state icon to the enemy name?
 * *** Plugin Parameters > Enemy Settings > Attach: Offset X/Y
 * **** Offset the attached state icon's position.
 * * Feature Update!
 * ** Switched drawing enemy names on the screen from window to sprite to
 *    reduce lag and for better screen positioning accuracy especially during
 *    screen zooming. Update by Olivia.
 * 
 * Version 1.27: February 26, 2021
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Plugin Parameters added by Irina and sponsored by AndyL:
 * *** Plugin Parameters > Mechanics Settings > Switches > Switch: Critical
 * *** Plugin Parameters > Mechanics Settings > Switches > Switch: Miss/Evade
 * **** Turns Switches ON if the action performs a critical hit, misses, or is
 *      evaded at any point.
 * **** Switch reverts to OFF whenever an action starts.
 * **** If multiple targets/hits are struck, as long as one hit respectively
 *      lands a critical hit, fails to land, then the switch will remain ON for
 *      the rest of the action.
 * *** Plugin Parameters > Mechanics Settings > Variables > Variable: Damage
 * *** Plugin Parameters > Mechanics Settings > Variables > Variable: Healing
 * **** Variable records target damage/healing during action.
 * **** Variable reverts to 0 whenever an action starts.
 * **** If multiple targets/hits are struck, the variable will record the total
 *      amount of damage/healing done for the remainder of the action (unless
 *      manually reseting to 0 during an Action Sequence).
 * 
 * Version 1.26: February 19, 2021
 * * Bug Fixes!
 * ** Battles with branching event paths found within a conditional branch or
 *    choice tree will no longer be skipped over. Fix made by Arisu.
 * * Compatibility Update
 * ** Returning to the battle scene from the options scene in a Tpb-base battle
 *    system now links the current actor. Update by Irina.
 * 
 * Version 1.25: February 5, 2021
 * * Compatibility Update
 * ** Added compatibility update with VisuStella MZ Skills and States Core's
 *    Plugin Parameter > State Settings > Action End Update
 * * Feature Update!
 * ** <Common Event: name> notetag no longer requires <Custom Action Sequence>
 *    notetag if the Plugin Parameter: Auto Notetag is enabled.
 * 
 * Version 1.24: January 29, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** MOVE: Move To Point and MOVE: Move To Target(s) Action Sequences'
 *    "Offset Adjustment" normal setting will now factor in Offset X and
 *    Offset Y positions unlike before where it cancels them. Update by Irina.
 * * New Features!
 * ** New notetag added by Arisu:
 * *** <Common Event: name>
 * **** Battle only: calls forth a Common Event of a matching name.
 * **** This is primarily used for users who are reorganizing around their
 *      Common Events and would still like to have their skills/items perform
 *      the correct Action Sequences in case the ID's are different.
 * 
 * Version 1.23: January 22, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** ACSET: All Targets Action Set and ACSET: Each Target Action Set updated
 * *** New parameter added: Dual/Multi Wield?
 * **** Add times struck based on weapon quantity equipped?
 * * New Features!
 * ** Dual Wielding now functions differently. Made by Olivia.
 * *** Previously, RPG Maker MZ had "Dual Wielding" attack using both weapon
 *     animations at once, with the combined ATK of each weapon. It's confusing
 *     to look at and does not portray the nature of "Dual Wielding".
 * *** Dual Wielding, or in the case of users adding in third and fourth
 *     weapons, Multi Wielding is now changed. Each weapon is displayed
 *     individually, each producing its own attack animation, showing each
 *     weapon type, and applying only that weapon's ATK, Traits, and related
 *     effects. It is no longer a combined effect to display everything at once
 *     like RPG Maker MZ default.
 * *** If an actor has multiple weapon slots but some of them are unequipped,
 *     then the action will treat the attack as a single attack. There will be
 *     no barehanded attack to add on top of it. This is to match RPG Maker
 *     MZ's decision to omit a second animation if the same scenario is
 *     applied.
 * ** New Action Sequence Plugin Commands added by Yanfly
 * *** ANIM: Attack Animation 2+
 * **** Plays the animation associated with the user's 2nd weapon.
 *      Plays nothing if there is no 2nd weapon equipped.
 * ** New Action Sequence Plugin Commands added by Olivia
 * *** WEAPON: Clear Weapon Slot
 * *** WEAPON: Next Weapon Slot
 * *** WEAPON: Set Weapon Slot
 * **** These are Action Sequence Plugin Commands for devs who want finer
 *      control over Dual/Multi Wielding weapons.
 * 
 * Version 1.22: January 15, 2021
 * * Compatibility Update
 * ** Compatibility with "All Skills" Actor Command should now work with the
 *    Skills & States Core hide skill notetags.
 * 
 * Version 1.21: January 8, 2021
 * * Bug Fixes!
 * ** "MOVE: Home Reset" Plugin Command Action Sequence should work properly.
 *    Fix made by Yanfly.
 * * Documentation Update!
 * ** Added documentation for new feature(s)!
 * * New Features!
 * ** New Notetag snuck in by Arisu
 * *** <Auto Action Sequence>
 * **** Used for those who have the "Auto Notetag" Plugin Parameter enabled and
 *      just want to use an automatic Action Sequence instead.
 * ** New Plugin Parameter snuck in by Arisu!
 * *** Plugin Parameters > Action Sequences > Quality of Life > Auto Notetag
 * **** Automatically apply the <Custom Action Sequence> notetag effect to any
 *      item or skill that has a Common Event?
 * **** Any item or skill without a Common Event attached to it will use the
 *      Automatic Action Sequences instead.
 * **** The <Auto Action Sequence> notetag will disable this effect for that
 *      particular skill or item.
 * ** Arisu, you're going to be responsible for any bugs these may cause.
 * *** Bring it!!!!
 * **** And handling any bug report emails that are sent because this was
 *      turned on by accident.
 * ***** Please read the documentation, guys!
 * 
 * Version 1.20: January 1, 2021
 * * Bug Fixes!
 * ** For TPB Active or ATB Active, inputting actors that have received damage
 *    will return back to place after flinching. Fix made by Yanfly.
 * * Documentation Update!
 * ** Added documentation for new feature(s)!
 * * New Features!
 * ** New notetags added by Yanfly:
 * *** <Battle Portrait Offset: +x, +y>
 * *** <Battle Portrait Offset X: +x>
 * *** <Battle Portrait Offset Y: +y>
 * **** This is used with the "Portrait" and "Border" Battle Layouts.
 * **** Offsets the X and Y coordinates for the battle portrait.
 * 
 * Version 1.19: December 25, 2020
 * * Bug Fixes!
 * ** Removing a state from a Sideview Enemy during the middle of their a non-
 *    looping motion will no longer reset their motion to neutral.
 *    Fix made by Yanfly.
 * * Compatibility Update!
 * ** Plugins should be more compatible with one another.
 * * Documentation Update!
 * ** Added documentation for updated feature(s)!
 * * Feature Update!
 * ** Action Sequence "PROJECTILE: Icon" now supports code for the "Icon"
 *    parameter. Update made by Yanfly.
 * 
 * Version 1.18: December 18, 2020
 * * Bug Fixes!
 * ** For TPB Active or ATB Active, inputting actors will no longer step back
 *    after an enemy's action is finished. Fix made by Yanfly and Shiro.
 * * Documentation Update!
 * ** Added documentation for new feature(s)!
 * * New Features!
 * ** Action Sequence "BTLOG: Add Text" is updated for the convenience of a new
 *    option to quickly copy the displayed text to the VisuStella MZ Combat Log
 *    if that plugin is installed. Added by Yanfly.
 * 
 * Version 1.17: December 11, 2020
 * * Bug Fixes!
 * ** Common Events in TPB Active that cause forced actions will no longer
 *    cause currently inputting actors that match the forced action battler to
 *    crash the game. Fix made by Yanfly and Shiro.
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * ** Plugins should be more compatible with one another.
 * * Documentation Update!
 * ** Added documentation for new feature(s)!
 * * Feature Update!
 * ** Action Sequence Impact Action Sequences "Shockwave from Each Target(s)",
 *    "Shockwave from Target(s) Center", and "Zoom Blur at Target(s) Center"
 *    now have "Offset X" and "Offset Y" plugin parameters. Added by Yanfly.
 * ** Action Sequence "MOVE: Move To Target(s)" is now changed so that if the
 *    "Melee Distance" value is set to 0, battlers will no longer stand a half
 *    body distance away. Added by Yanfly.
 * 
 * Version 1.16: December 4, 2020
 * * Bug Fixes!
 * ** Bug fixes made for the RPG Maker MZ base code. If a battler has no
 *    actions, then their action speed will not be Infinity. Fix by Olivia.
 * * Compatibility Update!
 * ** Plugins should be more compatible with one another.
 * * Optimization Update!
 * ** Plugin should run more optimized.
 * 
 * Version 1.15: November 29, 2020
 * * Bug Fixes!
 * ** Completely replacing the whole party at once will no longer cause the
 *    battle system to crash. Fix made by Olivia.
 * ** Pre-Battle Common Events will no longer cancel out any win/lose branches.
 *    Fix made by Arisu.
 * * Feature Update!
 * ** Custom Action Sequences will no longer close the Actor Command Input
 *    window unless absolutely necessary (like for Show Message events) during
 *    Active TPB/ATB. Change made by Arisu.
 * 
 * Version 1.14: November 22, 2020
 * * Feature Update!
 * ** Natural Miss and Evasion motions now have flinch distance.
 *    Added by Yanfly.
 * 
 * Version 1.13: November 15, 2020
 * * Optimization Update!
 * ** Plugin should run more optimized.
 * 
 * Version 1.12: November 8, 2020
 * * Bug Fixes!
 * ** Failsafes added to prevent common events from running if they're empty.
 *    Fix made by Irina.
 * ** Skip Party Command will now work properly with TPB-based battle systems.
 *    Fix made by Yanfly.
 * * Compatibility Update!
 * ** Plugins should be more compatible with one another.
 * * Documentation Update!
 * ** In preparation for upcoming VisuStella MZ plugins.
 * 
 * Version 1.11: November 1, 2020
 * * Compatibility Update!
 * ** Plugins should be more compatible with one another.
 * * Documentation Update!
 * ** Added clarity for the Plugin Parameters for the Common Events settings
 *    found in the mechanics section. The common events are only meant to run
 *    in the map scene and not for the battle scene. Update made by Irina.
 * * Feature Update!
 * ** The Plugin Parameter for Mechanics, Common Events (on Map), Defeat Event
 *    now has updated functionality. If this has a common event attached to it,
 *    then losing to random encounters will no longer send the player to the
 *    Game Over scene, but instead, send the player back to the map scene,
 *    where the Defeat Common Event will run. Update made by Irina.
 * 
 * Version 1.10: October 25, 2020
 * * Documentation Update!
 * ** Added documentation for new feature(s)!
 * * New Features!
 * ** New Action Sequence Plugin Command added by Olivia:
 * *** MECH: Custom Damage Formula
 * **** Changes the current action's damage formula to custom.
 *      This will assume the MANUAL damage style.
 * ** New Notetag added by Irina:
 * ** New Plugin Parameters added by Irina:
 * *** Plugin Parameters > Battleback Scaling Settings
 * **** These settings allow you to adjust how battlebacks scale to the screen
 *      in the game.
 * *** <Battler Sprite Grounded>
 * **** Prevents the enemy from being able to jumping and/or floating due to
 *      Action Sequences but still able to move. Useful for rooted enemies.
 * 
 * Version 1.09: October 18, 2020
 * * Bug Fixes!
 * ** Exiting out of the Options menu scene or Party menu scene will no longer
 *    cause party members to reset their starting position. Fix made by Arisu
 * * Documentation Update!
 * ** Added documentation for new feature(s)!
 * ** There was a documentation error with <JS Pre-Regenerate> and
 *    <JS Post-Regenerate>. Fix made by Yanfly.
 * *** Before, these were written as <JS Pre-Regenerate Turn> and
 *     <JS Post-Regenerate Turn>. The "Turn" part of the notetag has been
 *     removed in the documentation.
 * * Feature Update!
 * ** Damage sprites on actors are now centered relative to the actor's anchor.
 *    Change made by Yanfly.
 * * New Features!
 * ** New Action Sequence Plugin Command added by Yanfly:
 * *** MECH: Variable Popup
 * **** Causes the unit(s) to display a popup using the data stored inside
 *      a variable.
 * 
 * Version 1.08: October 11, 2020
 * * Bug Fixes!
 * ** Dead party members at the start of battle no longer start offscreen.
 *    Fix made by Arisu.
 * ** Removed party members from battle no longer count as moving battlers.
 *    Fix made by Yanfly.
 * ** Using specific motions should now have the weapons showing and not
 *    showing properly. Fix made by Yanfly.
 * 
 * Version 1.07: October 4, 2020
 * * Bug Fixes!
 * ** Adding and removing actors will now refresh the battle status display.
 *    Fix made by Irina.
 * ** Adding new states that would change the affected battler's state motion
 *    will automatically refresh the battler's motion. Fix made by Irina.
 * ** Boss Collapse animation fixed and will sink into the ground.
 *    Fix made by Irina.
 * ** Failsafes added for certain animation types. Fix made by Yanfly.
 * ** Freeze Motion for thrust, swing, and missile animations will now show the
 *    weapons properly. Fix made by Yanfly.
 * ** The Guard command will no longer display the costs of the Attack command.
 *    Fix made by Irina.
 * * Documentation Update!
 * ** Updated help file for newly added plugin parameters.
 * * Feature Updates!
 * ** When using the Change Battleback event command in battle, the game client
 *    will wait until both battlebacks are loaded before changing the both of
 *    them so that the appearance is synched together. Change made by Yanfly.
 * * New Features!
 * ** New plugin parameters added by Irina!
 * *** Plugin Parameters > Actor Battler Settings > Chant Style
 * **** What determines the chant motion? Hit type or skill type?
 * 
 * Version 1.06: September 27, 2020
 * * Bug Fixes!
 * ** Enemy Battler Plugin Parameter "Shadow Visible" should now work again.
 *    Fix made by Irina.
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins. Added by Yanfly.
 * * Documentation Update!
 * ** Updated the help file for all the new plugin parameters.
 * * Feature Update!
 * ** Action Sequence "MECH: HP, MP, TP" will now automatically collapse an
 *    enemy if it has been killed by the effect.
 * ** All battle systems for front view will now have damage popups appear
 *    in front of the status window instead of just the Portrait battle layout.
 *    Update made by Yanfly.
 * * New Features!
 * ** New Action Sequence Plugin Commands from Irina!
 * *** MOTION: Clear Freeze Frame
 * *** MOTION: Freeze Motion Frame
 * **** You can freeze a battler's sprite's motion with a specific frame.
 * ** New notetags for Maps and name tags for Troops added by Yanfly!
 * *** <Battle Layout: type> to change the battle layout style used for
 *     specific maps and/or troops.
 * ** New plugin parameters added by Yanfly!
 * *** Plugin Parameters > Battle Layout Settings > Command Window Width
 * **** This plugin parameter lets you adjust the window width for Party and
 *      Actor Command windows in the Default and List Battle Layout styles.
 * *** Plugin Parameters > Enemy Battler Settings > Name: Offset X
 * *** Plugin Parameters > Enemy Battler Settings > Name: Offset Y
 * **** These plugin parameters allow you to offset the position of the enemy
 *      name positions on the screen by a specific amount.
 * 
 * Version 1.05: September 20, 2020
 * * Bug Fixes!
 * ** Actors now use their casting or charging animations again during TPB/ATB.
 *    Fix made by Yanfly.
 * ** Defeat requirement for enemies will no longer crash the game if turned on
 *    after creating
 * ** Escaping animation no longer has actors stay in place. Fixed by Yanfly.
 * ** Failsafes added for newly added weapon types that have not been adjusted
 *    in the Database > System 2 tab. Fixed by Irina.
 * ** Shadows now appear under the actor sprites. Fix made by Yanfly.
 * ** Victory during TPB will no longer cancel the victory animations of
 *    actors that will have their turn after. Fixed by Yanfly.
 * * Documentation Update!
 * ** All Anchor Plugin Parameter descriptions now state to use values between
 *    0 and 1 to be safe. Update made by Yanfly.
 * * Feature Update!
 * ** During Active TPB / ATB, canceling out of the actor command window will
 *    go directly into the party window without having to sort through all of
 *    the available active actors.
 * ** Going from the Party Command Window's Fight command will immediately
 *    return back to the actor command window that was canceled from.
 * * New Features!
 * ** Action Sequence Plugin Command "MOVE: Spin/Rotate" has been updated.
 * *** A new parameter has been added: "Revert Angle on Finish"
 * *** Added by Yanfly.
 * ** New plugin parameters have been added to Damage Settings.
 * *** Appear Position: Selects where you want popups to appear relative to the
 *     battler. Head, Center, Base. Added by Yanfly.
 * *** Offset X: Sets how much to offset the sprites by vertically.
 *     Added by Yanfly.
 * *** Offset Y: Sets how much to offset the sprites by horizontally.
 *     Added by Yanfly.
 * ** New plugin parameters have been added to Actor Battler Settings.
 * *** Priority: Active - Place the active actor on top of actor and
 *     enemy sprites. Added by Yanfly.
 * *** Priority: Actors - Prioritize actors over enemies when placing 
 *     sprites on top of each other. Added by Yanfly.
 * 
 * Version 1.04: September 13, 2020
 * * Bug Fixes!
 * ** Active Battler Sprites now remain on top and won't be hidden behind
 *    other sprites for better visual clarity. Fix made by Arisu.
 * ** Collapsing battlers will now show the dead motion properly. Fix made by
 *    Olivia.
 * ** Dead battlers can no longer be given immortality. Fix made by Olivia.
 * ** Going into the Options menu with no battleback set will no longer set a
 *    battle snapshot.
 * ** HP Gauges for Sideview Enemies are no longer flipped! Fix made by Yanfly.
 * ** Moving a dead battler would no longer reset their animation. Fix made by
 *    Olivia.
 * ** Pre-Battle Common Events now work with events instead of just random
 *    encounters. Fix made by Yanfly.
 * ** Sideview Enemy shadows no longer twitch. Fix made by Irina.
 * * Documentation Updates!
 * ** Added further explanations for Anchor X and Anchor Y plugin parameters.
 *    This is because there's a lot of confusion for users who aren't familiar
 *    with how sprites work. Added by Irina.
 * ** <Magic Reduction: x> notetag updated to say magical damage instead of
 *    physical damage. Fix made by Yanfly.
 * * New Features!
 * ** Additional Action Sequence Plugin Commands have been added in preparation
 *    of upcoming plugins! Additions made by Irina.
 * *** Action Sequences - Angle (for VisuMZ_3_ActSeqCamera)
 * *** Action Sequences - Camera (for VisuMZ_3_ActSeqCamera)
 * *** Action Sequences - Skew (for VisuMZ_3_ActSeqCamera)
 * *** Action Sequences - Zoom (for VisuMZ_3_ActSeqCamera)
 * ** Additional Action Sequence Plugin Commands have been made available now
 *    and added to Battle Core! Additions made by Irina.
 * *** MOVE: Scale/Grow/Shrink
 * *** MOVE: Skew/Distort
 * *** MOVE: Spin/Rotate
 * *** MOVE: Wait For Scale
 * *** MOVE: Wait For Skew
 * *** MOVE: Wait For Spin
 * ** Plugin Parameters Additions. Additions made by Irina.
 * *** Plugin Params > Actor Battler Settings > Offset X
 * *** Plugin Params > Actor Battler Settings > Offset Y
 * *** Plugin Params > Actor Battler Settings > Smooth Image
 * *** Plugin Params > Enemy Battler Settings > Offset X
 * *** Plugin Params > Enemy Battler Settings > Offset Y
 * *** Plugin Params > Enemy Battler Settings > Smooth Image
 * 
 * Version 1.03: September 6, 2020
 * * Bug Fixes!
 * ** Animated Battlers will refresh their motions from the death motion once
 *    they're revived instead of waiting for their next input phase. Fix made
 *    by Yanfly.
 * ** Battle Log speed sometimes went by too fast for certain enabled messages.
 *    Wait timers are now added to them, like state results, buff results, and
 *    debuff results. Fix made by Yanfly.
 * ** Boss Collapse animation now works properly. Fix made by Yanfly.
 * ** Freeze fix for TPB (Wait) if multiple actors get a turn at the same time.
 *    Fix made by Olivia.
 * ** Pressing cancel on a target window after selecting a single skill no
 *    longer causes the status window to twitch.
 * ** Sideview Enemies had a split frame of being visible if they were to start
 *    off hidden in battle. Fix made by Shaz.
 * * Compatibility Update:
 * ** Battle Core's Sprite_Damage.setup() function is now separated fro the
 *    default to allow for better compatibility. Made by Yanfly.
 * * Documentation Update:
 * ** Inserted more information for "Damage Popups" under "Major Changes"
 * * New Features!
 * ** <Magic Penetration: x>, <Magic Penetration: x%> notetags added.
 * ** <Magic Reduction: x>, <Magic Reduction: x%> notetags added.
 * ** <Battle UI Offset: +x, +y>, <Battle UI Offset X: +x>, and
 *    <Battle UI Offset Y: +y> notetags added for adjusting the positions of
 *    HP Gauges and State Icons.
 * *** Notetags added by Yanfly.
 * 
 * Version 1.02: August 30, 2020
 * * Bug Fixes!
 * ** Failsafes added for parsing battle targets. Fix made by Yanfly.
 * ** Immortality is no longer ignored by skills/items with the Normal Attack
 *    state effect. Fix made by Yanfly.
 * ** Miss and Evasion sound effects work again! Fix made by Yanfly.
 * ** Selecting "Escape" from the Actor Command Window will now have the
 *    Inputting Battler show its escape motion. Fix made by Yanfly.
 * ** Wait for Movement now applies to SV Enemies. Fix made by Yanfly.
 * * New Features!
 * ** Plugin Command "ACSET: Finish Action" now has an option to turn off the
 *    Immortality of targets. Feature added by Yanfly.
 * * Optimization Update
 * ** Uses less resources when making checks for Pre-Battle Battle Start events
 * 
 * Version 1.01: August 23, 2020
 * * Bug Fixes!
 * ** Plugin Parameters > Damage Settings > Damage Formats are now fixed.
 *    Fix made by Olivia.
 * ** TPB Battle System with Disable Party Command fixed. Fix made by Olivia.
 * ** States now show in list format if faces are disabled. Fix made by Yanfly.
 * ** The default damage styles were missing the 'v' variable to allow for
 *    variable data input. These are back now. Fix made by Yanfly.
 * *** Users updating from version 1.00 will need to fix this problem by either
 *     removing the plugin from the Plugin Manager list and reinstalling it, or
 *     going to Plugin Parameters > Damage Settings > Style List > the style
 *     you want, and adding "const v = $gameVariables._data;" to JS: Formula
 * * New Notetags Added:
 * ** <Command Show Switch: x> added by Olivia
 * ** <Command Show All Switches: x,x,x> added by Olivia
 * ** <Command Show Any Switches: x,x,x> added by Olivia
 * ** <Command Hide Switch: x> added by Olivia
 * ** <Command Hide All Switches: x,x,x> added by Olivia
 * ** <Command Hide Any Switches: x,x,x> added by Olivia
 * ** <JS Command Visible> added by Olivia
 *
 * Version 1.00: August 20, 2020
 * * Finished Plugin!
 *
 * ============================================================================
 * End of Helpfile
 * ============================================================================
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceStart
 * @text -
 * @desc The following are Action Sequences commands/sets.
 * These Plugin Commands only work in battle.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakSet
 * @text Action Sequence - Action Sets
 * @desc Action Sequence Action Sets are groups of commonly used
 * Action Sequence Commands put together for more efficient usage.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Set_SetupAction
 * @text ACSET: Setup Action Set
 * @desc The generic start to most actions.
 * 
 * @arg DisplayAction:eval
 * @text Display Action
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ApplyImmortal:eval
 * @text Immortal: On
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ActionStart:eval
 * @text Battle Step
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg CastAnimation:eval
 * @text Cast Animation
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Set_WholeActionSet
 * @text ACSET: All Targets Action Set
 * @desc Affects all targets simultaneously performing the following.
 * 
 * @arg DualWield:eval
 * @text Dual/Multi Wield?
 * @type boolean
 * @on Apply
 * @off Don't
 * @desc Add times struck based on weapon quantity equipped?
 * @default false
 * 
 * @arg PerformAction:eval
 * @text Perform Action
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitCount:eval
 * @text Wait Count
 * @desc How many frames should the action sequence wait?
 * You may use JavaScript code.
 * @default Sprite_Battler._motionSpeed
 * 
 * @arg ActionAnimation:eval
 * @text Action Animation
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ActionEffect:eval
 * @text Action Effect
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ApplyImmortal:eval
 * @text Immortal: Off
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Set_TargetActionSet
 * @text ACSET: Each Target Action Set
 * @desc Goes through each target one by one to perform the following.
 * 
 * @arg DualWield:eval
 * @text Dual/Multi Wield?
 * @type boolean
 * @on Apply
 * @off Don't
 * @desc Add times struck based on weapon quantity equipped?
 * @default false
 * 
 * @arg PerformAction:eval
 * @text Perform Action
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitCount1:eval
 * @text Wait Count
 * @desc How many frames should the action sequence wait?
 * You may use JavaScript code.
 * @default Sprite_Battler._motionSpeed
 * 
 * @arg ActionAnimation:eval
 * @text Action Animation
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitCount2:eval
 * @text Wait Count
 * @desc How many frames should the action sequence wait?
 * You may use JavaScript code.
 * @default Sprite_Battler._motionSpeed * 2
 * 
 * @arg ActionEffect:eval
 * @text Action Effect
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ApplyImmortal:eval
 * @text Immortal: Off
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Set_FinishAction
 * @text ACSET: Finish Action
 * @desc The generic ending to most actions.
 * 
 * @arg ApplyImmortal:eval
 * @text Immortal: Off
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitForNewLine:eval
 * @text Wait For New Line
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitForEffect:eval
 * @text Wait For Effects
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ClearBattleLog:eval
 * @text Clear Battle Log
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ActionEnd:eval
 * @text Home Reset
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceAngle
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakAngle
 * @text Action Sequences - Angle
 * @desc Allows you to have control over the camera angle.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_ChangeAngle
 * @text ANGLE: Change Angle
 * @desc Changes the camera angle.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Angle:eval
 * @text Angle
 * @desc Change the camera angle to this many degrees.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to change camera angle.
 * @default 60
 *
 * @arg EasingType:str
 * @text Angle Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForAngle:eval
 * @text Wait For Angle?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for angle changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Angle_Reset
 * @text ANGLE: Reset Angle
 * @desc Reset any angle settings.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to reset camera angle.
 * @default 60
 *
 * @arg EasingType:str
 * @text Angle Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForAngle:eval
 * @text Wait For Angle?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for angle changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Angle_WaitForAngle
 * @text ANGLE: Wait For Angle
 * @desc Waits for angle changes to complete before performing next command.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceAnimation
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakAnimation
 * @text Action Sequences - Animations
 * @desc These Action Sequences are related to the 'Animations' that
 * can be found in the Animations tab of the Database.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_ActionAnimation
 * @text ANIM: Action Animation
 * @desc Plays the animation associated with the action.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["all targets"]
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default false
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_AttackAnimation
 * @text ANIM: Attack Animation
 * @desc Plays the animation associated with the user's 1st weapon.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["all targets"]
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default false
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_AttackAnimation2
 * @text ANIM: Attack Animation 2+
 * @desc Plays the animation associated with the user's other weapons.
 * Plays nothing if there is no other weapon equipped.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["all targets"]
 * 
 * @arg Slot:eval
 * @text Slot
 * @desc Which weapon slot to get this data from?
 * Main-hand weapon is weapon slot 1.
 * @default 2
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default true
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_CastAnimation
 * @text ANIM: Cast Animation
 * @desc Plays the cast animation associated with the action.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["user"]
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default false
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_ChangeBattlePortrait
 * @text ANIM: Change Battle Portrait
 * @desc Changes the battle portrait of the actor (if it's an actor).
 * Can be used outside of battle/action sequences.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to change the portraits for.
 * Valid units can only be actors.
 * @default ["user"]
 * 
 * @arg Filename:str
 * @text Filename
 * @type file
 * @dir img/pictures/
 * @desc Select the file to change the actor's portrait to.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_PlayAtCoordinate
 * @text ANIM: Play at Coordinate
 * @desc Plays an animation on the screen at a specific x, y coordinate.
 * Requires VisuMZ_0_CoreEngine!
 *
 * @arg AnimationID:num
 * @text Animation ID
 * @parent Animation
 * @type animation
 * @desc Plays this animation.
 * @default 1
 * 
 * @arg Coordinates
 *
 * @arg pointX:eval
 * @text X
 * @parent Coordinates
 * @desc X coordinate used for the animation.
 * You may use JavaScript code.
 * @default Graphics.width / 2
 *
 * @arg pointY:eval
 * @text Y
 * @parent Coordinates
 * @desc Y coordinate used for the animation.
 * You may use JavaScript code.
 * @default Graphics.height / 2
 *
 * @arg Mirror:eval
 * @text Mirror Animation?
 * @parent Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default false
 *
 * @arg Mute:eval
 * @text Mute Animation?
 * @parent Animation
 * @type boolean
 * @on Mute
 * @off Normal
 * @desc Mute the animation?
 * @default false
 *
 * @arg WaitComplete:eval
 * @text Wait for Completion?
 * @parent Animation
 * @type boolean
 * @on Wait
 * @off Normal
 * @desc Wait the animation to finish before continuing?
 * @default false
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_ShowAnimation
 * @text ANIM: Show Animation
 * @desc Plays the a specific animation on unit(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["all targets"]
 * 
 * @arg AnimationID:num
 * @text Animation ID
 * @type animation
 * @desc Select which animation to play on unit(s).
 * @default 1
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default false
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_WaitForAnimation
 * @text ANIM: Wait For Animation
 * @desc Causes the interpreter to wait for any animation(s) to finish.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceBattleLog
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakBattleLog
 * @text Action Sequences - Battle Log
 * @desc These Action Sequences are related to the Battle Log Window,
 * the window found at the top of the battle screen.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_AddText
 * @text BTLOG: Add Text
 * @desc Adds a new line of text into the Battle Log.
 * 
 * @arg Text:str
 * @text Text
 * @desc Add this text into the Battle Log.
 * Text codes allowed.
 * @default Insert text here.
 * 
 * @arg CopyCombatLog:eval
 * @text Copy to Combat Log?
 * @type boolean
 * @on Copy Text
 * @off Don't Copy
 * @desc Copies text to the Combat Log.
 * Requires VisuMZ_4_CombatLog
 * @default true
 *
 * @arg CombatLogIcon:num
 * @text Combat Log Icon
 * @parent CopyCombatLog:eval
 * @desc What icon would you like to bind to this entry?
 * Requires VisuMZ_4_CombatLog
 * @default 87
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_Clear
 * @text BTLOG: Clear Battle Log
 * @desc Clears all the text in the Battle Log.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_DisplayAction
 * @text BTLOG: Display Action
 * @desc Displays the current action in the Battle Log.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_PopBaseLine
 * @text BTLOG: Pop Base Line
 * @desc Removes the Battle Log's last added base line and 
 * all text up to its former location.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_PushBaseLine
 * @text BTLOG: Push Base Line
 * @desc Adds a new base line to where the Battle Log currently is at.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_Refresh
 * @text BTLOG: Refresh Battle Log
 * @desc Refreshes the Battle Log.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_UI
 * @text BTLOG: UI Show/Hide
 * @desc Shows or hides the Battle UI (including the Battle Log).
 * 
 * @arg ShowHide:eval
 * @text Show/Hide?
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Shows/hides the Battle UI.
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_WaitForBattleLog
 * @text BTLOG: Wait For Battle Log
 * @desc Causes the interpreter to wait for the Battle Log to finish.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_WaitForNewLine
 * @text BTLOG: Wait For New Line
 * @desc Causes the interpreter to wait for a new line in the Battle Log.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceCamera
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakCamera
 * @text Action Sequences - Camera
 * @desc Allows you to have control over the camera.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Camera_Clamp
 * @text CAMERA: Clamp ON/OFF
 * @desc Turns battle camera clamping on/off.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Setting:eval
 * @text ON/OFF
 * @type boolean
 * @on ON
 * @off OFF
 * @desc Turns camera clamping on/off.
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Camera_FocusPoint
 * @text CAMERA: Focus Point
 * @desc Focus the battle camera on a certain point in the screen.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg FocusX:eval
 * @text X Coordinate
 * @desc Insert the point to focus the camera on.
 * You may use JavaScript code.
 * @default Graphics.width / 2
 * 
 * @arg FocusY:eval
 * @text Y Coordinate
 * @desc Insert the point to focus the camera on.
 * You may use JavaScript code.
 * @default Graphics.height / 2
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for camera focus change.
 * @default 60
 *
 * @arg EasingType:str
 * @text Camera Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForCamera:eval
 * @text Wait For Camera?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for camera changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Camera_FocusTarget
 * @text CAMERA: Focus Target(s)
 * @desc Focus the battle camera on certain battler target(s).
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to focus the battle camera on.
 * @default ["user"]
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for camera focus change.
 * @default 60
 *
 * @arg EasingType:str
 * @text Camera Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForCamera:eval
 * @text Wait For Camera?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for camera changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Camera_Offset
 * @text CAMERA: Offset
 * @desc Offset the battle camera from the focus target.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg OffsetX:eval
 * @text Offset X
 * @desc How much to offset the camera X by.
 * Negative: left. Positive: right.
 * @default +0
 * 
 * @arg OffsetY:eval
 * @text Offset Y
 * @desc How much to offset the camera Y by.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for offset change.
 * @default 60
 *
 * @arg EasingType:str
 * @text Camera Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForCamera:eval
 * @text Wait For Camera?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for camera changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Camera_Reset
 * @text CAMERA: Reset
 * @desc Reset the battle camera settings.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg ResetFocus:eval
 * @text Reset Focus?
 * @type boolean
 * @on On
 * @off Off
 * @desc Reset the focus point?
 * @default true
 * 
 * @arg ResetOffset:eval
 * @text Reset Offset?
 * @type boolean
 * @on On
 * @off Off
 * @desc Reset the camera offset?
 * @default true
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for reset change.
 * @default 60
 *
 * @arg EasingType:str
 * @text Camera Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForCamera:eval
 * @text Wait For Camera?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for camera changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Camera_WaitForCamera
 * @text CAMERA: Wait For Camera
 * @desc Waits for camera to complete before performing next command.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 *
 * @command ActionSequenceSpaceDragonbones
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreaDragonbones
 * @text Action Sequences - Dragonbones
 * @desc These Action Sequences are Dragonbones-related.
 * Requires VisuMZ_2_DragonbonesUnion!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_DB_DragonbonesMotionAni
 * @text DB: Dragonbones Animation
 * @desc Causes the unit(s) to play a Dragonbones motion animation.
 * Requires VisuMZ_2_DragonbonesUnion!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to perform a motion animation.
 * @default ["user"]
 *
 * @arg MotionAni:str
 * @text Motion Animation
 * @desc What is the name of the Dragonbones motion animation you wish to play?
 * @default attack
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_DB_DragonbonesTimeScale
 * @text DB: Dragonbones Time Scale
 * @desc Causes the unit(s) to change their Dragonbones time scale.
 * Requires VisuMZ_2_DragonbonesUnion!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to perform a motion animation.
 * @default ["user"]
 *
 * @arg TimeScale:num
 * @text Time Scale
 * @desc Change the value of the Dragonbones time scale to this.
 * @default 1.0
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceElements
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakElements
 * @text Action Sequences - Elements
 * @desc These Action Sequences are related to elements.
 * Requires VisuMZ_1_ElementStatusCore!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Element_AddElements
 * @text ELE: Add Elements
 * @desc Adds element(s) to be used when calculating damage.
 * Requires VisuMZ_1_ElementStatusCore!
 *
 * @arg Elements:arraynum
 * @text Elements
 * @type number[]
 * @min 1
 * @max 99
 * @desc Select which element ID to add onto the action.
 * Insert multiple element ID's to add multiple at once.
 * @default ["1"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Element_Clear
 * @text ELE: Clear Element Changes
 * @desc Clears all element changes made through Action Sequences.
 * Requires VisuMZ_1_ElementStatusCore!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Element_ForceElements
 * @text ELE: Force Elements
 * @desc Forces only specific element(s) when calculating damage.
 * Requires VisuMZ_1_ElementStatusCore!
 *
 * @arg Elements:arraynum
 * @text Elements
 * @type number[]
 * @min 1
 * @max 99
 * @desc Select which element ID to force in the action.
 * Insert multiple element ID's to force multiple at once.
 * @default ["1"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Element_NullElements
 * @text ELE: Null Element
 * @desc Forces no element to be used when calculating damage.
 * Requires VisuMZ_1_ElementStatusCore!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceHorror
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakHorror
 * @text Action Sequences - Horror Effects
 * @desc These Action Sequences are Horror Effects-related.
 * Requires VisuMZ_2_HorrorEffects!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_Clear
 * @text HORROR: Clear All Filters
 * @desc Clear all Horror Effects filters on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to remove Horror Effects for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_GlitchCreate
 * @text HORROR: Glitch Create
 * @desc Creates the glitch effect on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to create the Horror Effect for.
 * @default ["user"]
 *
 * @arg slices:num
 * @text Glitch Slices
 * @parent FilterGlitch
 * @type number
 * @min 1
 * @desc Glitch slices to be used with the target.
 * @default 10
 *
 * @arg offset:num
 * @text Glitch Offset
 * @parent FilterGlitch
 * @type number
 * @min 1
 * @desc Default offset value.
 * @default 100
 *
 * @arg animated:eval
 * @text Glitch Animated?
 * @parent FilterGlitch
 * @type boolean
 * @on Animate
 * @off Static
 * @desc Animate the glitch effect?
 * @default true
 *
 * @arg aniFrequency:num
 * @text Glitch Frequency
 * @parent FilterGlitch
 * @type number
 * @min 1
 * @desc If animated, how frequent to make the glitch effect?
 * Lower = often     Higher = rarer
 * @default 300
 *
 * @arg aniStrength:num
 * @text Glitch Strength
 * @parent FilterGlitch
 * @type number
 * @min 1
 * @desc If animated, how strong is the glitch effect?
 * Lower = weaker     Higher = stronger
 * @default 30
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_GlitchRemove
 * @text HORROR: Glitch Remove
 * @desc Removes the glitch effect on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to remove the Horror Effect for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_NoiseCreate
 * @text HORROR: Noise Create
 * @desc Creates the noise effect on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to create the Horror Effect for.
 * @default ["user"]
 *
 * @arg noise:num
 * @text Noise Rate
 * @parent FilterNoise
 * @desc Noise rate to be used with the target.
 * @default 0.3
 *
 * @arg animated:eval
 * @text Noise Animated
 * @parent FilterNoise
 * @type boolean
 * @on Animate
 * @off Static
 * @desc Animate the noise for the target?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_NoiseRemove
 * @text HORROR: Noise Remove
 * @desc Removes the noise effect on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to remove the Horror Effect for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_TVCreate
 * @text HORROR: TV Create
 * @desc Creates the TV effect on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to create the Horror Effect for.
 * @default ["user"]
 *
 * @arg lineWidth:num
 * @text TV Line Thickness
 * @parent FilterTV
 * @type number
 * @min 1
 * @desc Default TV line thickness
 * Lower = thinner     Higher = thicker
 * @default 5
 *
 * @arg vignetting:num
 * @text TV Corner Size
 * @parent FilterTV
 * @desc Default TV line corner size
 * Lower = smaller     Higher = bigger
 * @default 0.3
 *
 * @arg animated:eval
 * @text TV Animated
 * @parent FilterTV
 * @type boolean
 * @on Animate
 * @off Static
 * @desc Animate the TV?
 * @default true
 *
 * @arg aniSpeed:num
 * @text TV Speed
 * @parent FilterTV
 * @desc Speed used to animate the TV if animated
 * Lower = slower     Higher = faster
 * @default 0.25
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_TVRemove
 * @text HORROR: TV Remove
 * @desc Removes the TV effect on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to remove the Horror Effect for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceImpact
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakImpact
 * @text Action Sequences - Impact
 * @desc These Action Sequences are related to creating impact.
 * Requires VisuMZ_3_ActSeqImpact!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_ColorBreak
 * @text IMPACT: Color Break
 * @desc Breaks the colors on the screen before reassembling.
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Intensity:eval
 * @text Intensity
 * @desc What is the intensity of the color break effect?
 * @default 60
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc What is the duration of the color break effect?
 * @default 60
 *
 * @arg EasingType:str
 * @text Easing Type
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * @default OutBack
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_MotionBlurScreen
 * @text IMPACT: Motion Blur Screen
 * @desc Creates a motion blur on the whole screen.
 * Requires VisuMZ_3_ActSeqImpact!
 *
 * @arg Angle:eval
 * @text Angle
 * @desc Determine what angle to make the motion blur at.
 * @default Math.randomInt(360)
 *
 * @arg Rate:eval
 * @text Intensity Rate
 * @desc This determines intensity rate of the motion blur.
 * Use a number between 0 and 1.
 * @default 0.1
 *
 * @arg Duration:num
 * @text Duration
 * @type Number
 * @min 1
 * @desc How many frames should the motion blur last?
 * What do you want to be its duration?
 * @default 30
 *
 * @arg EasingType:str
 * @text Easing Type
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * @default InOutSine
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_MotionBlurTarget
 * @text IMPACT: Motion Blur Target(s)
 * @desc Creates a motion blur on selected target(s).
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to create motion blur effects for.
 * @default ["user"]
 *
 * @arg Angle:eval
 * @text Angle
 * @desc Determine what angle to make the motion blur at.
 * @default Math.randomInt(360)
 *
 * @arg Rate:eval
 * @text Intensity Rate
 * @desc This determines intensity rate of the motion blur.
 * Use a number between 0 and 1.
 * @default 0.5
 *
 * @arg Duration:num
 * @text Duration
 * @type Number
 * @min 1
 * @desc How many frames should the motion blur last?
 * What do you want to be its duration?
 * @default 30
 *
 * @arg EasingType:str
 * @text Easing Type
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * @default InOutSine
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_MotionTrailCreate
 * @text IMPACT: Motion Trail Create
 * @desc Creates a motion trail effect for the target(s).
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to create motion trail effects for.
 * @default ["user"]
 *
 * @arg delay:num
 * @text Delay
 * @type Number
 * @min 1
 * @desc How many frames to delay by when creating a motion trail?
 * The higher the delay, the less after images there are.
 * @default 1
 *
 * @arg duration:num
 * @text Duration
 * @type Number
 * @min 1
 * @desc How many frames should the motion trail last?
 * What do you want to be its duration?
 * @default 30
 *
 * @arg hue:num
 * @text Hue
 * @type Number
 * @min 0
 * @max 255
 * @desc What do you want to be the hue for the motion trail?
 * @default 0
 *
 * @arg opacityStart:num
 * @text Starting Opacity
 * @type Number
 * @min 0
 * @max 255
 * @desc What starting opacity value do you want for the motion
 * trail? Opacity values decrease over time.
 * @default 200
 *
 * @arg tone:eval
 * @text Tone
 * @desc What tone do you want for the motion trail?
 * Format: [Red, Green, Blue, Gray]
 * @default [0, 0, 0, 0]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_MotionTrailRemove
 * @text IMPACT: Motion Trail Remove
 * @desc Removes the motion trail effect from the target(s).
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to clear motion trail effects for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_ShockwavePoint
 * @text IMPACT: Shockwave at Point
 * @desc Creates a shockwave at the designated coordinates.
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Coordinates
 * 
 * @arg X:eval
 * @text Point: X
 * @parent Coordinates
 * @desc What x coordinate do you want to create a shockwave at?
 * You can use JavaScript code.
 * @default Graphics.width / 2
 * 
 * @arg Y:eval
 * @text Point: Y
 * @parent Coordinates
 * @desc What y coordinate do you want to create a shockwave at?
 * You can use JavaScript code.
 * @default (Graphics.height - 200) / 2
 * 
 * @arg Amp:eval
 * @text Amplitude
 * @desc What is the aplitude of the shockwave effect?
 * @default 30
 * 
 * @arg Wave:eval
 * @text Wavelength
 * @desc What is the wavelength of the shockwave effect?
 * @default 160
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc What is the duration of the shockwave?
 * @default 60
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_ShockwaveEachTargets
 * @text IMPACT: Shockwave from Each Target(s)
 * @desc Creates a shockwave at each of the target(s) location(s).
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to start a shockwave from.
 * @default ["all targets"]
 * 
 * @arg TargetLocation:str
 * @text Target Location
 * @parent Targets2:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part target group to start a shockwave from.
 * @default middle center
 * 
 * @arg OffsetX:eval
 * @text Offset X
 * @parent TargetLocation:str
 * @desc How much to offset the shockwave X point by.
 * Negative: left. Positive: right.
 * @default +0
 * 
 * @arg OffsetY:eval
 * @text Offset Y
 * @parent TargetLocation:str
 * @desc How much to offset the shockwave Y point by.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * @arg Amp:eval
 * @text Amplitude
 * @desc What is the aplitude of the shockwave effect?
 * @default 30
 * 
 * @arg Wave:eval
 * @text Wavelength
 * @desc What is the wavelength of the shockwave effect?
 * @default 160
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc What is the duration of the shockwave?
 * @default 60
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_ShockwaveCenterTargets
 * @text IMPACT: Shockwave from Target(s) Center
 * @desc Creates a shockwave from the center of the target(s).
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to start a shockwave from.
 * @default ["all targets"]
 * 
 * @arg TargetLocation:str
 * @text Target Location
 * @parent Targets2:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part target group to start a shockwave from.
 * @default middle center
 * 
 * @arg OffsetX:eval
 * @text Offset X
 * @parent TargetLocation:str
 * @desc How much to offset the shockwave X point by.
 * Negative: left. Positive: right.
 * @default +0
 * 
 * @arg OffsetY:eval
 * @text Offset Y
 * @parent TargetLocation:str
 * @desc How much to offset the shockwave Y point by.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * @arg Amp:eval
 * @text Amplitude
 * @desc What is the aplitude of the shockwave effect?
 * @default 30
 * 
 * @arg Wave:eval
 * @text Wavelength
 * @desc What is the wavelength of the shockwave effect?
 * @default 160
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc What is the duration of the shockwave?
 * @default 60
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_ZoomBlurPoint
 * @text IMPACT: Zoom Blur at Point
 * @desc Creates a zoom blur at the designated coordinates.
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Coordinates
 * 
 * @arg X:eval
 * @text Point: X
 * @parent Coordinates
 * @desc What x coordinate do you want to focus the zoom at?
 * You can use JavaScript code.
 * @default Graphics.width / 2
 * 
 * @arg Y:eval
 * @text Point: Y
 * @parent Coordinates
 * @desc What y coordinate do you want to focus the zoom at?
 * You can use JavaScript code.
 * @default (Graphics.height - 200) / 2
 * 
 * @arg Strength:eval
 * @text Zoom Strength
 * @desc What is the strength of the zoom effect?
 * Use a number between 0 and 1.
 * @default 0.5
 * 
 * @arg Radius:eval
 * @text Visible Radius
 * @desc How much of a radius should be visible from the center?
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc What is the duration of the zoom blur?
 * @default 60
 *
 * @arg EasingType:str
 * @text Easing Type
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * @default OutSine
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_ZoomBlurTargetCenter
 * @text IMPACT: Zoom Blur at Target(s) Center
 * @desc Creates a zoom blur at the center of targets.
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to start a zoom blur from.
 * @default ["user"]
 * 
 * @arg TargetLocation:str
 * @text Target Location
 * @parent Targets2:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part target group to start a zoom blur from.
 * @default middle center
 * 
 * @arg OffsetX:eval
 * @text Offset X
 * @parent TargetLocation:str
 * @desc How much to offset the zoom blur X point by.
 * Negative: left. Positive: right.
 * @default +0
 * 
 * @arg OffsetY:eval
 * @text Offset Y
 * @parent TargetLocation:str
 * @desc How much to offset the zoom blur Y point by.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * @arg Strength:eval
 * @text Zoom Strength
 * @desc What is the strength of the zoom effect?
 * Use a number between 0 and 1.
 * @default 0.5
 * 
 * @arg Radius:eval
 * @text Visible Radius
 * @desc How much of a radius should be visible from the center?
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc What is the duration of the zoom blur?
 * @default 60
 *
 * @arg EasingType:str
 * @text Easing Type
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * @default OutSine
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceMechanics
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakMechanics
 * @text Action Sequences - Mechanics
 * @desc These Action Sequences are related to various mechanics
 * related to the battle system.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_ActionEffect
 * @text MECH: Action Effect
 * @desc Causes the unit(s) to take damage/healing from action and
 * incurs any changes made such as buffs and states.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to receive the current action's effects.
 * @default ["all targets"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_AddBuffDebuff
 * @text MECH: Add Buff/Debuff
 * @desc Adds buff(s)/debuff(s) to unit(s). 
 * Determine which parameters are affected and their durations.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to receive the buff(s) and/or debuff(s).
 * @default ["user"]
 * 
 * @arg Buffs:arraystr
 * @text Buff Parameters
 * @type combo[]
 * @option MaxHP
 * @option MaxMP
 * @option ATK
 * @option DEF
 * @option MAT
 * @option MDF
 * @option AGI
 * @option LUK
 * @desc Select which parameter(s) to buff.
 * Insert a parameter multiple times to raise its stacks.
 * @default ["ATK"]
 *
 * @arg Debuffs:arraystr
 * @text Debuff Parameters
 * @type combo[]
 * @option MaxHP
 * @option MaxMP
 * @option ATK
 * @option DEF
 * @option MAT
 * @option MDF
 * @option AGI
 * @option LUK
 * @desc Select which parameter(s) to debuff.
 * Insert a parameter multiple times to raise its stacks.
 * @default ["DEF"]
 * 
 * @arg Turns:eval
 * @text Turns
 * @desc Number of turns to set the parameter(s) buffs to.
 * You may use JavaScript code.
 * @default 5
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_AddState
 * @text MECH: Add State
 * @desc Adds state(s) to unit(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to receive the buff(s).
 * @default ["user"]
 * 
 * @arg States:arraynum
 * @text States
 * @type state[]
 * @desc Select which state ID(s) to add to unit(s).
 * Insert multiple state ID's to add multiple at once.
 * @default ["4"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_AnalyzeWeakness
 * @text MECH: Analyze Weakness
 * @desc Reveal elemental weakness(es) from target(s).
 * Requires VisuMZ_3_WeaknessDisplay!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to reveal elemental weaknesses for.
 * @default ["all targets"]
 * 
 * @arg Reveal:eval
 * @text Reveal
 * @desc How many elemental weaknesses do you wish to reveal?
 * You may use JavaScript code.
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_ArmorPenetration
 * @text MECH: Armor Penetration
 * @desc Adds an extra layer of defensive penetration/reduction.
 * You may use JavaScript code for any of these.
 *
 * @arg ArmorPenetration
 * @text Armor/Magic Penetration
 * 
 * @arg ArPenRate:eval
 * @text Rate
 * @parent ArmorPenetration
 * @desc Penetrates an extra multiplier of armor by this value.
 * @default 0.00
 * 
 * @arg ArPenFlat:eval
 * @text Flat
 * @parent ArmorPenetration
 * @desc Penetrates a flat amount of armor by this value.
 * @default 0
 *
 * @arg ArmorReduction
 * @text Armor/Magic Reduction
 * 
 * @arg ArRedRate:eval
 * @text Rate
 * @parent ArmorReduction
 * @desc Reduces an extra multiplier of armor by this value.
 * @default 0.00
 * 
 * @arg ArRedFlat:eval
 * @text Flat
 * @parent ArmorReduction
 * @desc Reduces a flat amount of armor by this value.
 * @default 0
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_AtbGauge
 * @text MECH: ATB Gauge
 * @desc Alters the ATB/TPB Gauges.
 * Requires VisuMZ_2_BattleSystemATB!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the ATB/TPB Gauges for.
 * @default ["all targets"]
 *
 * @arg Charging
 * 
 * @arg ChargeRate:eval
 * @text Charge Rate
 * @parent Charging
 * @desc Changes made to the ATB Gauge if it is currently charging.
 * @default -0.00
 * 
 * @arg Casting
 * 
 * @arg CastRate:eval
 * @text Cast Rate
 * @parent Casting
 * @desc Changes made to the ATB Gauge if it is currently casting.
 * @default -0.00
 * 
 * @arg Interrupt:eval
 * @text Interrupt?
 * @parent Casting
 * @type boolean
 * @on Interrupt
 * @off Don't Interrupt
 * @desc Interrupt the ATB Gauge if it is currently casting?
 * @default false
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_BoostPointsChange
 * @text MECH: Boost Points Change
 * @desc Changes Boost Points for target(s).
 * Requires VisuMZ_3_BoostAction!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the Boost Points for.
 * @default ["user"]
 * 
 * @arg BoostPoints:eval
 * @text Alter Boost Points By
 * @desc Alters the unit(s) Boost Points.
 * Positive for gaining points. Negative for losing points.
 * @default +1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_BoostPointsStoreData
 * @text MECH: Boost Store Data
 * @desc Stores the number of Boosts used this action inside a variable.
 * Requires VisuMZ_3_BoostAction!
 * 
 * @arg VariableID:num
 * @text Variable ID
 * @type variable
 * @desc Which variable do you want to store the data inside?
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_BreakShieldChange
 * @text MECH: Break Shield Change
 * @desc Changes Break Shields for target(s) if not Break Stunned.
 * Requires VisuMZ_4_BreakShields!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the Break Shields for.
 * @default ["all targets"]
 * 
 * @arg BreakShields:eval
 * @text Alter Break Shields By
 * @desc Alters the unit(s) Break Shields.
 * Positive for gaining shields. Negative for losing shields.
 * @default -1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_BreakShieldReset
 * @text MECH: Break Shield Reset
 * @desc Resets Break Shields for target(s) if not Break Stunned.
 * Requires VisuMZ_4_BreakShields!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to reset the Break Shields for.
 * @default ["all targets"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_BtbGain
 * @text MECH: BTB Brave Points
 * @desc Alters the target(s) Brave Points to an exact value.
 * Requires VisuMZ_2_BattleSystemBTB!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the ATB/TPB Gauges for.
 * @default ["all targets"]
 * 
 * @arg BravePoints:eval
 * @text Alter Brave Points By
 * @desc Alters the target(s) Brave Points.
 * Positive for gaining BP. Negative for losing BP.
 * @default +1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_Collapse
 * @text MECH: Collapse
 * @desc Causes the unit(s) to perform its collapse animation
 * if the unit(s) has died.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to process a death collapse.
 * @default ["all targets"]
 * 
 * @arg ForceDeath:eval
 * @text Force Death
 * @type boolean
 * @on On
 * @off Off
 * @desc Force death even if the unit has not reached 0 HP?
 * This will remove immortality.
 * @default false
 * 
 * @arg WaitForEffect:eval
 * @text Wait For Effect?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for the collapse effect to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_CtbOrder
 * @text MECH: CTB Order
 * @desc Alters the CTB Turn Order.
 * Requires VisuMZ_2_BattleSystemCTB!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the CTB Turn Order for.
 * @default ["all targets"]
 *
 * @arg ChangeOrderBy:eval
 * @text Change Order By
 * @parent Charging
 * @desc Changes turn order for target(s) by this amount.
 * Positive increases wait. Negative decreases wait.
 * @default +1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_CtbSpeed
 * @text MECH: CTB Speed
 * @desc Alters the CTB Speed.
 * Requires VisuMZ_2_BattleSystemCTB!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the CTB Speed for.
 * @default ["all targets"]
 *
 * @arg ChargeRate:eval
 * @text Charge Rate
 * @parent Charging
 * @desc Changes made to the CTB Speed if it is currently charging.
 * @default -0.00
 * 
 * @arg CastRate:eval
 * @text Cast Rate
 * @parent Casting
 * @desc Changes made to the CTB Speed if it is currently casting.
 * @default -0.00
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_CustomDmgFormula
 * @text MECH: Custom Damage Formula
 * @desc Changes the current action's damage formula to custom.
 * This will assume the MANUAL damage style.
 * 
 * @arg Formula:str
 * @text Formula
 * @desc Changes the current action's damage formula to custom.
 * Use 'default' to revert the damage formula.
 * @default default
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_DamagePopup
 * @text MECH: Damage Popup
 * @desc Causes the unit(s) to display the current state of
 * damage received or healed.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to prompt a damage popup.
 * @default ["all targets"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_DeathBreak
 * @text MECH: Dead Label Jump
 * @desc If the active battler is dead, jump to a specific label in the common event.
 * 
 * @arg JumpToLabel:str
 * @text Jump To Label
 * @desc If the active battler is dead, jump to this specific label in the common event.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_EnemyEscape
 * @text MECH: Enemy Escape
 * @desc Causes the enemy unit(s) to escape.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to escape.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_EtbAction
 * @text MECH: ETB Energy Count
 * @desc Alters the subject team's available Energy Count.
 * Requires VisuMZ_2_BattleSystemETB!
 * 
 * @arg ActionCount:eval
 * @text Energy Count
 * @desc Alters the subject team's available Energy Count.
 * Positive for gaining energy. Negative for losing energy.
 * @default +1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_FtbAction
 * @text MECH: FTB Action Count
 * @desc Alters the subject team's available Action Count.
 * Requires VisuMZ_2_BattleSystemFTB!
 * 
 * @arg ActionCount:eval
 * @text Action Count
 * @desc Alters the subject team's available Action Count.
 * Positive for gaining actions. Negative for losing actions.
 * @default +1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_HpMpTp
 * @text MECH: HP, MP, TP
 * @desc Alters the HP, MP, and TP values for unit(s).
 * Positive values for healing. Negative values for damage.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to receive the current action's effects.
 * @default ["user"]
 *
 * @arg HP
 * 
 * @arg HP_Rate:eval
 * @text HP Rate
 * @parent HP
 * @desc Changes made to HP based on rate.
 * Positive values for healing. Negative values for damage.
 * @default +0.00
 * 
 * @arg HP_Flat:eval
 * @text HP Flat
 * @parent HP
 * @desc Flat changes made to HP.
 * Positive values for healing. Negative values for damage.
 * @default +0
 * 
 * @arg MP
 * 
 * @arg MP_Rate:eval
 * @text MP Rate
 * @parent MP
 * @desc Changes made to MP based on rate.
 * Positive values for healing. Negative values for damage.
 * @default +0.00
 * 
 * @arg MP_Flat:eval
 * @text MP Flat
 * @parent MP
 * @desc Flat changes made to MP.
 * Positive values for healing. Negative values for damage.
 * @default +0
 *
 * @arg TP
 * 
 * @arg TP_Rate:eval
 * @text TP Rate
 * @parent TP
 * @desc Changes made to TP based on rate.
 * Positive values for healing. Negative values for damage.
 * @default +0.00
 * 
 * @arg TP_Flat:eval
 * @text TP Flat
 * @parent TP
 * @desc Flat changes made to TP.
 * Positive values for healing. Negative values for damage.
 * @default +0
 * 
 * @arg ShowPopup:eval
 * @text Damage Popup?
 * @type boolean
 * @on On
 * @off Off
 * @desc Display a damage popup after?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_Immortal
 * @text MECH: Immortal
 * @desc Changes the immortal flag of targets. If immortal flag is
 * removed and a unit would die, collapse that unit.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Alter the immortal flag of these groups. If immortal flag
 * is removed and a unit would die, collapse that unit.
 * @default ["user","all targets"]
 * 
 * @arg Immortal:eval
 * @text Immortal
 * @type boolean
 * @on On
 * @off Off
 * @desc Turn immortal flag for unit(s) on/off?
 * @default false
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_Multipliers
 * @text MECH: Multipliers
 * @desc Changes the multipliers for the current action.
 * You may use JavaScript code for any of these.
 *
 * @arg CriticalHit
 * @text Critical Hit%
 * 
 * @arg CriticalHitRate:eval
 * @text Rate
 * @parent CriticalHit
 * @desc Affects chance to land a critical hit by this multiplier.
 * @default 1.00
 * 
 * @arg CriticalHitFlat:eval
 * @text Flat
 * @parent CriticalHit
 * @desc Affects chance to land a critical hit by this flat bonus.
 * @default +0.00
 *
 * @arg CriticalDmg
 * @text Critical Damage
 * 
 * @arg CriticalDmgRate:eval
 * @text Rate
 * @parent CriticalDmg
 * @desc Affects critical damage by this multiplier.
 * @default 1.00
 * 
 * @arg CriticalDmgFlat:eval
 * @text Flat
 * @parent CriticalDmg
 * @desc Affects critical damage by this flat bonus.
 * @default +0.00
 *
 * @arg Damage
 * @text Damage/Healing
 * 
 * @arg DamageRate:eval
 * @text Rate
 * @parent Damage
 * @desc Sets the damage/healing multiplier for current action.
 * @default 1.00
 * 
 * @arg DamageFlat:eval
 * @text Flat
 * @parent Damage
 * @desc Sets the damage/healing bonus for current action.
 * @default +0.00
 *
 * @arg HitRate
 * @text Hit Rate
 * 
 * @arg HitRate:eval
 * @text Rate
 * @parent HitRate
 * @desc Affects chance to connect attack by this multiplier.
 * @default 1.00
 * 
 * @arg HitFlat:eval
 * @text Flat
 * @parent HitRate
 * @desc Affects chance to connect attack by this flat bonus.
 * @default +0.00
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_OnceParallel
 * @text MECH: Once Parallel
 * @desc Plays a Common Event parallel to the battle event once
 * without repeating itself when done.
 *
 * @arg CommonEventID:num
 * @text Common Event ID
 * @type common_event
 * @desc The ID of the parallel Common Event to play.
 * Does NOT repeat itself when finished.
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_OtbOrder
 * @text MECH: OTB Order
 * @desc Alters the OTB Turn Order. Best used with single targets.
 * Requires VisuMZ_2_BattleSystemOTB!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the OTB Turn Order for.
 * @default ["all targets"]
 *
 * @arg CurrentTurn:eval
 * @text Current Turn By
 * @parent Charging
 * @desc Changes turn order for target(s) by this amount.
 * Positive increases wait. Negative decreases wait.
 * @default +0
 *
 * @arg NextTurn:eval
 * @text Next Turn By
 * @parent Charging
 * @desc Changes turn order for target(s) by this amount.
 * Positive increases wait. Negative decreases wait.
 * @default +1
 *
 * @arg FollowTurn:eval
 * @text Follow Turn By
 * @parent Charging
 * @desc Changes turn order for target(s) by this amount.
 * Positive increases wait. Negative decreases wait.
 * @default +0
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_PtbAlterCost
 * @text MECH: PTB Alter Cost
 * @desc Alters the action's cost settings.
 * Requires VisuMZ_2_BattleSystemPTB!
 *
 * @arg Override:eval
 * @text Override?
 * @type boolean
 * @on Override Permanent
 * @off Require Temporary
 * @desc Overrides any 'permanent' settings for Changeability?
 * @default false
 *
 * @arg alterChange:str
 * @text Alter Changeability
 * @type select
 * @option Unchanged - Cost type is unchanged after this effect
 * @value unchanged
 * @option Permanent - Cost type can no longer be changed after
 * @value permanent
 * @option Temporary - Cost type can still be changed after
 * @value temporary
 * @desc Allow the cost type and value to be changeable?
 * @default unchanged
 *
 * @arg alterType:str
 * @text Alter Cost Type
 * @type select
 * @option Unchanged - No changes are made
 * @value unchanged
 * @option Consume - Removes half, otherwise consumes full
 * @value consume
 * @option Convert - Converts full => half, otherwise consumes half
 * @value convert
 * @option Compress - Consumes half, otherwise converts full => half
 * @value compress
 * @desc Change the cost type to this scenario.
 * Use 'Unchanged' for no changes.
 * @default convert
 *
 * @arg alterCost:eval
 * @text Alter Cost Value
 * @desc What is the default action cost for this scenario?
 * @default +0
 *
 * @arg alterPriority:eval
 * @text Priority
 * @desc What is this scenario's priority? Scenario outcomes with
 * equal or lower priorities cannot override types and costs.
 * @default 50
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_PtbConvert
 * @text MECH: PTB Conversion
 * @desc Converts full actions into half actions.
 * Requires VisuMZ_2_BattleSystemPTB!
 * 
 * @arg ConvertCount:eval
 * @text Conversion Count
 * @desc Converts full actions into half actions.
 * If not enough, consume half actions.
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_PtbFullHalfAction
 * @text MECH: PTB Full/Half Action(s)
 * @desc Alters the subject team's available Full/Half Actions.
 * Requires VisuMZ_2_BattleSystemPTB!
 * 
 * @arg FullActions:eval
 * @text Full Actions
 * @desc Alters the subject team's available Full Actions.
 * Positive for gaining. Negative for losing.
 * @default +0
 * 
 * @arg HalfActions:eval
 * @text Half Actions
 * @desc Alters the subject team's available Half Actions.
 * Positive for gaining. Negative for losing.
 * @default +0
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_RemoveBuffDebuff
 * @text MECH: Remove Buff/Debuff
 * @desc Removes buff(s)/debuff(s) from unit(s). 
 * Determine which parameters are removed.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to have the buff(s) and/or debuff(s) removed.
 * @default ["user"]
 * 
 * @arg Buffs:arraystr
 * @text Buff Parameters
 * @type combo[]
 * @option MaxHP
 * @option MaxMP
 * @option ATK
 * @option DEF
 * @option MAT
 * @option MDF
 * @option AGI
 * @option LUK
 * @desc Select which buffed parameter(s) to remove.
 * @default ["MaxHP","MaxMP","ATK","DEF","MAT","MDF","AGI","LUK"]
 *
 * @arg Debuffs:arraystr
 * @text Debuff Parameters
 * @type combo[]
 * @option MaxHP
 * @option MaxMP
 * @option ATK
 * @option DEF
 * @option MAT
 * @option MDF
 * @option AGI
 * @option LUK
 * @desc Select which debuffed parameter(s) to remove.
 * @default ["MaxHP","MaxMP","ATK","DEF","MAT","MDF","AGI","LUK"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_RemoveState
 * @text MECH: Remove State
 * @desc Remove state(s) from unit(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to have states removed from.
 * @default ["user"]
 * 
 * @arg States:arraynum
 * @text States
 * @type state[]
 * @desc Select which state ID(s) to remove from unit(s).
 * Insert multiple state ID's to remove multiple at once.
 * @default ["4"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_StbExploit
 * @text MECH: STB Exploit Effect
 * @desc Utilize the STB Exploitation mechanics!
 * Requires VisuMZ_2_BattleSystemSTB!
 * 
 * @arg Exploited:eval
 * @text Target(s) Exploited?
 * @type boolean
 * @on Exploit
 * @off Don't
 * @desc Exploit the below targets?
 * @default true
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to become exploited.
 * @default ["all targets"]
 * 
 * @arg ForceExploited:eval
 * @text Force Exploitation
 * @type boolean
 * @on Force
 * @off Don't
 * @desc Force the exploited status?
 * @default false
 * 
 * @arg Exploiter:eval
 * @text User Exploiter?
 * @type boolean
 * @on Exploit
 * @off Don't
 * @desc Allow the user to become the exploiter?
 * @default true
 * 
 * @arg ForceExploited:eval
 * @text Force Exploitation
 * @type boolean
 * @on Force
 * @off Don't
 * @desc Force the exploiter status?
 * @default false
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_StbExtraAction
 * @text MECH: STB Extra Action
 * @desc Adds an extra action for the currently active battler.
 * Requires VisuMZ_2_BattleSystemSTB!
 * 
 * @arg Actions:eval
 * @text Extra Actions
 * @parent Charging
 * @desc How many extra actions should the active battler gain?
 * You may use JavaScript code.
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_StbRemoveExcessActions
 * @text MECH: STB Remove Excess Actions
 * @desc Removes excess actions from the active battler.
 * Requires VisuMZ_2_BattleSystemSTB!
 * 
 * @arg Actions:eval
 * @text Remove Actions
 * @parent Charging
 * @desc How many actions to remove from the active battler?
 * You may use JavaScript code.
 * @default 99
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_SwapWeapon
 * @text MECH: Swap Weapon
 * @desc Causes the unit(s) to swap their weapon for another.
 * Requires VisuMZ_2_WeaponSwapSystem!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to swap weapons for.
 * @default ["user"]
 * 
 * @arg WeaponTypeID:eval
 * @text Weapon Type ID
 * @desc Which weapon type to swap to?
 * This is NOT the weapon's ID. It's the weapon TYPE.
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_TextPopup
 * @text MECH: Text Popup
 * @desc Causes the unit(s) to display a text popup.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to prompt a text popup.
 * @default ["target"]
 * 
 * @arg Text:str
 * @text Text
 * @desc What text do you wish to display?
 * @default Text
 * 
 * @arg TextColor:str
 * @text Text Color
 * @parent Text:str
 * @desc Use #rrggbb for custom colors or regular numbers
 * for text colors from the Window Skin.
 * @default #ffffff
 *
 * @arg FlashColor:eval
 * @text Flash Color
 * @parent Popups
 * @desc Adjust the popup's flash color.
 * Format: [red, green, blue, alpha]
 * @default [255, 0, 0, 160]
 * 
 * @arg FlashDuration:num
 * @text Flash Duration
 * @parent FlashColor:eval
 * @type Number
 * @desc What is the frame duration of the flash effect?
 * @default 60
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_VariablePopup
 * @text MECH: Variable Popup
 * @desc Causes the unit(s) to display a popup using the data
 * stored inside a variable.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to prompt a text popup.
 * @default ["target"]
 * 
 * @arg Variable:num
 * @text Variable ID
 * @type variable
 * @desc Get data from which variable to display as a popup?
 * @default 1
 * 
 * @arg DigitGrouping:eval
 * @text Digit Grouping
 * @parent Variable:num
 * @type boolean
 * @on Group Digits
 * @off Don't Group
 * @desc Use digit grouping to separate numbers?
 * Requires VisuMZ_0_CoreEngine!
 * @default true
 * 
 * @arg TextColor:str
 * @text Text Color
 * @parent Variable:num
 * @desc Use #rrggbb for custom colors or regular numbers
 * for text colors from the Window Skin.
 * @default #ffffff
 *
 * @arg FlashColor:eval
 * @text Flash Color
 * @parent Popups
 * @desc Adjust the popup's flash color.
 * Format: [red, green, blue, alpha]
 * @default [0, 0, 0, 0]
 * 
 * @arg FlashDuration:num
 * @text Flash Duration
 * @parent FlashColor:eval
 * @type Number
 * @desc What is the frame duration of the flash effect?
 * @default 60
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_WaitForEffect
 * @text MECH: Wait For Effect
 * @desc Waits for the effects to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceMotion
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakMotion
 * @text Action Sequences - Motion
 * @desc These Action Sequences allow you the ability to control
 * the motions of sideview sprites.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Motion_ClearFreezeFrame
 * @text MOTION: Clear Freeze Frame
 * @desc Clears any freeze frames from the unit(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to clear freeze frames for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Motion_FreezeMotionFrame
 * @text MOTION: Freeze Motion Frame
 * @desc Forces a freeze frame instantly at the selected motion.
 * Automatically clears with a new motion.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to freeze motions for.
 * @default ["user"]
 *
 * @arg MotionType:str
 * @text Motion Type
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option attack
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Freeze this motion for the unit(s).
 * @default attack
 * 
 * @arg Frame:num
 * @text Frame Index
 * @desc Which frame do you want to freeze the motion on?
 * Frame index values start at 0.
 * @default 2
 *
 * @arg ShowWeapon:eval
 * @text Show Weapon?
 * @type combo
 * @type boolean
 * @on Show
 * @off Hide
 * @desc If using 'attack', 'thrust', 'swing', or 'missile',
 * display the weapon sprite?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Motion_MotionType
 * @text MOTION: Motion Type
 * @desc Causes the unit(s) to play the selected motion.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to perform a motion.
 * @default ["user"]
 *
 * @arg MotionType:str
 * @text Motion Type
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option attack
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default attack
 *
 * @arg ShowWeapon:eval
 * @text Show Weapon?
 * @type combo
 * @type boolean
 * @on Show
 * @off Hide
 * @desc If using 'attack', 'thrust', 'swing', or 'missile',
 * display the weapon sprite?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Motion_PerformAction
 * @text MOTION: Perform Action
 * @desc Causes the unit(s) to play the proper motion based
 * on the current action.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to perform a motion.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Motion_RefreshMotion
 * @text MOTION: Refresh Motion
 * @desc Cancels any set motions unit(s) has to do and use
 * their most natural motion at the moment.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to refresh their motion state.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Motion_WaitMotionFrame
 * @text MOTION: Wait By Motion Frame
 * @desc Creates a wait equal to the number of motion frames passing.
 * Time is based on Plugin Parameters => Actors => Motion Speed.
 *
 * @arg MotionFrameWait:num
 * @text Motion Frames to Wait?
 * @type number
 * @min 1
 * @desc Each "frame" is equal to the value found in
 * Plugin Parameters => Actors => Motion Speed
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceMovement
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakMovement
 * @text Action Sequences - Movement
 * @desc These Action Sequences allow you the ability to control
 * the sprites of actors and enemies in battle.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_BattleStep
 * @text MOVE: Battle Step
 * @desc Causes the unit(s) to move forward past their home position
 * to prepare for action.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to move.
 * @default ["user"]
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_FaceDirection
 * @text MOVE: Face Direction
 * @desc Causes the unit(s) to face forward or backward.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change direction.
 * @default ["user"]
 * 
 * @arg Direction:str
 * @text Direction
 * @type combo
 * @option forward
 * @option backward
 * @option random
 * @desc Select which direction to face.
 * @default forward
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_FacePoint
 * @text MOVE: Face Point
 * @desc Causes the unit(s) to face a point on the screen.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change direction.
 * @default ["user"]
 * 
 * @arg Point:str
 * @text Point
 * @type combo
 * @option home
 * @option center
 * @option point x, y
 * @desc Select which point to face.
 * Replace 'x' and 'y' with coordinates
 * @default home
 * 
 * @arg FaceAway:eval
 * @text Face Away From?
 * @type boolean
 * @on Turn Away
 * @off Face Directly
 * @desc Face away from the point instead?
 * @default false
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_FaceTarget
 * @text MOVE: Face Target(s)
 * @desc Causes the unit(s) to face other targets on the screen.
 * Sideview-only!
 * 
 * @arg Targets1:arraystr
 * @text Targets (facing)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change direction.
 * @default ["user"]
 * 
 * @arg Targets2:arraystr
 * @text Targets (destination)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) for the turning unit(s) to face.
 * @default ["current target"]
 * 
 * @arg FaceAway:eval
 * @text Face Away From?
 * @type boolean
 * @on Turn Away
 * @off Face Directly
 * @desc Face away from the unit(s) instead?
 * @default false
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_Float
 * @text MOVE: Float
 * @desc Causes the unit(s) to float above the ground.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to make float.
 * @default ["user"]
 * 
 * @arg Height:eval
 * @text Desired Height
 * @desc Vertical distance to float upward.
 * You may use JavaScript code.
 * @default 100
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total float amount.
 * @default 12
 *
 * @arg EasingType:str
 * @text Float Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 * 
 * @arg WaitForFloat:eval
 * @text Wait For Float?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for floating to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_HomeReset
 * @text MOVE: Home Reset
 * @desc Causes the unit(s) to move back to their home position(s)
 * and face back to their original direction(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to move.
 * @default ["alive battlers"]
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_Jump
 * @text MOVE: Jump
 * @desc Causes the unit(s) to jump into the air.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to make jump.
 * @default ["user"]
 * 
 * @arg Height:eval
 * @text Desired Height
 * @desc Max jump height to go above the ground
 * You may use JavaScript code.
 * @default 100
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total jump amount.
 * @default 12
 * 
 * @arg WaitForJump:eval
 * @text Wait For Jump?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for jumping to complete before performing next command?
 * @default false
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_MoveBy
 * @text MOVE: Move Distance
 * @desc Moves unit(s) by a distance from their current position(s).
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to move.
 * @default ["user"]
 *
 * @arg DistanceAdjust:str
 * @text Distance Adjustment
 * @type select
 * @option Normal - No adjustments made
 * @value none
 * @option Horizontal - Actors adjust left, Enemies adjust right
 * @value horz
 * @option Vertical - Actors adjust Up, Enemies adjust down
 * @value vert
 * @option Both - Applies both Horizontal and Vertical
 * @value horz + vert
 * @desc Makes adjustments to distance values to determine
 * which direction to move unit(s).
 * @default horz
 * 
 * @arg DistanceX:eval
 * @text Distance: X
 * @parent DistanceAdjust:str
 * @desc Horizontal distance to move.
 * You may use JavaScript code.
 * @default 48
 * 
 * @arg DistanceY:eval
 * @text Distance: Y
 * @parent DistanceAdjust:str
 * @desc Vertical distance to move.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total movement amount.
 * @default 12
 * 
 * @arg FaceDirection:eval
 * @text Face Destination?
 * @type boolean
 * @on Turn
 * @off Don't
 * @desc Turn and face the destination?
 * @default true
 *
 * @arg EasingType:str
 * @text Movement Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 *
 * @arg MotionType:str
 * @text Movement Motion
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default walk
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_MoveToPoint
 * @text MOVE: Move To Point
 * @desc Moves unit(s) to a designated point on the screen.
 * Sideview-only! Points based off Graphics.boxWidth/Height.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to move.
 * @default ["user"]
 * 
 * @arg Destination:str
 * @text Destination Point
 * @type combo
 * @option home
 * @option center
 * @option point x, y
 * @desc Select which point to face.
 * Replace 'x' and 'y' with coordinates
 * @default home
 *
 * @arg OffsetAdjust:str
 * @text Offset Adjustment
 * @parent Destination:str
 * @type select
 * @option Normal - No adjustments made
 * @value none
 * @option Horizontal - Actors adjust left, Enemies adjust right
 * @value horz
 * @option Vertical - Actors adjust Up, Enemies adjust down
 * @value vert
 * @option Both - Applies both Horizontal and Vertical
 * @value horz + vert
 * @desc Makes adjustments to offset values to determine
 * which direction to adjust the destination by.
 * @default horz
 * 
 * @arg OffsetX:eval
 * @text Offset: X
 * @parent OffsetAdjust:str
 * @desc Horizontal offset to move.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg OffsetY:eval
 * @text Offset: Y
 * @parent OffsetAdjust:str
 * @desc Vertical offset to move.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total movement amount.
 * @default 12
 * 
 * @arg FaceDirection:eval
 * @text Face Destination?
 * @type boolean
 * @on Turn
 * @off Don't
 * @desc Turn and face the destination?
 * @default true
 *
 * @arg EasingType:str
 * @text Movement Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 *
 * @arg MotionType:str
 * @text Movement Motion
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default walk
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_MoveToTarget
 * @text MOVE: Move To Target(s)
 * @desc Moves unit(s) to another unit(s) on the battle field.
 * Sideview-only!
 * 
 * @arg Targets1:arraystr
 * @text Targets (Moving)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to move.
 * @default ["user"]
 * 
 * @arg Targets2:arraystr
 * @text Targets (Destination)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to move to.
 * @default ["all targets"]
 * 
 * @arg TargetLocation:str
 * @text Target Location
 * @parent Targets2:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part target group to move to.
 * @default front base
 * 
 * @arg MeleeDistance:eval
 * @text Melee Distance
 * @parent TargetLocation:str
 * @desc The melee distance away from the target location
 * in addition to the battler's width.
 * @default 24
 *
 * @arg OffsetAdjust:str
 * @text Offset Adjustment
 * @parent Targets2:arraystr
 * @type select
 * @option Normal - No adjustments made
 * @value none
 * @option Horizontal - Actors adjust left, Enemies adjust right
 * @value horz
 * @option Vertical - Actors adjust Up, Enemies adjust down
 * @value vert
 * @option Both - Applies both Horizontal and Vertical
 * @value horz + vert
 * @desc Makes adjustments to offset values to determine
 * which direction to adjust the destination by.
 * @default horz
 * 
 * @arg OffsetX:eval
 * @text Offset: X
 * @parent OffsetAdjust:str
 * @desc Horizontal offset to move.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg OffsetY:eval
 * @text Offset: Y
 * @parent OffsetAdjust:str
 * @desc Vertical offset to move.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total movement amount.
 * @default 12
 * 
 * @arg FaceDirection:eval
 * @text Face Destination?
 * @type boolean
 * @on Turn
 * @off Don't
 * @desc Turn and face the destination?
 * @default true
 *
 * @arg EasingType:str
 * @text Movement Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 *
 * @arg MotionType:str
 * @text Movement Motion
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default walk
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_Opacity
 * @text MOVE: Opacity
 * @desc Causes the unit(s) to change opacity.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change opacity.
 * @default ["user"]
 * 
 * @arg Opacity:eval
 * @text Desired Opacity
 * @desc Change to this opacity value.
 * You may use JavaScript code.
 * @default 255
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for opacity change.
 * @default 12
 *
 * @arg EasingType:str
 * @text Opacity Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 * 
 * @arg WaitForOpacity:eval
 * @text Wait For Opacity?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for opacity changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_Scale
 * @text MOVE: Scale/Grow/Shrink
 * @desc Causes the unit(s) to scale, grow, or shrink?.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change the scale of.
 * @default ["user"]
 * 
 * @arg ScaleX:eval
 * @text Scale X
 * @desc What target scale value do you want?
 * 1.0 is normal size.
 * @default 1.00
 * 
 * @arg ScaleY:eval
 * @text Scale Y
 * @desc What target scale value do you want?
 * 1.0 is normal size.
 * @default 1.00
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to scale for.
 * @default 12
 *
 * @arg EasingType:str
 * @text Scale Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 * 
 * @arg WaitForScale:eval
 * @text Wait For Scale?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for scaling to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_Skew
 * @text MOVE: Skew/Distort
 * @desc Causes the unit(s) to skew.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to skew.
 * @default ["user"]
 * 
 * @arg SkewX:eval
 * @text Skew X
 * @desc X variance to skew?
 * Use small values for the best results.
 * @default 0.00
 * 
 * @arg SkewY:eval
 * @text Skew Y
 * @desc Y variance to skew?
 * Use small values for the best results.
 * @default 0.00
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to skew for.
 * @default 12
 *
 * @arg EasingType:str
 * @text Skew Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 * 
 * @arg WaitForSkew:eval
 * @text Wait For Skew?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for skew to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_Spin
 * @text MOVE: Spin/Rotate
 * @desc Causes the unit(s) to spin.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to spin.
 * @default ["user"]
 * 
 * @arg Angle:eval
 * @text Angle
 * @desc How many degrees to spin?
 * @default 360
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to spin for.
 * @default 12
 *
 * @arg EasingType:str
 * @text Spin Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 * 
 * @arg RevertAngle:eval
 * @text Revert Angle on Finish
 * @type boolean
 * @on Revert
 * @off Don't
 * @desc Revert angle after spinning?
 * @default true
 * 
 * @arg WaitForSpin:eval
 * @text Wait For Spin?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for spin to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForFloat
 * @text MOVE: Wait For Float
 * @desc Waits for floating to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForJump
 * @text MOVE: Wait For Jump
 * @desc Waits for jumping to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForMovement
 * @text MOVE: Wait For Movement
 * @desc Waits for movement to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForOpacity
 * @text MOVE: Wait For Opacity
 * @desc Waits for opacity changes to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForScale
 * @text MOVE: Wait For Scale
 * @desc Waits for scaling to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForSkew
 * @text MOVE: Wait For Skew
 * @desc Waits for skewing to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForSpin
 * @text MOVE: Wait For Spin
 * @desc Waits for spinning to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceProjectile
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakProjectile
 * @text Action Sequences - Projectiles
 * @desc Create projectiles on the screen and fire them off at a target.
 * Requires VisuMZ_3_ActSeqProjectiles!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Projectile_Animation
 * @text PROJECTILE: Animation
 * @desc Create an animation projectile and fire it at a target.
 * Requires VisuMZ_3_ActSeqProjectiles!
 * 
 * @arg Coordinates
 *
 * @arg Start:struct
 * @text Start Location
 * @parent Coordinates
 * @type struct<ProjectileStart>
 * @desc Settings to determine where the projectile(s) start from.
 * @default {"Type:str":"target","Targets:arraystr":"[\"user\"]","TargetCenter:eval":"false","PointX:eval":"Graphics.width / 2","PointY:eval":"Graphics.height / 2","OffsetX:eval":"+0","OffsetY:eval":"+0"}
 *
 * @arg Goal:struct
 * @text Goal Location
 * @parent Coordinates
 * @type struct<ProjectileGoal>
 * @desc Settings to determine where the projectile(s) start from.
 * @default {"Type:str":"target","Targets:arraystr":"[\"all targets\"]","TargetCenter:eval":"false","PointX:eval":"Graphics.width / 2","PointY:eval":"Graphics.height / 2","OffsetX:eval":"+0","OffsetY:eval":"+0"}
 * 
 * @arg Settings
 *
 * @arg AnimationID:num
 * @text Animation ID
 * @parent Settings
 * @type animation
 * @desc Determine which animation to use as a projectile.
 * @default 77
 * 
 * @arg Duration:eval
 * @text Duration
 * @parent Settings
 * @desc Duration for the projectile(s) to travel.
 * @default 20
 * 
 * @arg WaitForProjectile:eval
 * @text Wait For Projectile?
 * @parent Settings
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for projectile(s) to reach their destination before
 * going onto the next command?
 * @default true
 * 
 * @arg Extra:struct
 * @text Extra Settings
 * @type struct<ProjectileExAni>
 * @desc Add extra settings to the projectile?
 * @default {"AutoAngle:eval":"true","AngleOffset:eval":"+0","Arc:eval":"0","EasingType:str":"Linear","Spin:eval":"+0.0"}
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Projectile_Icon
 * @text PROJECTILE: Icon
 * @desc Create an icon projectile and fire it at a target.
 * Requires VisuMZ_3_ActSeqProjectiles!
 * 
 * @arg Coordinates
 *
 * @arg Start:struct
 * @text Start Location
 * @parent Coordinates
 * @type struct<ProjectileStart>
 * @desc Settings to determine where the projectile(s) start from.
 * @default {"Type:str":"target","Targets:arraystr":"[\"user\"]","TargetCenter:eval":"false","PointX:eval":"Graphics.width / 2","PointY:eval":"Graphics.height / 2","OffsetX:eval":"+0","OffsetY:eval":"+0"}
 *
 * @arg Goal:struct
 * @text Goal Location
 * @parent Coordinates
 * @type struct<ProjectileGoal>
 * @desc Settings to determine where the projectile(s) start from.
 * @default {"Type:str":"target","Targets:arraystr":"[\"all targets\"]","TargetCenter:eval":"false","PointX:eval":"Graphics.width / 2","PointY:eval":"Graphics.height / 2","OffsetX:eval":"+0","OffsetY:eval":"+0"}
 * 
 * @arg Settings
 *
 * @arg Icon:eval
 * @text Icon Index
 * @parent Settings
 * @desc Determine which icon to use as a projectile.
 * You may use JavaScript code.
 * @default 118
 * 
 * @arg Duration:eval
 * @text Duration
 * @parent Settings
 * @desc Duration for the projectile(s) to travel.
 * @default 20
 * 
 * @arg WaitForProjectile:eval
 * @text Wait For Projectile?
 * @parent Settings
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for projectile(s) to reach their destination before
 * going onto the next command?
 * @default true
 * 
 * @arg Extra:struct
 * @text Extra Settings
 * @type struct<ProjectileExtra>
 * @desc Add extra settings to the projectile?
 * @default {"AutoAngle:eval":"true","AngleOffset:eval":"+0","Arc:eval":"0","BlendMode:num":"0","EasingType:str":"Linear","Hue:eval":"0","Scale:eval":"1.0","Spin:eval":"+0.0"}
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Projectile_Picture
 * @text PROJECTILE: Picture
 * @desc Create a picture projectile and fire it at a target.
 * Requires VisuMZ_3_ActSeqProjectiles!
 * 
 * @arg Coordinates
 *
 * @arg Start:struct
 * @text Start Location
 * @parent Coordinates
 * @type struct<ProjectileStart>
 * @desc Settings to determine where the projectile(s) start from.
 * @default {"Type:str":"target","Targets:arraystr":"[\"user\"]","TargetCenter:eval":"false","PointX:eval":"Graphics.width / 2","PointY:eval":"Graphics.height / 2","OffsetX:eval":"+0","OffsetY:eval":"+0"}
 *
 * @arg Goal:struct
 * @text Goal Location
 * @parent Coordinates
 * @type struct<ProjectileGoal>
 * @desc Settings to determine where the projectile(s) start from.
 * @default {"Type:str":"target","Targets:arraystr":"[\"all targets\"]","TargetCenter:eval":"false","PointX:eval":"Graphics.width / 2","PointY:eval":"Graphics.height / 2","OffsetX:eval":"+0","OffsetY:eval":"+0"}
 * 
 * @arg Settings
 *
 * @arg Picture:str
 * @text Picture Filename
 * @parent Settings
 * @type file
 * @dir img/pictures/
 * @desc Determine which picture to use as a projectile.
 * @default Untitled
 * 
 * @arg Duration:eval
 * @text Duration
 * @parent Settings
 * @desc Duration for the projectile(s) to travel.
 * @default 20
 * 
 * @arg WaitForProjectile:eval
 * @text Wait For Projectile?
 * @parent Settings
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for projectile(s) to reach their destination before
 * going onto the next command?
 * @default true
 * 
 * @arg Extra:struct
 * @text Extra Settings
 * @type struct<ProjectileExtra>
 * @desc Add extra settings to the projectile?
 * @default {"AutoAngle:eval":"true","AngleOffset:eval":"+0","Arc:eval":"0","BlendMode:num":"0","EasingType:str":"Linear","Hue:eval":"0","Scale:eval":"1.0","Spin:eval":"+0.0"}
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceSkew
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakSkew
 * @text Action Sequences - Skew
 * @desc Allows you to have control over the camera skew.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_ChangeSkew
 * @text SKEW: Change Skew
 * @desc Changes the camera skew.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg SkewX:eval
 * @text Skew X
 * @desc Change the camera skew X to this value.
 * @default 0
 * 
 * @arg SkewY:eval
 * @text Skew Y
 * @desc Change the camera skew Y to this value.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to change camera skew.
 * @default 60
 *
 * @arg EasingType:str
 * @text Skew Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForSkew:eval
 * @text Wait For Skew?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for skew changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Skew_Reset
 * @text SKEW: Reset Skew
 * @desc Reset any skew settings.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to reset camera skew.
 * @default 60
 *
 * @arg EasingType:str
 * @text Skew Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForSkew:eval
 * @text Wait For Skew?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for skew changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Skew_WaitForSkew
 * @text SKEW: Wait For Skew
 * @desc Waits for skew changes to complete before performing next command.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceTarget
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakTarget
 * @text Action Sequences - Target
 * @desc If using a manual target by target Action Sequence,
 * these commands will give you full control over its usage.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Target_CurrentIndex
 * @text TARGET: Current Index
 * @desc Sets the current index to this value.
 * Then decide to jump to a label (optional).
 * 
 * @arg Index:eval
 * @text Set Index To
 * @desc Sets current targeting index to this value.
 * 0 is the starting index of a target group.
 * @default 0
 * 
 * @arg JumpToLabel:str
 * @text Jump To Label
 * @desc If a target is found after the index change,
 * jump to this label in the Common Event.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Target_NextTarget
 * @text TARGET: Next Target
 * @desc Moves index forward by 1 to select a new current target.
 * Then decide to jump to a label (optional).
 * 
 * @arg JumpToLabel:str
 * @text Jump To Label
 * @desc If a target is found after the index change,
 * jump to this label in the Common Event.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Target_PrevTarget
 * @text TARGET: Previous Target
 * @desc Moves index backward by 1 to select a new current target.
 * Then decide to jump to a label (optional).
 * 
 * @arg JumpToLabel:str
 * @text Jump To Label
 * @desc If a target is found after the index change,
 * jump to this label in the Common Event.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Target_RandTarget
 * @text TARGET: Random Target
 * @desc Sets index randomly to determine new currernt target.
 * Then decide to jump to a label (optional).
 * 
 * @arg ForceRandom:eval
 * @text Force Random?
 * @type boolean
 * @on On
 * @off Off
 * @desc Index cannot be its previous index amount after random.
 * @default false
 * 
 * @arg JumpToLabel:str
 * @text Jump To Label
 * @desc If a target is found after the index change,
 * jump to this label in the Common Event.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceWeapon
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakWeapon
 * @text Action Sequences - Weapon
 * @desc Allows for finer control over Dual/Multi Wielding actors.
 * Only works for Actors.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Weapon_ClearActiveWeapon
 * @text WEAPON: Clear Weapon Slot
 * @desc Clears the active weapon slot (making others valid again).
 * Only works for Actors.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @desc Select unit(s) to clear the active weapon slot for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Weapon_NextActiveWeapon
 * @text WEAPON: Next Weapon Slot
 * @desc Goes to next active weapon slot (making others invalid).
 * If next slot is weaponless, don't label jump.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @desc Select unit(s) to change the next active weapon slot for.
 * @default ["user"]
 * 
 * @arg JumpToLabel:str
 * @text Jump To Label
 * @desc If a weapon is found after the index change,
 * jump to this label in the Common Event.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Weapon_SetActiveWeapon
 * @text WEAPON: Set Weapon Slot
 * @desc Sets the active weapon slot (making others invalid).
 * Only works for Actors.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @desc Select unit(s) to change the active weapon slot for.
 * @default ["user"]
 * 
 * @arg SlotID:eval
 * @text Weapon Slot ID
 * @desc Select weapon slot to make active (making others invalid).
 * Use 0 to clear and normalize. You may use JavaScript code.
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceZoom
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakZoom
 * @text Action Sequences - Zoom
 * @desc Allows you to have control over the screen zoom.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Zoom_Scale
 * @text ZOOM: Change Scale
 * @desc Changes the zoom scale.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Scale:eval
 * @text Scale
 * @desc The zoom scale to change to.
 * @default 1.0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to change battle zoom.
 * @default 60
 *
 * @arg EasingType:str
 * @text Zoom Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForZoom:eval
 * @text Wait For Zoom?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for zoom changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Zoom_Reset
 * @text ZOOM: Reset Zoom
 * @desc Reset any zoom settings.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to reset battle zoom.
 * @default 60
 *
 * @arg EasingType:str
 * @text Zoom Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForZoom:eval
 * @text Wait For Zoom?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for zoom changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Zoom_WaitForZoom
 * @text ZOOM: Wait For Zoom
 * @desc Waits for zoom to complete before performing next command.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceEnd
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @ ==========================================================================
 * @ Plugin Parameters
 * @ ==========================================================================
 *
 * @param BreakHead
 * @text --------------------------
 * @default ----------------------------------
 *
 * @param BattleCore
 * @default Plugin Parameters
 *
 * @param ATTENTION
 * @default READ THE HELP FILE
 *
 * @param BreakSettings
 * @text --------------------------
 * @default ----------------------------------
 *
 * @param AutoBattle:struct
 * @text Auto Battle Settings
 * @type struct<AutoBattle>
 * @desc Settings pertaining to Auto Battle.
 * @default {"BattleDisplay":"","AutoBattleMsg:str":"Press %1 or %2 to stop Auto Battle","AutoBattleOK:str":"OK","AutoBattleCancel:str":"Cancel","AutoBattleBgType:num":"1","AutoBattleRect:func":"\"const width = Graphics.width;\\nconst height = this.calcWindowHeight(1, false);\\nconst x = 0;\\nconst y = (Graphics.height - height) / 2;\\nreturn new Rectangle(x, y, width, height);\"","Options":"","AddOption:eval":"true","AdjustRect:eval":"true","StartName:str":"Auto Battle Start","StyleName:str":"Auto Battle Style","StyleOFF:str":"Attack","StyleON:str":"Skills"}
 *
 * @param Damage:struct
 * @text Damage Settings
 * @type struct<Damage>
 * @desc Settings pertaining to damage calculations.
 * @default {"DamageStyles":"","DefaultDamageStyle:str":"Standard","DamageStyleList:arraystruct":"[\"{\\\"Name:str\\\":\\\"Standard\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Declare Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Replace Formula\\\\\\\\nlet formula = item.damage.formula;\\\\\\\\nif (SceneManager.isSceneBattle() && !this.isCertainHit()) {\\\\\\\\n    const fmt = 'Math.max(this.applyArmorModifiers(b, %1), 0)';\\\\\\\\n    formula = formula.replace(/b.def/g, fmt.format('b.def'));\\\\\\\\n    formula = formula.replace(/b.mdf/g, fmt.format('b.mdf'));\\\\\\\\n    formula = formula.replace(/b.agi/g, fmt.format('b.agi'));\\\\\\\\n    formula = formula.replace(/b.luk/g, fmt.format('b.luk'));\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Damage\\\\\\\\nlet value = Math.max(eval(formula), 0);\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"return this.getItemDamageAmountTextOriginal();\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"Armor Scaling\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Declare Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Replace Formula\\\\\\\\nlet formula = item.damage.formula;\\\\\\\\nif (SceneManager.isSceneBattle() && !this.isCertainHit()) {\\\\\\\\n    const fmt = 'Math.max(this.applyArmorModifiers(b, %1), 1)';\\\\\\\\n    formula = formula.replace(/b.def/g, fmt.format('b.def'));\\\\\\\\n    formula = formula.replace(/b.mdf/g, fmt.format('b.mdf'));\\\\\\\\n    formula = formula.replace(/b.agi/g, fmt.format('b.agi'));\\\\\\\\n    formula = formula.replace(/b.luk/g, fmt.format('b.luk'));\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Damage\\\\\\\\nlet value = Math.max(eval(formula), 0);\\\\\\\\n\\\\\\\\n// Apply Defender's Defense Parameter\\\\\\\\nif (this.isDamage() && !this.isCertainHit()) {\\\\\\\\n\\\\\\\\n    // Calculate Base Armor\\\\\\\\n    let armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\n    armor = this.applyArmorModifiers(target, armor);\\\\\\\\n\\\\\\\\n    // Apply Armor to Damage\\\\\\\\n    if (armor >= 0) {\\\\\\\\n        value *= 100 / (100 + armor);\\\\\\\\n    } else {\\\\\\\\n        value *= 2 - (100 / (100 - armor));\\\\\\\\n    }\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"return this.getItemDamageAmountTextOriginal();\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"CT\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Multiplier\\\\\\\\nconst multiplier = Math.max(eval(item.damage.formula), 0);\\\\\\\\n\\\\\\\\n// Declare Values\\\\\\\\nlet value = 0;\\\\\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = Math.max(this.applyArmorModifiers(target, armor), 0);\\\\\\\\nlet attackStat = 0;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    attackStat = a.atk;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    attackStat =  a.mat;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    attackStat =  a.def;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    attackStat =  a.mdf;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Damage\\\\\\\\nattackStat = (attackStat * 1.75) + (level ** 2 / 45.5);\\\\\\\\nvalue = attackStat * 4;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value *= Math.max(256 - armor, 0) / 256;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value *= Math.max(102.4 - armor, 0) / 128;\\\\\\\\n}\\\\\\\\nvalue *= multiplier;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    const value = Math.max(eval(formula), 0);\\\\\\\\n    return '%1%'.format(Math.round(value * 100));\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"D4\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Multiplier\\\\\\\\nconst multiplier = Math.max(eval(item.damage.formula), 0);\\\\\\\\n\\\\\\\\n// Declare Values\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = this.applyArmorModifiers(target, armor);\\\\\\\\nlet stat = 0;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    stat = a.atk;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    stat = a.mat;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    stat = a.def;\\\\\\\\n    armor = 0;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    stat = a.mdf;\\\\\\\\n    armor = 0;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Damage \\\\\\\\nlet value = 1.5 * Math.max(2 * stat * multiplier - armor, 1) * multiplier / 5;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    const value = Math.max(eval(formula), 0);\\\\\\\\n    return '%1%'.format(Math.round(value * 100));\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"DQ\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Multiplier\\\\\\\\nlet multiplier = Math.max(eval(item.damage.formula), 0);\\\\\\\\nif (this.isCertainHit()) {\\\\\\\\n    let value = multiplier * Math.max(a.atk, a.mat);\\\\\\\\n    return (isNaN(value) ? 0 : value) * sign;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Get Primary Stats\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = this.applyArmorModifiers(b, armor);\\\\\\\\nlet stat = 1;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    stat = a.atk;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    stat = a.mat;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    stat = a.def;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    stat = a.mdf;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Check for Recovery\\\\\\\\nif (this.isRecover()) {\\\\\\\\n    let value = stat * multiplier * sign;\\\\\\\\n    return isNaN(value) ? 0 : value;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Damage\\\\\\\\nlet value = 0;\\\\\\\\nif (stat < ((2 + armor) / 2)) {\\\\\\\\n    // Plink Damage\\\\\\\\n    let baseline = Math.max(stat - ((12 * (armor - stat + 1)) / stat), 5);\\\\\\\\n    value = baseline / 3;\\\\\\\\n} else {\\\\\\\\n    // Normal Damage\\\\\\\\n    let baseline = Math.max(stat - (armor / 2), 1);\\\\\\\\n    value = baseline / 2;\\\\\\\\n}\\\\\\\\nvalue *= multiplier;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn isNaN(value) ? 0 : value;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    const value = Math.max(eval(formula), 0);\\\\\\\\n    return '%1%'.format(Math.round(value * 100));\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"FF7\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Power\\\\\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\\\\\n\\\\\\\\n// Declare base Damage\\\\\\\\nlet baseDamage = 0;\\\\\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    baseDamage = a.atk + ((a.atk + level) / 32) * ((a.atk * level) / 32);\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    baseDamage = 6 * (a.mat + level);\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    baseDamage = 6 * (a.def + level);\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    baseDamage = 6 * (a.mdf + level);\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Final Damage\\\\\\\\nlet value = baseDamage;\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = this.applyArmorModifiers(target, armor);\\\\\\\\nif (this.isRecover()) {\\\\\\\\n    value += 22 * power;\\\\\\\\n} else {\\\\\\\\n    value = (power * Math.max(512 - armor, 1) * baseDamage) / (16 * 512);\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Power\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Power\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    return formula;\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"FF8\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Power\\\\\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\\\\\n\\\\\\\\n// Declare Damage\\\\\\\\nlet Value = 0;\\\\\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = this.applyArmorModifiers(target, armor);\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value = a.atk ** 2 / 16 + a.atk;\\\\\\\\n    value *= Math.max(265 - armor, 1) / 256;\\\\\\\\n    value *= power / 16;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value = a.mat + power;\\\\\\\\n    value *= Math.max(265 - armor, 1) / 4;\\\\\\\\n    value *= power / 256;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    value = (power + a.def) * power / 2;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    value = (power + a.mdf) * power / 2;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Power\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Power\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    return formula;\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"FF9\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Damage Constant\\\\\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\\\\\nif (this.isCertainHit()) {\\\\\\\\n    return (isNaN(power) ? 0 : power) * sign;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Declare Main Stats\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = this.applyArmorModifiers(b, armor);\\\\\\\\nlet stat = 1;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    stat = a.atk;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    stat = a.mat;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    stat = a.def;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    stat = a.mdf;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Declare Base Damage\\\\\\\\nlet baseDamage = power;\\\\\\\\nif (this.isPhysical()) {\\\\\\\\n    baseDamage += stat;\\\\\\\\n}\\\\\\\\nif (this.isDamage() || this.isDrain()) {\\\\\\\\n    baseDamage -= armor;\\\\\\\\n    baseDamage = Math.max(1, baseDamage);\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Declare Bonus Damage\\\\\\\\nlet bonusDamage = stat + (((a.level || a.luk) + stat) / 8);\\\\\\\\n\\\\\\\\n// Declare Final Damage\\\\\\\\nlet value = baseDamage * bonusDamage * sign;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn isNaN(value) ? 0 : value;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Power\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Power\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    return formula;\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"FF10\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Damage Constant\\\\\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\\\\\nif (this.isCertainHit()) {\\\\\\\\n    return (isNaN(power) ? 0 : power) * sign;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Create Damage Offense Value\\\\\\\\nlet value = power;\\\\\\\\n\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value = (((a.atk ** 3) / 32) + 32) * power / 16;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value = power * ((a.mat ** 2 / 6) + power) / 4;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    value = power * ((a.def + power) / 2);\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    value = power * ((a.mdf + power) / 2);\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Apply Damage Defense Value\\\\\\\\nif (this.isDamage() || this.isDrain()) {\\\\\\\\n    let armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\n    armor = this.applyArmorModifiers(b, armor);\\\\\\\\n    armor = Math.max(armor, 1);\\\\\\\\n    value *= ((((armor - 280.4) ** 2) / 110) / 16) / 730;\\\\\\\\n    value *= (730 - (armor * 51 - (armor ** 2) / 11) / 10) / 730;\\\\\\\\n} else if (this.isRecover()) {\\\\\\\\n    value *= -1;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn isNaN(value) ? 0 : value;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Power\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Power\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    return formula;\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"MK\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Multiplier\\\\\\\\nconst multiplier = Math.max(eval(item.damage.formula), 0);\\\\\\\\n\\\\\\\\n// Declare Values\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = this.applyArmorModifiers(target, armor);\\\\\\\\nconst denominator = Math.max(200 + armor, 1);\\\\\\\\n\\\\\\\\n// Calculate Damage \\\\\\\\nlet value = 0;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value = 200 * a.atk / denominator;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value = 200 * a.mat / denominator;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    value = 200 * a.def / 200;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    value = 200 * a.mdf / 200;\\\\\\\\n}\\\\\\\\nvalue *= multiplier;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    const value = Math.max(eval(formula), 0);\\\\\\\\n    return '%1%'.format(Math.round(value * 100));\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"MOBA\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Damage Value\\\\\\\\nlet value = Math.max(eval(item.damage.formula), 0) * sign;\\\\\\\\n\\\\\\\\n// Apply Attacker's Offense Parameter\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value *= a.atk;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value *= a.mat;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    value *= a.def;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    value *= a.mdf;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Apply Defender's Defense Parameter\\\\\\\\nif (this.isDamage() && !this.isCertainHit()) {\\\\\\\\n\\\\\\\\n    // Calculate Base Armor\\\\\\\\n    let armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\n    armor = this.applyArmorModifiers(target, armor);\\\\\\\\n\\\\\\\\n    // Apply Armor to Damage\\\\\\\\n    if (armor >= 0) {\\\\\\\\n        value *= 100 / (100 + armor);\\\\\\\\n    } else {\\\\\\\\n        value *= 2 - (100 / (100 - armor));\\\\\\\\n    }\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn isNaN(value) ? 0 : value;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    const value = Math.max(eval(formula), 0);\\\\\\\\n    return '%1%'.format(Math.round(value * 100));\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"PKMN\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Power\\\\\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\\\\\n\\\\\\\\n// Declare Values\\\\\\\\nlet value = 0;\\\\\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = Math.max(this.applyArmorModifiers(target, armor), 0);\\\\\\\\nlet attackStat = 0;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    attackStat = a.atk;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    attackStat =  a.mat;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    attackStat =  a.def;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    attackStat =  a.mdf;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Damage\\\\\\\\nvalue = (((((2 * level) / 5) + 2) * power * (attackStat / armor)) / 50) + 2;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Power\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Power\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    return formula;\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\"]","Cap":"","EnableDamageCap:eval":"false","DefaultHardCap:num":"9999","EnableSoftCap:eval":"false","DefaultSoftCap:num":"0.80","DefaultSoftScaler:num":"0.1275","Popups":"","PopupDuration:num":"128","NewPopupBottom:eval":"true","PopupPosition:str":"base","PopupOffsetX:num":"0","PopupOffsetY:num":"0","PopupShiftX:num":"8","PopupShiftY:num":"-28","hpDamageFmt:str":"-%1","hpHealingFmt:str":"+%1","mpDamageFmt:str":"-%1 %2","mpHealingFmt:str":"+%1 %2","CriticalColor:eval":"[255, 0, 0, 160]","CriticalDuration:num":"128","Formulas":"","OverallFormulaJS:func":"\"// Declare Constants\\nconst target = arguments[0];\\nconst critical = arguments[1];\\nconst item = this.item();\\n\\n// Get Base Damage\\nconst baseValue = this.evalDamageFormula(target);\\n\\n// Calculate Element Modifiers\\nlet value = baseValue * this.calcElementRate(target);\\n\\n// Calculate Physical and Magical Modifiers\\nif (this.isPhysical()) {\\n    value *= target.pdr;\\n}\\nif (this.isMagical()) {\\n    value *= target.mdr;\\n}\\n\\n// Apply Healing Modifiers\\nif (baseValue < 0) {\\n    value *= target.rec;\\n}\\n\\n// Apply Critical Modifiers\\nif (critical) {\\n    value = this.applyCritical(value);\\n}\\n\\n// Apply Variance and Guard Modifiers\\nvalue = this.applyVariance(value, item.damage.variance);\\nvalue = this.applyGuard(value, target);\\n\\n// Finalize Damage\\nvalue = Math.round(value);\\nreturn value;\"","VarianceFormulaJS:func":"\"// Declare Constants\\nconst damage = arguments[0];\\nconst variance = arguments[1];\\n\\n// Calculate Variance\\nconst amp = Math.floor(Math.max((Math.abs(damage) * variance) / 100, 0));\\nconst v = Math.randomInt(amp + 1) + Math.randomInt(amp + 1) - amp;\\n\\n// Return Damage\\nreturn damage >= 0 ? damage + v : damage - v;\"","GuardFormulaJS:func":"\"// Declare Constants\\nconst damage = arguments[0];\\nconst target = arguments[1];\\n\\n// Return Damage Early\\nconst note = this.item().note;\\nif (note.match(/<UNBLOCKABLE>/i)) return damage;\\nif (!target.isGuard()) return damage;\\nif (damage < 0) return damage;\\n\\n// Declare Guard Rate\\nlet guardRate = 0.5;\\nguardRate /= target.grd;\\n\\n// Return Damage\\nreturn damage * guardRate;\"","Critical":"","CriticalHitRateJS:func":"\"// Declare Constants\\nconst user = this.subject();\\nconst target = arguments[0];\\n\\n// Create Base Critical Rate\\nlet rate = this.subject().cri * (1 - target.cev);\\n\\n// Apply Notetags\\nconst note = this.item().note;\\nif (note.match(/<ALWAYS CRITICAL>/i)) {\\n    return 1;\\n}\\nif (note.match(/<SET CRITICAL RATE:[ ](\\\\d+)([%％])>/i)) {\\n    return Number(RegExp.$1) / 100;\\n}\\nif (note.match(/<MODIFY CRITICAL RATE:[ ](\\\\d+)([%％])>/i)) {\\n    rate *= Number(RegExp.$1) / 100;\\n}\\nif (note.match(/<MODIFY CRITICAL RATE:[ ]([\\\\+\\\\-]\\\\d+)([%％])>/i)) {\\n    rate += Number(RegExp.$1) / 100;\\n}\\nif (note.match(/<JS CRITICAL RATE>\\\\s*([\\\\s\\\\S]*)\\\\s*<\\\\/JS CRITICAL RATE>/i)) {\\n    const code = String(RegExp.$1);\\n    try {\\n        eval(code);\\n    } catch (e) {\\n        if ($gameTemp.isPlaytest()) console.log(e);\\n    }\\n}\\n\\n// Apply LUK Buffs/Debuffs\\nconst lukStack = this.subject().buff(7);\\nrate *= 2 ** lukStack;\\n\\n// Return Rate\\nreturn rate;\"","CriticalHitMultiplier:func":"\"// Declare Constants\\nconst user = this.subject();\\nlet damage = arguments[0];\\nlet multiplier = 2.0;\\nlet bonusDamage = this.subject().luk * this.subject().cri;\\nif (this.isHpRecover() || this.isMpRecover()) {\\n    bonusDamage *= -1;\\n}\\n\\n// Apply Notetags\\nconst note = this.item().note;\\nif (note.match(/<MODIFY CRITICAL MULTIPLIER:[ ](\\\\d+)([%％])>/i)) {\\n    multiplier = Number(RegExp.$1) / 100;\\n}\\nif (note.match(/<MODIFY CRITICAL MULTIPLIER:[ ]([\\\\+\\\\-]\\\\d+)([%％])>/i)) {\\n    multiplier += Number(RegExp.$1) / 100;\\n}\\nif (note.match(/<MODIFY CRITICAL BONUS DAMAGE:[ ](\\\\d+)([%％])>/i)) {\\n    bonusDamage *= Number(RegExp.$1) / 100;\\n}\\nif (note.match(/<MODIFY CRITICAL BONUS DAMAGE:[ ]([\\\\+\\\\-]\\\\d+)([%％])>/i)) {\\n    bonusDamage += bonusDamage * (RegExp.$1) / 100;\\n}\\nif (note.match(/<JS CRITICAL DAMAGE>\\\\s*([\\\\s\\\\S]*)\\\\s*<\\\\/JS CRITICAL DAMAGE>/i)) {\\n    const code = String(RegExp.$1);\\n    try {\\n        eval(code);\\n    } catch (e) {\\n        if ($gameTemp.isPlaytest()) console.log(e);\\n    }\\n}\\n\\n// Return Damage\\nreturn damage * multiplier + bonusDamage;\""}
 *
 * @param Mechanics:struct
 * @text Mechanics Settings
 * @type struct<Mechanics>
 * @desc Settings pertaining to various game mechanics.
 * @default {"ActionSpeed":"","AllowRandomSpeed:eval":"false","CalcActionSpeedJS:func":"\"// Declare Constants\\nconst agi = this.subject().agi;\\n\\n// Create Speed\\nlet speed = agi;\\nif (this.allowRandomSpeed()) {\\n    speed += Math.randomInt(Math.floor(5 + agi / 4));\\n}\\nif (this.item()) {\\n    speed += this.item().speed;\\n}\\nif (this.isAttack()) {\\n    speed += this.subject().attackSpeed();\\n}\\n\\n// Return Speed\\nreturn speed;\"","BaseTroop":"","BaseTroopIDs:arraynum":"[\"1\"]","CommonEvents":"","BattleStartEvent:num":"0","BattleEndEvent:num":"0","VictoryEvent:num":"0","DefeatEvent:num":"0","EscapeSuccessEvent:num":"0","EscapeFailEvent:num":"0","Escape":"","CalcEscapeRatioJS:func":"\"// Calculate Escape Ratio\\nlet ratio = 0.5;\\nratio *= $gameParty.agility();\\nratio /= $gameTroop.agility();\\n\\n// Return Ratio\\nreturn ratio;\"","CalcEscapeRaiseJS:func":"\"// Calculate Escape Ratio\\nlet value = 0.1;\\nvalue += $gameParty.aliveMembers().length;\\n\\n// Return Value\\nreturn value;\"","BattleJS":"","PreStartBattleJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PostStartBattleJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","BattleVictoryJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","EscapeSuccessJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","EscapeFailureJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","BattleDefeatJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PreEndBattleJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PostEndBattleJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","TurnJS":"","PreStartTurnJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PostStartTurnJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PreEndTurnJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PostEndTurnJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PreRegenerateJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PostRegenerateJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","ActionJS":"","PreStartActionJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst user = this.subject();\\nconst target = user;\\nconst a = user;\\nconst b = user;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\"","PostStartActionJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst user = this.subject();\\nconst target = user;\\nconst a = user;\\nconst b = user;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\"","PreApplyJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst target = arguments[1];\\nconst user = this.subject();\\nconst a = user;\\nconst b = target;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\\n// Return Value\\nreturn value;\"","PreDamageJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst target = arguments[1];\\nconst user = this.subject();\\nconst a = user;\\nconst b = target;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\\n// Return Value\\nreturn value;\"","PostDamageJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst target = arguments[1];\\nconst user = this.subject();\\nconst a = user;\\nconst b = target;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\\n// Return Value\\nreturn value;\"","PostApplyJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst target = arguments[1];\\nconst user = this.subject();\\nconst a = user;\\nconst b = target;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\\n// Return Value\\nreturn value;\"","PreEndActionJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst user = this.subject();\\nconst target = user;\\nconst a = user;\\nconst b = user;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\"","PostEndActionJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst user = this.subject();\\nconst target = user;\\nconst a = user;\\nconst b = user;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\""}
 *
 * @param CmdWindows
 * @text --------------------------
 * @default ----------------------------------
 *
 * @param BattleLayout:struct
 * @text Battle Layout Settings
 * @type struct<BattleLayout>
 * @desc Settings that adjust how the battle layout appears.
 * @default {"Style:str":"default","ListStyle":"","ShowFacesListStyle:eval":"true","CommandWidth:num":"192","XPStyle":"","XPActorCommandLines:num":"4","XPActorDefaultHeight:num":"64","XPSpriteYLocation:str":"name","PotraitStyle":"","ShowPortraits:eval":"true","PortraitScale:num":"0.5","BorderStyle":"","SkillItemBorderCols:num":"1","ShowPortraitsBorderStyle:eval":"true","PortraitScaleBorderStyle:num":"1.25","SkillItemWindows":"","SkillItemMiddleLayout:eval":"false","SkillItemStandardCols:num":"2"}
 *
 * @param BattleLog:struct
 * @text Battle Log Settings
 * @type struct<BattleLog>
 * @desc Settings that adjust how Window_BattleLog behaves.
 * @default {"General":"","BackColor:str":"#000000","MaxLines:num":"10","MessageWait:num":"16","TextAlign:str":"center","BattleLogRectJS:func":"\"const wx = 0;\\nconst wy = 0;\\nconst ww = Graphics.boxWidth;\\nconst wh = this.calcWindowHeight(10, false);\\nreturn new Rectangle(wx, wy, ww, wh);\"","StartTurn":"","StartTurnShow:eval":"true","StartTurnMsg:str":"Turn %1","StartTurnWait:num":"40","DisplayAction":"","ActionCenteredName:eval":"true","ActionSkillMsg1:eval":"false","ActionSkillMsg2:eval":"true","ActionItemMsg:eval":"false","ActionChanges":"","ShowCounter:eval":"true","ShowReflect:eval":"true","ShowSubstitute:eval":"true","ActionResults":"","ShowFailure:eval":"false","ShowCritical:eval":"false","ShowMissEvasion:eval":"false","ShowHpDmg:eval":"false","ShowMpDmg:eval":"false","ShowTpDmg:eval":"false","DisplayStates":"","ShowAddedState:eval":"false","ShowRemovedState:eval":"false","ShowCurrentState:eval":"false","ShowAddedBuff:eval":"false","ShowAddedDebuff:eval":"false","ShowRemovedBuff:eval":"false"}
 *
 * @param Battleback:struct
 * @text Battleback Scaling
 * @type struct<Battleback>
 * @desc Settings that adjust how battlebacks scale.
 * @default {"DefaultStyle:str":"MZ","jsOneForOne:func":"\"// Adjust Size\\nthis.width = Graphics.width;\\nthis.height = Graphics.height;\\n\\n// Adjust Scale\\nconst scale = 1.0;\\nthis.scale.x = scale;\\nthis.scale.y = scale;\\n\\n// Adjust Coordinates\\nthis.x = 0;\\nthis.y = 0;\"","jsScaleToFit:func":"\"// Adjust Size\\nthis.width = Graphics.width;\\nthis.height = Graphics.height;\\n\\n// Adjust Scale\\nconst ratioX = this.width / this.bitmap.width;\\nconst ratioY = this.height / this.bitmap.height;\\nconst scale = Math.max(ratioX, ratioY);\\nthis.scale.x = scale;\\nthis.scale.y = scale;\\n\\n// Adjust Coordinates\\nthis.x = (Graphics.width - this.width) / 2;\\nthis.y = Graphics.height - this.height;\"","jsScaleDown:func":"\"// Adjust Size\\nthis.width = Graphics.width;\\nthis.height = Graphics.height;\\n\\n// Adjust Scale\\nconst ratioX = Math.min(1, this.width / this.bitmap.width);\\nconst ratioY = Math.min(1, this.height / this.bitmap.height);\\nconst scale = Math.max(ratioX, ratioY);\\nthis.scale.x = scale;\\nthis.scale.y = scale;\\n\\n// Adjust Coordinates\\nthis.x = (Graphics.width - this.width) / 2;\\nthis.y = Graphics.height - this.height;\"","jsScale Up:func":"\"// Adjust Size\\nthis.width = Graphics.width;\\nthis.height = Graphics.height;\\n\\n// Adjust Scale\\nconst ratioX = Math.max(1, this.width / this.bitmap.width);\\nconst ratioY = Math.max(1, this.height / this.bitmap.height);\\nconst scale = Math.max(ratioX, ratioY);\\nthis.scale.x = scale;\\nthis.scale.y = scale;\\n\\n// Adjust Coordinates\\nthis.x = (Graphics.width - this.width) / 2;\\nthis.y = Graphics.height - this.height;\""}
 *
 * @param PartyCmd:struct
 * @text Party Command Window
 * @type struct<PartyCmd>
 * @desc Settings that alter the Party Command Window in battle.
 * @default {"Cmd":"","CmdStyle:str":"auto","CmdTextAlign:str":"left","CmdIconFight:num":"76","CommandAddAutoBattle:eval":"true","CmdIconAutoBattle:num":"78","CmdTextAutoBattle:str":"Auto","CommandAddOptions:eval":"true","CmdIconOptions:num":"83","ActiveTpbOptionsMessage:str":"Options Menu queued after action is complete.","CmdIconEscape:num":"82","Access":"","SkipPartyCmd:eval":"true","DisablePartyCmd:eval":"false","HelpWindow":"","HelpFight:str":"Select actions to fight.","HelpAutoBattle:str":"Sets party to Auto Battle mode.","HelpOptions:str":"Opens up the Options Menu.","HelpEscape:str":"Attempt to escape the battle."}
 *
 * @param ActorCmd:struct
 * @text Actor Command Window
 * @type struct<ActorCmd>
 * @desc Settings that alter the Actor Command Window in battle.
 * @default {"Cmd":"","CmdStyle:str":"auto","CmdTextAlign:str":"left","CmdIconItem:num":"176","IconStypeNorm:num":"78","IconStypeMagic:num":"79","BattleCmd":"","BattleCmdList:arraystr":"[\"attack\",\"skills\",\"guard\",\"item\",\"escape\"]","HelpWindow":"","HelpSkillType:str":"Opens up a list of skills under the \\C[16]%1\\C[0] category.","HelpItem:str":"Opens up a list of items that you can use.","HelpEscape:str":"Attempt to escape the battle.","HelpAutoBattle:str":"Automatically choose an action suitable for combat."}
 *
 * @param VisualBreak
 * @text --------------------------
 * @default ----------------------------------
 *
 * @param Actor:struct
 * @text Actor Battler Settings
 * @type struct<Actor>
 * @desc Settings that alter various properties for actors.
 * @default {"Flinch":"","FlinchDistanceX:num":"12","FlinchDistanceY:num":"0","FlinchDuration:num":"6","SvBattlers":"","AnchorX:num":"0.5","AnchorY:num":"1.0","ChantStyle:eval":"true","OffsetX:num":"0","OffsetY:num":"0","MotionSpeed:num":"12","PrioritySortActive:eval":"true","PrioritySortActors:eval":"false","Shadow:eval":"true","SmoothImage:eval":"true","HomePosJS:func":"\"// Declare Constants\\nconst sprite = this;\\nconst actor = this._actor;\\nconst index = arguments[0];\\n\\n// Make Calculations\\nlet x = Math.round((Graphics.width / 2) + 192)\\nx -= Math.floor((Graphics.width - Graphics.boxWidth) / 2);\\nx += index * 32;\\nlet y = (Graphics.height - 200) - ($gameParty.maxBattleMembers() * 48);\\ny -= Math.floor((Graphics.height - Graphics.boxHeight) / 2);\\ny += index * 48;\\n\\n// Home Position Offsets\\nconst offsetNote = /<SIDEVIEW HOME OFFSET:[ ]([\\\\+\\\\-]\\\\d+),[ ]([\\\\+\\\\-]\\\\d+)>/i;\\nconst xOffsets = actor.traitObjects().map((obj) => (obj && obj.note.match(offsetNote) ? Number(RegExp.$1) : 0));\\nconst yOffsets = actor.traitObjects().map((obj) => (obj && obj.note.match(offsetNote) ? Number(RegExp.$2) : 0));\\nx = xOffsets.reduce((r, offset) => r + offset, x);\\ny = yOffsets.reduce((r, offset) => r + offset, y);\\n\\n// Set Home Position\\nthis.setHome(x, y);\""}
 *
 * @param Enemy:struct
 * @text Enemy Battler Settings
 * @type struct<Enemy>
 * @desc Settings that alter various properties for enemies.
 * @default {"Visual":"","AttackAnimation:num":"1","EmergeText:eval":"false","OffsetX:num":"0","OffsetY:num":"0","SmoothImage:eval":"true","SelectWindow":"","FrontViewSelect:eval":"false","SideviewSelect:eval":"true","NameFontSize:num":"22","SvBattlers":"","AllowCollapse:eval":"false","AnchorX:num":"0.5","AnchorY:num":"1.0","MotionIdle:str":"walk","Shadow:eval":"true","Width:num":"64","Height:num":"64","WtypeId:num":"0"}
 *
 * @param HpGauge:struct
 * @text HP Gauge Settings
 * @type struct<HpGauge>
 * @desc Settings that adjust the visual HP Gauge displayed in battle.
 * @default {"Display":"","ShowActorGauge:eval":"false","ShowEnemyGauge:eval":"true","RequiresDefeat:eval":"false","BTestBypass:eval":"true","Settings":"","AnchorX:num":"0.5","AnchorY:num":"1.0","Scale:num":"0.5","OffsetX:num":"0","OffsetY:num":"-3","Options":"","AddHpGaugeOption:eval":"true","AdjustRect:eval":"true","Name:str":"Show HP Gauge"}
 *
 * @param ActionSequence:struct
 * @text Action Sequence Settings
 * @type struct<ActionSequence>
 * @desc Settings that adjust how certain Action Sequences work.
 * @default {"AutoSequences":"","AutoMeleeSolo:eval":"true","AutoMeleeAoE:eval":"true","CastAnimations":"","CastCertain:num":"120","CastPhysical:num":"52","CastMagical:num":"51","CounterReflection":"","CounterPlayback:eval":"true","ReflectAnimation:num":"53","ReflectPlayback:eval":"true","Stepping":"","MeleeDistance:num":"24","StepDistanceX:num":"48","StepDistanceY:num":"0","StepDuration:num":"12"}
 *
 * @param BreakEnd1
 * @text --------------------------
 * @default ----------------------------------
 *
 * @param End Of
 * @default Plugin Parameters
 *
 * @param BreakEnd2
 * @text --------------------------
 * @default ----------------------------------
 *
 */
/* ----------------------------------------------------------------------------
 * Auto Battle Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~AutoBattle:
 *
 * @param BattleDisplay
 * @text Battle Display
 *
 * @param AutoBattleMsg:str
 * @text Message
 * @parent BattleDisplay
 * @desc Message that's displayed when Auto Battle is on.
 * Text codes allowed. %1 - OK button, %2 - Cancel button
 * @default Press %1 or %2 to stop Auto Battle
 *
 * @param AutoBattleOK:str
 * @text OK Button
 * @parent BattleDisplay
 * @desc Text used to represent the OK button.
 * If VisuMZ_0_CoreEngine is present, ignore this.
 * @default OK
 *
 * @param AutoBattleCancel:str
 * @text Cancel Button
 * @parent BattleDisplay
 * @desc Text used to represent the Cancel button.
 * If VisuMZ_0_CoreEngine is present, ignore this.
 * @default Cancel
 *
 * @param AutoBattleBgType:num
 * @text Background Type
 * @parent BattleDisplay
 * @type select
 * @option 0 - Window
 * @value 0
 * @option 1 - Dim
 * @value 1
 * @option 2 - Transparent
 * @value 2
 * @desc Select background type for Auto Battle window.
 * @default 1
 *
 * @param AutoBattleRect:func
 * @text JS: X, Y, W, H
 * @parent BattleDisplay
 * @type note
 * @desc Code used to determine the dimensions for this window.
 * @default "const width = Graphics.width;\nconst height = this.calcWindowHeight(1, false);\nconst x = 0;\nconst y = (Graphics.height - height) / 2;\nreturn new Rectangle(x, y, width, height);"
 *
 * @param Options
 *
 * @param AddOption:eval
 * @text Add Option?
 * @parent Options
 * @type boolean
 * @on Add
 * @off Don't Add
 * @desc Add the Auto Battle options to the Options menu?
 * @default true
 *
 * @param AdjustRect:eval
 * @text Adjust Window Height
 * @parent Options
 * @type boolean
 * @on Adjust
 * @off Don't
 * @desc Automatically adjust the options window height?
 * @default true
 *
 * @param StartName:str
 * @text Startup Name
 * @parent Options
 * @desc Command name of the option.
 * @default Auto Battle Start
 *
 * @param StyleName:str
 * @text Style Name
 * @parent Options
 * @desc Command name of the option.
 * @default Auto Battle Style
 *
 * @param StyleOFF:str
 * @text OFF
 * @parent StyleName:str
 * @desc Text displayed when Auto Battle Style is OFF.
 * @default Attack
 *
 * @param StyleON:str
 * @text ON
 * @parent StyleName:str
 * @desc Text displayed when Auto Battle Style is ON.
 * @default Skills
 *
 */
/* ----------------------------------------------------------------------------
 * Damage Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~Damage:
 *
 * @param DamageStyles
 * @text Damage Styles
 *
 * @param DefaultDamageStyle:str
 * @text Default Style
 * @parent DamageStyles
 * @desc Which Damage Style do you want to set as default?
 * Use 'Manual' to not use any styles at all.
 * @default Standard
 *
 * @param DamageStyleList:arraystruct
 * @text Style List
 * @parent DamageStyles
 * @type struct<DamageStyle>[]
 * @desc A list of the damage styles available.
 * These are used to calculate base damage.
 * @default ["{\"Name:str\":\"Standard\",\"Formula:func\":\"\\\"// Declare Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Replace Formula\\\\nlet formula = item.damage.formula;\\\\nif (SceneManager.isSceneBattle() && !this.isCertainHit()) {\\\\n    const fmt = 'Math.max(this.applyArmorModifiers(b, %1), 0)';\\\\n    formula = formula.replace(/b.def/g, fmt.format('b.def'));\\\\n    formula = formula.replace(/b.mdf/g, fmt.format('b.mdf'));\\\\n    formula = formula.replace(/b.agi/g, fmt.format('b.agi'));\\\\n    formula = formula.replace(/b.luk/g, fmt.format('b.luk'));\\\\n}\\\\n\\\\n// Calculate Damage\\\\nlet value = Math.max(eval(formula), 0);\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"return this.getItemDamageAmountTextOriginal();\\\"\"}","{\"Name:str\":\"Armor Scaling\",\"Formula:func\":\"\\\"// Declare Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Replace Formula\\\\nlet formula = item.damage.formula;\\\\nif (SceneManager.isSceneBattle() && !this.isCertainHit()) {\\\\n    const fmt = 'Math.max(this.applyArmorModifiers(b, %1), 1)';\\\\n    formula = formula.replace(/b.def/g, fmt.format('b.def'));\\\\n    formula = formula.replace(/b.mdf/g, fmt.format('b.mdf'));\\\\n    formula = formula.replace(/b.agi/g, fmt.format('b.agi'));\\\\n    formula = formula.replace(/b.luk/g, fmt.format('b.luk'));\\\\n}\\\\n\\\\n// Calculate Damage\\\\nlet value = Math.max(eval(formula), 0);\\\\n\\\\n// Apply Defender's Defense Parameter\\\\nif (this.isDamage() && !this.isCertainHit()) {\\\\n\\\\n    // Calculate Base Armor\\\\n    let armor = this.isPhysical() ? b.def : b.mdf;\\\\n    armor = this.applyArmorModifiers(target, armor);\\\\n\\\\n    // Apply Armor to Damage\\\\n    if (armor >= 0) {\\\\n        value *= 100 / (100 + armor);\\\\n    } else {\\\\n        value *= 2 - (100 / (100 - armor));\\\\n    }\\\\n}\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"return this.getItemDamageAmountTextOriginal();\\\"\"}","{\"Name:str\":\"CT\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Multiplier\\\\nconst multiplier = Math.max(eval(item.damage.formula), 0);\\\\n\\\\n// Declare Values\\\\nlet value = 0;\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = Math.max(this.applyArmorModifiers(target, armor), 0);\\\\nlet attackStat = 0;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    attackStat = a.atk;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    attackStat =  a.mat;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    attackStat =  a.def;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    attackStat =  a.mdf;\\\\n}\\\\n\\\\n// Calculate Damage\\\\nattackStat = (attackStat * 1.75) + (level ** 2 / 45.5);\\\\nvalue = attackStat * 4;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    value *= Math.max(256 - armor, 0) / 256;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    value *= Math.max(102.4 - armor, 0) / 128;\\\\n}\\\\nvalue *= multiplier;\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    const value = Math.max(eval(formula), 0);\\\\n    return '%1%'.format(Math.round(value * 100));\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"D4\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Multiplier\\\\nconst multiplier = Math.max(eval(item.damage.formula), 0);\\\\n\\\\n// Declare Values\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = this.applyArmorModifiers(target, armor);\\\\nlet stat = 0;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    stat = a.atk;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    stat = a.mat;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    stat = a.def;\\\\n    armor = 0;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    stat = a.mdf;\\\\n    armor = 0;\\\\n}\\\\n\\\\n// Calculate Damage \\\\nlet value = 1.5 * Math.max(2 * stat * multiplier - armor, 1) * multiplier / 5;\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    const value = Math.max(eval(formula), 0);\\\\n    return '%1%'.format(Math.round(value * 100));\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"DQ\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Multiplier\\\\nlet multiplier = Math.max(eval(item.damage.formula), 0);\\\\nif (this.isCertainHit()) {\\\\n    let value = multiplier * Math.max(a.atk, a.mat);\\\\n    return (isNaN(value) ? 0 : value) * sign;\\\\n}\\\\n\\\\n// Get Primary Stats\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = this.applyArmorModifiers(b, armor);\\\\nlet stat = 1;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    stat = a.atk;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    stat = a.mat;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    stat = a.def;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    stat = a.mdf;\\\\n}\\\\n\\\\n// Check for Recovery\\\\nif (this.isRecover()) {\\\\n    let value = stat * multiplier * sign;\\\\n    return isNaN(value) ? 0 : value;\\\\n}\\\\n\\\\n// Calculate Damage\\\\nlet value = 0;\\\\nif (stat < ((2 + armor) / 2)) {\\\\n    // Plink Damage\\\\n    let baseline = Math.max(stat - ((12 * (armor - stat + 1)) / stat), 5);\\\\n    value = baseline / 3;\\\\n} else {\\\\n    // Normal Damage\\\\n    let baseline = Math.max(stat - (armor / 2), 1);\\\\n    value = baseline / 2;\\\\n}\\\\nvalue *= multiplier;\\\\n\\\\n// Return Value\\\\nreturn isNaN(value) ? 0 : value;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    const value = Math.max(eval(formula), 0);\\\\n    return '%1%'.format(Math.round(value * 100));\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"FF7\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Power\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\n\\\\n// Declare base Damage\\\\nlet baseDamage = 0;\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    baseDamage = a.atk + ((a.atk + level) / 32) * ((a.atk * level) / 32);\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    baseDamage = 6 * (a.mat + level);\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    baseDamage = 6 * (a.def + level);\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    baseDamage = 6 * (a.mdf + level);\\\\n}\\\\n\\\\n// Calculate Final Damage\\\\nlet value = baseDamage;\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = this.applyArmorModifiers(target, armor);\\\\nif (this.isRecover()) {\\\\n    value += 22 * power;\\\\n} else {\\\\n    value = (power * Math.max(512 - armor, 1) * baseDamage) / (16 * 512);\\\\n}\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Power\",\"DamageType2:str\":\"%1 Damage Power\",\"DamageType3:str\":\"%1 Recovery Power\",\"DamageType4:str\":\"%1 Recovery Power\",\"DamageType5:str\":\"%1 Drain Power\",\"DamageType6:str\":\"%1 Drain Power\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    return formula;\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"FF8\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Power\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\n\\\\n// Declare Damage\\\\nlet Value = 0;\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = this.applyArmorModifiers(target, armor);\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    value = a.atk ** 2 / 16 + a.atk;\\\\n    value *= Math.max(265 - armor, 1) / 256;\\\\n    value *= power / 16;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    value = a.mat + power;\\\\n    value *= Math.max(265 - armor, 1) / 4;\\\\n    value *= power / 256;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    value = (power + a.def) * power / 2;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    value = (power + a.mdf) * power / 2;\\\\n}\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Power\",\"DamageType2:str\":\"%1 Damage Power\",\"DamageType3:str\":\"%1 Recovery Power\",\"DamageType4:str\":\"%1 Recovery Power\",\"DamageType5:str\":\"%1 Drain Power\",\"DamageType6:str\":\"%1 Drain Power\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    return formula;\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"FF9\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Damage Constant\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\nif (this.isCertainHit()) {\\\\n    return (isNaN(power) ? 0 : power) * sign;\\\\n}\\\\n\\\\n// Declare Main Stats\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = this.applyArmorModifiers(b, armor);\\\\nlet stat = 1;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    stat = a.atk;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    stat = a.mat;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    stat = a.def;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    stat = a.mdf;\\\\n}\\\\n\\\\n// Declare Base Damage\\\\nlet baseDamage = power;\\\\nif (this.isPhysical()) {\\\\n    baseDamage += stat;\\\\n}\\\\nif (this.isDamage() || this.isDrain()) {\\\\n    baseDamage -= armor;\\\\n    baseDamage = Math.max(1, baseDamage);\\\\n}\\\\n\\\\n// Declare Bonus Damage\\\\nlet bonusDamage = stat + (((a.level || a.luk) + stat) / 8);\\\\n\\\\n// Declare Final Damage\\\\nlet value = baseDamage * bonusDamage * sign;\\\\n\\\\n// Return Value\\\\nreturn isNaN(value) ? 0 : value;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Power\",\"DamageType2:str\":\"%1 Damage Power\",\"DamageType3:str\":\"%1 Recovery Power\",\"DamageType4:str\":\"%1 Recovery Power\",\"DamageType5:str\":\"%1 Drain Power\",\"DamageType6:str\":\"%1 Drain Power\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    return formula;\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"FF10\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Damage Constant\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\nif (this.isCertainHit()) {\\\\n    return (isNaN(power) ? 0 : power) * sign;\\\\n}\\\\n\\\\n// Create Damage Offense Value\\\\nlet value = power;\\\\n\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    value = (((a.atk ** 3) / 32) + 32) * power / 16;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    value = power * ((a.mat ** 2 / 6) + power) / 4;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    value = power * ((a.def + power) / 2);\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    value = power * ((a.mdf + power) / 2);\\\\n}\\\\n\\\\n// Apply Damage Defense Value\\\\nif (this.isDamage() || this.isDrain()) {\\\\n    let armor = this.isPhysical() ? b.def : b.mdf;\\\\n    armor = this.applyArmorModifiers(b, armor);\\\\n    armor = Math.max(armor, 1);\\\\n    value *= ((((armor - 280.4) ** 2) / 110) / 16) / 730;\\\\n    value *= (730 - (armor * 51 - (armor ** 2) / 11) / 10) / 730;\\\\n} else if (this.isRecover()) {\\\\n    value *= -1;\\\\n}\\\\n\\\\n// Return Value\\\\nreturn isNaN(value) ? 0 : value;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Power\",\"DamageType2:str\":\"%1 Damage Power\",\"DamageType3:str\":\"%1 Recovery Power\",\"DamageType4:str\":\"%1 Recovery Power\",\"DamageType5:str\":\"%1 Drain Power\",\"DamageType6:str\":\"%1 Drain Power\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    return formula;\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"MK\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Multiplier\\\\nconst multiplier = Math.max(eval(item.damage.formula), 0);\\\\n\\\\n// Declare Values\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = this.applyArmorModifiers(target, armor);\\\\nconst denominator = Math.max(200 + armor, 1);\\\\n\\\\n// Calculate Damage \\\\nlet value = 0;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    value = 200 * a.atk / denominator;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    value = 200 * a.mat / denominator;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    value = 200 * a.def / 200;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    value = 200 * a.mdf / 200;\\\\n}\\\\nvalue *= multiplier;\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    const value = Math.max(eval(formula), 0);\\\\n    return '%1%'.format(Math.round(value * 100));\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"MOBA\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Damage Value\\\\nlet value = Math.max(eval(item.damage.formula), 0) * sign;\\\\n\\\\n// Apply Attacker's Offense Parameter\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    value *= a.atk;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    value *= a.mat;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    value *= a.def;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    value *= a.mdf;\\\\n}\\\\n\\\\n// Apply Defender's Defense Parameter\\\\nif (this.isDamage() && !this.isCertainHit()) {\\\\n\\\\n    // Calculate Base Armor\\\\n    let armor = this.isPhysical() ? b.def : b.mdf;\\\\n    armor = this.applyArmorModifiers(target, armor);\\\\n\\\\n    // Apply Armor to Damage\\\\n    if (armor >= 0) {\\\\n        value *= 100 / (100 + armor);\\\\n    } else {\\\\n        value *= 2 - (100 / (100 - armor));\\\\n    }\\\\n}\\\\n\\\\n// Return Value\\\\nreturn isNaN(value) ? 0 : value;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    const value = Math.max(eval(formula), 0);\\\\n    return '%1%'.format(Math.round(value * 100));\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"PKMN\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Power\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\n\\\\n// Declare Values\\\\nlet value = 0;\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = Math.max(this.applyArmorModifiers(target, armor), 0);\\\\nlet attackStat = 0;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    attackStat = a.atk;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    attackStat =  a.mat;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    attackStat =  a.def;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    attackStat =  a.mdf;\\\\n}\\\\n\\\\n// Calculate Damage\\\\nvalue = (((((2 * level) / 5) + 2) * power * (attackStat / armor)) / 50) + 2;\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Power\",\"DamageType2:str\":\"%1 Damage Power\",\"DamageType3:str\":\"%1 Recovery Power\",\"DamageType4:str\":\"%1 Recovery Power\",\"DamageType5:str\":\"%1 Drain Power\",\"DamageType6:str\":\"%1 Drain Power\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    return formula;\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}"]
 *
 * @param Cap
 * @text Damage Cap
 *
 * @param EnableDamageCap:eval
 * @text Enable Damage Cap?
 * @parent Cap
 * @type boolean
 * @on Enable
 * @off Disable
 * @desc Put a maximum hard damage cap on how far damage can go?
 * This can be broken through the usage of notetags.
 * @default false
 *
 * @param DefaultHardCap:num
 * @text Default Hard Cap
 * @parent EnableDamageCap:eval
 * @type number
 * @min 1
 * @desc The default hard damage cap used before applying damage.
 * @default 9999
 *
 * @param EnableSoftCap:eval
 * @text Enable Soft Cap?
 * @parent Cap
 * @type boolean
 * @on Enable
 * @off Disable
 * @desc Soft caps ease in the damage values leading up to the 
 * hard damage cap. Requires hard Damage Cap enabled.
 * @default false
 *
 * @param DefaultSoftCap:num
 * @text Base Soft Cap Rate
 * @parent EnableSoftCap:eval
 * @desc The default soft damage cap used before applying damage.
 * @default 0.80
 *
 * @param DefaultSoftScaler:num
 * @text Soft Scale Constant
 * @parent EnableSoftCap:eval
 * @desc The default soft damage cap used before applying damage.
 * @default 0.1275
 *
 * @param Popups
 *
 * @param PopupDuration:num
 * @text Popup Duration
 * @parent Popups
 * @type number
 * @min 1
 * @desc Adjusts how many frames a popup stays visible.
 * @default 128
 *
 * @param NewPopupBottom:eval
 * @text Newest Popups Bottom
 * @parent Popups
 * @type boolean
 * @on Bottom
 * @off Top
 * @desc Puts the newest popups at the bottom.
 * @default true
 *
 * @param PopupPosition:str
 * @text Appear Position
 * @parent Popups
 * @type select
 * @option Head - At the top of the battler.
 * @value head
 * @option Center - At the center of the battler.
 * @value center
 * @option Base - At the foot of the battler.
 * @value base
 * @desc Selects where you want popups to appear relative to the battler.
 * @default base
 *
 * @param PopupOffsetX:num
 * @text Offset X
 * @parent Popups
 * @desc Sets how much to offset the sprites by horizontally.
 * Negative values go left. Positive values go right.
 * @default 0
 *
 * @param PopupOffsetY:num
 * @text Offset Y
 * @parent Popups
 * @desc Sets how much to offset the sprites by vertically.
 * Negative values go up. Positive values go down.
 * @default 0
 *
 * @param PopupShiftX:num
 * @text Shift X
 * @parent Popups
 * @desc Sets how much to shift the sprites by horizontally.
 * Negative values go left. Positive values go right.
 * @default 8
 *
 * @param PopupShiftY:num
 * @text Shift Y
 * @parent Popups
 * @desc Sets how much to shift the sprites by vertically.
 * Negative values go up. Positive values go down.
 * @default -28
 *
 * @param hpDamageFmt:str
 * @text HP Damage Format
 * @parent Popups
 * @desc Determines HP damage format for popup.
 * %1 - Value, %2 - HP Text
 * @default -%1
 *
 * @param hpHealingFmt:str
 * @text HP Healing Format
 * @parent Popups
 * @desc Determines HP healing format for popup.
 * %1 - Value, %2 - HP Text
 * @default +%1
 *
 * @param mpDamageFmt:str
 * @text MP Damage Format
 * @parent Popups
 * @desc Determines MP damage format for popup.
 * %1 - Value, %2 - MP Text
 * @default -%1 %2
 *
 * @param mpHealingFmt:str
 * @text MP Healing Format
 * @parent Popups
 * @desc Determines MP healing format for popup.
 * %1 - Value, %2 - MP Text
 * @default +%1 %2
 *
 * @param CriticalColor:eval
 * @text Critical Flash Color
 * @parent Popups
 * @desc Adjust the popup's flash color.
 * Format: [red, green, blue, alpha]
 * @default [255, 0, 0, 160]
 *
 * @param CriticalDuration:num
 * @text Critical Duration
 * @parent Popups
 * @type number
 * @min 1
 * @desc Adjusts how many frames a the flash lasts.
 * @default 128
 *
 * @param Formulas
 *
 * @param OverallFormulaJS:func
 * @text JS: Overall Formula
 * @parent Formulas
 * @type note
 * @desc The overall formula used when calculating damage.
 * @default "// Declare Constants\nconst target = arguments[0];\nconst critical = arguments[1];\nconst item = this.item();\n\n// Get Base Damage\nconst baseValue = this.evalDamageFormula(target);\n\n// Calculate Element Modifiers\nlet value = baseValue * this.calcElementRate(target);\n\n// Calculate Physical and Magical Modifiers\nif (this.isPhysical()) {\n    value *= target.pdr;\n}\nif (this.isMagical()) {\n    value *= target.mdr;\n}\n\n// Apply Healing Modifiers\nif (baseValue < 0) {\n    value *= target.rec;\n}\n\n// Apply Critical Modifiers\nif (critical) {\n    value = this.applyCritical(value);\n}\n\n// Apply Variance and Guard Modifiers\nvalue = this.applyVariance(value, item.damage.variance);\nvalue = this.applyGuard(value, target);\n\n// Finalize Damage\nvalue = Math.round(value);\nreturn value;"
 *
 * @param VarianceFormulaJS:func
 * @text JS: Variance Formula
 * @parent Formulas
 * @type note
 * @desc The formula used when damage variance.
 * @default "// Declare Constants\nconst damage = arguments[0];\nconst variance = arguments[1];\n\n// Calculate Variance\nconst amp = Math.floor(Math.max((Math.abs(damage) * variance) / 100, 0));\nconst v = Math.randomInt(amp + 1) + Math.randomInt(amp + 1) - amp;\n\n// Return Damage\nreturn damage >= 0 ? damage + v : damage - v;"
 *
 * @param GuardFormulaJS:func
 * @text JS: Guard Formula
 * @parent Formulas
 * @type note
 * @desc The formula used when damage is guarded.
 * @default "// Declare Constants\nconst damage = arguments[0];\nconst target = arguments[1];\n\n// Return Damage Early\nconst note = this.item().note;\nif (note.match(/<UNBLOCKABLE>/i)) return damage;\nif (!target.isGuard()) return damage;\nif (damage < 0) return damage;\n\n// Declare Guard Rate\nlet guardRate = 0.5;\nguardRate /= target.grd;\n\n// Return Damage\nreturn damage * guardRate;"
 *
 * @param Critical
 * @text Critical Hits
 *
 * @param CriticalHitRateJS:func
 * @text JS: Rate Formula
 * @parent Critical
 * @type note
 * @desc The formula used to calculate Critical Hit Rates.
 * @default "// Declare Constants\nconst user = this.subject();\nconst target = arguments[0];\n\n// Create Base Critical Rate\nlet rate = this.subject().cri * (1 - target.cev);\n\n// Apply Notetags\nconst note = this.item().note;\nif (note.match(/<ALWAYS CRITICAL>/i)) {\n    return 1;\n}\nif (note.match(/<SET CRITICAL RATE:[ ](\\d+)([%％])>/i)) {\n    return Number(RegExp.$1) / 100;\n}\nif (note.match(/<MODIFY CRITICAL RATE:[ ](\\d+)([%％])>/i)) {\n    rate *= Number(RegExp.$1) / 100;\n}\nif (note.match(/<MODIFY CRITICAL RATE:[ ]([\\+\\-]\\d+)([%％])>/i)) {\n    rate += Number(RegExp.$1) / 100;\n}\nif (note.match(/<JS CRITICAL RATE>\\s*([\\s\\S]*)\\s*<\\/JS CRITICAL RATE>/i)) {\n    const code = String(RegExp.$1);\n    try {\n        eval(code);\n    } catch (e) {\n        if ($gameTemp.isPlaytest()) console.log(e);\n    }\n}\n\n// Apply LUK Buffs/Debuffs\nconst lukStack = this.subject().buff(7);\nrate *= 2 ** lukStack;\n\n// Return Rate\nreturn rate;"
 *
 * @param CriticalHitMultiplier:func
 * @text JS: Damage Formula
 * @parent Critical
 * @type note
 * @desc The formula used to calculate Critical Hit Damage modification.
 * @default "// Declare Constants\nconst user = this.subject();\nlet damage = arguments[0];\nlet multiplier = 2.0;\nlet bonusDamage = this.subject().luk * this.subject().cri;\n\n// Apply Notetags\nconst note = this.item().note;\nif (note.match(/<MODIFY CRITICAL MULTIPLIER:[ ](\\d+)([%％])>/i)) {\n    multiplier = Number(RegExp.$1) / 100;\n}\nif (note.match(/<MODIFY CRITICAL MULTIPLIER:[ ]([\\+\\-]\\d+)([%％])>/i)) {\n    multiplier += Number(RegExp.$1) / 100;\n}\nif (note.match(/<MODIFY CRITICAL BONUS DAMAGE:[ ](\\d+)([%％])>/i)) {\n    bonusDamage *= Number(RegExp.$1) / 100;\n}\nif (note.match(/<MODIFY CRITICAL BONUS DAMAGE:[ ]([\\+\\-]\\d+)([%％])>/i)) {\n    bonusDamage += bonusDamage * (RegExp.$1) / 100;\n}\nif (note.match(/<JS CRITICAL DAMAGE>\\s*([\\s\\S]*)\\s*<\\/JS CRITICAL DAMAGE>/i)) {\n    const code = String(RegExp.$1);\n    try {\n        eval(code);\n    } catch (e) {\n        if ($gameTemp.isPlaytest()) console.log(e);\n    }\n}\n\n// Return Damage\nreturn damage * multiplier + bonusDamage;"
 *
 */
/* ----------------------------------------------------------------------------
 * Damage Formula Style
 * ----------------------------------------------------------------------------
 */
/*~struct~DamageStyle:
 *
 * @param Name:str
 * @text Name
 * @desc Name of this Damage Style.
 * Used for notetags and such.
 * @default Untitled
 *
 * @param Formula:func
 * @text JS: Formula
 * @parent Name:str
 * @type note
 * @desc The base formula for this Damage Style.
 * @default "// Define Constants\nconst item = this.item();\nconst a = this.subject();\nconst b = target;\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\n\n// Create Damage Value\nlet value = Math.max(eval(item.damage.formula), 0) * sign;\n\n// Return Value\nreturn isNaN(value) ? 0 : value;"
 *
 * @param ItemsEquipsCore
 * @text Items & Equips Core
 *
 * @param DamageType
 * @text Damage Label
 * @parent ItemsEquipsCore
 *
 * @param DamageType1:str
 * @text HP Damage
 * @parent DamageType
 * @desc Vocabulary used for this data entry.
 * @default %1 Damage Multiplier
 *
 * @param DamageType2:str
 * @text MP Damage
 * @parent DamageType
 * @desc Vocabulary used for this data entry.
 * @default %1 Damage Multiplier
 *
 * @param DamageType3:str
 * @text HP Recovery
 * @parent DamageType
 * @desc Vocabulary used for this data entry.
 * @default %1 Recovery Multiplier
 *
 * @param DamageType4:str
 * @text MP Recovery
 * @parent DamageType
 * @desc Vocabulary used for this data entry.
 * @default %1 Recovery Multiplier
 *
 * @param DamageType5:str
 * @text HP Drain
 * @parent DamageType
 * @desc Vocabulary used for this data entry.
 * @default %1 Drain Multiplier
 *
 * @param DamageType6:str
 * @text MP Drain
 * @parent DamageType
 * @desc Vocabulary used for this data entry.
 * @default %1 Drain Multiplier
 *
 * @param DamageDisplay:func
 * @text JS: Damage Display
 * @parent ItemsEquipsCore
 * @type note
 * @desc Code used the data displayed for this category.
 * @default "// Define Constants\nconst item = this._item;\nconst formula = item.damage.formula;\nconst a = this._tempActorA;\nconst b = this._tempActorB;\nconst user = a;\nconst target = b;\n\n// Return Value\ntry {\n    const value = Math.max(eval(formula), 0);\n    return '%1%'.format(Math.round(value * 100));\n} catch (e) {\n    if ($gameTemp.isPlaytest()) {\n        console.log('Damage Formula Error for %1'.format(this._item.name));\n    }\n    return '?????';\n}"
 *
 */
/* ----------------------------------------------------------------------------
 * Mechanics Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~Mechanics:
 *
 * @param ActionSpeed
 * @text Action Speed
 *
 * @param AllowRandomSpeed:eval
 * @text Allow Random Speed?
 * @parent ActionSpeed
 * @type boolean
 * @on Allow
 * @off Disable
 * @desc Allow speed to be randomized base off the user's AGI?
 * @default false
 *
 * @param CalcActionSpeedJS:func
 * @text JS: Calculate
 * @parent ActionSpeed
 * @type note
 * @desc Code used to calculate action speed.
 * @default "// Declare Constants\nconst agi = this.subject().agi;\n\n// Create Speed\nlet speed = agi;\nif (this.allowRandomSpeed()) {\n    speed += Math.randomInt(Math.floor(5 + agi / 4));\n}\nif (this.item()) {\n    speed += this.item().speed;\n}\nif (this.isAttack()) {\n    speed += this.subject().attackSpeed();\n}\n\n// Return Speed\nreturn speed;"
 *
 * @param BaseTroop
 * @text Base Troop
 *
 * @param BaseTroopIDs:arraynum
 * @text Base Troop ID's
 * @parent BaseTroop
 * @type troop[]
 * @desc Select the Troop ID(s) to duplicate page events from for all other troops.
 * @default ["1"]
 *
 * @param CommonEvents
 * @text Common Events (on Map)
 *
 * @param BattleStartEvent:num
 * @text Pre-Battle Event
 * @parent CommonEvents
 * @type common_event
 * @desc Common Event to run before each battle on map.
 * Use to 0 to not run any Common Event at all.
 * @default 0
 *
 * @param BattleEndEvent:num
 * @text Post-Battle Event
 * @parent CommonEvents
 * @type common_event
 * @desc Queued Common Event to run after each battle on map.
 * Use to 0 to not run any Common Event at all.
 * @default 0
 *
 * @param VictoryEvent:num
 * @text Victory Event
 * @parent CommonEvents
 * @type common_event
 * @desc Queued Common Event to run upon victory on map.
 * Use to 0 to not run any Common Event at all.
 * @default 0
 *
 * @param DefeatEvent:num
 * @text Defeat Event
 * @parent CommonEvents
 * @type common_event
 * @desc Queued Common Event to run upon defeat on map.
 * Use to 0 to not run any Common Event at all.
 * @default 0
 *
 * @param EscapeSuccessEvent:num
 * @text Escape Success Event
 * @parent CommonEvents
 * @type common_event
 * @desc Queued Common Event to run upon escape success on map.
 * Use to 0 to not run any Common Event at all.
 * @default 0
 *
 * @param EscapeFailEvent:num
 * @text Escape Fail Event
 * @parent CommonEvents
 * @type common_event
 * @desc Queued Common Event to run upon escape failure on map.
 * Use to 0 to not run any Common Event at all.
 * @default 0
 *
 * @param Escape
 *
 * @param CalcEscapeRatioJS:func
 * @text JS: Calc Escape Ratio
 * @parent Escape
 * @type note
 * @desc Code used to calculate the escape success ratio.
 * @default "// Calculate Escape Ratio\nlet ratio = 0.5;\nratio *= $gameParty.agility();\nratio /= $gameTroop.agility();\n\n// Return Ratio\nreturn ratio;"
 *
 * @param CalcEscapeRaiseJS:func
 * @text JS: Calc Escape Raise
 * @parent Escape
 * @type note
 * @desc Code used to calculate how much the escape success ratio raises upon each failure.
 * @default "// Calculate Escape Ratio\nlet value = 0.1;\nvalue += $gameParty.aliveMembers().length;\n\n// Return Value\nreturn value;"
 *
 * @param Switches
 *
 * @param SwitchCritical:num
 * @text Switch: Critical
 * @parent Switches
 * @type switch
 * @desc Turns switch ON if the action performs a critical hit.
 * Switch reverts to OFF whenever an action starts.
 * @default 0
 *
 * @param SwitchMissEvade:num
 * @text Switch: Miss/Evade
 * @parent Switches
 * @type switch
 * @desc Turns switch ON if the action misses/is evaded.
 * Switch reverts to OFF whenever an action starts.
 * @default 0
 *
 * @param Variables
 *
 * @param VariableDmg:num
 * @text Variable: Damage
 * @parent Variables
 * @type variable
 * @desc Variable records target damage during action.
 * Variable reverts to 0 whenever an action starts.
 * @default 0
 *
 * @param VariableHeal:num
 * @text Variable: Healing
 * @parent Variables
 * @type variable
 * @desc Variable records target healing during action.
 * Variable reverts to 0 whenever an action starts.
 * @default 0
 *
 * @param BattleJS
 * @text JS: Battle-Related
 * 
 * @param PreStartBattleJS:func
 * @text JS: Pre-Start Battle
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.startBattle()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PostStartBattleJS:func
 * @text JS: Post-Start Battle
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.startBattle()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 * 
 * @param BattleVictoryJS:func
 * @text JS: Battle Victory
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.processVictory()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param EscapeSuccessJS:func
 * @text JS: Escape Success
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.onEscapeSuccess()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param EscapeFailureJS:func
 * @text JS: Escape Failure
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.onEscapeFailure()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 * 
 * @param BattleDefeatJS:func
 * @text JS: Battle Defeat
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.processDefeat()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 * 
 * @param PreEndBattleJS:func
 * @text JS: Pre-End Battle
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.endBattle()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PostEndBattleJS:func
 * @text JS: Post-End Battle
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.endBattle()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param TurnJS
 * @text JS: Turn-Related
 *
 * @param PreStartTurnJS:func
 * @text JS: Pre-Start Turn
 * @parent TurnJS
 * @type note
 * @desc Target function: BattleManager.startTurn()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PostStartTurnJS:func
 * @text JS: Post-Start Turn
 * @parent TurnJS
 * @type note
 * @desc Target function: BattleManager.startTurn()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PreEndTurnJS:func
 * @text JS: Pre-End Turn
 * @parent TurnJS
 * @type note
 * @desc Target function: Game_Battler.prototype.onTurnEnd()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PostEndTurnJS:func
 * @text JS: Post-End Turn
 * @parent TurnJS
 * @type note
 * @desc Target function: Game_Battler.prototype.onTurnEnd()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PreRegenerateJS:func
 * @text JS: Pre-Regenerate
 * @parent TurnJS
 * @type note
 * @desc Target function: Game_Battler.prototype.regenerateAll()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PostRegenerateJS:func
 * @text JS: Post-Regenerate
 * @parent TurnJS
 * @type note
 * @desc Target function: Game_Battler.prototype.regenerateAll()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param ActionJS
 * @text JS: Action-Related
 *
 * @param PreStartActionJS:func
 * @text JS: Pre-Start Action
 * @parent ActionJS
 * @type note
 * @desc Target function: BattleManager.startAction()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst user = this.subject();\nconst target = user;\nconst a = user;\nconst b = user;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n"
 *
 * @param PostStartActionJS:func
 * @text JS: Post-Start Action
 * @parent ActionJS
 * @type note
 * @desc Target function: BattleManager.startAction()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst user = this.subject();\nconst target = user;\nconst a = user;\nconst b = user;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n"
 *
 * @param PreApplyJS:func
 * @text JS: Pre-Apply
 * @parent ActionJS
 * @type note
 * @desc Target function: Game_Action.prototype.apply()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst target = arguments[1];\nconst user = this.subject();\nconst a = user;\nconst b = target;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n\n// Return Value\nreturn value;"
 *
 * @param PreDamageJS:func
 * @text JS: Pre-Damage
 * @parent ActionJS
 * @type note
 * @desc Target function: Game_Action.prototype.executeDamage()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst target = arguments[1];\nconst user = this.subject();\nconst a = user;\nconst b = target;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n\n// Return Value\nreturn value;"
 *
 * @param PostDamageJS:func
 * @text JS: Post-Damage
 * @parent ActionJS
 * @type note
 * @desc Target function: Game_Action.prototype.executeDamage()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst target = arguments[1];\nconst user = this.subject();\nconst a = user;\nconst b = target;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n\n// Return Value\nreturn value;"
 *
 * @param PostApplyJS:func
 * @text JS: Post-Apply
 * @parent ActionJS
 * @type note
 * @desc Target function: Game_Action.prototype.apply()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst target = arguments[1];\nconst user = this.subject();\nconst a = user;\nconst b = target;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n\n// Return Value\nreturn value;"
 *
 * @param PreEndActionJS:func
 * @text JS: Pre-End Action
 * @parent ActionJS
 * @type note
 * @desc Target function: BattleManager.endAction()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst user = this.subject();\nconst target = user;\nconst a = user;\nconst b = user;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n"
 *
 * @param PostEndActionJS:func
 * @text JS: Post-End Action
 * @parent ActionJS
 * @type note
 * @desc Target function: BattleManager.endAction()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst user = this.subject();\nconst target = user;\nconst a = user;\nconst b = user;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n"
 *
 */
/* ----------------------------------------------------------------------------
 * Battle Layout Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~BattleLayout:
 *
 * @param Style:str
 * @text Battle Layout Style
 * @type select
 * @option Default - Shows actor faces in Battle Status.
 * @value default
 * @option List - Lists actors in Battle Status.
 * @value list
 * @option XP - Shows actor battlers in a stretched Battle Status.
 * @value xp
 * @option Portrait - Shows portraits in a stretched Battle Status.
 * @value portrait
 * @option Border - Displays windows around the screen border.
 * @value border
 * @option Sideview Battle UI - Requires VisuMZ_3_SideviewBattleUI
 * @value sideview_ui
 * @desc The style used for the battle layout.
 * @default default
 *
 * @param ListStyle
 * @text List Style
 * @parent Style:str
 *
 * @param ShowFacesListStyle:eval
 * @text Show Faces
 * @parent ListStyle
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Shows faces in List Style?
 * @default true
 *
 * @param CommandWidth:num
 * @text Command Window Width
 * @parent ListStyle
 * @type number
 * @min 1
 * @desc Determine the window width for the Party and Actor Command
 * Windows. Affects Default and List Battle Layout styles.
 * @default 192
 *
 * @param XPStyle
 * @text XP Style
 * @parent Style:str
 *
 * @param XPActorCommandLines:num
 * @text Command Lines
 * @parent XPStyle
 * @type number
 * @min 1
 * @desc Number of action lines in the Actor Command Window for the XP Style.
 * @default 4
 *
 * @param XPActorDefaultHeight:num
 * @text Sprite Height
 * @parent XPStyle
 * @type number
 * @min 1
 * @desc Default sprite height used when if the sprite's height has not been determined yet.
 * @default 64
 *
 * @param XPSpriteYLocation:str
 * @text Sprite Base Location
 * @parent XPStyle
 * @type select
 * @option Above Name - Sprite is located above the name.
 * @value name
 * @option Bottom - Sprite is located at the bottom of the window.
 * @value bottom
 * @option Centered - Sprite is centered in the window.
 * @value center
 * @option Top - Sprite is located at the top of the window.
 * @value top
 * @desc Determine where the sprite is located on the Battle Status Window.
 * @default name
 *
 * @param PotraitStyle
 * @text Portrait Style
 * @parent Style:str
 *
 * @param ShowPortraits:eval
 * @text Show Portraits?
 * @parent PotraitStyle
 * @type boolean
 * @on Portraits
 * @off Faces
 * @desc Requires VisuMZ_1_MainMenuCore.
 * Shows the actor's portrait instead of a face.
 * @default true
 *
 * @param PortraitScale:num
 * @text Portrait Scaling
 * @parent PotraitStyle
 * @desc If portraits are used, scale them by this much.
 * @default 0.5
 *
 * @param BorderStyle
 * @text Border Style
 * @parent Style:str
 *
 * @param SkillItemBorderCols:num
 * @text Columns
 * @parent BorderStyle
 * @type number
 * @min 1
 * @desc The total number of columns for Skill & Item Windows
 * in the battle scene.
 * @default 1
 *
 * @param ShowPortraitsBorderStyle:eval
 * @text Show Portraits?
 * @parent BorderStyle
 * @type boolean
 * @on Portraits
 * @off Faces
 * @desc Requires VisuMZ_1_MainMenuCore.
 * Shows the actor's portrait at the edge of the screen.
 * @default true
 *
 * @param PortraitScaleBorderStyle:num
 * @text Portrait Scaling
 * @parent BorderStyle
 * @desc If portraits are used, scale them by this much.
 * @default 1.0
 *
 * @param SkillItemWindows
 * @text Skill & Item Windows
 *
 * @param SkillItemMiddleLayout:eval
 * @text Middle Layout
 * @parent SkillItemWindows
 * @type boolean
 * @on Middle
 * @off Bottom
 * @desc Shows the Skill & Item Windows in mid-screen?
 * @default false
 *
 * @param SkillItemStandardCols:num
 * @text Columns
 * @parent SkillItemWindows
 * @type number
 * @min 1
 * @desc The total number of columns for Skill & Item Windows
 * in the battle scene.
 * @default 2
 *
 * @param StatusWindow
 * @text Status Window Elements
 *
 * @param StatusWindowName
 * @text Battler Name
 * @parent StatusWindow
 *
 * @param NameOffsetX:num
 * @text Offset: X
 * @parent StatusWindowName
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param NameOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowName
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowHpGauge
 * @text Gauge 1 (HP)
 * @parent StatusWindow
 *
 * @param HpGaugeOffsetX:num
 * @text Offset: X
 * @parent StatusWindowHpGauge
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param HpGaugeOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowHpGauge
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowMpGauge
 * @text Gauge 2 (MP)
 * @parent StatusWindow
 *
 * @param MpGaugeOffsetX:num
 * @text Offset: X
 * @parent StatusWindowMpGauge
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param MpGaugeOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowMpGauge
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowTpGauge
 * @text Gauge 3 (TP)
 * @parent StatusWindow
 *
 * @param TpGaugeOffsetX:num
 * @text Offset: X
 * @parent StatusWindowTpGauge
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param TpGaugeOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowTpGauge
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowStateIcon
 * @text State Icon
 * @parent StatusWindow
 *
 * @param StateIconOffsetX:num
 * @text Offset: X
 * @parent StatusWindowStateIcon
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param StateIconOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowStateIcon
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowTpbGauge
 * @text TPB/ATB Gauge
 * @parent StatusWindow
 *
 * @param TpbGaugeOffsetX:num
 * @text Offset: X
 * @parent StatusWindowTpbGauge
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param TpbGaugeOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowTpbGauge
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowSkin
 * @text Window Skin
 * @parent StatusWindow
 *
 * @param StatusWindowSkinFilename:str
 * @text Filename
 * @parent StatusWindowSkin
 * @type file
 * @dir img/system/
 * @desc Filename used for the Battle Status Window skin.
 * Leave this empty to use the default window skin.
 * @default 
 *
 * @param StatusWindowSkinHide:eval
 * @text Hide Window Skin?
 * @parent StatusWindowSkin
 * @type boolean
 * @on No Window Skin
 * @off Default Skin
 * @desc Show/Hide the window skin for the Battle Status Window?
 * @default false
 *
 * @param StatusWindowSelectBack
 * @text Selectable Background
 * @parent StatusWindow
 *
 * @param StatusWindowSelectableBackHide:eval
 * @text Hide Selectable BG?
 * @parent StatusWindowSelectBack
 * @type boolean
 * @on No Selectable BG
 * @off Default Selectable BG
 * @desc Show/Hide the selectable background box for the Battle Status Window?
 * @default false
 *
 * @param StatusWindowAttachments
 * @text Attachments
 * @parent StatusWindow
 *
 * @param StatusWindowBackAttachment
 * @text Back Attachment
 * @parent StatusWindowAttachments
 *
 * @param StatusWindowAttachmentBack:str
 * @text Filename
 * @parent StatusWindowBackAttachment
 * @type file
 * @dir img/system/
 * @desc Filename used for an image to attach to the back of the
 * Battle Status Window. Leave empty for none.
 * @default 
 *
 * @param StatusWindowAttachmentBackOffsetX:num
 * @text Offset: X
 * @parent StatusWindowBackAttachment
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param StatusWindowAttachmentBackOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowBackAttachment
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowFrontAttachment
 * @text Front Attachment
 * @parent StatusWindowAttachments
 *
 * @param StatusWindowAttachmentFront:str
 * @text Filename
 * @parent StatusWindowFrontAttachment
 * @type file
 * @dir img/system/
 * @desc Filename used for an image to attach to the front of the
 * Battle Status Window. Leave empty for none.
 * @default 
 *
 * @param StatusWindowAttachmentFrontOffsetX:num
 * @text Offset: X
 * @parent StatusWindowFrontAttachment
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param StatusWindowAttachmentFrontOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowFrontAttachment
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 */
/* ----------------------------------------------------------------------------
 * Battle Log Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~BattleLog:
 *
 * @param General
 *
 * @param BackColor:str
 * @text Back Color
 * @parent General
 * @desc Use #rrggbb for a hex color.
 * @default #000000
 *
 * @param MaxLines:num
 * @text Max Lines
 * @parent General
 * @type number
 * @min 1
 * @desc Maximum number of lines to be displayed.
 * @default 10
 *
 * @param MessageWait:num
 * @text Message Wait
 * @parent General
 * @type number
 * @min 1
 * @desc Number of frames for a usual message wait.
 * @default 16
 *
 * @param TextAlign:str
 * @text Text Align
 * @parent General
 * @type combo
 * @option left
 * @option center
 * @option right
 * @desc Text alignment for the Window_BattleLog.
 * @default center
 *
 * @param BattleLogRectJS:func
 * @text JS: X, Y, W, H
 * @parent General
 * @type note
 * @desc Code used to determine the dimensions for the battle log.
 * @default "const wx = 0;\nconst wy = 0;\nconst ww = Graphics.boxWidth;\nconst wh = this.calcWindowHeight(10, false);\nreturn new Rectangle(wx, wy, ww, wh);"
 *
 * @param StartTurn
 * @text Start Turn
 *
 * @param StartTurnShow:eval
 * @text Show Start Turn?
 * @parent StartTurn
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display turn changes at the start of the turn?
 * @default false
 *
 * @param StartTurnMsg:str
 * @text Start Turn Message
 * @parent StartTurn
 * @desc Message displayed at turn start.
 * %1 - Turn Count
 * @default Turn %1
 *
 * @param StartTurnWait:num
 * @text Start Turn Wait
 * @parent StartTurn
 * @type number
 * @min 1
 * @desc Number of frames to wait after a turn started.
 * @default 40
 *
 * @param DisplayAction
 * @text Display Action
 *
 * @param ActionCenteredName:eval
 * @text Show Centered Action?
 * @parent DisplayAction
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display a centered text of the action name?
 * @default true
 *
 * @param ActionSkillMsg1:eval
 * @text Show Skill Message 1?
 * @parent DisplayAction
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display the 1st skill message?
 * @default false
 *
 * @param ActionSkillMsg2:eval
 * @text Show Skill Message 2?
 * @parent DisplayAction
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display the 2nd skill message?
 * @default true
 *
 * @param ActionItemMsg:eval
 * @text Show Item Message?
 * @parent DisplayAction
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display the item use message?
 * @default false
 *
 * @param ActionChanges
 * @text Action Changes
 *
 * @param ShowCounter:eval
 * @text Show Counter?
 * @parent ActionChanges
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display counter text?
 * @default true
 *
 * @param ShowReflect:eval
 * @text Show Reflect?
 * @parent ActionChanges
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display magic reflection text?
 * @default true
 *
 * @param ShowSubstitute:eval
 * @text Show Substitute?
 * @parent ActionChanges
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display substitute text?
 * @default true
 *
 * @param ActionResults
 * @text Action Results
 *
 * @param ShowFailure:eval
 * @text Show No Effect?
 * @parent ActionResults
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display no effect text?
 * @default false
 *
 * @param ShowCritical:eval
 * @text Show Critical?
 * @parent ActionResults
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display critical text?
 * @default false
 *
 * @param ShowMissEvasion:eval
 * @text Show Miss/Evasion?
 * @parent ActionResults
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display miss/evasion text?
 * @default false
 *
 * @param ShowHpDmg:eval
 * @text Show HP Damage?
 * @parent ActionResults
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display HP Damage text?
 * @default false
 *
 * @param ShowMpDmg:eval
 * @text Show MP Damage?
 * @parent ActionResults
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display MP Damage text?
 * @default false
 *
 * @param ShowTpDmg:eval
 * @text Show TP Damage?
 * @parent ActionResults
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display TP Damage text?
 * @default false
 *
 * @param DisplayStates
 * @text Display States
 *
 * @param ShowAddedState:eval
 * @text Show Added States?
 * @parent DisplayStates
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display added states text?
 * @default false
 *
 * @param ShowRemovedState:eval
 * @text Show Removed States?
 * @parent DisplayStates
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display removed states text?
 * @default false
 *
 * @param ShowCurrentState:eval
 * @text Show Current States?
 * @parent DisplayStates
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display the currently affected state text?
 * @default false
 *
 * @param ShowAddedBuff:eval
 * @text Show Added Buffs?
 * @parent DisplayStates
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display added buffs text?
 * @default false
 *
 * @param ShowAddedDebuff:eval
 * @text Show Added Debuffs?
 * @parent DisplayStates
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display added debuffs text?
 * @default false
 *
 * @param ShowRemovedBuff:eval
 * @text Show Removed Buffs?
 * @parent DisplayStates
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display removed de/buffs text?
 * @default false
 *
 */
/* ----------------------------------------------------------------------------
 * Battleback Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~Battleback:
 *
 * @param DefaultStyle:str
 * @text Default Style
 * @type select
 * @option MZ (MZ's default style)
 * @value MZ
 * @option 1:1 (No Scaling)
 * @value 1:1
 * @option Scale To Fit (Scale to screen size)
 * @value ScaleToFit
 * @option Scale Down (Scale Downward if Larger than Screen)
 * @value ScaleDown
 * @option Scale Up (Scale Upward if Smaller than Screen)
 * @value ScaleUp
 * @desc The default scaling style used for battlebacks.
 * @default MZ
 *
 * @param jsOneForOne:func
 * @text JS: 1:1
 * @type note
 * @desc This code gives you control over the scaling for this style.
 * @default "// Adjust Size\nthis.width = Graphics.width;\nthis.height = Graphics.height;\n\n// Adjust Scale\nconst scale = 1.0;\nthis.scale.x = scale;\nthis.scale.y = scale;\n\n// Adjust Coordinates\nthis.x = 0;\nthis.y = 0;"
 *
 * @param jsScaleToFit:func
 * @text JS: Scale To Fit
 * @type note
 * @desc This code gives you control over the scaling for this style.
 * @default "// Adjust Size\nthis.width = Graphics.width;\nthis.height = Graphics.height;\n\n// Adjust Scale\nconst ratioX = this.width / this.bitmap.width;\nconst ratioY = this.height / this.bitmap.height;\nconst scale = Math.max(ratioX, ratioY);\nthis.scale.x = scale;\nthis.scale.y = scale;\n\n// Adjust Coordinates\nthis.x = (Graphics.width - this.width) / 2;\nthis.y = Graphics.height - this.height;"
 *
 * @param jsScaleDown:func
 * @text JS: Scale Down
 * @type note
 * @desc This code gives you control over the scaling for this style.
 * @default "// Adjust Size\nthis.width = Graphics.width;\nthis.height = Graphics.height;\n\n// Adjust Scale\nconst ratioX = Math.min(1, this.width / this.bitmap.width);\nconst ratioY = Math.min(1, this.height / this.bitmap.height);\nconst scale = Math.max(ratioX, ratioY);\nthis.scale.x = scale;\nthis.scale.y = scale;\n\n// Adjust Coordinates\nthis.x = (Graphics.width - this.width) / 2;\nthis.y = Graphics.height - this.height;"
 *
 * @param jsScale Up:func
 * @text JS: Scale Up
 * @type note
 * @desc This code gives you control over the scaling for this style.
 * @default "// Adjust Size\nthis.width = Graphics.width;\nthis.height = Graphics.height;\n\n// Adjust Scale\nconst ratioX = Math.max(1, this.width / this.bitmap.width);\nconst ratioY = Math.max(1, this.height / this.bitmap.height);\nconst scale = Math.max(ratioX, ratioY);\nthis.scale.x = scale;\nthis.scale.y = scale;\n\n// Adjust Coordinates\nthis.x = (Graphics.width - this.width) / 2;\nthis.y = Graphics.height - this.height;"
 *
 */
/* ----------------------------------------------------------------------------
 * Party Command Window Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~PartyCmd:
 *
 * @param Cmd
 * @text Command Window
 *
 * @param CmdStyle:str
 * @text Style
 * @parent Cmd
 * @type select
 * @option Text Only
 * @value text
 * @option Icon Only
 * @value icon
 * @option Icon + Text
 * @value iconText
 * @option Automatic
 * @value auto
 * @desc How do you wish to draw commands in the Party Command Window?
 * @default auto
 *
 * @param CmdTextAlign:str
 * @text Text Align
 * @parent Cmd
 * @type combo
 * @option left
 * @option center
 * @option right
 * @desc Text alignment for the Party Command Window.
 * @default left
 *
 * @param CmdIconFight:num
 * @text Fight Icon
 * @parent Cmd
 * @desc The icon used for the Fight command.
 * @default 76
 *
 * @param CommandAddAutoBattle:eval
 * @text Add Auto Battle?
 * @parent Cmd
 * @type boolean
 * @on Add
 * @off Don't
 * @desc Add the "Auto Battle" command to the Command Window?
 * @default true
 *
 * @param CmdIconAutoBattle:num
 * @text Auto Battle Icon
 * @parent CommandAddAutoBattle:eval
 * @desc The icon used for the Auto Battle command.
 * @default 78
 *
 * @param CmdTextAutoBattle:str
 * @text Auto Battle Text
 * @parent CommandAddAutoBattle:eval
 * @desc The text used for the Auto Battle command.
 * @default Auto
 *
 * @param CommandAddOptions:eval
 * @text Add Options?
 * @parent Cmd
 * @type boolean
 * @on Add
 * @off Don't
 * @desc Add the "Options" command to the Command Window?
 * @default true
 *
 * @param CmdIconOptions:num
 * @text Options Icon
 * @parent CommandAddOptions:eval
 * @desc The icon used for the Options command.
 * @default 83
 *
 * @param ActiveTpbOptionsMessage:str
 * @text Active TPB Message
 * @parent CommandAddOptions:eval
 * @desc Message that will be displayed when selecting options during the middle of an action.
 * @default Options Menu queued after action is complete.
 *
 * @param CmdIconEscape:num
 * @text Escape Icon
 * @parent Cmd
 * @desc The icon used for the Escape command.
 * @default 82
 *
 * @param Access
 *
 * @param SkipPartyCmd:eval
 * @text Skip Party Command
 * @parent Access
 * @type boolean
 * @on Skip
 * @off Don't
 * @desc DTB: Skip Party Command selection on turn start.
 * TPB: Skip Party Command selection at battle start.
 * @default true
 *
 * @param DisablePartyCmd:eval
 * @text Disable Party Command
 * @parent Access
 * @type boolean
 * @on Disable
 * @off Don't
 * @desc Disable the Party Command Window entirely?
 * @default false
 *
 * @param HelpWindow
 * @text Help Window
 *
 * @param HelpFight:str
 * @text Fight
 * @parent HelpWindow
 * @desc Text displayed when selecting a skill type.
 * %1 - Skill Type Name
 * @default Select actions to fight.
 *
 * @param HelpAutoBattle:str
 * @text Auto Battle
 * @parent HelpWindow
 * @desc Text displayed when selecting the Auto Battle command.
 * @default Sets party to Auto Battle mode.
 *
 * @param HelpOptions:str
 * @text Options
 * @parent HelpWindow
 * @desc Text displayed when selecting the Options command.
 * @default Opens up the Options Menu.
 *
 * @param HelpEscape:str
 * @text Escape
 * @parent HelpWindow
 * @desc Text displayed when selecting the escape command.
 * @default Attempt to escape the battle.
 *
 */
/* ----------------------------------------------------------------------------
 * Actor Command Window Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~ActorCmd:
 *
 * @param Cmd
 * @text Command Window
 *
 * @param CmdStyle:str
 * @text Style
 * @parent Cmd
 * @type select
 * @option Text Only
 * @value text
 * @option Icon Only
 * @value icon
 * @option Icon + Text
 * @value iconText
 * @option Automatic
 * @value auto
 * @desc How do you wish to draw commands in the Actor Command Window?
 * @default auto
 *
 * @param CmdTextAlign:str
 * @text Text Align
 * @parent Cmd
 * @type combo
 * @option left
 * @option center
 * @option right
 * @desc Text alignment for the Actor Command Window.
 * @default left
 *
 * @param CmdIconItem:num
 * @text Item Icon
 * @parent Cmd
 * @desc The icon used for the Item command.
 * @default 176
 *
 * @param IconStypeNorm:num
 * @text Normal SType Icon
 * @parent Cmd
 * @desc Icon used for normal skill types that aren't assigned any
 * icons. Ignore if VisuMZ_1_SkillsStatesCore is installed.
 * @default 78
 *
 * @param IconStypeMagic:num
 * @text Magic SType Icon
 * @parent Cmd
 * @desc Icon used for magic skill types that aren't assigned any
 * icons. Ignore if VisuMZ_1_SkillsStatesCore is installed.
 * @default 79
 *
 * @param BattleCmd
 * @text Battle Commands
 *
 * @param BattleCmdList:arraystr
 * @text Command List
 * @parent BattleCmd
 * @type combo[]
 * @option attack
 * @option skills
 * @option guard
 * @option item
 * @option party
 * @option escape
 * @option auto battle
 * @option stypes
 * @option stype: x
 * @option stype: name
 * @option all skills
 * @option skill: x
 * @option skill: name
 * @option combat log
 * @option talk
 * @option weapon swap
 * @desc List of battle commands that appear by default
 * if the <Battle Commands> notetag isn't present.
 * @default ["attack","skills","guard","party","item"]
 *
 * @param ShowCosts:eval
 * @text Show Command Costs
 * @parent BattleCmd
 * @type boolean
 * @on Show Costs
 * @off Hide Costs
 * @desc If a battle command has a resource cost, show it?
 * @default true
 *
 * @param HelpWindow
 * @text Help Window
 *
 * @param HelpSkillType:str
 * @text Skill Types
 * @parent HelpWindow
 * @desc Text displayed when selecting a skill type.
 * %1 - Skill Type Name
 * @default Opens up a list of skills under the \C[16]%1\C[0] category.
 *
 * @param HelpItem:str
 * @text Items
 * @parent HelpWindow
 * @desc Text displayed when selecting the item command.
 * @default Opens up a list of items that you can use.
 *
 * @param HelpEscape:str
 * @text Escape
 * @parent HelpWindow
 * @desc Text displayed when selecting the escape command.
 * @default Attempt to escape the battle.
 *
 * @param HelpAutoBattle:str
 * @text Auto Battle
 * @parent HelpWindow
 * @desc Text displayed when selecting the Auto Battle command.
 * @default Automatically choose an action suitable for combat.
 *
 * @param HelpParty:str
 * @text Party
 * @parent HelpWindow
 * @desc Text displayed when selecting the Party command.
 * Requires 
 * @default Automatically choose an action suitable for combat.
 *
 */
/* ----------------------------------------------------------------------------
 * Actor Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~Actor:
 *
 * @param Flinch
 *
 * @param FlinchDistanceX:num
 * @text Flinch Distance X
 * @parent Flinch
 * @desc The normal X distance when flinching.
 * @default 12
 *
 * @param FlinchDistanceY:num
 * @text Flinch Distance Y
 * @parent Flinch
 * @desc The normal Y distance when flinching.
 * @default 0
 *
 * @param FlinchDuration:num
 * @text Flinch Duration
 * @parent Flinch
 * @desc The number of frames for a flinch to complete.
 * @default 6
 *
 * @param SvBattlers
 * @text Sideview Battlers
 *
 * @param AnchorX:num
 * @text Anchor: X
 * @parent SvBattlers
 * @desc Default X anchor for Sideview Battlers.
 * Use values between 0 and 1 to be safe.
 * @default 0.5
 *
 * @param AnchorY:num
 * @text Anchor: Y
 * @parent SvBattlers
 * @desc Default Y anchor for Sideview Battlers.
 * Use values between 0 and 1 to be safe.
 * @default 1.0
 *
 * @param ChantStyle:eval
 * @text Chant Style
 * @parent SvBattlers
 * @type boolean
 * @on Magical Hit Type
 * @off Magical Skill Type
 * @desc What determines the chant motion?
 * Hit type or skill type?
 * @default true
 *
 * @param OffsetX:num
 * @text Offset: X
 * @parent SvBattlers
 * @desc Offsets X position where actor is positioned.
 * Negative values go left. Positive values go right.
 * @default 0
 *
 * @param OffsetY:num
 * @text Offset: Y
 * @parent SvBattlers
 * @desc Offsets Y position where actor is positioned.
 * Negative values go up. Positive values go down.
 * @default 0
 *
 * @param MotionSpeed:num
 * @text Motion Speed
 * @parent SvBattlers
 * @type number
 * @min 1
 * @desc The number of frames in between each motion.
 * @default 12
 *
 * @param PrioritySortActive:eval
 * @text Priority: Active
 * @parent SvBattlers
 * @type boolean
 * @on Active Actor over All Else
 * @off Active Actor is Sorted Normally
 * @desc Place the active actor on top of actor and enemy sprites.
 * @default false
 *
 * @param PrioritySortActors:eval
 * @text Priority: Actors
 * @parent SvBattlers
 * @type boolean
 * @on Actors over Enemies
 * @off Sort by Y Position
 * @desc Prioritize actors over enemies when placing sprites on top
 * of each other.
 * @default true
 *
 * @param Shadow:eval
 * @text Shadow Visible
 * @parent SvBattlers
 * @type boolean
 * @on Visible
 * @off Hidden
 * @desc Show or hide the shadow for Sideview Battlers.
 * @default true
 *
 * @param SmoothImage:eval
 * @text Smooth Image
 * @parent SvBattlers
 * @type boolean
 * @on Smooth
 * @off Pixelated
 * @desc Smooth out the battler images or pixelate them?
 * @default false
 *
 * @param HomePosJS:func
 * @text JS: Home Position
 * @parent SvBattlers
 * @type note
 * @desc Code used to calculate the home position of actors.
 * @default "// Declare Constants\nconst sprite = this;\nconst actor = this._actor;\nconst index = arguments[0];\n\n// Make Calculations\nlet x = Math.round((Graphics.width / 2) + 192)\nx -= Math.floor((Graphics.width - Graphics.boxWidth) / 2);\nx += index * 32;\nlet y = (Graphics.height - 200) - ($gameParty.maxBattleMembers() * 48);\ny -= Math.floor((Graphics.height - Graphics.boxHeight) / 2);\ny += index * 48;\n\n// Home Position Offsets\nconst offsetNote = /<SIDEVIEW HOME OFFSET:[ ]([\\+\\-]\\d+),[ ]([\\+\\-]\\d+)>/i;\nconst xOffsets = actor.traitObjects().map((obj) => (obj && obj.note.match(offsetNote) ? Number(RegExp.$1) : 0));\nconst yOffsets = actor.traitObjects().map((obj) => (obj && obj.note.match(offsetNote) ? Number(RegExp.$2) : 0));\nx = xOffsets.reduce((r, offset) => r + offset, x);\ny = yOffsets.reduce((r, offset) => r + offset, y);\n\n// Set Home Position\nthis.setHome(x, y);"
 *
 */
/* ----------------------------------------------------------------------------
 * Enemy Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~Enemy:
 *
 * @param Visual
 *
 * @param AttackAnimation:num
 * @text Attack Animation
 * @parent Visual
 * @type animation
 * @desc Default attack animation used for enemies.
 * Use <Attack Animation: x> for custom animations.
 * @default 1
 *
 * @param EmergeText:eval
 * @text Emerge Text
 * @parent Visual
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Show or hide the 'Enemy emerges!' text at the start of battle.
 * @default false
 *
 * @param OffsetX:num
 * @text Offset: X
 * @parent Visual
 * @desc Offsets X position where enemy is positioned.
 * Negative values go left. Positive values go right.
 * @default 0
 *
 * @param OffsetY:num
 * @text Offset: Y
 * @parent Visual
 * @desc Offsets Y position where enemy is positioned.
 * Negative values go up. Positive values go down.
 * @default 0
 *
 * @param SmoothImage:eval
 * @text Smooth Image
 * @parent Visual
 * @type boolean
 * @on Smooth
 * @off Pixelated
 * @desc Smooth out the battler images or pixelate them?
 * @default true
 *
 * @param SelectWindow
 * @text Select Window
 *
 * @param LastSelected:eval
 * @text Any: Last Selected
 * @parent SelectWindow
 * @type boolean
 * @on Last Selected
 * @off FV/SV Priority
 * @desc Prioritize last selected enemy over front view or sideview settings?
 * @default true
 *
 * @param FrontViewSelect:eval
 * @text FV: Right Priority
 * @parent SelectWindow
 * @type boolean
 * @on Right
 * @off Normal
 * @desc If using frontview, auto select the enemy furthest right.
 * @default false
 *
 * @param SideviewSelect:eval
 * @text SV: Right Priority
 * @parent SelectWindow
 * @type boolean
 * @on Right
 * @off Normal
 * @desc If using sideview, auto select the enemy furthest right.
 * @default true
 * 
 * @param Name
 *
 * @param NameLegacy:eval
 * @text Legacy Option
 * @parent Name
 * @type boolean
 * @on Legacy Version
 * @off New Version (Sprite)
 * @desc Use the legacy version (window) or new version (sprite).
 * WARNING: Legacy version is no longer supported for bugs.
 * @default false
 *
 * @param NameFontSize:num
 * @text Font Size
 * @parent Name
 * @desc Font size used for enemy names.
 * @default 22
 * 
 * @param NamePosition
 * @text Name Position
 * @parent Name
 *
 * @param NameOffsetX:num
 * @text Offset X
 * @parent NamePosition
 * @desc Offset the enemy name's X position by this much.
 * Negative goes left. Positive goes right.
 * @default 0
 *
 * @param NameOffsetY:num
 * @text Offset Y
 * @parent NamePosition
 * @desc Offset the enemy name's Y position by this much.
 * Negative goes up. Positive goes down.
 * @default 0
 *
 * @param NameAttachStateIcon:eval
 * @text Attach States
 * @parent Name
 * @type boolean
 * @on Attach
 * @off Normal Position
 * @desc Attach the enemy's state icon to the enemy name?
 * @default false
 *
 * @param AttachStateOffsetX:num
 * @text Attach: Offset X
 * @parent NameAttachStateIcon:eval
 * @desc How much to offset the attached icon's X position by?
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param AttachStateOffsetY:num
 * @text Attach: Offset Y
 * @parent NameAttachStateIcon:eval
 * @desc How much to offset the attached icon's Y position by?
 * Negative goes up. Positive goes down.
 * @default +0
 * 
 * @param NameVisibility
 * @text Name Visibility
 * @parent Name
 *
 * @param NameAlwaysHidden:eval
 * @text Always Hidden
 * @parent NameVisibility
 * @type boolean
 * @on Always Hidden
 * @off No Priority
 * @desc Determines if the enemy name will always be visible.
 * Highest priority.
 * @default false
 *
 * @param NameAlwaysVisible:eval
 * @text Always Visible
 * @parent NameVisibility
 * @type boolean
 * @on Always Visible
 * @off Hide when Unselected
 * @desc Determines if the enemy name will always be visible.
 * Medium priority.
 * @default false
 *
 * @param NameAlwaysSelectOnly:eval
 * @text By Selection?
 * @parent NameVisibility
 * @type boolean
 * @on Visible when Selected
 * @off Visible when Targeting
 * @desc Determines the conditions for enemy name visibility.
 * Lowest priority.
 * @default false
 *
 * @param SvBattlers
 * @text Sideview Battlers
 *
 * @param AllowCollapse:eval
 * @text Allow Collapse
 * @parent SvBattlers
 * @type boolean
 * @on Allow
 * @off Don't
 * @desc Causes defeated enemies with SV Battler graphics
 * to "fade away" when defeated?
 * @default false
 *
 * @param AnchorX:num
 * @text Anchor: X
 * @parent SvBattlers
 * @desc Default X anchor for Sideview Battlers.
 * Use values between 0 and 1 to be safe.
 * @default 0.5
 *
 * @param AnchorY:num
 * @text Anchor: Y
 * @parent SvBattlers
 * @desc Default Y anchor for Sideview Battlers.
 * Use values between 0 and 1 to be safe.
 * @default 1.0
 *
 * @param MotionIdle:str
 * @text Motion: Idle
 * @parent SvBattlers
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Sets default idle animation used by Sideview Battlers.
 * @default walk
 *
 * @param Shadow:eval
 * @text Shadow Visible
 * @parent SvBattlers
 * @type boolean
 * @on Visible
 * @off Hidden
 * @desc Show or hide the shadow for Sideview Battlers.
 * @default true
 *
 * @param Width:num
 * @text Size: Width
 * @parent SvBattlers
 * @type number
 * @min 1
 * @desc Default width for enemies that use Sideview Battlers.
 * @default 64
 *
 * @param Height:num
 * @text Size: Height
 * @parent SvBattlers
 * @type number
 * @min 1
 * @desc Default height for enemies that use Sideview Battlers.
 * @default 64
 *
 * @param WtypeId:num
 * @text Weapon Type
 * @parent SvBattlers
 * @type number
 * @min 0
 * @desc Sets default weapon type used by Sideview Battlers.
 * Use 0 for Bare Hands.
 * @default 0
 *
 */
/* ----------------------------------------------------------------------------
 * HP Gauge Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~HpGauge:
 *
 * @param Display
 * @text Show Gauges For
 *
 * @param ShowActorGauge:eval
 * @text Actors
 * @parent Display
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Show HP Gauges over the actor sprites' heads?
 * Requires SV Actors to be visible.
 * @default true
 *
 * @param ShowEnemyGauge:eval
 * @text Enemies
 * @parent Display
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Show HP Gauges over the enemy sprites' heads?
 * Can be bypassed with <Hide HP Gauge> notetag.
 * @default true
 *
 * @param RequiresDefeat:eval
 * @text Requires Defeat?
 * @parent ShowEnemyGauge:eval
 * @type boolean
 * @on Require Defeat First
 * @off No Requirement
 * @desc Requires defeating the enemy once to show HP Gauge?
 * Can be bypassed with <Show HP Gauge> notetag.
 * @default true
 *
 * @param BTestBypass:eval
 * @text Battle Test Bypass?
 * @parent RequiresDefeat:eval
 * @type boolean
 * @on Bypass
 * @off Don't Bypass
 * @desc Bypass the defeat requirement in battle test?
 * @default true
 *
 * @param Settings
 *
 * @param AnchorX:num
 * @text Anchor X
 * @parent Settings
 * @desc Where do you want the HP Gauge sprite's anchor X to be?
 * Use values between 0 and 1 to be safe.
 * @default 0.5
 *
 * @param AnchorY:num
 * @text Anchor Y
 * @parent Settings
 * @desc Where do you want the HP Gauge sprite's anchor Y to be?
 * Use values between 0 and 1 to be safe.
 * @default 1.0
 *
 * @param Scale:num
 * @text Scale
 * @parent Settings
 * @desc How large/small do you want the HP Gauge to be scaled?
 * @default 0.5
 *
 * @param OffsetX:num
 * @text Offset X
 * @parent Settings
 * @desc How many pixels to offset the HP Gauge's X by?
 * @default 0
 *
 * @param OffsetY:num
 * @text Offset Y
 * @parent Settings
 * @desc How many pixels to offset the HP Gauge's Y by?
 * @default -3
 *
 * @param Options
 * @text Options
 *
 * @param AddHpGaugeOption:eval
 * @text Add Option?
 * @parent Options
 * @type boolean
 * @on Add
 * @off Don't Add
 * @desc Add the 'Show HP Gauge' option to the Options menu?
 * @default true
 *
 * @param AdjustRect:eval
 * @text Adjust Window Height
 * @parent Options
 * @type boolean
 * @on Adjust
 * @off Don't
 * @desc Automatically adjust the options window height?
 * @default true
 *
 * @param Name:str
 * @text Option Name
 * @parent Options
 * @desc Command name of the option.
 * @default Show HP Gauge
 *
 */
/* ----------------------------------------------------------------------------
 * Action Sequence Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~ActionSequence:
 *
 * @param AutoSequences
 * @text Automatic Sequences
 *
 * @param AutoMeleeSolo:eval
 * @text Melee Single Target
 * @parent AutoSequences
 * @type boolean
 * @on Allow
 * @off Ignore
 * @desc Allow this auto sequence for physical, single target actions?
 * @default true
 *
 * @param AutoMeleeAoE:eval
 * @text Melee Multi Target
 * @parent AutoSequences
 * @type boolean
 * @on Allow
 * @off Ignore
 * @desc Allow this auto sequence for physical, multi-target actions?
 * @default true
 *
 * @param QoL
 * @text Quality of Life
 *
 * @param AutoNotetag:eval
 * @text Auto Notetag
 * @parent QoL
 * @type boolean
 * @on Automatic
 * @off Manual
 * @desc Automatically apply the <Custom Action Sequence> notetag
 * effect to any item or skill that has a Common Event?
 * @default false
 *
 * @param CastAnimations
 * @text Cast Animations
 *
 * @param CastCertain:num
 * @text Certain Hit
 * @parent CastAnimations
 * @type animation
 * @desc Cast animation for Certain Hit skills.
 * @default 120
 *
 * @param CastPhysical:num
 * @text Physical
 * @parent CastAnimations
 * @type animation
 * @desc Cast animation for Physical skills.
 * @default 52
 *
 * @param CastMagical:num
 * @text Magical
 * @parent CastAnimations
 * @type animation
 * @desc Cast animation for Magical skills.
 * @default 51
 *
 * @param CounterReflection
 * @text Counter/Reflect
 *
 * @param CounterPlayback:eval
 * @text Counter Back
 * @parent CounterReflection
 * @type boolean
 * @on Play Back
 * @off Ignore
 * @desc Play back the attack animation used?
 * @default true
 *
 * @param ReflectAnimation:num
 * @text Reflect Animation
 * @parent CounterReflection
 * @type animation
 * @desc Animation played when an action is reflected.
 * @default 53
 *
 * @param ReflectPlayback:eval
 * @text Reflect Back
 * @parent CounterReflection
 * @type boolean
 * @on Play Back
 * @off Ignore
 * @desc Play back the attack animation used?
 * @default true
 *
 * @param Stepping
 *
 * @param MeleeDistance:num
 * @text Melee Distance
 * @parent Stepping
 * @desc Minimum distance in pixels for Movement Action Sequences.
 * @default 24
 *
 * @param StepDistanceX:num
 * @text Step Distance X
 * @parent Stepping
 * @desc The normal X distance when stepping forward.
 * @default 48
 *
 * @param StepDistanceY:num
 * @text Step Distance Y
 * @parent Stepping
 * @desc The normal Y distance when stepping forward.
 * @default 0
 *
 * @param StepDuration:num
 * @text Step Duration
 * @parent Stepping
 * @desc The number of frames for a stepping action to complete.
 * @default 12
 *
 */
/* ----------------------------------------------------------------------------
 * Projectile Start Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~ProjectileStart:
 * 
 * @param Type:str
 * @text Type
 * @type select
 * @option Target - Start from battler target(s)
 * @value target
 * @option Point - Start from a point on the screen
 * @value point
 * @desc Select where the projectile should start from.
 * @default target
 * 
 * @param Targets:arraystr
 * @text Target(s)
 * @parent Type:str
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to start the projectile from.
 * @default ["user"]
 * 
 * @param TargetCenter:eval
 * @text Centralize
 * @parent Targets:arraystr
 * @type boolean
 * @on Center Projectile
 * @off Create Each
 * @desc Create one projectile at the center of the targets?
 * Or create a projectile for each target?
 * @default false
 * 
 * @param TargetLocation:str
 * @text Target Location
 * @parent Targets:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part of the target to send the projectile from.
 * @default middle center
 * 
 * @param PointX:eval
 * @text Point X
 * @parent Type:str
 * @desc Insert the X coordinate to start the projectile at.
 * You may use JavaScript code.
 * @default Graphics.width / 2
 * 
 * @param PointY:eval
 * @text Point Y
 * @parent Type:str
 * @desc Insert the Y coordinate to start the projectile at.
 * You may use JavaScript code.
 * @default Graphics.height / 2
 * 
 * @param OffsetX:eval
 * @text Offset X
 * @desc Insert how many pixels to offset the X coordinate by.
 * You may use JavaScript code.
 * @default +0
 * 
 * @param OffsetY:eval
 * @text Offset Y
 * @desc Insert how many pixels to offset the Y coordinate by.
 * You may use JavaScript code.
 * @default +0
 *
 */
/* ----------------------------------------------------------------------------
 * Projectile Goal Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~ProjectileGoal:
 * 
 * @param Type:str
 * @text Type
 * @type select
 * @option Target - Goal is battler target(s)
 * @value target
 * @option Point - Goal is a point on the screen
 * @value point
 * @desc Select where the projectile should go to.
 * @default target
 * 
 * @param Targets:arraystr
 * @text Target(s)
 * @parent Type:str
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) for projectile to go to.
 * @default ["all targets"]
 * 
 * @param TargetCenter:eval
 * @text Centralize
 * @parent Targets:arraystr
 * @type boolean
 * @on Center Projectile
 * @off Create Each
 * @desc Set goal in the center of targets?
 * Or create a projectile to go to each target?
 * @default false
 * 
 * @param TargetLocation:str
 * @text Target Location
 * @parent Targets:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part of the target to send the projectile at.
 * @default middle center
 * 
 * @param PointX:eval
 * @text Point X
 * @parent Type:str
 * @desc Insert the X coordinate to send the projectile to.
 * You may use JavaScript code.
 * @default Graphics.width / 2
 * 
 * @param PointY:eval
 * @text Point Y
 * @parent Type:str
 * @desc Insert the Y coordinate to send the projectile to.
 * You may use JavaScript code.
 * @default Graphics.height / 2
 * 
 * @param OffsetX:eval
 * @text Offset X
 * @desc Insert how many pixels to offset the X coordinate by.
 * You may use JavaScript code.
 * @default +0
 * 
 * @param OffsetY:eval
 * @text Offset Y
 * @desc Insert how many pixels to offset the Y coordinate by.
 * You may use JavaScript code.
 * @default +0
 *
 */
/* ----------------------------------------------------------------------------
 * Projectile Extra Animation Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~ProjectileExAni:
 * 
 * @param AutoAngle:eval
 * @text Auto Angle?
 * @parent Settings
 * @type boolean
 * @on Automatically Angle
 * @off Normal
 * @desc Automatically angle the projectile to tilt the direction it's moving?
 * @default true
 * 
 * @param AngleOffset:eval
 * @text Angle Offset
 * @desc Alter the projectile's tilt by this many degrees.
 * @default +0
 * 
 * @param Arc:eval
 * @text Arc Peak
 * @parent Settings
 * @desc This is the height of the project's trajectory arc
 * in pixels.
 * @default 0
 *
 * @param EasingType:str
 * @text Easing
 * @parent Settings
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type to apply to the projectile's trajectory.
 * @default Linear
 * 
 * @param Spin:eval
 * @text Spin Speed
 * @parent Settings
 * @desc Determine how much angle the projectile spins per frame.
 * Does not work well with "Auto Angle".
 * @default +0.0
 *
 */
/* ----------------------------------------------------------------------------
 * Projectile Extra Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~ProjectileExtra:
 * 
 * @param AutoAngle:eval
 * @text Auto Angle?
 * @parent Settings
 * @type boolean
 * @on Automatically Angle
 * @off Normal
 * @desc Automatically angle the projectile to tilt the direction it's moving?
 * @default true
 * 
 * @param AngleOffset:eval
 * @text Angle Offset
 * @desc Alter the projectile's tilt by this many degrees.
 * @default +0
 * 
 * @param Arc:eval
 * @text Arc Peak
 * @parent Settings
 * @desc This is the height of the project's trajectory arc
 * in pixels.
 * @default 0
 *
 * @param BlendMode:num
 * @text Blend Mode
 * @type select
 * @option 0 - Normal
 * @value 0
 * @option 1 - Additive
 * @value 1
 * @option 2 - Multiply
 * @value 2
 * @option 3 - Screen
 * @value 3
 * @desc What kind of blend mode do you wish to apply to the projectile?
 * @default 0
 *
 * @param EasingType:str
 * @text Easing
 * @parent Settings
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type to apply to the projectile's trajectory.
 * @default Linear
 * 
 * @param Hue:eval
 * @text Hue
 * @parent Settings
 * @desc Adjust the hue of the projectile.
 * Insert a number between 0 and 360.
 * @default 0
 * 
 * @param Scale:eval
 * @text Scale
 * @parent Settings
 * @desc Adjust the size scaling of the projectile.
 * Use decimals for exact control.
 * @default 1.0
 * 
 * @param Spin:eval
 * @text Spin Speed
 * @parent Settings
 * @desc Determine how much angle the projectile spins per frame.
 * Does not work well with "Auto Angle".
 * @default +0.0
 *
 */
//=============================================================================

const _0x3fd7af=_0x499e;(function(_0x3cd803,_0x345228){const _0x2548c2=_0x499e,_0x42fe7d=_0x3cd803();while(!![]){try{const _0x108440=-parseInt(_0x2548c2(0x741))/0x1*(-parseInt(_0x2548c2(0x3f4))/0x2)+-parseInt(_0x2548c2(0x521))/0x3*(parseInt(_0x2548c2(0x68e))/0x4)+-parseInt(_0x2548c2(0x7f6))/0x5+parseInt(_0x2548c2(0xaeb))/0x6+-parseInt(_0x2548c2(0x1b0))/0x7*(-parseInt(_0x2548c2(0x8d2))/0x8)+parseInt(_0x2548c2(0x5ff))/0x9*(parseInt(_0x2548c2(0x881))/0xa)+-parseInt(_0x2548c2(0x31c))/0xb*(parseInt(_0x2548c2(0x687))/0xc);if(_0x108440===_0x345228)break;else _0x42fe7d['push'](_0x42fe7d['shift']());}catch(_0x472b41){_0x42fe7d['push'](_0x42fe7d['shift']());}}}(_0x21db,0xc3a82));var label=_0x3fd7af(0x941),tier=tier||0x0,dependencies=[],pluginData=$plugins['filter'](function(_0x6a25d4){const _0x3c8120=_0x3fd7af;return _0x6a25d4[_0x3c8120(0xaed)]&&_0x6a25d4[_0x3c8120(0xafa)][_0x3c8120(0x402)]('['+label+']');})[0x0];VisuMZ[label][_0x3fd7af(0xa6b)]=VisuMZ[label]['Settings']||{},VisuMZ[_0x3fd7af(0x187)]=function(_0x5656d3,_0x5056ca){const _0x1fa1b3=_0x3fd7af;for(const _0x5aeed3 in _0x5056ca){if(_0x1fa1b3(0x395)===_0x1fa1b3(0x750))this[_0x1fa1b3(0x6f6)](_0x3dd755,_0x38d8f7,_0x58b95f);else{if(_0x5aeed3[_0x1fa1b3(0x265)](/(.*):(.*)/i)){const _0x318dda=String(RegExp['$1']),_0x24462f=String(RegExp['$2'])[_0x1fa1b3(0x989)]()[_0x1fa1b3(0x306)]();let _0x429358,_0x2aae52,_0x47e776;switch(_0x24462f){case _0x1fa1b3(0x6e1):_0x429358=_0x5056ca[_0x5aeed3]!==''?Number(_0x5056ca[_0x5aeed3]):0x0;break;case _0x1fa1b3(0xabc):_0x2aae52=_0x5056ca[_0x5aeed3]!==''?JSON[_0x1fa1b3(0x266)](_0x5056ca[_0x5aeed3]):[],_0x429358=_0x2aae52['map'](_0x4de3ca=>Number(_0x4de3ca));break;case _0x1fa1b3(0x317):_0x429358=_0x5056ca[_0x5aeed3]!==''?eval(_0x5056ca[_0x5aeed3]):null;break;case _0x1fa1b3(0x7d7):_0x2aae52=_0x5056ca[_0x5aeed3]!==''?JSON[_0x1fa1b3(0x266)](_0x5056ca[_0x5aeed3]):[],_0x429358=_0x2aae52[_0x1fa1b3(0x826)](_0x5c6796=>eval(_0x5c6796));break;case _0x1fa1b3(0x221):_0x429358=_0x5056ca[_0x5aeed3]!==''?JSON['parse'](_0x5056ca[_0x5aeed3]):'';break;case _0x1fa1b3(0x3fd):_0x2aae52=_0x5056ca[_0x5aeed3]!==''?JSON[_0x1fa1b3(0x266)](_0x5056ca[_0x5aeed3]):[],_0x429358=_0x2aae52[_0x1fa1b3(0x826)](_0x4dac51=>JSON[_0x1fa1b3(0x266)](_0x4dac51));break;case _0x1fa1b3(0x255):_0x429358=_0x5056ca[_0x5aeed3]!==''?new Function(JSON[_0x1fa1b3(0x266)](_0x5056ca[_0x5aeed3])):new Function('return\x200');break;case _0x1fa1b3(0xa04):_0x2aae52=_0x5056ca[_0x5aeed3]!==''?JSON[_0x1fa1b3(0x266)](_0x5056ca[_0x5aeed3]):[],_0x429358=_0x2aae52[_0x1fa1b3(0x826)](_0x410f9d=>new Function(JSON[_0x1fa1b3(0x266)](_0x410f9d)));break;case _0x1fa1b3(0x76f):_0x429358=_0x5056ca[_0x5aeed3]!==''?String(_0x5056ca[_0x5aeed3]):'';break;case'ARRAYSTR':_0x2aae52=_0x5056ca[_0x5aeed3]!==''?JSON[_0x1fa1b3(0x266)](_0x5056ca[_0x5aeed3]):[],_0x429358=_0x2aae52[_0x1fa1b3(0x826)](_0x529345=>String(_0x529345));break;case _0x1fa1b3(0x7d3):_0x47e776=_0x5056ca[_0x5aeed3]!==''?JSON[_0x1fa1b3(0x266)](_0x5056ca[_0x5aeed3]):{},_0x5656d3[_0x318dda]={},VisuMZ[_0x1fa1b3(0x187)](_0x5656d3[_0x318dda],_0x47e776);continue;case _0x1fa1b3(0x175):_0x2aae52=_0x5056ca[_0x5aeed3]!==''?JSON[_0x1fa1b3(0x266)](_0x5056ca[_0x5aeed3]):[],_0x429358=_0x2aae52['map'](_0x1609fe=>VisuMZ['ConvertParams']({},JSON[_0x1fa1b3(0x266)](_0x1609fe)));break;default:continue;}_0x5656d3[_0x318dda]=_0x429358;}}}return _0x5656d3;},(_0x6972a3=>{const _0x13e87c=_0x3fd7af,_0x5a9463=_0x6972a3['name'];for(const _0x5650fc of dependencies){if(!Imported[_0x5650fc]){alert(_0x13e87c(0xa2f)[_0x13e87c(0xab2)](_0x5a9463,_0x5650fc)),SceneManager[_0x13e87c(0x830)]();break;}}const _0x3a80bf=_0x6972a3[_0x13e87c(0xafa)];if(_0x3a80bf[_0x13e87c(0x265)](/\[Version[ ](.*?)\]/i)){if(_0x13e87c(0x342)===_0x13e87c(0x83c))return!![];else{const _0x32e87f=Number(RegExp['$1']);_0x32e87f!==VisuMZ[label][_0x13e87c(0x11e)]&&(alert(_0x13e87c(0x8db)[_0x13e87c(0xab2)](_0x5a9463,_0x32e87f)),SceneManager['exit']());}}if(_0x3a80bf['match'](/\[Tier[ ](\d+)\]/i)){const _0x267747=Number(RegExp['$1']);_0x267747<tier?(alert(_0x13e87c(0x516)[_0x13e87c(0xab2)](_0x5a9463,_0x267747,tier)),SceneManager[_0x13e87c(0x830)]()):tier=Math[_0x13e87c(0x305)](_0x267747,tier);}VisuMZ['ConvertParams'](VisuMZ[label][_0x13e87c(0xa6b)],_0x6972a3[_0x13e87c(0xab)]);})(pluginData),VisuMZ['CreateActionSequenceTargets']=function(_0x48783b){const _0x19540d=_0x3fd7af;let _0x18d1bf=[];for(const _0x473cec of _0x48783b){_0x18d1bf=_0x18d1bf['concat'](VisuMZ[_0x19540d(0x9d5)](_0x473cec));}return _0x18d1bf[_0x19540d(0xa8)](_0x10a391=>_0x10a391);},VisuMZ[_0x3fd7af(0x9d5)]=function(_0x549f82){const _0x302f87=_0x3fd7af,_0x31e49d=BattleManager[_0x302f87(0x801)]()['filter'](_0x507e63=>_0x507e63&&_0x507e63[_0x302f87(0x8ac)]()),_0x3f6b55=BattleManager[_0x302f87(0x470)],_0x1272ae=BattleManager['_target'],_0x33bb53=BattleManager[_0x302f87(0x232)]?BattleManager[_0x302f87(0x232)]['slice'](0x0):_0x31e49d;_0x549f82=_0x549f82[_0x302f87(0x81b)]()[_0x302f87(0x306)]();if(_0x549f82===_0x302f87(0x111))return[_0x3f6b55];else{if(_0x549f82===_0x302f87(0x2fa)){if(_0x302f87(0x356)!==_0x302f87(0x7cb))return[_0x1272ae];else this[_0x302f87(0x7e5)]();}else{if(_0x549f82===_0x302f87(0x7c0)){if(_0x1272ae){const _0x30ae5d=_0x33bb53[_0x302f87(0x760)](_0x1272ae);return _0x30ae5d>=0x0?[_0x33bb53[_0x30ae5d-0x1]||_0x1272ae]:[_0x1272ae];}}else{if(_0x549f82===_0x302f87(0xa0f)){if(_0x1272ae){const _0x5e37a7=_0x33bb53['indexOf'](_0x1272ae);return _0x5e37a7>=0x0?[_0x33bb53[_0x5e37a7+0x1]||_0x1272ae]:[_0x1272ae];}}else{if(_0x549f82===_0x302f87(0x931)){if('sjenx'!==_0x302f87(0x4bc))this[_0x302f87(0x87b)]=![],_0x503072[_0x302f87(0x941)][_0x302f87(0x7d4)]['call'](this);else return _0x33bb53;}else{if(_0x549f82==='focus')return[_0x3f6b55][_0x302f87(0x795)](_0x33bb53);else{if(_0x549f82===_0x302f87(0x314)){if('Odmcs'!==_0x302f87(0x59f))this[_0x302f87(0x1fc)]++;else return _0x31e49d[_0x302f87(0xa8)](_0x286a77=>_0x286a77!==_0x3f6b55&&!_0x33bb53[_0x302f87(0x402)](_0x286a77)&&_0x286a77[_0x302f87(0xa1d)]());}}}}}}}if(_0x3f6b55){if(_0x549f82===_0x302f87(0x6d1))return _0x3f6b55['friendsUnit']()[_0x302f87(0x813)]();else{if(_0x549f82===_0x302f87(0x9e1)){if(_0x302f87(0x7c4)!=='FWAzQ')this[_0x302f87(0x667)]=_0x63d40d[_0x302f87(0x667)];else return _0x3f6b55[_0x302f87(0x8b0)]()[_0x302f87(0x813)]()['filter'](_0x4bc89e=>_0x4bc89e!==_0x3f6b55);}else{if(_0x549f82===_0x302f87(0x156)){if(_0x302f87(0x27b)!==_0x302f87(0x27b))return;else return _0x3f6b55[_0x302f87(0x8b0)]()['aliveMembers']()['filter'](_0x409588=>_0x409588!==_0x1272ae);}else{if(_0x549f82===_0x302f87(0x63a)){if(_0x302f87(0x6b8)==='HumIF'){const _0x911495=new _0x4253ad(_0x3d0e46);this[_0x302f87(0x2ab)][_0x302f87(0x96c)](_0x911495);}else return _0x3f6b55[_0x302f87(0x8b0)]()[_0x302f87(0xade)]();}else{if(_0x549f82[_0x302f87(0x265)](/FRIEND INDEX (\d+)/i)){if(_0x302f87(0x7e1)==='ABxWW'){const _0x15d5a5=Number(RegExp['$1']);return[_0x3f6b55[_0x302f87(0x8b0)]()[_0x302f87(0xec)]()[_0x15d5a5]];}else _0x438b0b['snapForBackground']();}}}}}if(_0x549f82===_0x302f87(0x6c6))return _0x3f6b55[_0x302f87(0xaae)]()['aliveMembers']();else{if(_0x549f82===_0x302f87(0xa0d)){if('TMUBL'===_0x302f87(0x6a4))this[_0x302f87(0x2b3)]();else return _0x3f6b55[_0x302f87(0xaae)]()[_0x302f87(0x813)]()[_0x302f87(0xa8)](_0xe8de1c=>_0xe8de1c!==_0x1272ae);}else{if(_0x549f82===_0x302f87(0x8f4))return _0x3f6b55[_0x302f87(0xaae)]()[_0x302f87(0xade)]();else{if(_0x549f82[_0x302f87(0x265)](/OPPONENT INDEX (\d+)/i)){const _0x5c2caf=Number(RegExp['$1']);return[_0x3f6b55[_0x302f87(0xaae)]()[_0x302f87(0xec)]()[_0x5c2caf]];}}}}}if(_0x549f82===_0x302f87(0xa57)){if('WFLOP'!=='WFLOP')_0x3b5448+=_0x502104(_0x362293['$1'])/0x64;else return $gameParty[_0x302f87(0x813)]();}else{if(_0x549f82==='alive\x20actors\x20not\x20user'){if(_0x302f87(0x3d7)===_0x302f87(0x3d7))return $gameParty['aliveMembers']()[_0x302f87(0xa8)](_0x464cf9=>_0x464cf9!==_0x3f6b55);else this['x']=this[_0x302f87(0xb4)]()['battler']()[_0x302f87(0x62e)];}else{if(_0x549f82===_0x302f87(0x3de))return'HtPhL'===_0x302f87(0x6bd)?this[_0x302f87(0xa0e)]||this[_0x302f87(0x6dd)]||this:$gameParty[_0x302f87(0x813)]()['filter'](_0x499966=>_0x499966!==_0x1272ae);else{if(_0x549f82==='dead\x20actors'){if(_0x302f87(0x698)!==_0x302f87(0x698))_0x3ce73e+=_0x113224[_0x302f87(0x278)](_0x3c903e['hpDamage']);else return $gameParty[_0x302f87(0xade)]();}else{if(_0x549f82['match'](/ACTOR INDEX (\d+)/i)){if(_0x302f87(0xa07)!=='CCsDz'){if(_0x1be344){const _0x19c6c5=_0x2ef490[_0x302f87(0x760)](_0x29c987);return _0x19c6c5>=0x0?[_0x1c5ca3[_0x19c6c5+0x1]||_0x21f380]:[_0x56d778];}}else{const _0x2391bc=Number(RegExp['$1']);return[$gameParty['members']()[_0x2391bc]];}}else{if(_0x549f82['match'](/ACTOR ID (\d+)/i)){const _0x2f5032=Number(RegExp['$1']);return[$gameActors[_0x302f87(0xe9)](_0x2f5032)];}}}}}}if(_0x549f82===_0x302f87(0x87c))return'DZrPU'===_0x302f87(0x28e)?$gameTroop['aliveMembers']():!_0x2e9147['isSideView']()&&this[_0x302f87(0xa9a)]&&this['_battler'][_0x302f87(0x91d)]();else{if(_0x549f82===_0x302f87(0x6d8)){if(_0x302f87(0x326)===_0x302f87(0x849))_0x19ba70[_0x302f87(0x941)][_0x302f87(0x2e9)][_0x302f87(0x145)](this,_0x41b90a),this[_0x302f87(0x9a3)]();else return $gameTroop[_0x302f87(0x813)]()[_0x302f87(0xa8)](_0x41937f=>_0x41937f!==_0x3f6b55);}else{if(_0x549f82==='alive\x20enemies\x20not\x20target')return $gameTroop[_0x302f87(0x813)]()[_0x302f87(0xa8)](_0x52388c=>_0x52388c!==_0x1272ae);else{if(_0x549f82==='dead\x20enemies')return $gameTroop['deadMembers']();else{if(_0x549f82['match'](/ENEMY INDEX (\d+)/i)){if(_0x302f87(0x60b)===_0x302f87(0x60b)){const _0x4de128=Number(RegExp['$1']);return[$gameTroop['members']()[_0x4de128]];}else{if(!this[_0x302f87(0x6d3)]())return![];return _0x165c5e[_0x302f87(0x941)]['Game_BattlerBase_canGuard'][_0x302f87(0x145)](this);}}else{if(_0x549f82[_0x302f87(0x265)](/ENEMY ID (\d+)/i)){const _0x26814b=Number(RegExp['$1']);return $gameTroop['aliveMembers']()[_0x302f87(0xa8)](_0x127fb0=>_0x127fb0['enemyId']()===_0x26814b);}}}}}}if(_0x549f82==='alive\x20battlers'){if(_0x302f87(0xf9)!==_0x302f87(0x1df))return _0x31e49d[_0x302f87(0xa8)](_0x2f3a71=>_0x2f3a71['isAlive']());else{const _0x5d7cee=_0x121224['note'];if(_0x5d7cee['match'](/<COMMAND REQUIRE LEARN>/i)){if(!this[_0x302f87(0x804)][_0x302f87(0x237)](_0x454808['id']))return![];}if(_0x5d7cee[_0x302f87(0x265)](/<COMMAND REQUIRE ACCESS>/i)){if(!this[_0x302f87(0x804)][_0x302f87(0x9ca)](_0x53c9de['id']))return![];}const _0x435042=_0x3be901[_0x302f87(0x941)][_0x302f87(0xd2)](_0x8c73a4,_0x302f87(0x76a));if(_0x1d1487[_0x302f87(0x941)]['JS'][_0x435042]){if(!_0x3557cb[_0x302f87(0x941)]['JS'][_0x435042]['call'](this,this[_0x302f87(0x804)],_0x173638))return![];}return _0x230939[_0x302f87(0x941)][_0x302f87(0x7b6)](_0x5223ca);}}else{if(_0x549f82==='alive\x20battlers\x20not\x20user')return _0x31e49d[_0x302f87(0xa8)](_0xffa300=>_0xffa300[_0x302f87(0x7fd)]()&&_0xffa300!==_0x3f6b55);else{if(_0x549f82==='alive\x20battlers\x20not\x20target')return _0x302f87(0xa50)!==_0x302f87(0xa50)?(this['iterateBattler'](_0x3eb012[0x0],_0x127414[0x1],_0x3781df=>{const _0x2528fe=_0x302f87;!_0x3781df['isDeathStateAffected']()&&(_0x3781df[_0x2528fe(0x3c7)](_0x5ec0f9[0x2],_0x53ddba[0x3]),_0x1720a5['forceAction'](_0x3781df));}),!![]):_0x31e49d[_0x302f87(0xa8)](_0x409ad8=>_0x409ad8[_0x302f87(0x7fd)]()&&_0x409ad8!==_0x1272ae);else{if(_0x549f82===_0x302f87(0x5a7))return _0x31e49d[_0x302f87(0xa8)](_0x14ff6a=>_0x14ff6a['isDead']());}}}return[];},PluginManager[_0x3fd7af(0x95c)](pluginData[_0x3fd7af(0x504)],_0x3fd7af(0x7c2),_0x4c8c4d=>{const _0x220d73=_0x3fd7af;if(!SceneManager[_0x220d73(0x970)]())return;VisuMZ[_0x220d73(0x187)](_0x4c8c4d,_0x4c8c4d);const _0x36bcc0=$gameTemp['getLastPluginCommandInterpreter'](),_0x153c9d=BattleManager[_0x220d73(0x2dd)],_0x3291f9=BattleManager['_subject'],_0x18ce86=BattleManager[_0x220d73(0x232)]?BattleManager[_0x220d73(0x232)][_0x220d73(0x7c7)](0x0):[],_0x12078f=BattleManager['_logWindow'];if(!_0x36bcc0||!_0x153c9d||!_0x3291f9)return;if(!_0x153c9d[_0x220d73(0xaf4)]())return;if(_0x4c8c4d[_0x220d73(0x2e3)])_0x12078f[_0x220d73(0x674)](_0x3291f9,_0x153c9d[_0x220d73(0xaf4)]());_0x4c8c4d[_0x220d73(0x4c1)]&&_0x12078f[_0x220d73(0x18b)](_0x220d73(0x52b),_0x3291f9,_0x18ce86,!![]);if(_0x4c8c4d['ActionStart'])_0x12078f[_0x220d73(0x18b)]('performActionStart',_0x3291f9,_0x153c9d);if(_0x4c8c4d[_0x220d73(0x1a1)])_0x12078f[_0x220d73(0x18b)]('waitForMovement');if(_0x4c8c4d['CastAnimation'])_0x12078f[_0x220d73(0x18b)]('performCastAnimation',_0x3291f9,_0x153c9d);if(_0x4c8c4d[_0x220d73(0xaa7)])_0x12078f[_0x220d73(0x18b)](_0x220d73(0x7e0));_0x36bcc0['setWaitMode']('battlelog');}),PluginManager[_0x3fd7af(0x95c)](pluginData[_0x3fd7af(0x504)],_0x3fd7af(0x1d7),_0x4c1688=>{const _0x64c1ff=_0x3fd7af;if(!SceneManager['isSceneBattle']())return;VisuMZ['ConvertParams'](_0x4c1688,_0x4c1688);const _0x56dfbb=$gameTemp[_0x64c1ff(0x8be)](),_0x50efb6=BattleManager['_action'],_0x4527c3=BattleManager[_0x64c1ff(0x470)],_0x581a87=BattleManager['_allTargets']?BattleManager[_0x64c1ff(0x232)][_0x64c1ff(0x7c7)](0x0):[],_0x213e12=BattleManager['_logWindow'],_0x387870=_0x4c1688[_0x64c1ff(0x208)]??![];if(!_0x56dfbb||!_0x50efb6||!_0x4527c3)return;if(!_0x50efb6[_0x64c1ff(0xaf4)]())return;let _0x59b4cd=_0x387870?_0x213e12[_0x64c1ff(0x1da)](_0x4527c3):0x1;for(let _0x371538=0x0;_0x371538<_0x59b4cd;_0x371538++){_0x387870&&_0x4527c3[_0x64c1ff(0x91d)]()&&('myRwc'===_0x64c1ff(0xadb)?_0x213e12[_0x64c1ff(0x18b)](_0x64c1ff(0x5c9),_0x4527c3,_0x371538):(this['_endBattle']=!![],this['_autoBattle']=![],this[_0x64c1ff(0xa39)](_0x64c1ff(0x4c4)),_0x2362c4['BattleCore'][_0x64c1ff(0xc0)][_0x64c1ff(0x145)](this,_0x226d45),this[_0x64c1ff(0xa39)]('PostEndBattleJS')));if(_0x4c1688['PerformAction'])_0x213e12[_0x64c1ff(0x18b)](_0x64c1ff(0x386),_0x4527c3,_0x50efb6);if(_0x4c1688[_0x64c1ff(0xa5e)]>0x0)_0x213e12[_0x64c1ff(0x18b)]('waitCount',_0x4c1688['WaitCount']);if(_0x4c1688[_0x64c1ff(0x688)])_0x213e12[_0x64c1ff(0x18b)](_0x64c1ff(0x1bb),_0x4527c3,_0x581a87,_0x50efb6['item']()[_0x64c1ff(0x15f)]);if(_0x4c1688['WaitForAnimation'])_0x213e12[_0x64c1ff(0x18b)]('waitForAnimation');for(const _0x592258 of _0x581a87){if(_0x64c1ff(0x777)===_0x64c1ff(0xa91))this[_0x64c1ff(0x68a)]();else{if(!_0x592258)continue;if(_0x4c1688[_0x64c1ff(0x5de)])_0x213e12[_0x64c1ff(0x18b)](_0x64c1ff(0x182),_0x4527c3,_0x592258);}}}if(_0x387870&&_0x4527c3[_0x64c1ff(0x91d)]()){if('vUoAX'==='vUoAX')_0x213e12['push'](_0x64c1ff(0x16c),_0x4527c3);else{if(_0x385873===_0x524368[_0x64c1ff(0x588)]()){let _0x13f37c=_0x2d9647[_0x64c1ff(0x4e6)];_0x13f37c*=_0x300c63[_0x64c1ff(0x7ec)](_0x76eaad),_0x13f37c*=this['subject']()[_0x64c1ff(0x2c0)](_0x2bc7d0),_0x13f37c*=this[_0x64c1ff(0x649)](_0x427907),_0xfdc59['random']()<_0x13f37c&&(_0x9b23fd[_0x64c1ff(0x2a2)]=!![],this[_0x64c1ff(0xd6)](_0x489b00));}}}if(_0x4c1688[_0x64c1ff(0x4c1)])_0x213e12[_0x64c1ff(0x18b)](_0x64c1ff(0x52b),_0x4527c3,_0x581a87,![]);_0x56dfbb['setWaitMode']('battlelog');}),PluginManager['registerCommand'](pluginData['name'],_0x3fd7af(0x7f9),_0x52f328=>{const _0x49424=_0x3fd7af;if(!SceneManager[_0x49424(0x970)]())return;VisuMZ['ConvertParams'](_0x52f328,_0x52f328);const _0x41e2eb=$gameTemp[_0x49424(0x8be)](),_0x4bfc02=BattleManager[_0x49424(0x2dd)],_0x4bca5a=BattleManager[_0x49424(0x470)],_0x2c6de8=BattleManager[_0x49424(0x232)]?BattleManager[_0x49424(0x232)][_0x49424(0x7c7)](0x0):[],_0x1d1ed8=BattleManager['_logWindow'],_0x354439=_0x52f328[_0x49424(0x208)]??![];if(!_0x41e2eb||!_0x4bfc02||!_0x4bca5a)return;if(!_0x4bfc02[_0x49424(0xaf4)]())return;let _0x551f1d=_0x354439?_0x1d1ed8[_0x49424(0x1da)](_0x4bca5a):0x1;for(let _0x953b10=0x0;_0x953b10<_0x551f1d;_0x953b10++){for(const _0x17ac0b of _0x2c6de8){if(!_0x17ac0b)continue;if(_0x354439&&_0x4bca5a[_0x49424(0x91d)]()){if(_0x49424(0x226)===_0x49424(0x6cc))return _0x11ea77[_0x49424(0x8b0)]()['aliveMembers']()[_0x49424(0xa8)](_0x36cbf3=>_0x36cbf3!==_0x428ec8);else _0x1d1ed8[_0x49424(0x18b)](_0x49424(0x5c9),_0x4bca5a,_0x953b10);}if(_0x52f328[_0x49424(0x4f9)])_0x1d1ed8['push'](_0x49424(0x386),_0x4bca5a,_0x4bfc02);if(_0x52f328['WaitCount1']>0x0)_0x1d1ed8[_0x49424(0x18b)](_0x49424(0x485),_0x52f328[_0x49424(0xa70)]);if(_0x52f328[_0x49424(0x688)])_0x1d1ed8['push'](_0x49424(0x1bb),_0x4bca5a,[_0x17ac0b],_0x4bfc02[_0x49424(0xaf4)]()[_0x49424(0x15f)]);if(_0x52f328[_0x49424(0x72e)]>0x0)_0x1d1ed8[_0x49424(0x18b)](_0x49424(0x485),_0x52f328[_0x49424(0x72e)]);if(_0x52f328[_0x49424(0x5de)])_0x1d1ed8[_0x49424(0x18b)](_0x49424(0x182),_0x4bca5a,_0x17ac0b);}}_0x354439&&_0x4bca5a[_0x49424(0x91d)]()&&(_0x49424(0x54a)===_0x49424(0xa0a)?this[_0x49424(0x824)]=(this[_0x49424(0x824)]*(_0x1a3667-0x1)+this[_0x49424(0x5b5)])/_0x38ff96:_0x1d1ed8[_0x49424(0x18b)](_0x49424(0x16c),_0x4bca5a));if(_0x52f328[_0x49424(0x4c1)])_0x1d1ed8['push']('applyImmortal',_0x4bca5a,_0x2c6de8,![]);_0x41e2eb['setWaitMode'](_0x49424(0x548));}),PluginManager['registerCommand'](pluginData[_0x3fd7af(0x504)],_0x3fd7af(0x56b),_0x13e644=>{const _0x4dfed3=_0x3fd7af;if(!SceneManager[_0x4dfed3(0x970)]())return;VisuMZ['ConvertParams'](_0x13e644,_0x13e644);const _0x574be0=$gameTemp[_0x4dfed3(0x8be)](),_0x30d3f1=BattleManager['_action'],_0x5c48b5=BattleManager[_0x4dfed3(0x470)],_0x333c79=BattleManager[_0x4dfed3(0x232)]?BattleManager[_0x4dfed3(0x232)][_0x4dfed3(0x7c7)](0x0):[],_0x5d96c4=BattleManager[_0x4dfed3(0x4bd)];if(!_0x574be0||!_0x30d3f1||!_0x5c48b5)return;if(!_0x30d3f1[_0x4dfed3(0xaf4)]())return;if(_0x13e644[_0x4dfed3(0x4c1)])_0x5d96c4[_0x4dfed3(0x18b)](_0x4dfed3(0x52b),_0x5c48b5,_0x333c79,![]);if(_0x13e644[_0x4dfed3(0x915)])_0x5d96c4[_0x4dfed3(0x18b)]('waitForNewLine');if(_0x13e644['WaitForEffect'])_0x5d96c4[_0x4dfed3(0x18b)]('waitForEffect');if(_0x13e644[_0x4dfed3(0x272)])_0x5d96c4['push'](_0x4dfed3(0x8b9));if(_0x13e644[_0x4dfed3(0x610)])_0x5d96c4[_0x4dfed3(0x18b)](_0x4dfed3(0xadc),_0x5c48b5);if(_0x13e644['WaitForMovement'])_0x5d96c4[_0x4dfed3(0x18b)](_0x4dfed3(0x798));_0x574be0['setWaitMode'](_0x4dfed3(0x548));}),PluginManager[_0x3fd7af(0x95c)](pluginData[_0x3fd7af(0x504)],_0x3fd7af(0x7e4),_0x2d2a0b=>{const _0x22a0ad=_0x3fd7af;if(!SceneManager[_0x22a0ad(0x970)]())return;if(!Imported[_0x22a0ad(0x8b2)])return;VisuMZ[_0x22a0ad(0x187)](_0x2d2a0b,_0x2d2a0b);const _0x58466d=$gameTemp['getLastPluginCommandInterpreter'](),_0x3d2972=_0x2d2a0b[_0x22a0ad(0x83e)];if(!_0x58466d)return;$gameScreen[_0x22a0ad(0x619)](_0x2d2a0b[_0x22a0ad(0x462)],_0x2d2a0b[_0x22a0ad(0x200)],_0x2d2a0b[_0x22a0ad(0x9f6)]);if(_0x3d2972)_0x58466d[_0x22a0ad(0x992)](_0x22a0ad(0x1a9));}),PluginManager[_0x3fd7af(0x95c)](pluginData[_0x3fd7af(0x504)],_0x3fd7af(0x8bb),_0x2dab17=>{const _0x3c732d=_0x3fd7af;if(!SceneManager[_0x3c732d(0x970)]())return;if(!Imported[_0x3c732d(0x8b2)])return;VisuMZ['ConvertParams'](_0x2dab17,_0x2dab17);const _0x23ef2a=$gameTemp[_0x3c732d(0x8be)](),_0x186cca=_0x2dab17[_0x3c732d(0x83e)];if(!_0x23ef2a)return;$gameScreen[_0x3c732d(0x619)](0x0,_0x2dab17['Duration'],_0x2dab17[_0x3c732d(0x9f6)]);if(_0x186cca)_0x23ef2a[_0x3c732d(0x992)](_0x3c732d(0x1a9));}),PluginManager['registerCommand'](pluginData['name'],_0x3fd7af(0x9bb),_0x225047=>{const _0x2949a0=_0x3fd7af;if(!SceneManager[_0x2949a0(0x970)]())return;if(!Imported[_0x2949a0(0x8b2)])return;const _0x449216=$gameTemp[_0x2949a0(0x8be)]();if(!_0x449216)return;_0x449216[_0x2949a0(0x992)](_0x2949a0(0x1a9));}),PluginManager[_0x3fd7af(0x95c)](pluginData[_0x3fd7af(0x504)],_0x3fd7af(0x66d),_0x4d5908=>{const _0x15319b=_0x3fd7af;if(!SceneManager[_0x15319b(0x970)]())return;VisuMZ['ConvertParams'](_0x4d5908,_0x4d5908);const _0x3b1a18=$gameTemp[_0x15319b(0x8be)](),_0x1a2648=BattleManager[_0x15319b(0x2dd)],_0x218ba4=BattleManager[_0x15319b(0x470)],_0x536419=VisuMZ['CreateActionSequenceTargets'](_0x4d5908[_0x15319b(0xc5)]),_0xec8087=_0x4d5908[_0x15319b(0x951)],_0x56cafe=BattleManager['_logWindow'];if(!_0x3b1a18||!_0x1a2648||!_0x218ba4)return;if(!_0x1a2648[_0x15319b(0xaf4)]())return;let _0x397af0=_0x1a2648[_0x15319b(0xaf4)]()[_0x15319b(0x15f)];if(_0x397af0<0x0)_0x397af0=_0x218ba4[_0x15319b(0x8f1)]();$gameTemp['requestAnimation'](_0x536419,_0x397af0,_0xec8087),_0x4d5908[_0x15319b(0xaa7)]&&(_0x15319b(0x1ed)!==_0x15319b(0x1ed)?_0x32a4c0[_0x15319b(0x9fd)][_0x15319b(0x1eb)][_0x15319b(0x145)](this):_0x3b1a18[_0x15319b(0x992)](_0x15319b(0x77a)));}),PluginManager[_0x3fd7af(0x95c)](pluginData[_0x3fd7af(0x504)],'ActSeq_Animation_AttackAnimation',_0x5ce813=>{const _0x570e3d=_0x3fd7af;if(!SceneManager[_0x570e3d(0x970)]())return;VisuMZ[_0x570e3d(0x187)](_0x5ce813,_0x5ce813);const _0x5ec2c0=$gameTemp[_0x570e3d(0x8be)](),_0xe80cae=BattleManager[_0x570e3d(0x470)],_0x37dddb=VisuMZ[_0x570e3d(0xa62)](_0x5ce813[_0x570e3d(0xc5)]),_0x3a947e=_0x5ce813['Mirror'],_0x3378b3=BattleManager[_0x570e3d(0x4bd)];if(!_0x5ec2c0||!_0xe80cae)return;const _0x294c99=_0xe80cae[_0x570e3d(0x8f1)]();$gameTemp[_0x570e3d(0x97f)](_0x37dddb,_0x294c99,_0x3a947e),_0x5ce813[_0x570e3d(0xaa7)]&&_0x5ec2c0['setWaitMode']('battleAnimation');}),PluginManager[_0x3fd7af(0x95c)](pluginData['name'],_0x3fd7af(0x9f8),_0x3d81a4=>{const _0x48dd5a=_0x3fd7af;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x48dd5a(0x187)](_0x3d81a4,_0x3d81a4);const _0x4b3e12=_0x44b851[_0x48dd5a(0x554)](_0x3d81a4[_0x48dd5a(0x628)]);if(_0x4b3e12<=0x0)return;const _0x478cf6=$gameTemp['getLastPluginCommandInterpreter'](),_0x44b851=BattleManager['_subject'],_0x319988=VisuMZ[_0x48dd5a(0xa62)](_0x3d81a4['Targets']),_0x3fc975=_0x3d81a4[_0x48dd5a(0x951)],_0x8f0d8f=BattleManager[_0x48dd5a(0x4bd)];if(!_0x478cf6||!_0x44b851)return;$gameTemp[_0x48dd5a(0x97f)](_0x319988,_0x4b3e12,_0x3fc975),_0x3d81a4[_0x48dd5a(0xaa7)]&&_0x478cf6[_0x48dd5a(0x992)](_0x48dd5a(0x77a));}),PluginManager[_0x3fd7af(0x95c)](pluginData[_0x3fd7af(0x504)],'ActSeq_Animation_CastAnimation',_0x11910b=>{const _0x527eb0=_0x3fd7af;if(!SceneManager[_0x527eb0(0x970)]())return;VisuMZ[_0x527eb0(0x187)](_0x11910b,_0x11910b);const _0x99f9e1=$gameTemp['getLastPluginCommandInterpreter'](),_0x4add0c=BattleManager[_0x527eb0(0x2dd)],_0x2de697=_0x11910b['Mirror'],_0x3fe27c=VisuMZ['CreateActionSequenceTargets'](_0x11910b[_0x527eb0(0xc5)]);if(!_0x99f9e1||!_0x4add0c)return;if(!_0x4add0c[_0x527eb0(0xaf4)]())return;for(const _0x548994 of _0x3fe27c){if(!_0x548994)continue;_0x548994['performCastAnimation'](_0x4add0c,_0x2de697);}if(_0x11910b[_0x527eb0(0xaa7)])_0x99f9e1[_0x527eb0(0x992)](_0x527eb0(0x77a));}),PluginManager[_0x3fd7af(0x95c)](pluginData['name'],_0x3fd7af(0xab8),_0x5677ba=>{const _0x23875d=_0x3fd7af;VisuMZ[_0x23875d(0x187)](_0x5677ba,_0x5677ba);const _0x1a8a18=$gameTemp[_0x23875d(0x8be)](),_0x19364d=VisuMZ[_0x23875d(0xa62)](_0x5677ba[_0x23875d(0xc5)]),_0x1e2dba=_0x5677ba[_0x23875d(0x825)];if(!_0x1e2dba)return;for(const _0x42a89d of _0x19364d){if('qRzia'===_0x23875d(0x8a1)){if(!_0x42a89d)continue;if(!_0x42a89d[_0x23875d(0x91d)]())continue;_0x42a89d[_0x23875d(0x452)](_0x1e2dba);}else{if(this[_0x23875d(0x5b5)]===_0x5819b4)return;this[_0x23875d(0x5b5)]=_0x37a487,this[_0x23875d(0xa90)]=_0x4fbc7e,this['_opacityWholeDuration']=_0x420041,this[_0x23875d(0x3b7)]=_0x45e0a2||_0x23875d(0xa2d);if(_0x20dca8<=0x0)this['opacity']=_0x33a12d;}}}),PluginManager[_0x3fd7af(0x95c)](pluginData[_0x3fd7af(0x504)],'ActSeq_Animation_PlayAtCoordinate',_0x46eceb=>{const _0x157e31=_0x3fd7af;if(!SceneManager[_0x157e31(0x450)])return;if(!SceneManager[_0x157e31(0x450)]['_spriteset'])return;if(!Imported[_0x157e31(0x28a)])return;VisuMZ[_0x157e31(0x187)](_0x46eceb,_0x46eceb);const _0x5573be=$gameTemp[_0x157e31(0x8be)](),_0x64efcd=Math[_0x157e31(0x819)](_0x46eceb[_0x157e31(0x23d)]),_0x36e02e=Math[_0x157e31(0x819)](_0x46eceb['pointY']);$gameTemp['requestPointAnimation'](_0x64efcd,_0x36e02e,_0x46eceb[_0x157e31(0x672)],_0x46eceb[_0x157e31(0x951)],_0x46eceb[_0x157e31(0x37b)]),_0x46eceb[_0x157e31(0x282)]&&_0x5573be&&(SceneManager['_scene'][_0x157e31(0x3b4)]['updatePointAnimations'](),_0x5573be[_0x157e31(0x992)](_0x157e31(0x77a)));}),PluginManager[_0x3fd7af(0x95c)](pluginData['name'],'ActSeq_Animation_ShowAnimation',_0x498d78=>{const _0x51015d=_0x3fd7af;if(!SceneManager[_0x51015d(0x970)]())return;VisuMZ[_0x51015d(0x187)](_0x498d78,_0x498d78);const _0x48d965=$gameTemp[_0x51015d(0x8be)](),_0x1a2e85=VisuMZ[_0x51015d(0xa62)](_0x498d78[_0x51015d(0xc5)]),_0x157d0f=_0x498d78[_0x51015d(0x672)],_0x401470=_0x498d78[_0x51015d(0x951)];if(!_0x48d965)return;$gameTemp[_0x51015d(0x97f)](_0x1a2e85,_0x157d0f,_0x401470);if(_0x498d78[_0x51015d(0xaa7)])_0x48d965[_0x51015d(0x992)](_0x51015d(0x77a));}),PluginManager[_0x3fd7af(0x95c)](pluginData['name'],_0x3fd7af(0x146),_0x2ad9c2=>{const _0x48aca7=_0x3fd7af;if(!SceneManager[_0x48aca7(0x970)]())return;const _0x5b162e=$gameTemp[_0x48aca7(0x8be)]();if(!_0x5b162e)return;_0x5b162e[_0x48aca7(0x992)](_0x48aca7(0x77a));}),PluginManager[_0x3fd7af(0x95c)](pluginData[_0x3fd7af(0x504)],_0x3fd7af(0x57e),_0x53025b=>{const _0x1ee767=_0x3fd7af;if(!SceneManager[_0x1ee767(0x970)]())return;VisuMZ[_0x1ee767(0x187)](_0x53025b,_0x53025b);const _0x34978e=BattleManager['_logWindow'],_0x2a3e87=_0x53025b[_0x1ee767(0x2b6)]&&Imported[_0x1ee767(0x4e2)];_0x34978e[_0x1ee767(0x2d6)](_0x53025b['Text']),_0x2a3e87&&Imported[_0x1ee767(0x4e2)]&&$gameSystem['addTextToCombatLog'](_0x53025b['Text']||'',_0x53025b[_0x1ee767(0x3cd)]||0x0);}),PluginManager[_0x3fd7af(0x95c)](pluginData[_0x3fd7af(0x504)],_0x3fd7af(0x530),_0x18924f=>{const _0x3a5994=_0x3fd7af;if(!SceneManager[_0x3a5994(0x970)]())return;const _0x3b9490=BattleManager[_0x3a5994(0x4bd)];_0x3b9490['clear']();}),PluginManager['registerCommand'](pluginData[_0x3fd7af(0x504)],_0x3fd7af(0xa8a),_0x251b2b=>{const _0x7785d3=_0x3fd7af;if(!SceneManager[_0x7785d3(0x970)]())return;const _0x3a63d7=$gameTemp[_0x7785d3(0x8be)](),_0x52dfcd=BattleManager['_action'],_0x4abaa5=BattleManager[_0x7785d3(0x470)],_0x12e4c7=BattleManager[_0x7785d3(0x4bd)];if(!_0x3a63d7||!_0x52dfcd||!_0x4abaa5)return;if(!_0x52dfcd['item']())return;_0x12e4c7[_0x7785d3(0x674)](_0x4abaa5,_0x52dfcd[_0x7785d3(0xaf4)]()),_0x3a63d7[_0x7785d3(0x992)](_0x7785d3(0x548));}),PluginManager[_0x3fd7af(0x95c)](pluginData[_0x3fd7af(0x504)],_0x3fd7af(0x118),_0x486b9c=>{const _0x513a2c=_0x3fd7af;if(!SceneManager[_0x513a2c(0x970)]())return;const _0x408589=BattleManager[_0x513a2c(0x4bd)];_0x408589[_0x513a2c(0xe7)]();}),PluginManager[_0x3fd7af(0x95c)](pluginData[_0x3fd7af(0x504)],'ActSeq_BattleLog_PushBaseLine',_0x35f60f=>{const _0x5cc573=_0x3fd7af;if(!SceneManager[_0x5cc573(0x970)]())return;const _0x2b992f=BattleManager['_logWindow'];_0x2b992f['pushBaseLine']();}),PluginManager['registerCommand'](pluginData['name'],_0x3fd7af(0x6f0),_0x17d2c9=>{const _0x12e2d5=_0x3fd7af;if(!SceneManager[_0x12e2d5(0x970)]())return;const _0x48df9f=BattleManager[_0x12e2d5(0x4bd)];_0x48df9f[_0x12e2d5(0x898)]();}),PluginManager[_0x3fd7af(0x95c)](pluginData[_0x3fd7af(0x504)],_0x3fd7af(0x57f),_0x57a3ac=>{const _0x53a4f3=_0x3fd7af;if(!SceneManager[_0x53a4f3(0x970)]())return;VisuMZ['ConvertParams'](_0x57a3ac,_0x57a3ac),SceneManager[_0x53a4f3(0x450)][_0x53a4f3(0x29c)](_0x57a3ac[_0x53a4f3(0x98a)]);}),PluginManager[_0x3fd7af(0x95c)](pluginData['name'],'ActSeq_BattleLog_WaitForBattleLog',_0x387f28=>{const _0xb0a8be=_0x3fd7af;if(!SceneManager['isSceneBattle']())return;const _0x4b00e8=$gameTemp[_0xb0a8be(0x8be)]();_0x4b00e8['setWaitMode'](_0xb0a8be(0x548));}),PluginManager['registerCommand'](pluginData[_0x3fd7af(0x504)],'ActSeq_BattleLog_WaitForNewLine',_0x5a6b5a=>{const _0x34f994=_0x3fd7af;if(!SceneManager[_0x34f994(0x970)]())return;const _0x1685d0=$gameTemp[_0x34f994(0x8be)](),_0x54de0a=BattleManager[_0x34f994(0x4bd)];_0x54de0a[_0x34f994(0x363)](),_0x1685d0[_0x34f994(0x992)](_0x34f994(0x548));}),PluginManager['registerCommand'](pluginData[_0x3fd7af(0x504)],_0x3fd7af(0x206),_0x53d300=>{const _0x1fcca5=_0x3fd7af;if(!SceneManager[_0x1fcca5(0x970)]())return;if(!Imported[_0x1fcca5(0x8b2)])return;VisuMZ['ConvertParams'](_0x53d300,_0x53d300);const _0x1ba0a5=$gameScreen['battleCameraData']();_0x1ba0a5[_0x1fcca5(0x2dc)]=_0x53d300['Setting'];}),PluginManager[_0x3fd7af(0x95c)](pluginData['name'],'ActSeq_Camera_FocusPoint',_0x45cd01=>{const _0x396fd4=_0x3fd7af;if(!SceneManager[_0x396fd4(0x970)]())return;if(!Imported[_0x396fd4(0x8b2)])return;VisuMZ[_0x396fd4(0x187)](_0x45cd01,_0x45cd01);const _0x49acb0=$gameTemp[_0x396fd4(0x8be)](),_0x3f1f15=_0x45cd01[_0x396fd4(0x7f7)];$gameScreen['setBattleCameraPoint'](_0x45cd01['FocusX'],_0x45cd01[_0x396fd4(0x41f)],_0x45cd01[_0x396fd4(0x200)],_0x45cd01[_0x396fd4(0x9f6)]);if(_0x3f1f15)_0x49acb0['setWaitMode']('battleCamera');}),PluginManager[_0x3fd7af(0x95c)](pluginData[_0x3fd7af(0x504)],_0x3fd7af(0x171),_0x1eacc7=>{const _0x3d3ce2=_0x3fd7af;if(!SceneManager[_0x3d3ce2(0x970)]())return;if(!Imported[_0x3d3ce2(0x8b2)])return;VisuMZ['ConvertParams'](_0x1eacc7,_0x1eacc7);const _0x5de151=$gameTemp[_0x3d3ce2(0x8be)](),_0x5b0a2e=VisuMZ[_0x3d3ce2(0xa62)](_0x1eacc7['Targets']),_0x222570=_0x1eacc7[_0x3d3ce2(0x7f7)];$gameScreen[_0x3d3ce2(0x565)](_0x5b0a2e,_0x1eacc7['Duration'],_0x1eacc7[_0x3d3ce2(0x9f6)]);if(_0x222570)_0x5de151[_0x3d3ce2(0x992)]('battleCamera');}),PluginManager[_0x3fd7af(0x95c)](pluginData[_0x3fd7af(0x504)],_0x3fd7af(0x2f6),_0x7ca856=>{const _0x29f994=_0x3fd7af;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x29f994(0x8b2)])return;VisuMZ[_0x29f994(0x187)](_0x7ca856,_0x7ca856);const _0x546e3d=$gameTemp['getLastPluginCommandInterpreter'](),_0x39b26f=_0x7ca856[_0x29f994(0x7f7)];$gameScreen[_0x29f994(0x1e9)](_0x7ca856[_0x29f994(0x592)],_0x7ca856['OffsetY'],_0x7ca856[_0x29f994(0x200)],_0x7ca856[_0x29f994(0x9f6)]);if(_0x39b26f)_0x546e3d['setWaitMode'](_0x29f994(0x899));}),PluginManager[_0x3fd7af(0x95c)](pluginData[_0x3fd7af(0x504)],_0x3fd7af(0x7f8),_0x531d6c=>{const _0x4e29b8=_0x3fd7af;if(!SceneManager[_0x4e29b8(0x970)]())return;if(!Imported[_0x4e29b8(0x8b2)])return;VisuMZ[_0x4e29b8(0x187)](_0x531d6c,_0x531d6c);const _0x48744e=$gameTemp['getLastPluginCommandInterpreter'](),_0x30587f=_0x531d6c['ResetFocus'],_0x5951bb=_0x531d6c['ResetOffset'],_0x48d4c1=_0x531d6c[_0x4e29b8(0x7f7)];if(_0x30587f){const _0x447050=Math[_0x4e29b8(0x819)](Graphics[_0x4e29b8(0xad0)]/0x2),_0x4aac9d=Math[_0x4e29b8(0x819)](Graphics[_0x4e29b8(0x26a)]/0x2);$gameScreen[_0x4e29b8(0x595)](_0x447050,_0x4aac9d,_0x531d6c[_0x4e29b8(0x200)],_0x531d6c['EasingType']);}_0x5951bb&&$gameScreen[_0x4e29b8(0x1e9)](0x0,0x0,_0x531d6c['Duration'],_0x531d6c[_0x4e29b8(0x9f6)]);if(_0x48d4c1)_0x48744e[_0x4e29b8(0x992)](_0x4e29b8(0x899));}),PluginManager['registerCommand'](pluginData[_0x3fd7af(0x504)],_0x3fd7af(0x1c3),_0x524054=>{const _0x4818fe=_0x3fd7af;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x4818fe(0x8b2)])return;const _0x542e56=$gameTemp[_0x4818fe(0x8be)]();if(!_0x542e56)return;_0x542e56[_0x4818fe(0x992)](_0x4818fe(0x899));}),PluginManager[_0x3fd7af(0x95c)](pluginData['name'],_0x3fd7af(0x5a5),_0x4631ae=>{const _0x21f0d9=_0x3fd7af;if(!SceneManager[_0x21f0d9(0x970)]())return;if(!Imported[_0x21f0d9(0x432)])return;VisuMZ[_0x21f0d9(0x187)](_0x4631ae,_0x4631ae);const _0x38cb05=VisuMZ[_0x21f0d9(0xa62)](_0x4631ae[_0x21f0d9(0xc5)]),_0x22b4ac=_0x4631ae[_0x21f0d9(0x349)][_0x21f0d9(0x81b)]()[_0x21f0d9(0x306)]();for(const _0x301734 of _0x38cb05){if(!_0x301734)continue;_0x301734[_0x21f0d9(0x173)](_0x22b4ac);}}),PluginManager[_0x3fd7af(0x95c)](pluginData[_0x3fd7af(0x504)],_0x3fd7af(0xba),_0x5862b2=>{const _0x3c767a=_0x3fd7af;if(!SceneManager[_0x3c767a(0x970)]())return;if(!Imported[_0x3c767a(0x432)])return;VisuMZ[_0x3c767a(0x187)](_0x5862b2,_0x5862b2);const _0x5ad8c8=VisuMZ[_0x3c767a(0xa62)](_0x5862b2[_0x3c767a(0xc5)]),_0x1f2477=_0x5862b2[_0x3c767a(0x323)];for(const _0x2ffe09 of _0x5ad8c8){if(!_0x2ffe09)continue;_0x2ffe09[_0x3c767a(0x9f7)]()[_0x3c767a(0x875)]=_0x1f2477;}}),PluginManager[_0x3fd7af(0x95c)](pluginData[_0x3fd7af(0x504)],_0x3fd7af(0x3da),_0x1da611=>{const _0x1a2923=_0x3fd7af;if(!SceneManager[_0x1a2923(0x970)]())return;if(!Imported[_0x1a2923(0x618)])return;VisuMZ[_0x1a2923(0x187)](_0x1da611,_0x1da611);const _0x31247c=BattleManager[_0x1a2923(0x2dd)],_0x32b4ab=_0x1da611[_0x1a2923(0x92b)];if(!_0x31247c)return;_0x31247c[_0x1a2923(0x180)]=_0x32b4ab;}),PluginManager[_0x3fd7af(0x95c)](pluginData['name'],'ActSeq_Element_Clear',_0x259372=>{const _0x4ea86f=_0x3fd7af;if(!SceneManager[_0x4ea86f(0x970)]())return;if(!Imported[_0x4ea86f(0x618)])return;const _0x2a248c=BattleManager[_0x4ea86f(0x2dd)];if(!_0x2a248c)return;_0x2a248c[_0x4ea86f(0x724)]();}),PluginManager[_0x3fd7af(0x95c)](pluginData[_0x3fd7af(0x504)],_0x3fd7af(0x4f8),_0x3485f4=>{const _0x1e66cb=_0x3fd7af;if(!SceneManager['isSceneBattle']())return;if(!Imported['VisuMZ_1_ElementStatusCore'])return;VisuMZ[_0x1e66cb(0x187)](_0x3485f4,_0x3485f4);const _0x20dd06=BattleManager[_0x1e66cb(0x2dd)],_0x3e238b=_0x3485f4['Elements'];if(!_0x20dd06)return;_0x20dd06[_0x1e66cb(0x9ed)]=_0x3e238b;}),PluginManager['registerCommand'](pluginData[_0x3fd7af(0x504)],_0x3fd7af(0x985),_0x551931=>{const _0x3b22c8=_0x3fd7af;if(!SceneManager[_0x3b22c8(0x970)]())return;if(!Imported['VisuMZ_1_ElementStatusCore'])return;const _0x5c73fa=BattleManager[_0x3b22c8(0x2dd)];if(!_0x5c73fa)return;_0x5c73fa[_0x3b22c8(0x9fb)]=!![];}),PluginManager[_0x3fd7af(0x95c)](pluginData[_0x3fd7af(0x504)],'ActSeq_Horror_Clear',_0x187694=>{const _0x39f9d0=_0x3fd7af;if(!Imported['VisuMZ_2_HorrorEffects'])return;if(!SceneManager[_0x39f9d0(0x970)]())return;VisuMZ[_0x39f9d0(0x187)](_0x187694,_0x187694);const _0x30782c=VisuMZ[_0x39f9d0(0xa62)](_0x187694[_0x39f9d0(0xc5)]);for(const _0x15b831 of _0x30782c){if(!_0x15b831)continue;_0x15b831[_0x39f9d0(0x16d)](_0x39f9d0(0xf1)),_0x15b831[_0x39f9d0(0x16d)](_0x39f9d0(0x324)),_0x15b831['removeHorrorEffect']('tv'),_0x15b831['clearHorrorEffects']();}$gamePlayer[_0x39f9d0(0x898)]();}),PluginManager['registerCommand'](pluginData[_0x3fd7af(0x504)],'ActSeq_Horror_GlitchCreate',_0x3fdfa6=>{const _0x4f9cb3=_0x3fd7af;if(!Imported[_0x4f9cb3(0x1fd)])return;if(!SceneManager[_0x4f9cb3(0x970)]())return;VisuMZ['ConvertParams'](_0x3fdfa6,_0x3fdfa6);const _0x5148f=VisuMZ['CreateActionSequenceTargets'](_0x3fdfa6[_0x4f9cb3(0xc5)]),_0x523d7b='glitch';_0x3fdfa6[_0x4f9cb3(0x1b2)]=Math[_0x4f9cb3(0x821)](_0x3fdfa6[_0x4f9cb3(0x5d6)]/0x2),_0x3fdfa6[_0x4f9cb3(0xaf5)]=_0x3fdfa6[_0x4f9cb3(0x5d6)],_0x3fdfa6[_0x4f9cb3(0x238)]=!![];for(const _0x1bda91 of _0x5148f){if('VLRcM'===_0x4f9cb3(0xd5)){const _0x1da1ff=_0x1a6393[_0x4f9cb3(0x7b9)];if(_0x1da1ff[_0x4f9cb3(0x265)](_0x2a8e73[_0x4f9cb3(0x941)][_0x4f9cb3(0x240)][_0x2f9471])){const _0x4f2f6c=_0x305f15['$1'],_0xe2f9ac=_0x4f9cb3(0x2ba)['format'](_0x4f2f6c),_0x524c53=_0x2bb23d['BattleCore'][_0x4f9cb3(0xd2)](_0x17157d,_0x38813b);_0x459684['BattleCore']['JS'][_0x524c53]=new _0x315069(_0xe2f9ac);}}else{if(!_0x1bda91)continue;_0x1bda91['setHorrorEffectSettings'](_0x523d7b,_0x3fdfa6);}}$gamePlayer['refresh']();}),PluginManager[_0x3fd7af(0x95c)](pluginData[_0x3fd7af(0x504)],_0x3fd7af(0x71b),_0x5f0a7f=>{const _0x57be31=_0x3fd7af;if(!Imported['VisuMZ_2_HorrorEffects'])return;if(!SceneManager[_0x57be31(0x970)]())return;VisuMZ['ConvertParams'](_0x5f0a7f,_0x5f0a7f);const _0x354135=VisuMZ[_0x57be31(0xa62)](_0x5f0a7f[_0x57be31(0xc5)]);for(const _0x4ab4f5 of _0x354135){if(_0x57be31(0x967)!==_0x57be31(0x967))return _0x443bed['boxWidth'];else{if(!_0x4ab4f5)continue;_0x4ab4f5['removeHorrorEffect'](_0x57be31(0x324));}}$gamePlayer[_0x57be31(0x898)]();}),PluginManager[_0x3fd7af(0x95c)](pluginData[_0x3fd7af(0x504)],_0x3fd7af(0x8e1),_0x29c84e=>{const _0x2c54d0=_0x3fd7af;if(!Imported['VisuMZ_2_HorrorEffects'])return;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x2c54d0(0x187)](_0x29c84e,_0x29c84e);const _0x3deff8=VisuMZ[_0x2c54d0(0xa62)](_0x29c84e[_0x2c54d0(0xc5)]),_0x1385e1='noise';for(const _0x51df07 of _0x3deff8){if(!_0x51df07)continue;_0x51df07[_0x2c54d0(0x999)](_0x1385e1,_0x29c84e);}$gamePlayer[_0x2c54d0(0x898)]();}),PluginManager[_0x3fd7af(0x95c)](pluginData[_0x3fd7af(0x504)],_0x3fd7af(0xae6),_0x55d766=>{const _0x270d68=_0x3fd7af;if(!Imported['VisuMZ_2_HorrorEffects'])return;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x270d68(0x187)](_0x55d766,_0x55d766);const _0x5ee5ae=VisuMZ[_0x270d68(0xa62)](_0x55d766[_0x270d68(0xc5)]);for(const _0x1008a5 of _0x5ee5ae){if(!_0x1008a5)continue;_0x1008a5[_0x270d68(0x16d)]('noise');}$gamePlayer[_0x270d68(0x898)]();}),PluginManager[_0x3fd7af(0x95c)](pluginData['name'],_0x3fd7af(0x424),_0x549998=>{const _0x484831=_0x3fd7af;if(!Imported[_0x484831(0x1fd)])return;if(!SceneManager[_0x484831(0x970)]())return;VisuMZ[_0x484831(0x187)](_0x549998,_0x549998);const _0x48ca56=VisuMZ[_0x484831(0xa62)](_0x549998[_0x484831(0xc5)]),_0x21c7a9='tv';for(const _0x551225 of _0x48ca56){if(!_0x551225)continue;_0x551225[_0x484831(0x999)](_0x21c7a9,_0x549998);}$gamePlayer[_0x484831(0x898)]();}),PluginManager[_0x3fd7af(0x95c)](pluginData[_0x3fd7af(0x504)],_0x3fd7af(0x6de),_0x225282=>{const _0x312076=_0x3fd7af;if(!Imported['VisuMZ_2_HorrorEffects'])return;if(!SceneManager[_0x312076(0x970)]())return;VisuMZ['ConvertParams'](_0x225282,_0x225282);const _0x29de6d=VisuMZ[_0x312076(0xa62)](_0x225282[_0x312076(0xc5)]);for(const _0x3b5ecb of _0x29de6d){if(!_0x3b5ecb)continue;_0x3b5ecb[_0x312076(0x16d)]('tv');}$gamePlayer[_0x312076(0x898)]();}),PluginManager['registerCommand'](pluginData[_0x3fd7af(0x504)],_0x3fd7af(0x254),_0x5cfcdc=>{const _0x3233bc=_0x3fd7af;if(!SceneManager[_0x3233bc(0x970)]())return;if(!Imported['VisuMZ_3_ActSeqImpact'])return;const _0x1ed364=SceneManager[_0x3233bc(0x450)][_0x3233bc(0x3b4)];if(!_0x1ed364)return;VisuMZ[_0x3233bc(0x187)](_0x5cfcdc,_0x5cfcdc);const _0x11f847=_0x5cfcdc[_0x3233bc(0x8c1)]||0x1,_0x7c498b=_0x5cfcdc[_0x3233bc(0x200)]||0x1,_0x9e6a94=_0x5cfcdc[_0x3233bc(0x9f6)]||'Linear';_0x1ed364['setupRgbSplitImpactFilter'](_0x11f847,_0x7c498b,_0x9e6a94);}),PluginManager[_0x3fd7af(0x95c)](pluginData[_0x3fd7af(0x504)],_0x3fd7af(0x80b),_0x542806=>{const _0x42f152=_0x3fd7af;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x42f152(0x3c8)])return;const _0x1fa439=SceneManager[_0x42f152(0x450)][_0x42f152(0x3b4)];if(!_0x1fa439)return;VisuMZ[_0x42f152(0x187)](_0x542806,_0x542806);const _0x53c869=Number(_0x542806[_0x42f152(0x462)])||0x0,_0x58fdd1=Number(_0x542806['Rate']),_0x16e8f1=_0x542806[_0x42f152(0x200)]||0x1,_0x2cbffa=_0x542806[_0x42f152(0x9f6)]||_0x42f152(0xa2d);_0x1fa439[_0x42f152(0x6da)](_0x53c869,_0x58fdd1,_0x16e8f1,_0x2cbffa);}),PluginManager[_0x3fd7af(0x95c)](pluginData[_0x3fd7af(0x504)],_0x3fd7af(0x4b5),_0x5ad8f6=>{const _0x454434=_0x3fd7af;if(!SceneManager[_0x454434(0x970)]())return;if(!Imported[_0x454434(0x3c8)])return;const _0x333e0e=SceneManager['_scene'][_0x454434(0x3b4)];if(!_0x333e0e)return;VisuMZ['ConvertParams'](_0x5ad8f6,_0x5ad8f6);const _0x17d126=Number(_0x5ad8f6[_0x454434(0x462)])||0x0,_0xef58f8=Number(_0x5ad8f6['Rate']),_0x185691=_0x5ad8f6[_0x454434(0x200)]||0x1,_0x7d6efd=_0x5ad8f6[_0x454434(0x9f6)]||_0x454434(0xa2d),_0x3b71d1=VisuMZ[_0x454434(0xa62)](_0x5ad8f6[_0x454434(0xc5)]);for(const _0x4b3ce3 of _0x3b71d1){if('ZQmKr'!=='BvojM'){if(!_0x4b3ce3)continue;if(!_0x4b3ce3[_0x454434(0x181)]())continue;_0x4b3ce3[_0x454434(0x181)]()['setupMotionBlurImpactFilter'](_0x17d126,_0xef58f8,_0x185691,_0x7d6efd);}else{const _0xcd7b2d=_0xe74c49(_0x55a964['$1'])[_0x454434(0xaa3)](/[\r\n]+/)[_0x454434(0x861)]('');_0x3d42c0[_0x454434(0x924)]=_0x29c4b8[_0x454434(0x5d8)](_0xcd7b2d);}}}),PluginManager[_0x3fd7af(0x95c)](pluginData[_0x3fd7af(0x504)],'ActSeq_Impact_MotionTrailCreate',_0xf33126=>{const _0x4864a3=_0x3fd7af;if(!SceneManager[_0x4864a3(0x970)]())return;if(!Imported['VisuMZ_3_ActSeqImpact'])return;VisuMZ[_0x4864a3(0x187)](_0xf33126,_0xf33126);const _0x39c48c={'delay':_0xf33126[_0x4864a3(0x4fa)],'duration':_0xf33126[_0x4864a3(0x53d)],'hue':_0xf33126['hue'],'opacityStart':_0xf33126[_0x4864a3(0x348)],'tone':_0xf33126['tone'],'visible':!![]},_0x5a2a0a=VisuMZ[_0x4864a3(0xa62)](_0xf33126['Targets']);for(const _0x54d0fb of _0x5a2a0a){if(!_0x54d0fb)continue;_0x54d0fb[_0x4864a3(0x744)](_0x39c48c);}}),PluginManager[_0x3fd7af(0x95c)](pluginData[_0x3fd7af(0x504)],_0x3fd7af(0x50a),_0x397d85=>{const _0x36ca78=_0x3fd7af;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x36ca78(0x3c8)])return;VisuMZ[_0x36ca78(0x187)](_0x397d85,_0x397d85);const _0x13dc99=VisuMZ[_0x36ca78(0xa62)](_0x397d85[_0x36ca78(0xc5)]);for(const _0x2a8eb1 of _0x13dc99){if(_0x36ca78(0x370)===_0x36ca78(0x370)){if(!_0x2a8eb1)continue;_0x2a8eb1[_0x36ca78(0x787)]();}else this['allowCollapse']()?_0x21d84f['BattleCore'][_0x36ca78(0x5eb)]['call'](this):(this[_0x36ca78(0x94a)]=!this['_enemy'][_0x36ca78(0x9cb)](),!this['_appeared']&&(this[_0x36ca78(0x824)]=0x0));}}),PluginManager[_0x3fd7af(0x95c)](pluginData[_0x3fd7af(0x504)],_0x3fd7af(0x9b6),_0x409b32=>{const _0x5b9124=_0x3fd7af;if(!Imported[_0x5b9124(0x3c8)])return;const _0x3a896c=SceneManager[_0x5b9124(0x450)][_0x5b9124(0x3b4)];if(!_0x3a896c)return;VisuMZ[_0x5b9124(0x187)](_0x409b32,_0x409b32);const _0xbea263=_0x409b32['X']||0x0,_0x1a1880=_0x409b32['Y']||0x0,_0x2c7fd6=_0x409b32[_0x5b9124(0x9b4)]||0x0,_0x50bbe9=_0x409b32[_0x5b9124(0x5ef)]||0x0,_0x5698a9=_0x409b32[_0x5b9124(0x200)]||0x1;_0x3a896c[_0x5b9124(0x67d)](_0xbea263,_0x1a1880,_0x2c7fd6,_0x50bbe9,_0x5698a9);}),PluginManager[_0x3fd7af(0x95c)](pluginData['name'],_0x3fd7af(0xbf),_0x2d574b=>{const _0x47b784=_0x3fd7af;if(!SceneManager[_0x47b784(0x970)]())return;if(!Imported[_0x47b784(0x3c8)])return;const _0x56da72=SceneManager[_0x47b784(0x450)][_0x47b784(0x3b4)];if(!_0x56da72)return;VisuMZ[_0x47b784(0x187)](_0x2d574b,_0x2d574b);const _0x39eacb=VisuMZ['CreateActionSequenceTargets'](_0x2d574b['Targets']),_0x3a9692=_0x2d574b['TargetLocation'],_0x4d3f80=_0x2d574b[_0x47b784(0x592)]||0x0,_0xb69478=_0x2d574b[_0x47b784(0x4ee)]||0x0,_0x2545c6=_0x2d574b['Amp']||0x0,_0x379725=_0x2d574b[_0x47b784(0x5ef)]||0x0,_0x319bc9=_0x2d574b[_0x47b784(0x200)]||0x1;for(const _0x1020fc of _0x39eacb){if(!_0x1020fc)continue;if(!_0x1020fc[_0x47b784(0x181)]())continue;const _0x221b63=_0x1020fc[_0x47b784(0x181)]();let _0x50ffdb=_0x221b63[_0x47b784(0x62e)],_0x1a1d23=_0x221b63[_0x47b784(0x69d)];_0x50ffdb+=(Graphics[_0x47b784(0xad0)]-Graphics['boxWidth'])/0x2,_0x1a1d23+=(Graphics[_0x47b784(0x26a)]-Graphics['boxHeight'])/0x2;if(_0x3a9692[_0x47b784(0x265)](/front/i))_0x50ffdb+=(_0x1020fc[_0x47b784(0x7e8)]()?0x1:-0x1)*_0x221b63['mainSpriteWidth']()/0x2;else{if(_0x3a9692[_0x47b784(0x265)](/back/i)){if(_0x47b784(0x2ea)!==_0x47b784(0x874))_0x50ffdb+=(_0x1020fc['isEnemy']()?-0x1:0x1)*_0x221b63[_0x47b784(0x159)]()/0x2;else{_0x77b2e7['prototype'][_0x47b784(0x2e0)]['call'](this),this['updateRefresh'](),this[_0x47b784(0x8dc)]();if(this[_0x47b784(0xafe)]()===_0x47b784(0x2bf))this[_0x47b784(0x19e)]();}}}if(_0x3a9692[_0x47b784(0x265)](/head/i)){if('metdr'!==_0x47b784(0xa72))_0x1a1d23-=_0x221b63[_0x47b784(0x2ca)]();else return _0x48986a['aliveMembers']()[_0x47b784(0xa8)](_0x1ff727=>_0x1ff727!==_0x3e841b);}else _0x3a9692[_0x47b784(0x265)](/center/i)&&(_0x1a1d23-=_0x221b63[_0x47b784(0x2ca)]()/0x2);_0x50ffdb+=_0x4d3f80,_0x1a1d23+=_0xb69478,_0x56da72[_0x47b784(0x67d)](_0x50ffdb,_0x1a1d23,_0x2545c6,_0x379725,_0x319bc9);}}),PluginManager[_0x3fd7af(0x95c)](pluginData[_0x3fd7af(0x504)],_0x3fd7af(0x26d),_0x17a042=>{const _0x40c96d=_0x3fd7af;if(!SceneManager[_0x40c96d(0x970)]())return;if(!Imported[_0x40c96d(0x3c8)])return;const _0x4d21f7=SceneManager[_0x40c96d(0x450)]['_spriteset'];if(!_0x4d21f7)return;VisuMZ[_0x40c96d(0x187)](_0x17a042,_0x17a042);const _0x1e2410=VisuMZ[_0x40c96d(0xa62)](_0x17a042[_0x40c96d(0xc5)]),_0x29f101=_0x17a042[_0x40c96d(0x1ac)],_0x3946c1=_0x17a042[_0x40c96d(0x592)]||0x0,_0x5ef59a=_0x17a042[_0x40c96d(0x4ee)]||0x0,_0x282e79=_0x17a042['Amp']||0x0,_0x25e34b=_0x17a042['Wave']||0x0,_0x23e593=_0x17a042['Duration']||0x1,_0x4bbc6a=Math[_0x40c96d(0x88d)](..._0x1e2410[_0x40c96d(0x826)](_0x3c2cd1=>_0x3c2cd1[_0x40c96d(0x181)]()['_baseX']-_0x3c2cd1[_0x40c96d(0x181)]()[_0x40c96d(0x159)]()/0x2)),_0x314ae3=Math[_0x40c96d(0x305)](..._0x1e2410['map'](_0x50921a=>_0x50921a[_0x40c96d(0x181)]()[_0x40c96d(0x62e)]+_0x50921a[_0x40c96d(0x181)]()['mainSpriteWidth']()/0x2)),_0xab1586=Math[_0x40c96d(0x88d)](..._0x1e2410[_0x40c96d(0x826)](_0x16c8d4=>_0x16c8d4['battler']()[_0x40c96d(0x69d)]-_0x16c8d4[_0x40c96d(0x181)]()[_0x40c96d(0x2ca)]())),_0x1349e2=Math[_0x40c96d(0x305)](..._0x1e2410[_0x40c96d(0x826)](_0x53accc=>_0x53accc[_0x40c96d(0x181)]()[_0x40c96d(0x69d)])),_0x1f4ad1=_0x1e2410[_0x40c96d(0xa8)](_0x41ab57=>_0x41ab57['isActor']())['length'],_0x17f96e=_0x1e2410[_0x40c96d(0xa8)](_0x1af6a2=>_0x1af6a2[_0x40c96d(0x7e8)]())[_0x40c96d(0x732)];let _0x1e1ae4=0x0,_0x1e9d40=0x0;if(_0x29f101[_0x40c96d(0x265)](/front/i)){if(_0x40c96d(0x810)!==_0x40c96d(0xa00))_0x1e1ae4=_0x1f4ad1>=_0x17f96e?_0x4bbc6a:_0x314ae3;else{const _0x57c117=this['_actor'][_0x40c96d(0x376)](),_0x4f21f0=_0x57c117['filter'](_0x289a42=>_0x542de4['getSkillTypes'](_0x1419c7)['includes'](_0x289a42));return _0x4f21f0[_0x40c96d(0x732)]<=0x0;}}else{if(_0x29f101[_0x40c96d(0x265)](/middle/i))_0x1e1ae4=(_0x4bbc6a+_0x314ae3)/0x2,melee=-0x1;else _0x29f101[_0x40c96d(0x265)](/back/i)&&(_0x40c96d(0x719)!==_0x40c96d(0x274)?_0x1e1ae4=_0x1f4ad1>=_0x17f96e?_0x314ae3:_0x4bbc6a:(this[_0x40c96d(0x2e4)](),_0x28aae3[_0x40c96d(0x941)]['Scene_Battle_createAllWindows']['call'](this),this['createAutoBattleWindow']()));}if(_0x29f101['match'](/head/i))_0x1e9d40=_0xab1586;else{if(_0x29f101[_0x40c96d(0x265)](/center/i))_0x1e9d40=(_0xab1586+_0x1349e2)/0x2;else _0x29f101[_0x40c96d(0x265)](/base/i)&&(_0x1e9d40=_0x1349e2);}_0x1e1ae4+=(Graphics[_0x40c96d(0xad0)]-Graphics['boxWidth'])/0x2,_0x1e9d40+=(Graphics['height']-Graphics[_0x40c96d(0x422)])/0x2,_0x1e1ae4+=_0x3946c1,_0x1e9d40+=_0x5ef59a,_0x4d21f7[_0x40c96d(0x67d)](_0x1e1ae4,_0x1e9d40,_0x282e79,_0x25e34b,_0x23e593);}),PluginManager[_0x3fd7af(0x95c)](pluginData[_0x3fd7af(0x504)],_0x3fd7af(0x734),_0x584cb5=>{const _0x30a9f7=_0x3fd7af;if(!Imported['VisuMZ_3_ActSeqImpact'])return;const _0x26a2a3=SceneManager[_0x30a9f7(0x450)][_0x30a9f7(0x3b4)];if(!_0x26a2a3)return;VisuMZ[_0x30a9f7(0x187)](_0x584cb5,_0x584cb5);const _0x487361=_0x584cb5['X']||0x0,_0x120958=_0x584cb5['Y']||0x0,_0x4121fe=_0x584cb5[_0x30a9f7(0x183)]||0x0,_0x3c85e0=_0x584cb5[_0x30a9f7(0x32c)]||0x0,_0xc68147=_0x584cb5[_0x30a9f7(0x200)]||0x1,_0x317552=_0x584cb5[_0x30a9f7(0x9f6)]||_0x30a9f7(0xa2d);_0x26a2a3[_0x30a9f7(0xab0)](_0x4121fe,_0x487361,_0x120958,_0x3c85e0,_0xc68147,_0x317552);}),PluginManager[_0x3fd7af(0x95c)](pluginData[_0x3fd7af(0x504)],_0x3fd7af(0x914),_0x7de309=>{const _0x28b224=_0x3fd7af;if(!Imported[_0x28b224(0x3c8)])return;const _0x177982=SceneManager[_0x28b224(0x450)][_0x28b224(0x3b4)];if(!_0x177982)return;VisuMZ[_0x28b224(0x187)](_0x7de309,_0x7de309);const _0x5a1cc7=VisuMZ['CreateActionSequenceTargets'](_0x7de309[_0x28b224(0xc5)]),_0x8534c4=_0x7de309[_0x28b224(0x1ac)],_0x31961a=_0x7de309[_0x28b224(0x592)]||0x0,_0x276a47=_0x7de309['OffsetY']||0x0,_0x21d442=_0x7de309[_0x28b224(0x183)]||0x0,_0x1bc9b9=_0x7de309[_0x28b224(0x32c)]||0x0,_0x31cd65=_0x7de309['Duration']||0x1,_0x116964=_0x7de309[_0x28b224(0x9f6)]||_0x28b224(0xa2d),_0x4db635=Math[_0x28b224(0x88d)](..._0x5a1cc7[_0x28b224(0x826)](_0xba405=>_0xba405[_0x28b224(0x181)]()['_baseX']-_0xba405[_0x28b224(0x181)]()['mainSpriteWidth']()/0x2)),_0x1af192=Math[_0x28b224(0x305)](..._0x5a1cc7['map'](_0x12166b=>_0x12166b[_0x28b224(0x181)]()['_baseX']+_0x12166b[_0x28b224(0x181)]()[_0x28b224(0x159)]()/0x2)),_0x4ca5f7=Math[_0x28b224(0x88d)](..._0x5a1cc7[_0x28b224(0x826)](_0x16840d=>_0x16840d[_0x28b224(0x181)]()[_0x28b224(0x69d)]-_0x16840d[_0x28b224(0x181)]()[_0x28b224(0x2ca)]())),_0x49037d=Math[_0x28b224(0x305)](..._0x5a1cc7[_0x28b224(0x826)](_0x49f40a=>_0x49f40a['battler']()[_0x28b224(0x69d)])),_0x2c168c=_0x5a1cc7['filter'](_0x34da55=>_0x34da55['isActor']())[_0x28b224(0x732)],_0x34f2ea=_0x5a1cc7[_0x28b224(0xa8)](_0x43b972=>_0x43b972[_0x28b224(0x7e8)]())[_0x28b224(0x732)];let _0x319140=0x0,_0x314d6a=0x0;if(_0x8534c4['match'](/front/i)){if(_0x28b224(0x640)!=='XbOpF')_0x319140=_0x2c168c>=_0x34f2ea?_0x4db635:_0x1af192;else return _0x43eed7[_0x28b224(0x7b9)][_0x28b224(0x265)](/<COMMAND ICON: (\d+)>/i)?_0x3cb94b(_0x2580ad['$1']):_0x3c8c15[_0x28b224(0x381)];}else{if(_0x8534c4[_0x28b224(0x265)](/middle/i)){if('wFmMs'===_0x28b224(0x438))return this['_lastPluginCommandInterpreter'];else _0x319140=(_0x4db635+_0x1af192)/0x2,melee=-0x1;}else _0x8534c4[_0x28b224(0x265)](/back/i)&&(_0x319140=_0x2c168c>=_0x34f2ea?_0x1af192:_0x4db635);}if(_0x8534c4['match'](/head/i)){if('dACxo'===_0x28b224(0x5ad))_0x314d6a=_0x4ca5f7;else return this[_0x28b224(0xa8b)]();}else{if(_0x8534c4[_0x28b224(0x265)](/center/i))'upMcg'!=='TeHKl'?_0x314d6a=(_0x4ca5f7+_0x49037d)/0x2:(_0x14fdb2['x']=_0x3d57b4['x']+_0x5c42e3['PopupShiftX']*_0x4c49dc,_0xb7ce80['y']=_0x4865fc['y']+_0x44d155[_0x28b224(0x53e)]);else _0x8534c4[_0x28b224(0x265)](/base/i)&&(_0x28b224(0x904)!==_0x28b224(0x15c)?_0x314d6a=_0x49037d:this['_distortionSprite'][_0x28b224(0x96c)](this[_0x28b224(0xaa4)]));}_0x319140+=(Graphics[_0x28b224(0xad0)]-Graphics['boxWidth'])/0x2,_0x314d6a+=(Graphics[_0x28b224(0x26a)]-Graphics[_0x28b224(0x422)])/0x2,_0x319140+=_0x31961a,_0x314d6a+=_0x276a47,_0x177982['setupZoomBlurImpactFilter'](_0x21d442,_0x319140,_0x314d6a,_0x1bc9b9,_0x31cd65,_0x116964);}),PluginManager[_0x3fd7af(0x95c)](pluginData[_0x3fd7af(0x504)],'ActSeq_Mechanics_ActionEffect',_0xa0e760=>{const _0x32e6d8=_0x3fd7af;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x32e6d8(0x187)](_0xa0e760,_0xa0e760);const _0xc924e9=$gameTemp[_0x32e6d8(0x8be)](),_0x482412=BattleManager['_action'],_0x425af8=BattleManager[_0x32e6d8(0x470)],_0x3d4b02=BattleManager[_0x32e6d8(0x4bd)];if(!_0xc924e9||!_0x482412||!_0x425af8)return;if(!_0x482412[_0x32e6d8(0xaf4)]())return;const _0x33fd57=VisuMZ[_0x32e6d8(0xa62)](_0xa0e760['Targets']);for(const _0x2b0b1d of _0x33fd57){if(_0x32e6d8(0xaff)!==_0x32e6d8(0xaff))return _0x45c28f[_0x32e6d8(0x941)][_0x32e6d8(0xa6b)][_0x32e6d8(0x9de)][_0x32e6d8(0xaa)];else{if(!_0x2b0b1d)continue;_0x3d4b02['push'](_0x32e6d8(0x182),_0x425af8,_0x2b0b1d);}}_0xc924e9['setWaitMode'](_0x32e6d8(0x548));}),PluginManager['registerCommand'](pluginData['name'],'ActSeq_Mechanics_AddBuffDebuff',_0x41849b=>{const _0x30d120=_0x3fd7af;if(!SceneManager[_0x30d120(0x970)]())return;VisuMZ[_0x30d120(0x187)](_0x41849b,_0x41849b);const _0x3168de=[_0x30d120(0x624),_0x30d120(0x54e),_0x30d120(0x612),_0x30d120(0x54d),_0x30d120(0x292),'MDF',_0x30d120(0x9c3),'LUK'],_0x287485=_0x41849b['Buffs'],_0x3be2dd=_0x41849b['Debuffs'],_0x294638=_0x41849b[_0x30d120(0x6ff)],_0x34df99=VisuMZ[_0x30d120(0xa62)](_0x41849b[_0x30d120(0xc5)]);for(const _0x5f3176 of _0x34df99){if(!_0x5f3176)continue;for(const _0x208e5f of _0x287485){const _0x3a0b4a=_0x3168de[_0x30d120(0x760)](_0x208e5f[_0x30d120(0x989)]()['trim']());_0x3a0b4a>=0x0&&_0x3a0b4a<=0x7&&_0x5f3176[_0x30d120(0x185)](_0x3a0b4a,_0x294638);}for(const _0x3f9e96 of _0x3be2dd){if(_0x30d120(0x564)!==_0x30d120(0x564)){if(this[_0x30d120(0x8d4)]['svShadow']!==_0x3ec0f2)return this[_0x30d120(0x8d4)][_0x30d120(0xa98)];if(this[_0x30d120(0xe9)]()[_0x30d120(0x7b9)][_0x30d120(0x265)](/<SIDEVIEW SHOW SHADOW>/i))this['_cache'][_0x30d120(0xa98)]=!![];else this['actor']()[_0x30d120(0x7b9)][_0x30d120(0x265)](/<SIDEVIEW HIDE SHADOW>/i)?this[_0x30d120(0x8d4)]['svShadow']=![]:this[_0x30d120(0x8d4)][_0x30d120(0xa98)]=_0x23c599['prototype'][_0x30d120(0x4cc)][_0x30d120(0x145)](this);return this[_0x30d120(0x8d4)][_0x30d120(0xa98)];}else{const _0x32c47d=_0x3168de[_0x30d120(0x760)](_0x3f9e96['toUpperCase']()[_0x30d120(0x306)]());_0x32c47d>=0x0&&_0x32c47d<=0x7&&(_0x30d120(0x7d1)!==_0x30d120(0x9a8)?_0x5f3176[_0x30d120(0xa38)](_0x32c47d,_0x294638):_0x3a490a=_0x24b608(_0x3fe021['$1']));}}}}),PluginManager[_0x3fd7af(0x95c)](pluginData['name'],_0x3fd7af(0x1ff),_0x32337d=>{const _0x5f2acc=_0x3fd7af;if(!SceneManager[_0x5f2acc(0x970)]())return;VisuMZ[_0x5f2acc(0x187)](_0x32337d,_0x32337d);const _0x24d6cc=_0x32337d[_0x5f2acc(0x2be)],_0x21c224=VisuMZ['CreateActionSequenceTargets'](_0x32337d['Targets']);for(const _0x5ba117 of _0x21c224){if(!_0x5ba117)continue;for(const _0x4f4cd0 of _0x24d6cc){_0x5ba117['addState'](_0x4f4cd0);}}}),PluginManager[_0x3fd7af(0x95c)](pluginData[_0x3fd7af(0x504)],_0x3fd7af(0x35f),_0x2ca545=>{const _0xc3e3e1=_0x3fd7af;if(!SceneManager[_0xc3e3e1(0x970)]())return;VisuMZ[_0xc3e3e1(0x187)](_0x2ca545,_0x2ca545);const _0x248382=BattleManager['_action'],_0x4b71b6={'arPenRate':_0x2ca545[_0xc3e3e1(0x80c)],'arPenFlat':_0x2ca545[_0xc3e3e1(0x926)],'arRedRate':_0x2ca545['ArRedRate'],'arRedFlat':_0x2ca545[_0xc3e3e1(0x5c7)]};_0x248382[_0xc3e3e1(0x75e)]=_0x4b71b6;}),PluginManager[_0x3fd7af(0x95c)](pluginData[_0x3fd7af(0x504)],_0x3fd7af(0x44d),_0x4a00c7=>{const _0x1b3d44=_0x3fd7af;if(!SceneManager[_0x1b3d44(0x970)]())return;if(!Imported[_0x1b3d44(0x60e)])return;VisuMZ[_0x1b3d44(0x187)](_0x4a00c7,_0x4a00c7);const _0x40cabd=VisuMZ[_0x1b3d44(0xa62)](_0x4a00c7[_0x1b3d44(0xc5)]),_0x1b337f=_0x4a00c7[_0x1b3d44(0x534)]||0x1;for(const _0x376cca of _0x40cabd){if(_0x1b3d44(0x291)===_0x1b3d44(0x291)){if(!_0x376cca)continue;if(!_0x376cca[_0x1b3d44(0x7e8)]())continue;_0x376cca[_0x1b3d44(0x58a)](_0x1b337f);}else{if(this[_0x1b3d44(0xe9)]()[_0x1b3d44(0x7b9)][_0x1b3d44(0x265)](/<BATTLE (?:IMAGE|PORTRAIT) OFFSET X:[ ]([\+\-]\d+)>/i))return _0x3e8977(_0x4babe5['$1']);else{if(this[_0x1b3d44(0xe9)]()[_0x1b3d44(0x7b9)][_0x1b3d44(0x265)](/<BATTLE (?:IMAGE|PORTRAIT) OFFSET:[ ]([\+\-]\d+),[ ]([\+\-]\d+)>/i))return _0x5676fe(_0x5907c0['$1']);}return 0x0;}}}),PluginManager[_0x3fd7af(0x95c)](pluginData[_0x3fd7af(0x504)],_0x3fd7af(0x716),_0x3de0f7=>{const _0xb13e7c=_0x3fd7af;if(!SceneManager[_0xb13e7c(0x970)]())return;if(!Imported[_0xb13e7c(0x5d4)])return;if(!BattleManager[_0xb13e7c(0x1af)]())return;VisuMZ[_0xb13e7c(0x187)](_0x3de0f7,_0x3de0f7);const _0x10e5c0=VisuMZ[_0xb13e7c(0xa62)](_0x3de0f7['Targets']),_0x2af6cf=_0x3de0f7[_0xb13e7c(0x73d)],_0x1ab751=_0x3de0f7[_0xb13e7c(0x73d)],_0x32e0eb=_0x3de0f7['Interrupt'];for(const _0x5619e1 of _0x10e5c0){if(_0xb13e7c(0x6b0)!==_0xb13e7c(0x6cd)){if(!_0x5619e1)continue;if(_0x5619e1[_0xb13e7c(0x4c6)]())_0x5619e1[_0xb13e7c(0x8aa)](_0x2af6cf);else{if(_0x5619e1['isAtbCastingState']()){_0x5619e1['changeAtbCastTime'](_0x1ab751);if(_0x32e0eb)_0x5619e1[_0xb13e7c(0x22b)]();}}}else{let _0x5d5f1a=0x1;return _0x5d5f1a*=this[_0xb13e7c(0x1ce)],_0x5d5f1a*=this[_0xb13e7c(0x828)],_0x5d5f1a;}}}),PluginManager[_0x3fd7af(0x95c)](pluginData['name'],_0x3fd7af(0x6e5),_0x519feb=>{const _0x4f1c5e=_0x3fd7af;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x4f1c5e(0x974)])return;VisuMZ[_0x4f1c5e(0x187)](_0x519feb,_0x519feb);const _0x326412=VisuMZ[_0x4f1c5e(0xa62)](_0x519feb[_0x4f1c5e(0xc5)]),_0x1350c1=_0x519feb[_0x4f1c5e(0x55a)];for(const _0x4bbbf8 of _0x326412){if(!_0x4bbbf8)continue;_0x4bbbf8[_0x4f1c5e(0x555)](_0x1350c1);}}),PluginManager['registerCommand'](pluginData[_0x3fd7af(0x504)],_0x3fd7af(0x3a1),_0x10b245=>{const _0x466b19=_0x3fd7af;if(!SceneManager[_0x466b19(0x970)]())return;if(!Imported['VisuMZ_3_BoostAction'])return;if(!BattleManager[_0x466b19(0x470)])return;VisuMZ[_0x466b19(0x187)](_0x10b245,_0x10b245);const _0x183a75=_0x10b245[_0x466b19(0xde)];$gameVariables[_0x466b19(0x950)](_0x183a75,BattleManager['_subject'][_0x466b19(0x313)]());}),PluginManager[_0x3fd7af(0x95c)](pluginData[_0x3fd7af(0x504)],'ActSeq_Mechanics_BreakShieldChange',_0x420455=>{const _0x4fe784=_0x3fd7af;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x4fe784(0xdd)])return;VisuMZ[_0x4fe784(0x187)](_0x420455,_0x420455);const _0x75e8f9=VisuMZ[_0x4fe784(0xa62)](_0x420455['Targets']),_0xda2d21=_0x420455[_0x4fe784(0x47e)];for(const _0x2e7d13 of _0x75e8f9){if('ojLBq'===_0x4fe784(0x10c)){if(!_0x2e7d13)continue;if(_0x2e7d13[_0x4fe784(0x248)]())continue;if(!_0x2e7d13['isAffectedByBreakShield']())continue;_0x2e7d13[_0x4fe784(0x52e)](_0xda2d21);}else{if(!_0x345181[_0x4fe784(0x970)]())return;if(!_0x166e32[_0x4fe784(0x8b2)])return;_0x107e16[_0x4fe784(0x187)](_0x4bb608,_0x740ec2);const _0x36980d=_0x1b88c4[_0x4fe784(0x8be)](),_0x14e900=_0x3ddcf2['WaitForAngle'];if(!_0x36980d)return;_0x1546e8[_0x4fe784(0x619)](0x0,_0xdc5f0f[_0x4fe784(0x200)],_0x4952d2['EasingType']);if(_0x14e900)_0x36980d['setWaitMode'](_0x4fe784(0x1a9));}}}),PluginManager[_0x3fd7af(0x95c)](pluginData[_0x3fd7af(0x504)],_0x3fd7af(0x911),_0x78e524=>{const _0x159389=_0x3fd7af;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x159389(0xdd)])return;VisuMZ[_0x159389(0x187)](_0x78e524,_0x78e524);const _0x4c2182=VisuMZ[_0x159389(0xa62)](_0x78e524['Targets']);for(const _0x5c2285 of _0x4c2182){if(!_0x5c2285)continue;if(_0x5c2285['isBreakStunned']())continue;if(!_0x5c2285[_0x159389(0x6be)]())continue;_0x5c2285[_0x159389(0x33b)]();}}),PluginManager['registerCommand'](pluginData[_0x3fd7af(0x504)],'ActSeq_Mechanics_BtbGain',_0x2eaf3b=>{const _0x31045f=_0x3fd7af;if(!SceneManager['isSceneBattle']())return;if(!Imported['VisuMZ_2_BattleSystemBTB'])return;if(!BattleManager[_0x31045f(0x137)]())return;VisuMZ[_0x31045f(0x187)](_0x2eaf3b,_0x2eaf3b);const _0x2843be=VisuMZ[_0x31045f(0xa62)](_0x2eaf3b[_0x31045f(0xc5)]),_0x130367=_0x2eaf3b[_0x31045f(0x44c)];for(const _0x39d116 of _0x2843be){if(_0x31045f(0xf3)!==_0x31045f(0x22c)){if(!_0x39d116)continue;_0x39d116['gainBravePoints'](_0x130367);}else return _0x2d801d['BattleCore']['BattleManager_isTpbMainPhase'][_0x31045f(0x145)](this);}}),PluginManager[_0x3fd7af(0x95c)](pluginData[_0x3fd7af(0x504)],'ActSeq_Mechanics_Collapse',_0x46f856=>{const _0x53a25d=_0x3fd7af;if(!SceneManager[_0x53a25d(0x970)]())return;VisuMZ[_0x53a25d(0x187)](_0x46f856,_0x46f856);const _0x5824d2=$gameTemp[_0x53a25d(0x8be)](),_0x5deae2=BattleManager[_0x53a25d(0x2dd)],_0x252059=BattleManager[_0x53a25d(0x470)];if(!_0x5824d2||!_0x5deae2||!_0x252059)return;if(!_0x5deae2[_0x53a25d(0xaf4)]())return;const _0x5b7860=VisuMZ[_0x53a25d(0xa62)](_0x46f856['Targets']);for(const _0x3d61cf of _0x5b7860){if(!_0x3d61cf)continue;if(_0x46f856[_0x53a25d(0x40a)]){if('EVaQY'===_0x53a25d(0x8d5))_0x3d61cf[_0x53a25d(0x807)](),_0x3d61cf[_0x53a25d(0x866)](_0x3d61cf[_0x53a25d(0x588)]());else{this[_0x53a25d(0x1d9)]();if(_0x8dcdd7[_0x53a25d(0x4aa)]){const _0x44d41b=_0xe041dd[_0x53a25d(0x40c)][_0x53a25d(0xa6b)][_0x53a25d(0x2be)];_0x44d41b&&_0x44d41b['ActionEndUpdate']===![]&&this[_0x53a25d(0x647)](0x1);}else this['removeStatesAuto'](0x1);this[_0x53a25d(0x322)]();}}_0x3d61cf[_0x53a25d(0xa79)]()&&_0x3d61cf[_0x53a25d(0x75f)]();}_0x5824d2['setWaitMode'](_0x53a25d(0x676));}),PluginManager[_0x3fd7af(0x95c)](pluginData['name'],_0x3fd7af(0xa8c),_0x1348da=>{const _0x27e69a=_0x3fd7af;if(!SceneManager[_0x27e69a(0x970)]())return;if(!Imported[_0x27e69a(0x879)])return;if(!BattleManager[_0x27e69a(0x3a6)]())return;VisuMZ[_0x27e69a(0x187)](_0x1348da,_0x1348da);const _0x1ea678=VisuMZ['CreateActionSequenceTargets'](_0x1348da['Targets']),_0x374333=_0x1348da[_0x27e69a(0x17b)];for(const _0x1d7530 of _0x1ea678){if(_0x27e69a(0x367)!==_0x27e69a(0x367)){const _0x14638d=this[_0x27e69a(0xa9a)];_0x120d8c[_0x27e69a(0x941)][_0x27e69a(0x70a)][_0x27e69a(0x145)](this,_0x4490be),this[_0x27e69a(0x7c5)](_0x341382);if(_0x14638d!==_0x2e0480)this['updateShadowScale']();}else{if(!_0x1d7530)continue;_0x1d7530[_0x27e69a(0xa63)](_0x374333);}}}),PluginManager[_0x3fd7af(0x95c)](pluginData[_0x3fd7af(0x504)],_0x3fd7af(0x743),_0x23de3c=>{const _0x53d013=_0x3fd7af;if(!SceneManager[_0x53d013(0x970)]())return;if(!Imported[_0x53d013(0x879)])return;if(!BattleManager[_0x53d013(0x3a6)]())return;VisuMZ[_0x53d013(0x187)](_0x23de3c,_0x23de3c);const _0x3d2441=VisuMZ[_0x53d013(0xa62)](_0x23de3c[_0x53d013(0xc5)]),_0x147360=_0x23de3c[_0x53d013(0x73d)],_0x16ead6=_0x23de3c['ChargeRate'];for(const _0x58bebb of _0x3d2441){if(_0x53d013(0x1d8)==='fuXVQ')this[_0x53d013(0x6dd)]['bitmap'][_0x53d013(0x6a8)]=this['_battler'][_0x53d013(0x3bc)]();else{if(!_0x58bebb)continue;if(_0x58bebb[_0x53d013(0x352)]===_0x53d013(0x148))_0x58bebb['changeCtbChargeTime'](_0x147360);else _0x58bebb['_tpbState']==='casting'&&_0x58bebb[_0x53d013(0x15b)](_0x16ead6);}}}),PluginManager[_0x3fd7af(0x95c)](pluginData[_0x3fd7af(0x504)],_0x3fd7af(0x46d),_0x372f50=>{const _0x11d59=_0x3fd7af;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x11d59(0x187)](_0x372f50,_0x372f50);const _0x1d6880=BattleManager[_0x11d59(0x2dd)];if(!_0x1d6880)return;let _0x2df752=_0x372f50['Formula'];_0x1d6880[_0x11d59(0xa74)](_0x2df752);}),PluginManager[_0x3fd7af(0x95c)](pluginData[_0x3fd7af(0x504)],'ActSeq_Mechanics_DamagePopup',_0x4f1e44=>{const _0x49cebe=_0x3fd7af;if(!SceneManager[_0x49cebe(0x970)]())return;VisuMZ[_0x49cebe(0x187)](_0x4f1e44,_0x4f1e44);const _0x34c323=VisuMZ[_0x49cebe(0xa62)](_0x4f1e44[_0x49cebe(0xc5)]);for(const _0x400f2d of _0x34c323){if(_0x49cebe(0x78d)==='cyvGB'){if(!this['_actor'])return;const _0x38d116=this[_0x49cebe(0x804)][_0x49cebe(0x14b)]();for(const _0x682413 of _0x38d116){this['makeBattleCommand'](_0x682413[_0x49cebe(0x989)]()[_0x49cebe(0x306)]());}}else{if(!_0x400f2d)continue;if(_0x400f2d[_0x49cebe(0x6a9)]())_0x400f2d['startDamagePopup']();}}}),PluginManager['registerCommand'](pluginData[_0x3fd7af(0x504)],_0x3fd7af(0x8f2),_0x58bd9c=>{const _0x101629=_0x3fd7af;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x101629(0x187)](_0x58bd9c,_0x58bd9c);const _0x3fda77=$gameTemp[_0x101629(0x8be)](),_0x11adab=BattleManager['_subject'],_0x57049d=_0x58bd9c[_0x101629(0x42f)];if(!_0x3fda77)return;if(!_0x11adab)return;_0x11adab&&_0x11adab[_0x101629(0x217)]()&&_0x57049d[_0x101629(0x989)]()['trim']()!==_0x101629(0x656)&&_0x3fda77[_0x101629(0x9dd)]([_0x57049d]);}),PluginManager[_0x3fd7af(0x95c)](pluginData['name'],_0x3fd7af(0x233),_0x32d4b1=>{const _0x20d5e7=_0x3fd7af;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x20d5e7(0x187)](_0x32d4b1,_0x32d4b1);const _0x9b5c1=VisuMZ[_0x20d5e7(0xa62)](_0x32d4b1[_0x20d5e7(0xc5)]);for(const _0x115d7b of _0x9b5c1){if(!_0x115d7b)continue;if(!_0x115d7b['isEnemy']())continue;_0x115d7b[_0x20d5e7(0x362)]();}}),PluginManager[_0x3fd7af(0x95c)](pluginData[_0x3fd7af(0x504)],_0x3fd7af(0x263),_0x25255c=>{const _0x1239d8=_0x3fd7af;if(!SceneManager[_0x1239d8(0x970)]())return;if(!Imported['VisuMZ_2_BattleSystemETB'])return;if(!BattleManager[_0x1239d8(0x95d)]())return;VisuMZ[_0x1239d8(0x187)](_0x25255c,_0x25255c);const _0x316a67=_0x25255c['ActionCount'];BattleManager[_0x1239d8(0x470)]&&BattleManager['_subject'][_0x1239d8(0x8b0)]()[_0x1239d8(0x32f)](_0x316a67);}),PluginManager['registerCommand'](pluginData[_0x3fd7af(0x504)],_0x3fd7af(0x663),_0x1a2032=>{const _0x224f09=_0x3fd7af;if(!SceneManager[_0x224f09(0x970)]())return;if(!Imported[_0x224f09(0x9a5)])return;if(!BattleManager[_0x224f09(0x43f)]())return;VisuMZ[_0x224f09(0x187)](_0x1a2032,_0x1a2032);const _0x8d71c2=_0x1a2032[_0x224f09(0x37a)];BattleManager['_subject']&&(_0x224f09(0x478)===_0x224f09(0x332)?(this[_0x224f09(0x5ee)]=new _0x1bb174(),this[_0x224f09(0x5ee)]['x']=this[_0x224f09(0x17a)]['x'],this[_0x224f09(0x5ee)]['y']=this['_battleField']['y'],this['addChild'](this[_0x224f09(0x5ee)])):BattleManager[_0x224f09(0x470)][_0x224f09(0x8b0)]()['gainCurrentActionsFTB'](_0x8d71c2));}),PluginManager[_0x3fd7af(0x95c)](pluginData['name'],_0x3fd7af(0x487),_0x1cc128=>{const _0x125af8=_0x3fd7af;if(!SceneManager[_0x125af8(0x970)]())return;VisuMZ[_0x125af8(0x187)](_0x1cc128,_0x1cc128);const _0x2b7a52=VisuMZ[_0x125af8(0xa62)](_0x1cc128[_0x125af8(0xc5)]),_0x264692=_0x1cc128[_0x125af8(0x4a1)],_0x3de808=_0x1cc128['HP_Flat'],_0x4c1777=_0x1cc128[_0x125af8(0xafd)],_0x58f2de=_0x1cc128[_0x125af8(0x311)],_0x3fce5d=_0x1cc128[_0x125af8(0xabe)],_0xe5340b=_0x1cc128[_0x125af8(0x45f)],_0x2b7311=_0x1cc128[_0x125af8(0x27e)];for(const _0x58f5d6 of _0x2b7a52){if('GZxlN'===_0x125af8(0x154)){if(!_0x58f5d6)continue;const _0x346bae=_0x58f5d6[_0x125af8(0x7fd)](),_0x1fd222=Math[_0x125af8(0x819)](_0x264692*_0x58f5d6[_0x125af8(0xdb)]+_0x3de808),_0x1ea68b=Math[_0x125af8(0x819)](_0x4c1777*_0x58f5d6[_0x125af8(0x7a2)]+_0x58f2de),_0x1f66d0=Math[_0x125af8(0x819)](_0x3fce5d*_0x58f5d6['maxTp']()+_0xe5340b);if(_0x1fd222!==0x0)_0x58f5d6[_0x125af8(0x49c)](_0x1fd222);if(_0x1ea68b!==0x0)_0x58f5d6[_0x125af8(0x3ee)](_0x1ea68b);if(_0x1f66d0!==0x0)_0x58f5d6[_0x125af8(0x210)](_0x1f66d0);if(_0x2b7311)_0x58f5d6[_0x125af8(0x39d)]();_0x346bae&&_0x58f5d6[_0x125af8(0x217)]()&&_0x58f5d6['performCollapse']();}else{if(this[_0x125af8(0x26b)]===_0x1b6b4c)return;this[_0x125af8(0x730)](),this['finalizeScale']();}}}),PluginManager[_0x3fd7af(0x95c)](pluginData['name'],'ActSeq_Mechanics_Immortal',_0x915b6f=>{const _0x3242bb=_0x3fd7af;if(!SceneManager['isSceneBattle']())return;VisuMZ['ConvertParams'](_0x915b6f,_0x915b6f);const _0x11e1a5=VisuMZ['CreateActionSequenceTargets'](_0x915b6f[_0x3242bb(0xc5)]);for(const _0x3b05c8 of _0x11e1a5){if(!_0x3b05c8)continue;_0x3b05c8['setImmortal'](_0x915b6f['Immortal']);}}),PluginManager['registerCommand'](pluginData[_0x3fd7af(0x504)],'ActSeq_Mechanics_Multipliers',_0x12d13f=>{const _0x3abc3e=_0x3fd7af;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x3abc3e(0x187)](_0x12d13f,_0x12d13f);const _0x4a61bc=BattleManager['_action'],_0x1f588c={'criticalHitRate':_0x12d13f['CriticalHitRate'],'criticalHitFlat':_0x12d13f[_0x3abc3e(0x31a)],'criticalDmgRate':_0x12d13f[_0x3abc3e(0x962)],'criticalDmgFlat':_0x12d13f[_0x3abc3e(0x439)],'damageRate':_0x12d13f[_0x3abc3e(0x3ae)],'damageFlat':_0x12d13f['DamageFlat'],'hitRate':_0x12d13f['HitRate'],'hitFlat':_0x12d13f[_0x3abc3e(0x4f0)]};_0x4a61bc[_0x3abc3e(0x445)]=_0x1f588c;}),PluginManager[_0x3fd7af(0x95c)](pluginData[_0x3fd7af(0x504)],_0x3fd7af(0x48b),_0x30907d=>{const _0x366df5=_0x3fd7af;if(!SceneManager[_0x366df5(0x970)]())return;VisuMZ[_0x366df5(0x187)](_0x30907d,_0x30907d);const _0x55435b=_0x30907d['CommonEventID'];SceneManager[_0x366df5(0x450)][_0x366df5(0xa60)](_0x55435b);}),PluginManager[_0x3fd7af(0x95c)](pluginData[_0x3fd7af(0x504)],'ActSeq_Mechanics_OtbOrder',_0x1ec83d=>{const _0x83b8b8=_0x3fd7af;if(!SceneManager[_0x83b8b8(0x970)]())return;if(!Imported[_0x83b8b8(0x6ca)])return;if(!BattleManager['isOTB']())return;VisuMZ[_0x83b8b8(0x187)](_0x1ec83d,_0x1ec83d);const _0x555315=VisuMZ['CreateActionSequenceTargets'](_0x1ec83d[_0x83b8b8(0xc5)]);for(const _0xa1fe4b of _0x555315){if(!_0xa1fe4b)continue;let _0x1059cf=_0x1ec83d['CurrentTurn'],_0x41fe5d=_0x1ec83d['NextTurn'],_0x1fedb6=_0x1ec83d[_0x83b8b8(0xad4)];BattleManager[_0x83b8b8(0xa45)]['includes'](_0xa1fe4b)?_0x1059cf+=_0x1fedb6:_0x41fe5d+=_0x1fedb6,BattleManager[_0x83b8b8(0x34d)](_0xa1fe4b,-_0x1059cf,![]),BattleManager[_0x83b8b8(0x34d)](_0xa1fe4b,-_0x41fe5d,!![]);}}),PluginManager[_0x3fd7af(0x95c)](pluginData['name'],_0x3fd7af(0x327),_0x535f8c=>{const _0x516682=_0x3fd7af;if(!SceneManager[_0x516682(0x970)]())return;if(!Imported[_0x516682(0x751)])return;if(!BattleManager[_0x516682(0x4c0)]())return;VisuMZ[_0x516682(0x187)](_0x535f8c,_0x535f8c);const _0x223de8=BattleManager[_0x516682(0x470)][_0x516682(0x8b0)](),_0x359329=_0x535f8c['Override'],_0x5a4869=_0x535f8c[_0x516682(0xfa)]||_0x516682(0xa25),_0x3fbfac=_0x535f8c[_0x516682(0x6f9)]||_0x516682(0xa25),_0x507e93=_0x535f8c[_0x516682(0x27d)]||0x0,_0x290cfe=_0x535f8c[_0x516682(0x4ce)]||0x0;(_0x223de8[_0x516682(0xc4)]()||_0x359329)&&(_0x359329&&(_0x223de8[_0x516682(0xabf)]=_0x223de8[_0x516682(0xabf)]||{},_0x223de8[_0x516682(0xabf)]['priority']=0x0),_0x223de8[_0x516682(0xaf7)](_0x5a4869,_0x3fbfac,_0x507e93,_0x290cfe));}),PluginManager[_0x3fd7af(0x95c)](pluginData[_0x3fd7af(0x504)],'ActSeq_Mechanics_PtbConvert',_0x5ab457=>{const _0x44f418=_0x3fd7af;if(!SceneManager[_0x44f418(0x970)]())return;if(!Imported[_0x44f418(0x751)])return;if(!BattleManager['isPTB']())return;VisuMZ[_0x44f418(0x187)](_0x5ab457,_0x5ab457);const _0x1ca785=BattleManager[_0x44f418(0x470)][_0x44f418(0x8b0)]();let _0x2bc824=Math[_0x44f418(0x305)](_0x5ab457[_0x44f418(0x929)],0x0),_0x51099a=_0x1ca785[_0x44f418(0x6ea)](),_0x1bf43c=_0x1ca785[_0x44f418(0x4a7)]();while(_0x2bc824--){if(_0x51099a<=0x0&&_0x1bf43c<=0x0){if(_0x44f418(0x153)==='FSvBa')this['_mainSprite']['setFrame'](0x0,0x0,this[_0x44f418(0x6dd)]['width'],this['_effectDuration']);else break;}else _0x51099a>0x0?'LVBiH'!=='CAWSl'?(_0x51099a--,_0x1bf43c++):(_0x447b79[_0x44f418(0x941)][_0x44f418(0x155)][_0x44f418(0x145)](this),this[_0x44f418(0xaf4)]()[_0x44f418(0x7b9)][_0x44f418(0x265)](/<CUSTOM ACTION SEQUENCE>/i)&&(_0x3aa7aa[_0x44f418(0x6d4)]=[]),_0xb13021[_0x44f418(0x3b1)](this['item']())&&(_0xf3042f['_commonEventQueue']=[])):_0x1bf43c--;}_0x1ca785['setFullActionsPTB'](_0x51099a),_0x1ca785[_0x44f418(0xae5)](_0x1bf43c);}),PluginManager[_0x3fd7af(0x95c)](pluginData['name'],_0x3fd7af(0x2d3),_0x112e62=>{const _0x231f28=_0x3fd7af;if(!SceneManager[_0x231f28(0x970)]())return;if(!Imported[_0x231f28(0x751)])return;if(!BattleManager[_0x231f28(0x4c0)]())return;VisuMZ['ConvertParams'](_0x112e62,_0x112e62);const _0x58cf87=BattleManager[_0x231f28(0x470)][_0x231f28(0x8b0)]();let _0x4fe41e=_0x112e62[_0x231f28(0x1e5)],_0x2b8589=_0x112e62[_0x231f28(0x860)];_0x58cf87[_0x231f28(0x32b)](_0x4fe41e),_0x58cf87[_0x231f28(0x568)](_0x2b8589);}),PluginManager[_0x3fd7af(0x95c)](pluginData[_0x3fd7af(0x504)],_0x3fd7af(0x10a),_0x29c199=>{const _0xa28c07=_0x3fd7af;if(!SceneManager[_0xa28c07(0x970)]())return;VisuMZ['ConvertParams'](_0x29c199,_0x29c199);const _0x32289e=[_0xa28c07(0x624),'MAXMP',_0xa28c07(0x612),_0xa28c07(0x54d),_0xa28c07(0x292),'MDF',_0xa28c07(0x9c3),_0xa28c07(0x789)],_0x3a52dd=_0x29c199[_0xa28c07(0x11d)],_0xd919b8=_0x29c199[_0xa28c07(0x69e)],_0x4babf0=VisuMZ[_0xa28c07(0xa62)](_0x29c199[_0xa28c07(0xc5)]);for(const _0x22a4f3 of _0x4babf0){if(!_0x22a4f3)continue;for(const _0xe4365d of _0x3a52dd){if('taXba'===_0xa28c07(0x5ae))this[_0xa28c07(0x42a)](_0xa28c07(0x96d));else{const _0x45327f=_0x32289e[_0xa28c07(0x760)](_0xe4365d['toUpperCase']()[_0xa28c07(0x306)]());_0x45327f>=0x0&&_0x45327f<=0x7&&_0x22a4f3[_0xa28c07(0x37e)](_0x45327f)&&(_0xa28c07(0x60d)===_0xa28c07(0x9a9)?_0x4ecfd0[_0xa28c07(0x941)][_0xa28c07(0x2db)][_0xa28c07(0x145)](this):_0x22a4f3[_0xa28c07(0x964)](_0x45327f));}}for(const _0x418e61 of _0xd919b8){const _0x4958c4=_0x32289e['indexOf'](_0x418e61[_0xa28c07(0x989)]()[_0xa28c07(0x306)]());_0x4958c4>=0x0&&_0x4958c4<=0x7&&_0x22a4f3[_0xa28c07(0x5b7)](_0x4958c4)&&_0x22a4f3[_0xa28c07(0x964)](_0x4958c4);}}}),PluginManager['registerCommand'](pluginData[_0x3fd7af(0x504)],_0x3fd7af(0x3b3),_0x439e88=>{const _0x544dfb=_0x3fd7af;if(!SceneManager[_0x544dfb(0x970)]())return;VisuMZ[_0x544dfb(0x187)](_0x439e88,_0x439e88);const _0xffd19d=_0x439e88[_0x544dfb(0x2be)],_0x487497=VisuMZ[_0x544dfb(0xa62)](_0x439e88['Targets']);for(const _0x4bfd62 of _0x487497){if(!_0x4bfd62)continue;for(const _0x468514 of _0xffd19d){_0x4bfd62[_0x544dfb(0x7ad)](_0x468514);}}}),PluginManager[_0x3fd7af(0x95c)](pluginData[_0x3fd7af(0x504)],'ActSeq_Mechanics_StbExploit',_0x3f111c=>{const _0x5c1cd9=_0x3fd7af;if(!SceneManager[_0x5c1cd9(0x970)]())return;if(!Imported[_0x5c1cd9(0x6e6)])return;if(!BattleManager['isSTB']())return;VisuMZ[_0x5c1cd9(0x187)](_0x3f111c,_0x3f111c);const _0x3e5202=_0x3f111c['Exploited'],_0x5c587f=VisuMZ['CreateActionSequenceTargets'](_0x3f111c[_0x5c1cd9(0xc5)]),_0x5e3e04=_0x3f111c[_0x5c1cd9(0x2d5)],_0x11a787=_0x3f111c[_0x5c1cd9(0x1dc)],_0x2c2779=_0x3f111c[_0x5c1cd9(0x4c3)],_0x36349c=BattleManager[_0x5c1cd9(0x2dd)];if(_0x3e5202){if('HnYod'==='HnYod')for(const _0x107a1d of _0x5c587f){if(!_0x107a1d)continue;if(_0x107a1d===user)continue;if(_0x5e3e04)_0x107a1d[_0x5c1cd9(0x95f)](![]);_0x107a1d['becomeSTBExploited'](BattleManager['_subject'],_0x36349c);}else return _0x46d5d2['status']&&_0xff260d['description']['includes']('['+_0x5e0632+']');}if(_0x11a787&&BattleManager[_0x5c1cd9(0x470)]){if('zavWd'==='zavWd'){if(_0x2c2779)BattleManager[_0x5c1cd9(0x470)][_0x5c1cd9(0x95f)](![]);const _0x1b4d16=_0x5c587f[0x0];BattleManager[_0x5c1cd9(0x460)](_0x1b4d16,_0x36349c);}else this[_0x5c1cd9(0x5be)](_0x15f1ab);}}),PluginManager['registerCommand'](pluginData[_0x3fd7af(0x504)],_0x3fd7af(0x945),_0x2f167c=>{const _0x29cbfc=_0x3fd7af;if(!SceneManager[_0x29cbfc(0x970)]())return;if(!Imported[_0x29cbfc(0x6e6)])return;if(!BattleManager[_0x29cbfc(0x5f5)]())return;VisuMZ[_0x29cbfc(0x187)](_0x2f167c,_0x2f167c);const _0x36b63a=_0x2f167c[_0x29cbfc(0x61d)];BattleManager['_subject']&&BattleManager[_0x29cbfc(0x470)][_0x29cbfc(0x3c5)](_0x36b63a);}),PluginManager[_0x3fd7af(0x95c)](pluginData[_0x3fd7af(0x504)],_0x3fd7af(0x5e8),_0x5c68c4=>{const _0x549035=_0x3fd7af;if(!SceneManager[_0x549035(0x970)]())return;if(!Imported[_0x549035(0x6e6)])return;if(!BattleManager[_0x549035(0x5f5)]())return;VisuMZ[_0x549035(0x187)](_0x5c68c4,_0x5c68c4);let _0x1ef796=_0x5c68c4[_0x549035(0x61d)];if(BattleManager['_subject']){if(_0x549035(0x764)!==_0x549035(0x764)){this[_0x549035(0x991)]={},this[_0x549035(0x1cf)]={};if(!_0x584393)return;const _0x441387=_0x301aec[_0x549035(0x7b9)];if(!_0x441387)return;const _0x2f3978=_0x441387[_0x549035(0x265)](/<REGION (\d+) BATTLEBACK(\d+): (.*)>/gi);if(_0x2f3978)for(const _0x373e23 of _0x2f3978){_0x373e23['match'](/<REGION (\d+) BATTLEBACK(\d+): (.*)>/i);const _0x5ddd3b=_0x4ccb75(_0x50795a['$1']),_0xe891c=_0x5e4525(_0xc142c2['$2']),_0x5a998f=_0xe891c===0x1?this[_0x549035(0x991)]:this[_0x549035(0x1cf)],_0x972040=_0x32b68d(_0x5cfbdb['$3']);_0x5a998f[_0x5ddd3b]=_0x972040;}}else{BattleManager[_0x549035(0x470)][_0x549035(0x90f)]=BattleManager['_subject'][_0x549035(0x90f)]||[];while(_0x1ef796--){if(_0x549035(0x38b)!==_0x549035(0x426)){if(BattleManager['_subject'][_0x549035(0x90f)]['length']<=0x0)break;BattleManager[_0x549035(0x470)][_0x549035(0x90f)]['shift']();}else return _0x5d4bbb['BattleCore'][_0x549035(0xa6b)][_0x549035(0x3a9)]['BattleCmdList'];}}}}),PluginManager[_0x3fd7af(0x95c)](pluginData[_0x3fd7af(0x504)],'ActSeq_Mechanics_SwapWeapon',_0x442dfe=>{const _0x49c353=_0x3fd7af;if(!SceneManager[_0x49c353(0x970)]())return;if(!Imported['VisuMZ_2_WeaponSwapSystem'])return;VisuMZ[_0x49c353(0x187)](_0x442dfe,_0x442dfe);const _0x4303c4=VisuMZ[_0x49c353(0xa62)](_0x442dfe[_0x49c353(0xc5)]),_0x2fec16=_0x442dfe[_0x49c353(0x932)];for(const _0x161a73 of _0x4303c4){if('Wzyrk'!==_0x49c353(0x937)){if(!_0x161a73)continue;if(!_0x161a73[_0x49c353(0x91d)]())continue;_0x161a73[_0x49c353(0xe6)](_0x2fec16);}else _0x173f47[_0x49c353(0x941)]['Window_ActorCommand_initialize'][_0x49c353(0x145)](this,_0x44a557),this[_0x49c353(0x301)](_0x16ae74);}}),PluginManager['registerCommand'](pluginData[_0x3fd7af(0x504)],'ActSeq_Mechanics_TextPopup',_0x2966ac=>{const _0x979e4b=_0x3fd7af;if(!SceneManager[_0x979e4b(0x970)]())return;VisuMZ['ConvertParams'](_0x2966ac,_0x2966ac);const _0x1599cf=VisuMZ[_0x979e4b(0xa62)](_0x2966ac[_0x979e4b(0xc5)]),_0x3db330=_0x2966ac[_0x979e4b(0xa21)],_0x34d17d={'textColor':ColorManager['getColor'](_0x2966ac[_0x979e4b(0x231)]),'flashColor':_0x2966ac[_0x979e4b(0x23a)],'flashDuration':_0x2966ac['FlashDuration']};for(const _0xd3d6d of _0x1599cf){if(!_0xd3d6d)continue;_0xd3d6d['setupTextPopup'](_0x3db330,_0x34d17d);}}),PluginManager[_0x3fd7af(0x95c)](pluginData[_0x3fd7af(0x504)],_0x3fd7af(0x7ab),_0x2f6d7a=>{const _0x35b692=_0x3fd7af;if(!SceneManager[_0x35b692(0x970)]())return;VisuMZ[_0x35b692(0x187)](_0x2f6d7a,_0x2f6d7a);const _0x36c001=VisuMZ[_0x35b692(0xa62)](_0x2f6d7a[_0x35b692(0xc5)]);let _0x3edf1c=$gameVariables[_0x35b692(0x13a)](_0x2f6d7a[_0x35b692(0x9ea)]);Imported[_0x35b692(0x28a)]&&_0x2f6d7a[_0x35b692(0x420)]&&(_0x3edf1c=VisuMZ[_0x35b692(0x988)](_0x3edf1c));const _0x1dae08=String(_0x3edf1c),_0x37b27d={'textColor':ColorManager[_0x35b692(0x10d)](_0x2f6d7a[_0x35b692(0x231)]),'flashColor':_0x2f6d7a[_0x35b692(0x23a)],'flashDuration':_0x2f6d7a[_0x35b692(0xb3)]};for(const _0x4705c6 of _0x36c001){if('MXmJA'!=='MXmJA')this['_phase']=_0x35b692(0x133);else{if(!_0x4705c6)continue;_0x4705c6[_0x35b692(0x86b)](_0x1dae08,_0x37b27d);}}}),PluginManager['registerCommand'](pluginData[_0x3fd7af(0x504)],_0x3fd7af(0xaf0),_0x36d973=>{const _0x21b93a=_0x3fd7af;if(!SceneManager[_0x21b93a(0x970)]())return;const _0x441127=$gameTemp[_0x21b93a(0x8be)]();if(!_0x441127)return;_0x441127[_0x21b93a(0x992)]('battleEffect');}),PluginManager['registerCommand'](pluginData[_0x3fd7af(0x504)],_0x3fd7af(0x8a4),_0x2b0955=>{const _0x2cd22d=_0x3fd7af;if(!SceneManager[_0x2cd22d(0x970)]())return;VisuMZ[_0x2cd22d(0x187)](_0x2b0955,_0x2b0955);const _0x578c3f=VisuMZ[_0x2cd22d(0xa62)](_0x2b0955[_0x2cd22d(0xc5)]);for(const _0x8fc7ac of _0x578c3f){if(!_0x8fc7ac)continue;_0x8fc7ac['clearFreezeMotion']();}}),PluginManager[_0x3fd7af(0x95c)](pluginData['name'],_0x3fd7af(0x429),_0x52c8cf=>{const _0x46806a=_0x3fd7af;if(!SceneManager[_0x46806a(0x970)]())return;VisuMZ[_0x46806a(0x187)](_0x52c8cf,_0x52c8cf);const _0x28691d=VisuMZ[_0x46806a(0xa62)](_0x52c8cf[_0x46806a(0xc5)]),_0x34a905=_0x52c8cf[_0x46806a(0x7dd)]['toLowerCase']()['trim']();let _0x1a0bda=_0x52c8cf[_0x46806a(0x53c)];const _0x399261=_0x52c8cf['Frame'];if(![_0x46806a(0x910),'thrust',_0x46806a(0x384),'missile'][_0x46806a(0x402)](_0x34a905)){if(_0x46806a(0x847)===_0x46806a(0x7de)){_0xd1ce16[_0x46806a(0x178)]();let _0x1dcf10=_0x3aa5a7[_0x46806a(0x941)][_0x46806a(0xa6b)][_0x46806a(0x844)][_0x46806a(0x4b9)];_0x1dcf10>0x0&&(_0x2ff6e1['VisuMZ_0_CoreEngine']?_0x3d0e9b[_0x46806a(0x476)]([this],_0x1dcf10):_0x4b3d13[_0x46806a(0x97f)]([this],_0x1dcf10));}else _0x1a0bda=![];}for(const _0xaba78 of _0x28691d){if(!_0xaba78)continue;_0xaba78[_0x46806a(0x190)](_0x34a905,_0x1a0bda,_0x399261);}}),PluginManager[_0x3fd7af(0x95c)](pluginData[_0x3fd7af(0x504)],_0x3fd7af(0x6b6),_0x10de65=>{const _0x39c88e=_0x3fd7af;if(!SceneManager[_0x39c88e(0x970)]())return;VisuMZ[_0x39c88e(0x187)](_0x10de65,_0x10de65);const _0xf30ca0=VisuMZ['CreateActionSequenceTargets'](_0x10de65[_0x39c88e(0xc5)]),_0x2a1b63=_0x10de65['MotionType'][_0x39c88e(0x81b)]()[_0x39c88e(0x306)](),_0xc1abce=_0x10de65[_0x39c88e(0x53c)];for(const _0x2cb7e2 of _0xf30ca0){if('iikEI'===_0x39c88e(0x4a9)){if(!_0x2cb7e2)continue;if(_0x2a1b63[_0x39c88e(0x265)](/ATTACK[ ](\d+)/i))_0x2cb7e2[_0x39c88e(0x9bf)](Number(RegExp['$1']));else _0x2a1b63===_0x39c88e(0x910)?_0x2cb7e2[_0x39c88e(0x5a4)]():_0x2cb7e2['requestMotion'](_0x2a1b63);if(!_0xc1abce)_0x2cb7e2['startWeaponAnimation'](0x0);else{if(_0xc1abce&&[_0x39c88e(0x96d),_0x39c88e(0x384),'missle']['includes'](_0x2a1b63)){}}}else _0x171bb1[_0x39c88e(0x328)]();}}),PluginManager['registerCommand'](pluginData['name'],_0x3fd7af(0x1b4),_0x5f245f=>{const _0x463ccd=_0x3fd7af;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x463ccd(0x187)](_0x5f245f,_0x5f245f);const _0x1bc6d4=BattleManager['_action'];if(!_0x1bc6d4)return;if(!_0x1bc6d4[_0x463ccd(0xaf4)]())return;const _0x446673=VisuMZ['CreateActionSequenceTargets'](_0x5f245f[_0x463ccd(0xc5)]);for(const _0x4b3bd5 of _0x446673){if(_0x463ccd(0xa4a)==='JAXnJ'){if(!_0x4b3bd5)continue;_0x4b3bd5[_0x463ccd(0x386)](_0x1bc6d4);}else{if(!this[_0x463ccd(0x25f)])return;this['_battler']!==this[_0x463ccd(0x25f)]['_battler']&&this[_0x463ccd(0x25f)][_0x463ccd(0xbb)](this[_0x463ccd(0xa9a)]);const _0x37907c=this['textWidth']();this[_0x463ccd(0x82f)]=this[_0x463ccd(0x82f)]||_0x1fd835['prototype'][_0x463ccd(0x41c)](),this[_0x463ccd(0x25f)]['x']=_0x14e848[_0x463ccd(0x819)]((_0x37907c+_0x1015f1[_0x463ccd(0x542)])/0x2)+0x8,this[_0x463ccd(0x25f)]['y']=this[_0x463ccd(0x82f)]/0x2;const _0x224760=_0x3f34a2[_0x463ccd(0x941)][_0x463ccd(0xa6b)]['Enemy'];this[_0x463ccd(0x25f)]['x']+=_0x224760[_0x463ccd(0x526)]||0x0,this['_stateIconSprite']['y']+=_0x224760['AttachStateOffsetY']||0x0;}}}),PluginManager[_0x3fd7af(0x95c)](pluginData['name'],_0x3fd7af(0xae8),_0x5b3ead=>{const _0x206732=_0x3fd7af;if(!SceneManager['isSceneBattle']())return;VisuMZ['ConvertParams'](_0x5b3ead,_0x5b3ead);const _0xeddf7c=VisuMZ[_0x206732(0xa62)](_0x5b3ead[_0x206732(0xc5)]);for(const _0x499441 of _0xeddf7c){if(_0x206732(0x938)!=='hgncg')_0x3564f4=_0x27227b[_0x206732(0x721)];else{if(!_0x499441)continue;if(!_0x499441[_0x206732(0x181)]())continue;_0x499441['battler']()[_0x206732(0x1f6)]();}}}),PluginManager[_0x3fd7af(0x95c)](pluginData['name'],_0x3fd7af(0xaa8),_0xad19b5=>{const _0x4d5888=_0x3fd7af;if(!SceneManager[_0x4d5888(0x970)]())return;VisuMZ[_0x4d5888(0x187)](_0xad19b5,_0xad19b5);const _0x1f281d=$gameTemp['getLastPluginCommandInterpreter'](),_0x396a56=_0xad19b5[_0x4d5888(0x459)]*Sprite_Battler['_motionSpeed'];_0x1f281d[_0x4d5888(0x474)](_0x396a56);}),PluginManager[_0x3fd7af(0x95c)](pluginData['name'],'ActSeq_Movement_BattleStep',_0x25082f=>{const _0x5c3312=_0x3fd7af;if(!SceneManager['isSceneBattle']())return;VisuMZ['ConvertParams'](_0x25082f,_0x25082f);const _0x11ad4d=$gameTemp['getLastPluginCommandInterpreter'](),_0xa49e5f=BattleManager[_0x5c3312(0x2dd)];if(!_0x11ad4d||!_0xa49e5f)return;if(!_0xa49e5f['item']())return;const _0x3ad16e=VisuMZ[_0x5c3312(0xa62)](_0x25082f['Targets']);for(const _0x23295e of _0x3ad16e){if(!_0x23295e)continue;_0x23295e[_0x5c3312(0xaea)](_0xa49e5f);}if(_0x25082f[_0x5c3312(0x1a1)])_0x11ad4d[_0x5c3312(0x992)](_0x5c3312(0x19d));}),PluginManager['registerCommand'](pluginData[_0x3fd7af(0x504)],_0x3fd7af(0x1f5),_0x2277a4=>{const _0x130a30=_0x3fd7af;if(!SceneManager[_0x130a30(0x970)]())return;if(!$gameSystem['isSideView']())return;VisuMZ['ConvertParams'](_0x2277a4,_0x2277a4);const _0x26eee3=VisuMZ[_0x130a30(0xa62)](_0x2277a4['Targets']);let _0x3835f1=_0x2277a4['Direction'][_0x130a30(0x265)](/back/i);for(const _0x53d866 of _0x26eee3){if(!_0x53d866)continue;if(_0x2277a4[_0x130a30(0x220)][_0x130a30(0x265)](/rand/i))_0x3835f1=Math[_0x130a30(0x545)](0x2);_0x53d866[_0x130a30(0x49f)](!!_0x3835f1);}}),PluginManager[_0x3fd7af(0x95c)](pluginData['name'],_0x3fd7af(0x5ab),_0x4c307c=>{const _0x339720=_0x3fd7af;if(!SceneManager[_0x339720(0x970)]())return;if(!$gameSystem[_0x339720(0x151)]())return;VisuMZ[_0x339720(0x187)](_0x4c307c,_0x4c307c);const _0xcbb94f=VisuMZ[_0x339720(0xa62)](_0x4c307c['Targets']);let _0x410545=_0x4c307c[_0x339720(0x7da)];const _0x590b1a=_0x4c307c[_0x339720(0x2f2)];for(const _0x197dd2 of _0xcbb94f){if(_0x339720(0x84b)!==_0x339720(0x339)){if(!_0x197dd2)continue;let _0x4b91c5=_0x197dd2[_0x339720(0x181)]()[_0x339720(0x62e)],_0xeb143b=_0x197dd2['battler']()[_0x339720(0x69d)];if(_0x410545[_0x339720(0x265)](/home/i)){if(_0x339720(0x61b)!==_0x339720(0x61b)){_0x135aff=_0x3e58fc||0x1,_0x4ac2db--;const _0x41329a=this['weapons'](),_0x47ec54=_0x41329a[_0x5b0c4f]?_0x41329a[_0xcb3d41][_0x339720(0x14d)]:0x0;return _0xe86433[_0x339720(0x3b0)][_0x47ec54];}else _0x4b91c5=_0x197dd2[_0x339720(0x181)]()['_homeX'],_0xeb143b=_0x197dd2[_0x339720(0x181)]()[_0x339720(0x939)];}else{if(_0x410545['match'](/center/i))_0x339720(0xce)===_0x339720(0x47f)?(_0x323dc8[_0x339720(0x58f)](_0x3a9dad),[_0x339720(0x384),_0x339720(0x96d),'missile'][_0x339720(0x402)](_0x2cec98)&&this[_0x339720(0x567)]()):(_0x4b91c5=Graphics[_0x339720(0xa4b)]/0x2,_0xeb143b=Graphics[_0x339720(0x422)]/0x2);else _0x410545['match'](/point (\d+), (\d+)/i)&&(_0x4b91c5=Number(RegExp['$1']),_0xeb143b=Number(RegExp['$2']));}_0x197dd2[_0x339720(0x1c8)](Math[_0x339720(0x819)](_0x4b91c5),Math[_0x339720(0x819)](_0xeb143b),!!_0x590b1a);}else this[_0x339720(0x709)](...arguments);}}),PluginManager[_0x3fd7af(0x95c)](pluginData[_0x3fd7af(0x504)],_0x3fd7af(0x96b),_0x3e6ce5=>{const _0x4c306a=_0x3fd7af;if(!SceneManager[_0x4c306a(0x970)]())return;if(!$gameSystem[_0x4c306a(0x151)]())return;VisuMZ[_0x4c306a(0x187)](_0x3e6ce5,_0x3e6ce5);const _0x4fd013=VisuMZ[_0x4c306a(0xa62)](_0x3e6ce5[_0x4c306a(0x5bc)]),_0x5d5f29=VisuMZ[_0x4c306a(0xa62)](_0x3e6ce5[_0x4c306a(0x2ce)]),_0x3f9eb3=_0x5d5f29[_0x4c306a(0x826)](_0x2d42cd=>_0x2d42cd&&_0x2d42cd[_0x4c306a(0x181)]()?_0x2d42cd['battler']()[_0x4c306a(0x62e)]:0x0)/(_0x5d5f29[_0x4c306a(0x732)]||0x1),_0x4922fb=_0x5d5f29['map'](_0x4f367f=>_0x4f367f&&_0x4f367f[_0x4c306a(0x181)]()?_0x4f367f[_0x4c306a(0x181)]()[_0x4c306a(0x69d)]:0x0)/(_0x5d5f29[_0x4c306a(0x732)]||0x1),_0x2641b1=_0x3e6ce5['FaceAway'];for(const _0x2755ba of _0x4fd013){if(!_0x2755ba)continue;_0x2755ba[_0x4c306a(0x1c8)](Math[_0x4c306a(0x819)](_0x3f9eb3),Math[_0x4c306a(0x819)](_0x4922fb),!!_0x2641b1);}}),PluginManager[_0x3fd7af(0x95c)](pluginData[_0x3fd7af(0x504)],_0x3fd7af(0x7ff),_0x16f3b6=>{const _0x31ad18=_0x3fd7af;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x31ad18(0x187)](_0x16f3b6,_0x16f3b6);const _0x4778d2=$gameTemp[_0x31ad18(0x8be)](),_0x4be5a4=VisuMZ[_0x31ad18(0xa62)](_0x16f3b6[_0x31ad18(0xc5)]),_0x4f389e=_0x16f3b6[_0x31ad18(0x51c)],_0x274057=_0x16f3b6['Duration'],_0x1c49f1=_0x16f3b6[_0x31ad18(0x9f6)],_0x32942e=_0x16f3b6['WaitForFloat'];if(!_0x4778d2)return;for(const _0x19bf1f of _0x4be5a4){if(_0x31ad18(0x81d)!=='uoCfE')_0x1ffa87[_0x31ad18(0x9fd)][_0x31ad18(0x14a)][_0x31ad18(0x145)](this),this[_0x31ad18(0x7b4)]();else{if(!_0x19bf1f)continue;_0x19bf1f[_0x31ad18(0xa2a)](_0x4f389e,_0x274057,_0x1c49f1);}}if(_0x32942e)_0x4778d2[_0x31ad18(0x992)]('battleFloat');}),PluginManager[_0x3fd7af(0x95c)](pluginData['name'],_0x3fd7af(0x996),_0x1bbb2e=>{const _0x24e14a=_0x3fd7af;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x24e14a(0x187)](_0x1bbb2e,_0x1bbb2e);const _0x45ef15=$gameTemp['getLastPluginCommandInterpreter']();if(!_0x45ef15)return;const _0x339631=VisuMZ['CreateActionSequenceTargets'](_0x1bbb2e[_0x24e14a(0xc5)]);for(const _0xfafa6f of _0x339631){if(!_0xfafa6f)continue;_0xfafa6f[_0x24e14a(0x664)]();}BattleManager[_0x24e14a(0x470)]&&BattleManager['_subject'][_0x24e14a(0xadc)]();if(_0x1bbb2e['WaitForMovement'])_0x45ef15[_0x24e14a(0x992)](_0x24e14a(0x19d));}),PluginManager[_0x3fd7af(0x95c)](pluginData[_0x3fd7af(0x504)],_0x3fd7af(0xaf8),_0x12916e=>{const _0x3877c4=_0x3fd7af;if(!SceneManager[_0x3877c4(0x970)]())return;VisuMZ[_0x3877c4(0x187)](_0x12916e,_0x12916e);const _0xc2eedf=$gameTemp[_0x3877c4(0x8be)](),_0x362350=VisuMZ[_0x3877c4(0xa62)](_0x12916e['Targets']),_0x18db6b=_0x12916e['Height'],_0x3e9871=_0x12916e[_0x3877c4(0x200)],_0x282c18=_0x12916e[_0x3877c4(0x5d1)];if(!_0xc2eedf)return;for(const _0x2955d9 of _0x362350){if(!_0x2955d9)continue;_0x2955d9[_0x3877c4(0x6c0)](_0x18db6b,_0x3e9871);}if(_0x282c18)_0xc2eedf[_0x3877c4(0x992)](_0x3877c4(0x1ab));}),PluginManager[_0x3fd7af(0x95c)](pluginData[_0x3fd7af(0x504)],_0x3fd7af(0x935),_0xb2f69=>{const _0x228552=_0x3fd7af;if(!SceneManager['isSceneBattle']())return;if(!$gameSystem[_0x228552(0x151)]())return;VisuMZ['ConvertParams'](_0xb2f69,_0xb2f69);const _0x2266f1=$gameTemp[_0x228552(0x8be)](),_0x2b8476=VisuMZ[_0x228552(0xa62)](_0xb2f69[_0x228552(0xc5)]),_0x2b9660=_0xb2f69['DistanceAdjust'],_0x41df14=_0xb2f69[_0x228552(0x7aa)],_0x444954=_0xb2f69['DistanceY'],_0x1d0e0c=_0xb2f69[_0x228552(0x200)],_0x3e232c=_0xb2f69[_0x228552(0x7c1)],_0x24a7ab=_0xb2f69['EasingType'],_0x590cee=_0xb2f69[_0x228552(0x7dd)],_0x21e3bc=_0xb2f69[_0x228552(0x1a1)];if(!_0x2266f1)return;for(const _0x38b901 of _0x2b8476){if(!_0x38b901)continue;let _0x4c1ff3=_0x41df14,_0x2613cb=_0x444954;if(_0x2b9660[_0x228552(0x265)](/horz/i))_0x4c1ff3*=_0x38b901[_0x228552(0x91d)]()?-0x1:0x1;if(_0x2b9660[_0x228552(0x265)](/vert/i))_0x2613cb*=_0x38b901[_0x228552(0x91d)]()?-0x1:0x1;_0x38b901[_0x228552(0x440)](_0x4c1ff3,_0x2613cb,_0x1d0e0c,_0x3e232c,_0x24a7ab),_0x38b901[_0x228552(0x42a)](_0x590cee);}if(_0x21e3bc)_0x2266f1[_0x228552(0x992)]('battleMove');}),PluginManager[_0x3fd7af(0x95c)](pluginData['name'],_0x3fd7af(0x7ee),_0x587b42=>{const _0x5a488f=_0x3fd7af;if(!SceneManager[_0x5a488f(0x970)]())return;if(!$gameSystem[_0x5a488f(0x151)]())return;VisuMZ['ConvertParams'](_0x587b42,_0x587b42);const _0x36aa12=$gameTemp[_0x5a488f(0x8be)](),_0x201d58=VisuMZ[_0x5a488f(0xa62)](_0x587b42[_0x5a488f(0xc5)]),_0x5e2367=_0x587b42['Destination'],_0x479e73=_0x587b42[_0x5a488f(0x648)],_0x4f5ae2=_0x587b42[_0x5a488f(0x592)],_0x49541f=_0x587b42[_0x5a488f(0x4ee)],_0x5b5e5f=_0x587b42[_0x5a488f(0x200)],_0x9f60d3=_0x587b42[_0x5a488f(0x7c1)],_0x2abfd2=_0x587b42[_0x5a488f(0x9f6)],_0x2f6d66=_0x587b42[_0x5a488f(0x7dd)],_0x412b7=_0x587b42[_0x5a488f(0x1a1)];if(!_0x36aa12)return;for(const _0x393f25 of _0x201d58){if(_0x5a488f(0x41e)!==_0x5a488f(0x8b6)){if(!_0x393f25)continue;let _0x18f025=_0x393f25['battler']()[_0x5a488f(0x62e)],_0x3e7f85=_0x393f25[_0x5a488f(0x181)]()['_baseY'];if(_0x5e2367[_0x5a488f(0x265)](/home/i))_0x18f025=_0x393f25[_0x5a488f(0x181)]()[_0x5a488f(0x2e7)],_0x3e7f85=_0x393f25[_0x5a488f(0x181)]()[_0x5a488f(0x939)];else{if(_0x5e2367[_0x5a488f(0x265)](/center/i)){if('kubrD'===_0x5a488f(0x4dd)){const _0x5e13c9=_0x5a488f(0x3dd)['format'](_0x5d51b4);_0x4d83b5['BattleCore']['JS'][_0x470d72]=new _0x3f44e7(_0x5e13c9);}else _0x18f025=Graphics[_0x5a488f(0xa4b)]/0x2,_0x3e7f85=Graphics[_0x5a488f(0x422)]/0x2;}else _0x5e2367['match'](/point (\d+), (\d+)/i)&&(_0x18f025=Number(RegExp['$1']),_0x3e7f85=Number(RegExp['$2']));}if(_0x479e73[_0x5a488f(0x265)](/none/i))_0x18f025+=_0x4f5ae2,_0x3e7f85+=_0x49541f;else{if(_0x479e73[_0x5a488f(0x265)](/horz/i)&&_0x479e73[_0x5a488f(0x265)](/vert/i))_0x18f025+=_0x393f25[_0x5a488f(0x91d)]()?-_0x4f5ae2:_0x4f5ae2,_0x3e7f85+=_0x393f25[_0x5a488f(0x91d)]()?-_0x49541f:_0x49541f;else{if(_0x479e73[_0x5a488f(0x265)](/horz/i))_0x18f025+=_0x393f25[_0x5a488f(0x91d)]()?-_0x4f5ae2:_0x4f5ae2,_0x3e7f85+=_0x49541f;else _0x479e73[_0x5a488f(0x265)](/vert/i)&&(_0x18f025+=_0x4f5ae2,_0x3e7f85+=_0x393f25[_0x5a488f(0x91d)]()?-_0x49541f:_0x49541f);}}_0x393f25['moveBattlerToPoint'](_0x18f025,_0x3e7f85,_0x5b5e5f,_0x9f60d3,_0x2abfd2,-0x1),_0x393f25[_0x5a488f(0x42a)](_0x2f6d66);}else return _0x50ce17[_0x5a488f(0x18b)](...this[_0x5a488f(0x8b0)]()[_0x5a488f(0x813)]()[_0x5a488f(0xa8)](_0x3a0e0b=>_0x3a0e0b!==this[_0x5a488f(0x22a)]())),this[_0x5a488f(0x4e5)](_0xaa5264);}if(_0x412b7)_0x36aa12[_0x5a488f(0x992)](_0x5a488f(0x19d));}),PluginManager[_0x3fd7af(0x95c)](pluginData[_0x3fd7af(0x504)],'ActSeq_Movement_MoveToTarget',_0x41dd4c=>{const _0x11b7a6=_0x3fd7af;if(!SceneManager[_0x11b7a6(0x970)]())return;if(!$gameSystem[_0x11b7a6(0x151)]())return;VisuMZ[_0x11b7a6(0x187)](_0x41dd4c,_0x41dd4c);const _0x1e9f62=$gameTemp['getLastPluginCommandInterpreter'](),_0x2cffa1=VisuMZ['CreateActionSequenceTargets'](_0x41dd4c['Targets1']),_0x5f3db3=VisuMZ[_0x11b7a6(0xa62)](_0x41dd4c[_0x11b7a6(0x2ce)]),_0x44d9e0=_0x41dd4c[_0x11b7a6(0x1ac)];let _0x17ef76=_0x41dd4c[_0x11b7a6(0x720)];const _0xda7286=_0x41dd4c[_0x11b7a6(0x648)],_0x57bd27=_0x41dd4c['OffsetX'],_0x503392=_0x41dd4c[_0x11b7a6(0x4ee)],_0x36828c=_0x41dd4c['Duration'],_0x40b9cc=_0x41dd4c['FaceDirection'],_0x57ab25=_0x41dd4c['EasingType'],_0x5847db=_0x41dd4c[_0x11b7a6(0x7dd)],_0x49630b=_0x41dd4c[_0x11b7a6(0x1a1)],_0x442cf3=Math[_0x11b7a6(0x88d)](..._0x5f3db3['map'](_0xb174cc=>_0xb174cc['battler']()[_0x11b7a6(0x62e)]-_0xb174cc[_0x11b7a6(0x181)]()[_0x11b7a6(0x159)]()/0x2)),_0x5d8ecd=Math['max'](..._0x5f3db3['map'](_0x153b88=>_0x153b88[_0x11b7a6(0x181)]()[_0x11b7a6(0x62e)]+_0x153b88[_0x11b7a6(0x181)]()[_0x11b7a6(0x159)]()/0x2)),_0x5c518e=Math['min'](..._0x5f3db3[_0x11b7a6(0x826)](_0x10a354=>_0x10a354['battler']()[_0x11b7a6(0x69d)]-_0x10a354[_0x11b7a6(0x181)]()[_0x11b7a6(0x2ca)]())),_0x2cbec1=Math[_0x11b7a6(0x305)](..._0x5f3db3[_0x11b7a6(0x826)](_0x390a53=>_0x390a53[_0x11b7a6(0x181)]()[_0x11b7a6(0x69d)])),_0x4a5da1=_0x5f3db3[_0x11b7a6(0xa8)](_0x8fad9e=>_0x8fad9e[_0x11b7a6(0x91d)]())[_0x11b7a6(0x732)],_0x56070e=_0x5f3db3[_0x11b7a6(0xa8)](_0x5757a1=>_0x5757a1['isEnemy']())[_0x11b7a6(0x732)];let _0x2dfdd9=0x0,_0x47d9ec=0x0;if(_0x44d9e0[_0x11b7a6(0x265)](/front/i))_0x2dfdd9=_0x4a5da1>=_0x56070e?_0x442cf3:_0x5d8ecd;else{if(_0x44d9e0[_0x11b7a6(0x265)](/middle/i))_0x2dfdd9=(_0x442cf3+_0x5d8ecd)/0x2,_0x17ef76=-0x1;else _0x44d9e0[_0x11b7a6(0x265)](/back/i)&&(_0x2dfdd9=_0x4a5da1>=_0x56070e?_0x5d8ecd:_0x442cf3);}if(_0x44d9e0[_0x11b7a6(0x265)](/head/i))_0x11b7a6(0x499)!==_0x11b7a6(0x499)?_0x4e62fa=_0x11b7a6(0x6d0):_0x47d9ec=_0x5c518e;else{if(_0x44d9e0[_0x11b7a6(0x265)](/center/i)){if('UBmsC'!==_0x11b7a6(0x1f1))_0x47d9ec=(_0x5c518e+_0x2cbec1)/0x2;else{if(!_0x130ab4['isSceneBattle']())return;_0x5b7ee7['_scene'][_0x11b7a6(0x260)](this),_0x2ff608[_0x11b7a6(0x9fd)][_0x11b7a6(0x75b)][_0x11b7a6(0x145)](this);}}else _0x44d9e0[_0x11b7a6(0x265)](/base/i)&&(_0x47d9ec=_0x2cbec1);}if(!_0x1e9f62)return;for(const _0x4e8899 of _0x2cffa1){if(!_0x4e8899)continue;let _0x3a0020=_0x2dfdd9,_0x560e15=_0x47d9ec;if(_0xda7286[_0x11b7a6(0x265)](/none/i))_0x3a0020+=_0x57bd27,_0x560e15+=_0x503392;else{if(_0xda7286[_0x11b7a6(0x265)](/horz/i)&&_0xda7286[_0x11b7a6(0x265)](/vert/i)){if(_0x11b7a6(0x202)!==_0x11b7a6(0x202)){let _0x2897e8=_0xab78ec[_0x11b7a6(0x13a)](_0x95b382[_0x11b7a6(0x11b)]);_0x171885['hpDamage']>0x0&&(_0x2897e8+=_0x461d2a[_0x11b7a6(0x278)](_0x5340b1[_0x11b7a6(0x84d)])),_0x32c13d[_0x11b7a6(0x950)](_0x301ccd['VariableDmg'],_0x2897e8);}else _0x3a0020+=_0x4e8899[_0x11b7a6(0x91d)]()?-_0x57bd27:_0x57bd27,_0x560e15+=_0x4e8899[_0x11b7a6(0x91d)]()?-_0x503392:_0x503392;}else{if(_0xda7286[_0x11b7a6(0x265)](/horz/i))_0x3a0020+=_0x4e8899[_0x11b7a6(0x91d)]()?-_0x57bd27:_0x57bd27,_0x560e15+=_0x503392;else _0xda7286[_0x11b7a6(0x265)](/vert/i)&&(_0x3a0020+=_0x57bd27,_0x560e15+=_0x4e8899[_0x11b7a6(0x91d)]()?-_0x503392:_0x503392);}}_0x4e8899[_0x11b7a6(0xa44)](_0x3a0020,_0x560e15,_0x36828c,_0x40b9cc,_0x57ab25,_0x17ef76),_0x4e8899[_0x11b7a6(0x42a)](_0x5847db);}if(_0x49630b)_0x1e9f62[_0x11b7a6(0x992)]('battleMove');}),PluginManager['registerCommand'](pluginData[_0x3fd7af(0x504)],_0x3fd7af(0x2bc),_0x552b68=>{const _0x2eb627=_0x3fd7af;if(!SceneManager[_0x2eb627(0x970)]())return;VisuMZ[_0x2eb627(0x187)](_0x552b68,_0x552b68);const _0x368d88=$gameTemp[_0x2eb627(0x8be)](),_0x2c2cc6=VisuMZ['CreateActionSequenceTargets'](_0x552b68[_0x2eb627(0xc5)]),_0x1aef48=_0x552b68['Opacity'],_0x108db2=_0x552b68['Duration'],_0x457955=_0x552b68['EasingType'],_0x2b22bb=_0x552b68[_0x2eb627(0x758)];if(!_0x368d88)return;for(const _0x4604bb of _0x2c2cc6){if(!_0x4604bb)continue;_0x4604bb[_0x2eb627(0x8c6)](_0x1aef48,_0x108db2,_0x457955);}if(_0x2b22bb)_0x368d88[_0x2eb627(0x992)](_0x2eb627(0x76e));}),PluginManager['registerCommand'](pluginData[_0x3fd7af(0x504)],_0x3fd7af(0x9cd),_0x264743=>{const _0x375314=_0x3fd7af;if(!SceneManager[_0x375314(0x970)]())return;VisuMZ[_0x375314(0x187)](_0x264743,_0x264743);const _0x3e3148=$gameTemp['getLastPluginCommandInterpreter'](),_0x56265e=VisuMZ[_0x375314(0xa62)](_0x264743[_0x375314(0xc5)]),_0x533249=_0x264743[_0x375314(0x2b4)],_0x1fe6ab=_0x264743[_0x375314(0x8e5)],_0x239b09=_0x264743[_0x375314(0x200)],_0xa8273c=_0x264743[_0x375314(0x9f6)],_0x451e22=_0x264743[_0x375314(0x5e4)];if(!_0x3e3148)return;for(const _0x1dbf42 of _0x56265e){if(!_0x1dbf42)continue;_0x1dbf42[_0x375314(0xa92)](_0x533249,_0x1fe6ab,_0x239b09,_0xa8273c);}if(_0x451e22)_0x3e3148[_0x375314(0x992)](_0x375314(0x771));}),PluginManager[_0x3fd7af(0x95c)](pluginData[_0x3fd7af(0x504)],_0x3fd7af(0x6aa),_0x5ac211=>{const _0xb0e767=_0x3fd7af;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0xb0e767(0x187)](_0x5ac211,_0x5ac211);const _0x350e8a=$gameTemp[_0xb0e767(0x8be)](),_0xf2d293=VisuMZ[_0xb0e767(0xa62)](_0x5ac211[_0xb0e767(0xc5)]),_0x3cc849=_0x5ac211[_0xb0e767(0x7af)],_0x3c2617=_0x5ac211['SkewY'],_0x27815b=_0x5ac211[_0xb0e767(0x200)],_0x4600ef=_0x5ac211['EasingType'],_0x4fccc0=_0x5ac211[_0xb0e767(0x903)];if(!_0x350e8a)return;for(const _0x1c6848 of _0xf2d293){if('KBMku'!==_0xb0e767(0x1f3)){if(!_0x1c6848)continue;_0x1c6848[_0xb0e767(0x9c1)](_0x3cc849,_0x3c2617,_0x27815b,_0x4600ef);}else return this[_0xb0e767(0x84f)]();}if(_0x4fccc0)_0x350e8a[_0xb0e767(0x992)]('battleSpriteSkew');}),PluginManager['registerCommand'](pluginData[_0x3fd7af(0x504)],'ActSeq_Movement_Spin',_0x1dda68=>{const _0x2d72ac=_0x3fd7af;if(!SceneManager[_0x2d72ac(0x970)]())return;VisuMZ[_0x2d72ac(0x187)](_0x1dda68,_0x1dda68);const _0x54a51b=$gameTemp[_0x2d72ac(0x8be)](),_0x5a5a4d=VisuMZ[_0x2d72ac(0xa62)](_0x1dda68['Targets']),_0x5211e5=_0x1dda68[_0x2d72ac(0x462)],_0x1b99e9=_0x1dda68['Duration'],_0x153043=_0x1dda68[_0x2d72ac(0x9f6)],_0x1b7c97=_0x1dda68['RevertAngle'],_0x1aab22=_0x1dda68[_0x2d72ac(0xf8)];if(!_0x54a51b)return;for(const _0x54847e of _0x5a5a4d){if(!_0x54847e)continue;_0x54847e[_0x2d72ac(0x115)](_0x5211e5,_0x1b99e9,_0x153043,_0x1b7c97);}if(_0x1aab22)_0x54a51b[_0x2d72ac(0x992)](_0x2d72ac(0x158));}),PluginManager[_0x3fd7af(0x95c)](pluginData[_0x3fd7af(0x504)],_0x3fd7af(0x8f0),_0x57a64f=>{const _0x124e4a=_0x3fd7af;if(!SceneManager['isSceneBattle']())return;const _0x484c39=$gameTemp[_0x124e4a(0x8be)]();if(!_0x484c39)return;_0x484c39[_0x124e4a(0x992)](_0x124e4a(0xacb));}),PluginManager[_0x3fd7af(0x95c)](pluginData['name'],'ActSeq_Movement_WaitForJump',_0x33efb4=>{const _0x482bdb=_0x3fd7af;if(!SceneManager[_0x482bdb(0x970)]())return;const _0x34d893=$gameTemp['getLastPluginCommandInterpreter']();if(!_0x34d893)return;_0x34d893[_0x482bdb(0x992)](_0x482bdb(0x1ab));}),PluginManager[_0x3fd7af(0x95c)](pluginData['name'],_0x3fd7af(0x587),_0x2b020d=>{const _0x4a3afb=_0x3fd7af;if(!SceneManager['isSceneBattle']())return;const _0x10d683=$gameTemp[_0x4a3afb(0x8be)]();if(!_0x10d683)return;_0x10d683['setWaitMode'](_0x4a3afb(0x19d));}),PluginManager['registerCommand'](pluginData[_0x3fd7af(0x504)],_0x3fd7af(0x607),_0x5b9a33=>{const _0x4938b2=_0x3fd7af;if(!SceneManager[_0x4938b2(0x970)]())return;const _0x5d810e=$gameTemp[_0x4938b2(0x8be)]();if(!_0x5d810e)return;_0x5d810e[_0x4938b2(0x992)]('battleOpacity');}),PluginManager[_0x3fd7af(0x95c)](pluginData['name'],_0x3fd7af(0x9f4),_0x41d96f=>{const _0x2ab05e=_0x3fd7af;if(!SceneManager[_0x2ab05e(0x970)]())return;const _0x2064b5=$gameTemp[_0x2ab05e(0x8be)]();if(!_0x2064b5)return;_0x2064b5[_0x2ab05e(0x992)](_0x2ab05e(0x771));}),PluginManager[_0x3fd7af(0x95c)](pluginData[_0x3fd7af(0x504)],_0x3fd7af(0x87a),_0x33232b=>{const _0x41b0b4=_0x3fd7af;if(!SceneManager[_0x41b0b4(0x970)]())return;const _0x44df8d=$gameTemp[_0x41b0b4(0x8be)]();if(!_0x44df8d)return;_0x44df8d[_0x41b0b4(0x992)](_0x41b0b4(0x1cc));}),PluginManager[_0x3fd7af(0x95c)](pluginData[_0x3fd7af(0x504)],_0x3fd7af(0x882),_0x566aa7=>{const _0x52aa22=_0x3fd7af;if(!SceneManager['isSceneBattle']())return;const _0x129804=$gameTemp[_0x52aa22(0x8be)]();if(!_0x129804)return;_0x129804[_0x52aa22(0x992)](_0x52aa22(0x158));}),PluginManager[_0x3fd7af(0x95c)](pluginData[_0x3fd7af(0x504)],'ActSeq_Projectile_Animation',_0x338960=>{const _0x3305ed=_0x3fd7af;if(!SceneManager[_0x3305ed(0x970)]())return;if(!Imported[_0x3305ed(0xaca)])return;VisuMZ['ConvertParams'](_0x338960,_0x338960);const _0x3d2645=$gameTemp['getLastPluginCommandInterpreter'](),_0x4204f9=_0x338960['WaitForProjectile'];if(!_0x3d2645)return;const _0x426ae9=BattleManager[_0x3305ed(0x3b4)];if(!_0x426ae9)return;_0x426ae9[_0x3305ed(0x343)](_0x338960);if(_0x4204f9)_0x3d2645[_0x3305ed(0x992)](_0x3305ed(0x403));}),PluginManager['registerCommand'](pluginData['name'],'ActSeq_Projectile_Icon',_0x1a685e=>{const _0x3f3eb6=_0x3fd7af;if(!SceneManager[_0x3f3eb6(0x970)]())return;if(!Imported[_0x3f3eb6(0xaca)])return;VisuMZ[_0x3f3eb6(0x187)](_0x1a685e,_0x1a685e);const _0x50539b=$gameTemp[_0x3f3eb6(0x8be)](),_0x23a580=_0x1a685e[_0x3f3eb6(0x38c)];if(!_0x50539b)return;const _0x39ebeb=BattleManager[_0x3f3eb6(0x3b4)];if(!_0x39ebeb)return;_0x39ebeb[_0x3f3eb6(0x343)](_0x1a685e);if(_0x23a580)_0x50539b[_0x3f3eb6(0x992)](_0x3f3eb6(0x403));}),PluginManager[_0x3fd7af(0x95c)](pluginData[_0x3fd7af(0x504)],_0x3fd7af(0x86e),_0x24a689=>{const _0x114370=_0x3fd7af;if(!SceneManager[_0x114370(0x970)]())return;if(!Imported[_0x114370(0xaca)])return;VisuMZ[_0x114370(0x187)](_0x24a689,_0x24a689);const _0xb7bc0a=$gameTemp[_0x114370(0x8be)](),_0x27dc01=_0x24a689['WaitForProjectile'];if(!_0xb7bc0a)return;const _0x444c4e=BattleManager['_spriteset'];if(!_0x444c4e)return;_0x444c4e[_0x114370(0x343)](_0x24a689);if(_0x27dc01)_0xb7bc0a[_0x114370(0x992)](_0x114370(0x403));}),PluginManager[_0x3fd7af(0x95c)](pluginData[_0x3fd7af(0x504)],'ActSeq_ChangeSkew',_0x35b370=>{const _0x51cded=_0x3fd7af;if(!SceneManager[_0x51cded(0x970)]())return;if(!Imported[_0x51cded(0x8b2)])return;VisuMZ[_0x51cded(0x187)](_0x35b370,_0x35b370);const _0x13233b=$gameTemp[_0x51cded(0x8be)](),_0x3a7ac0=_0x35b370['WaitForSkew'];if(!_0x13233b)return;$gameScreen['setBattleSkew'](_0x35b370[_0x51cded(0x7af)],_0x35b370[_0x51cded(0xab3)],_0x35b370[_0x51cded(0x200)],_0x35b370[_0x51cded(0x9f6)]);if(_0x3a7ac0)_0x13233b['setWaitMode'](_0x51cded(0x7bf));}),PluginManager[_0x3fd7af(0x95c)](pluginData['name'],_0x3fd7af(0x6ba),_0x1250ac=>{const _0x383a66=_0x3fd7af;if(!SceneManager[_0x383a66(0x970)]())return;if(!Imported['VisuMZ_3_ActSeqCamera'])return;VisuMZ[_0x383a66(0x187)](_0x1250ac,_0x1250ac);const _0x323e43=$gameTemp[_0x383a66(0x8be)](),_0x23887d=_0x1250ac[_0x383a66(0x903)];if(!_0x323e43)return;$gameScreen[_0x383a66(0x57c)](0x0,0x0,_0x1250ac['Duration'],_0x1250ac[_0x383a66(0x9f6)]);if(_0x23887d)_0x323e43['setWaitMode'](_0x383a66(0x7bf));}),PluginManager['registerCommand'](pluginData[_0x3fd7af(0x504)],_0x3fd7af(0x853),_0x3942e6=>{const _0x2c6e15=_0x3fd7af;if(!SceneManager[_0x2c6e15(0x970)]())return;if(!Imported[_0x2c6e15(0x8b2)])return;const _0x4c313e=$gameTemp['getLastPluginCommandInterpreter']();if(!_0x4c313e)return;_0x4c313e['setWaitMode']('battleSkew');}),PluginManager['registerCommand'](pluginData['name'],'ActSeq_Target_CurrentIndex',_0x3c88a0=>{const _0x2ff152=_0x3fd7af;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x2ff152(0x187)](_0x3c88a0,_0x3c88a0);const _0x407cb2=$gameTemp[_0x2ff152(0x8be)](),_0xa75fba=_0x3c88a0[_0x2ff152(0x216)],_0xe77b76=_0x3c88a0['JumpToLabel'];if(!_0x407cb2)return;BattleManager[_0x2ff152(0x82a)]=_0xa75fba,BattleManager['_target']=BattleManager[_0x2ff152(0x232)]?BattleManager['_allTargets'][BattleManager[_0x2ff152(0x82a)]]||null:null,BattleManager[_0x2ff152(0xad1)]&&_0xe77b76[_0x2ff152(0x989)]()[_0x2ff152(0x306)]()!==_0x2ff152(0x656)&&_0x407cb2[_0x2ff152(0x9dd)]([_0xe77b76]);}),PluginManager[_0x3fd7af(0x95c)](pluginData[_0x3fd7af(0x504)],_0x3fd7af(0x7c9),_0x156bd5=>{const _0xa596d8=_0x3fd7af;if(!SceneManager[_0xa596d8(0x970)]())return;VisuMZ[_0xa596d8(0x187)](_0x156bd5,_0x156bd5);const _0x857d4d=$gameTemp[_0xa596d8(0x8be)](),_0x1fefbd=_0x156bd5[_0xa596d8(0x42f)];if(!_0x857d4d)return;BattleManager[_0xa596d8(0x82a)]++,BattleManager['_target']=BattleManager[_0xa596d8(0x232)][BattleManager['_targetIndex']]||null,BattleManager[_0xa596d8(0xad1)]&&_0x1fefbd[_0xa596d8(0x989)]()[_0xa596d8(0x306)]()!==_0xa596d8(0x656)&&_0x857d4d[_0xa596d8(0x9dd)]([_0x1fefbd]);}),PluginManager[_0x3fd7af(0x95c)](pluginData[_0x3fd7af(0x504)],_0x3fd7af(0x76b),_0x308a27=>{const _0x5cafa7=_0x3fd7af;if(!SceneManager[_0x5cafa7(0x970)]())return;VisuMZ['ConvertParams'](_0x308a27,_0x308a27);const _0x3f4247=$gameTemp['getLastPluginCommandInterpreter'](),_0x59e23a=_0x308a27[_0x5cafa7(0x42f)];if(!_0x3f4247)return;BattleManager[_0x5cafa7(0x82a)]--,BattleManager[_0x5cafa7(0xad1)]=BattleManager['_allTargets'][BattleManager[_0x5cafa7(0x82a)]]||null,BattleManager[_0x5cafa7(0xad1)]&&_0x59e23a[_0x5cafa7(0x989)]()['trim']()!=='UNTITLED'&&_0x3f4247['command119']([_0x59e23a]);}),PluginManager[_0x3fd7af(0x95c)](pluginData[_0x3fd7af(0x504)],_0x3fd7af(0x184),_0x2dedee=>{const _0x4159f9=_0x3fd7af;if(!SceneManager[_0x4159f9(0x970)]())return;VisuMZ['ConvertParams'](_0x2dedee,_0x2dedee);const _0x26837c=$gameTemp[_0x4159f9(0x8be)](),_0x565932=_0x2dedee['ForceRandom'],_0x2b932d=_0x2dedee['JumpToLabel'];if(!_0x26837c)return;const _0x1b59d6=BattleManager['_targetIndex'];for(;;){if(_0x4159f9(0x3b6)!=='UKDyf')this[_0x4159f9(0x18b)](_0x4159f9(0x16c),_0xbb4676);else{BattleManager[_0x4159f9(0x82a)]=Math['randomInt'](BattleManager['_allTargets'][_0x4159f9(0x732)]);if(!_0x565932)break;if(BattleManager[_0x4159f9(0x82a)]!==_0x1b59d6)break;if(BattleManager[_0x4159f9(0x232)][_0x4159f9(0x732)]<=0x1){BattleManager[_0x4159f9(0x82a)]=0x0;break;}}}BattleManager[_0x4159f9(0xad1)]=BattleManager['_allTargets'][BattleManager[_0x4159f9(0x82a)]]||null;if(BattleManager[_0x4159f9(0xad1)]&&_0x2b932d[_0x4159f9(0x989)]()[_0x4159f9(0x306)]()!==_0x4159f9(0x656)){if(_0x4159f9(0x5cf)==='HDyXg'){const _0x1182bf=_0x6d9edc(_0x57d562['$1'])['trim'](),_0x119a83=_0x16ff7e(_0x505c89['$2']);_0x472ddb[_0x1182bf]=_0x119a83,_0x4256e3+=_0x119a83;}else _0x26837c[_0x4159f9(0x9dd)]([_0x2b932d]);}}),PluginManager[_0x3fd7af(0x95c)](pluginData[_0x3fd7af(0x504)],_0x3fd7af(0xa86),_0x160cf5=>{const _0x5a7341=_0x3fd7af;if(!SceneManager[_0x5a7341(0x970)]())return;VisuMZ[_0x5a7341(0x187)](_0x160cf5,_0x160cf5);const _0x53fcbb=VisuMZ[_0x5a7341(0xa62)](_0x160cf5[_0x5a7341(0xc5)]);for(const _0x446784 of _0x53fcbb){if(!_0x446784)continue;if(!_0x446784[_0x5a7341(0x91d)]())continue;_0x446784[_0x5a7341(0x328)]();}}),PluginManager[_0x3fd7af(0x95c)](pluginData['name'],'ActSeq_Weapon_NextActiveWeapon',_0x12c339=>{const _0x45a74c=_0x3fd7af;if(!SceneManager['isSceneBattle']())return;VisuMZ['ConvertParams'](_0x12c339,_0x12c339);const _0x66311a=$gameTemp[_0x45a74c(0x8be)]();let _0x4ba077=![];const _0x5cd535=_0x12c339[_0x45a74c(0x42f)],_0x3e6f41=VisuMZ['CreateActionSequenceTargets'](_0x12c339['Targets']);for(const _0xeadb15 of _0x3e6f41){if(!_0xeadb15)continue;if(!_0xeadb15[_0x45a74c(0x91d)]())continue;_0xeadb15[_0x45a74c(0x222)](),_0xeadb15[_0x45a74c(0xae3)]()['length']>0x0?_0x4ba077=!![]:_0xeadb15[_0x45a74c(0x328)]();}_0x4ba077&&_0x5cd535[_0x45a74c(0x989)]()[_0x45a74c(0x306)]()!==_0x45a74c(0x656)&&_0x66311a[_0x45a74c(0x9dd)]([_0x5cd535]);}),PluginManager[_0x3fd7af(0x95c)](pluginData[_0x3fd7af(0x504)],'ActSeq_Weapon_SetActiveWeapon',_0x2c6c05=>{const _0x35838a=_0x3fd7af;if(!SceneManager['isSceneBattle']())return;VisuMZ['ConvertParams'](_0x2c6c05,_0x2c6c05);let _0x5b9812=_0x2c6c05[_0x35838a(0xa37)];_0x5b9812--,_0x5b9812=Math['max'](_0x5b9812,0x0);const _0xccfb96=VisuMZ[_0x35838a(0xa62)](_0x2c6c05[_0x35838a(0xc5)]);for(const _0x545ad7 of _0xccfb96){if(!_0x545ad7)continue;if(!_0x545ad7[_0x35838a(0x91d)]())continue;_0x545ad7['setActiveWeaponSlot'](_0x5b9812);}}),PluginManager[_0x3fd7af(0x95c)](pluginData[_0x3fd7af(0x504)],_0x3fd7af(0x737),_0x5b1b3b=>{const _0x3c9ebf=_0x3fd7af;if(!SceneManager[_0x3c9ebf(0x970)]())return;if(!Imported[_0x3c9ebf(0x8b2)])return;VisuMZ[_0x3c9ebf(0x187)](_0x5b1b3b,_0x5b1b3b);const _0x8f5699=$gameTemp[_0x3c9ebf(0x8be)](),_0x4aa824=_0x5b1b3b[_0x3c9ebf(0x162)];if(!_0x8f5699)return;$gameScreen[_0x3c9ebf(0x46f)](_0x5b1b3b[_0x3c9ebf(0x7d8)],_0x5b1b3b[_0x3c9ebf(0x200)],_0x5b1b3b['EasingType']);if(_0x4aa824)_0x8f5699['setWaitMode'](_0x3c9ebf(0x511));}),PluginManager['registerCommand'](pluginData[_0x3fd7af(0x504)],'ActSeq_Zoom_Reset',_0x2edda5=>{const _0xc52800=_0x3fd7af;if(!SceneManager[_0xc52800(0x970)]())return;if(!Imported['VisuMZ_3_ActSeqCamera'])return;VisuMZ[_0xc52800(0x187)](_0x2edda5,_0x2edda5);const _0x166560=$gameTemp[_0xc52800(0x8be)](),_0xb2562c=_0x2edda5['WaitForZoom'];if(!_0x166560)return;$gameScreen['setBattleZoom'](0x1,_0x2edda5['Duration'],_0x2edda5[_0xc52800(0x9f6)]);if(_0xb2562c)_0x166560['setWaitMode'](_0xc52800(0x511));}),PluginManager[_0x3fd7af(0x95c)](pluginData[_0x3fd7af(0x504)],_0x3fd7af(0x984),_0x461f8e=>{const _0x17e067=_0x3fd7af;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x17e067(0x8b2)])return;const _0x18ddc6=$gameTemp[_0x17e067(0x8be)]();if(!_0x18ddc6)return;_0x18ddc6[_0x17e067(0x992)](_0x17e067(0x511));}),VisuMZ[_0x3fd7af(0x941)][_0x3fd7af(0x166)]=Scene_Boot[_0x3fd7af(0x9fd)][_0x3fd7af(0x18e)],Scene_Boot['prototype']['onDatabaseLoaded']=function(){const _0x4665d4=_0x3fd7af;this['process_VisuMZ_BattleCore_Failsafes'](),this[_0x4665d4(0x1e1)](),this[_0x4665d4(0x916)](),this[_0x4665d4(0x1ae)](),VisuMZ[_0x4665d4(0x941)][_0x4665d4(0x166)][_0x4665d4(0x145)](this),this[_0x4665d4(0xa8e)](),this[_0x4665d4(0x1fe)](),this[_0x4665d4(0x1c0)](),this[_0x4665d4(0x2ee)]();},Scene_Boot[_0x3fd7af(0x9fd)][_0x3fd7af(0xa8e)]=function(){const _0x4649ba=_0x3fd7af;if(VisuMZ[_0x4649ba(0x5a1)])return;this[_0x4649ba(0x3f3)](),this['process_VisuMZ_BattleCore_TraitObject_Notetags'](),this['process_VisuMZ_BattleCore_jsFunctions']();},Scene_Boot['prototype'][_0x3fd7af(0xa94)]=function(){const _0x118d1e=_0x3fd7af,_0x4939a5=$dataSystem[_0x118d1e(0x6a2)][_0x118d1e(0x732)];for(let _0x5f18d9=0x0;_0x5f18d9<_0x4939a5;_0x5f18d9++){const _0x8ffcb2=$dataSystem['attackMotions'][_0x5f18d9];if(_0x8ffcb2)continue;$dataSystem['attackMotions'][_0x5f18d9]=JsonEx[_0x118d1e(0x4ad)]($dataSystem[_0x118d1e(0x3b0)][0x0]);}},Scene_Boot['prototype'][_0x3fd7af(0x1e1)]=function(){const _0x4f2443=_0x3fd7af,_0x126283=VisuMZ[_0x4f2443(0x941)]['Settings'];_0x126283['Damage'][_0x4f2443(0x12d)]===undefined&&(_0x126283[_0x4f2443(0x81f)][_0x4f2443(0x12d)]=_0x4f2443(0xf2));_0x126283[_0x4f2443(0x9de)]['SmoothImage']===undefined&&(_0x126283['Actor']['SmoothImage']=![]);if(_0x126283['Enemy']['SmoothImage']===undefined){if(_0x4f2443(0x87e)!==_0x4f2443(0x87e))for(const _0x55eac6 of _0x7efea7[_0x4f2443(0xfb)]){[0x6c,0x198]['includes'](_0x55eac6[_0x4f2443(0x205)])&&(_0x8cee5c+='\x0a',_0x60ae11+=_0x55eac6['parameters'][0x0]);}else _0x126283['Enemy'][_0x4f2443(0x267)]=!![];}_0x126283['Actor']['PrioritySortActive']===undefined&&(_0x4f2443(0xab1)===_0x4f2443(0x7b1)?_0x2b4ad6&&_0x4ac81d['update']():_0x126283['Actor'][_0x4f2443(0x23c)]=![]),_0x126283[_0x4f2443(0x9de)][_0x4f2443(0x43e)]===undefined&&(_0x126283[_0x4f2443(0x9de)][_0x4f2443(0x43e)]=!![]);},VisuMZ[_0x3fd7af(0x9b5)]={},Scene_Boot[_0x3fd7af(0x9fd)][_0x3fd7af(0x916)]=function(){const _0x70d40d=_0x3fd7af;for(const _0x2d1744 of VisuMZ['BattleCore']['Settings'][_0x70d40d(0x81f)][_0x70d40d(0x8e2)]){if(!_0x2d1744)continue;const _0x423248=_0x2d1744[_0x70d40d(0x3fe)]['toUpperCase']()[_0x70d40d(0x306)]();VisuMZ['DamageStyles'][_0x423248]=_0x2d1744;}},VisuMZ[_0x3fd7af(0x941)][_0x3fd7af(0x240)]={},Scene_Boot['prototype'][_0x3fd7af(0x1ae)]=function(){const _0x457921=_0x3fd7af,_0x273c07=VisuMZ[_0x457921(0x941)]['RegExp'],_0x20001c='<%1>\x5cs*([\x5cs\x5cS]*)\x5cs*<\x5c/%1>',_0x576d22=[['Pre',_0x457921(0x57d)],[_0x457921(0x5af),_0x457921(0x21a)]],_0x1acb12=[[_0x457921(0x5f8),_0x457921(0x1fb)],[_0x457921(0x885),_0x457921(0x3ea)]],_0x4677aa=[['',''],[_0x457921(0x9f3),_0x457921(0x4f4)],[_0x457921(0x37c),_0x457921(0x8d9)]];for(const _0x46ecae of _0x1acb12){for(const _0x3b0b67 of _0x4677aa){for(const _0x223c98 of _0x576d22){if('CeWda'==='CeWda'){const _0x1dd646=_0x46ecae[0x0]['format'](_0x223c98[0x0],_0x3b0b67[0x0]),_0x5dc639=_0x46ecae[0x1][_0x457921(0xab2)](_0x223c98[0x1],_0x3b0b67[0x1])[_0x457921(0x306)](),_0x5be614=new RegExp(_0x20001c[_0x457921(0xab2)](_0x5dc639),'i');_0x273c07[_0x1dd646]=_0x5be614;}else{if(this['battler']())this[_0x457921(0x181)]()[_0x457921(0x1f6)]();}}}}const _0x483cde=[[_0x457921(0x8fb),_0x457921(0x83f)],['%1EndActionJS',_0x457921(0x479)]];for(const _0x47c94b of _0x483cde){for(const _0x5e1e76 of _0x576d22){const _0x167994=_0x47c94b[0x0][_0x457921(0xab2)](_0x5e1e76[0x0]),_0x1aaaac=_0x47c94b[0x1][_0x457921(0xab2)](_0x5e1e76[0x1]),_0x53ae60=new RegExp(_0x20001c[_0x457921(0xab2)](_0x1aaaac),'i');_0x273c07[_0x167994]=_0x53ae60;}}const _0x6c6fa=[['%1StartBattleJS','JS\x20%1START\x20BATTLE'],['%1EndBattleJS',_0x457921(0x738)],[_0x457921(0x413),_0x457921(0x781)],[_0x457921(0x6c4),_0x457921(0xaa9)],[_0x457921(0x7b7),'JS\x20ESCAPE\x20SUCCESS'],['EscapeFailureJS',_0x457921(0x5c5)],['%1StartTurnJS',_0x457921(0x6ae)],['%1EndTurnJS','JS\x20%1END\x20TURN'],[_0x457921(0x1cd),'JS\x20%1REGENERATE']];for(const _0x4ff642 of _0x6c6fa){for(const _0x225df8 of _0x576d22){if('dSxLI'!==_0x457921(0x8a5)){const _0x37278a=_0x4ff642[0x0][_0x457921(0xab2)](_0x225df8[0x0]),_0x508fbb=_0x4ff642[0x1][_0x457921(0xab2)](_0x225df8[0x1]),_0x4469dd=new RegExp(_0x20001c[_0x457921(0xab2)](_0x508fbb),'i');_0x273c07[_0x37278a]=_0x4469dd;}else{const _0x32a1d1=_0x410aa3[_0x457921(0x760)](_0x47d5fa['toUpperCase']()[_0x457921(0x306)]());_0x32a1d1>=0x0&&_0x32a1d1<=0x7&&_0x2b1730[_0x457921(0x185)](_0x32a1d1,_0x1b2f82);}}}},Scene_Boot[_0x3fd7af(0x9fd)][_0x3fd7af(0x3f3)]=function(){const _0x19ed14=_0x3fd7af,_0x11fc2f=$dataSkills[_0x19ed14(0x795)]($dataItems);for(const _0x549645 of _0x11fc2f){if(!_0x549645)continue;VisuMZ['BattleCore'][_0x19ed14(0x5c6)](_0x549645);}},Scene_Boot[_0x3fd7af(0x9fd)][_0x3fd7af(0x4e9)]=function(){const _0x145d5f=_0x3fd7af,_0x32d59f=$dataActors[_0x145d5f(0x795)]($dataClasses,$dataWeapons,$dataArmors,$dataEnemies,$dataStates);for(const _0x4e409c of _0x32d59f){if(!_0x4e409c)continue;VisuMZ[_0x145d5f(0x941)][_0x145d5f(0x108)](_0x4e409c);}},Scene_Boot[_0x3fd7af(0x9fd)][_0x3fd7af(0x1fe)]=function(){const _0xfae6bc=_0x3fd7af,_0x476192=VisuMZ[_0xfae6bc(0x941)][_0xfae6bc(0xa6b)][_0xfae6bc(0x9fe)][_0xfae6bc(0x484)],_0x5a602e=[];for(const _0x4a6b37 of _0x476192){const _0xce8b44=$dataTroops[_0x4a6b37];if(_0xce8b44)_0x5a602e[_0xfae6bc(0x18b)](JsonEx[_0xfae6bc(0x4ad)](_0xce8b44));}for(const _0xbeac0e of $dataTroops){if(_0xfae6bc(0x953)!==_0xfae6bc(0x953))_0x32ac72+=_0x524b22[_0xfae6bc(0x91d)]()?-_0x4f415d:_0x1500e6,_0xc254fd+=_0x1a0c90;else{if(!_0xbeac0e)continue;for(const _0x6d82f4 of _0x5a602e){if(_0xfae6bc(0x5b2)===_0xfae6bc(0x5b2)){if(_0x6d82f4['id']===_0xbeac0e['id'])continue;_0xbeac0e[_0xfae6bc(0x2c1)]=_0xbeac0e['pages'][_0xfae6bc(0x795)](_0x6d82f4['pages']);}else this[_0xfae6bc(0x709)](...arguments);}}}},Scene_Boot['prototype']['process_VisuMZ_BattleCore_PreBattleCommonEvent']=function(){const _0x23cfd0=_0x3fd7af,_0x2d254a=VisuMZ[_0x23cfd0(0x941)][_0x23cfd0(0xa6b)][_0x23cfd0(0x9fe)];if(_0x2d254a['BattleStartEvent']>0x0&&$dataCommonEvents[_0x2d254a[_0x23cfd0(0x4f3)]]){if(_0x23cfd0(0xacc)==='ZaAJZ'){const _0x27282a=$dataCommonEvents[_0x2d254a[_0x23cfd0(0x4f3)]],_0x2bab3b=_0x27282a[_0x23cfd0(0xfb)]['length']-0x2,_0x3d5f52=_0x27282a[_0x23cfd0(0xfb)][_0x2bab3b];if(_0x3d5f52&&_0x3d5f52[_0x23cfd0(0x205)]!==0xe6){const _0x316cfd={'code':0xe6,'indent':0x0,'parameters':[0x1]},_0x580bf3=_0x27282a[_0x23cfd0(0xfb)][_0x23cfd0(0x946)]();_0x27282a[_0x23cfd0(0xfb)][_0x23cfd0(0x7a6)](_0x316cfd),_0x27282a[_0x23cfd0(0xfb)]['unshift'](_0x580bf3);}}else _0x3a3a35[_0x23cfd0(0x470)][_0x23cfd0(0x8b0)]()['gainCurrentActionsFTB'](_0x58a039);}},Scene_Boot[_0x3fd7af(0x9fd)][_0x3fd7af(0x2ee)]=function(){const _0x394903=_0x3fd7af;VisuMZ[_0x394903(0x941)][_0x394903(0x3b5)](),VisuMZ[_0x394903(0x941)][_0x394903(0x4d1)]($dataSkills),VisuMZ[_0x394903(0x941)][_0x394903(0x4d1)]($dataItems);},VisuMZ[_0x3fd7af(0x941)][_0x3fd7af(0x3b5)]=function(){const _0x301345=_0x3fd7af;VisuMZ[_0x301345(0x941)]['_commonEventKey']={};for(const _0x4a1349 of $dataCommonEvents){if(!_0x4a1349)continue;if(_0x4a1349[_0x301345(0x504)][_0x301345(0x265)](/\[(.*)\]/i)){if(_0x301345(0x177)!=='OaZnZ')this[_0x301345(0x94a)]=!this['_enemy'][_0x301345(0x9cb)](),!this[_0x301345(0x94a)]&&(this['opacity']=0x0);else{let _0x58182b=String(RegExp['$1'])[_0x301345(0x256)](/,/g,'')[_0x301345(0x989)]()['trim']();VisuMZ[_0x301345(0x941)]['_commonEventKey'][_0x58182b]=_0x4a1349['id'];}}}},VisuMZ[_0x3fd7af(0x941)][_0x3fd7af(0x4d1)]=function(_0x1cff31){const _0x389d36=_0x3fd7af;for(const _0x2170de of _0x1cff31){if(_0x389d36(0x71f)==='GaqMH')_0x3615e5[_0x389d36(0x97f)]([this],_0x2601ca,!!_0x3565fd);else{if(!_0x2170de)continue;VisuMZ[_0x389d36(0x941)][_0x389d36(0xa7a)](_0x2170de);}}},VisuMZ[_0x3fd7af(0x941)][_0x3fd7af(0xa7a)]=function(_0x39ef22){const _0x48b27f=_0x3fd7af;if(!_0x39ef22)return;if(!_0x39ef22[_0x48b27f(0x6ee)])return;VisuMZ[_0x48b27f(0x941)][_0x48b27f(0xab7)]=VisuMZ['BattleCore'][_0x48b27f(0xab7)]||{};const _0x47a7c4=/<COMMON EVENT (?:KEY|KEYS):[ ](.*)>/gi,_0x5413d8=/<COMMON EVENT (?:KEY|KEYS)>\s*([\s\S]*)\s*<\/COMMON EVENT (?:KEY|KEYS)>/i;let _0x50c727=[];const _0x3296f9=_0x39ef22[_0x48b27f(0x7b9)][_0x48b27f(0x265)](_0x47a7c4);if(_0x3296f9){for(const _0x488c07 of _0x3296f9){if(_0x48b27f(0x497)===_0x48b27f(0x268)){const _0x394117=this[_0x48b27f(0x6dd)]['bitmap'];_0x394117&&(this['bitmap']=new _0x991d5f(_0x394117['width'],_0x394117[_0x48b27f(0x26a)]));}else{_0x488c07['match'](_0x47a7c4);const _0xd486cb=String(RegExp['$1'])[_0x48b27f(0xaa3)](',')[_0x48b27f(0x826)](_0x39625e=>String(_0x39625e)['toUpperCase']()[_0x48b27f(0x306)]());_0x50c727=_0x50c727['concat'](_0xd486cb);}}if(!_0x39ef22[_0x48b27f(0x7b9)][_0x48b27f(0x265)](/<CUSTOM ACTION SEQUENCE>/i)){if(_0x48b27f(0x58d)!=='kZlHs'){if(!_0x38321e['VisuMZ_3_ActSeqImpact'])return;const _0x5a968c=_0x5a10bd[_0x48b27f(0x450)][_0x48b27f(0x3b4)];if(!_0x5a968c)return;_0xe5f48c[_0x48b27f(0x187)](_0x451b87,_0x1ca46);const _0x3dddcc=_0x2cfb11['X']||0x0,_0xe2c956=_0x8d95de['Y']||0x0,_0x3cccbd=_0x2c19af['Strength']||0x0,_0x45095d=_0x5e4068[_0x48b27f(0x32c)]||0x0,_0x3d4882=_0x10d555[_0x48b27f(0x200)]||0x1,_0x5f4d1f=_0x3d2ee6[_0x48b27f(0x9f6)]||'Linear';_0x5a968c['setupZoomBlurImpactFilter'](_0x3cccbd,_0x3dddcc,_0xe2c956,_0x45095d,_0x3d4882,_0x5f4d1f);}else _0x39ef22[_0x48b27f(0x7b9)]+='<CUSTOM\x20ACTION\x20SEQUENCE>';};}if(_0x39ef22[_0x48b27f(0x7b9)][_0x48b27f(0x265)](_0x5413d8)){const _0x560c20=String(RegExp['$1'])['split'](/[\r\n]+/)[_0x48b27f(0x826)](_0x37f687=>String(_0x37f687)[_0x48b27f(0x989)]()['trim']());_0x50c727=_0x50c727[_0x48b27f(0x795)](_0x560c20);!_0x39ef22[_0x48b27f(0x7b9)]['match'](/<CUSTOM ACTION SEQUENCE>/i)&&(_0x39ef22[_0x48b27f(0x7b9)]+='<CUSTOM\x20ACTION\x20SEQUENCE>');;}for(const _0xf3fec3 of _0x50c727){if(VisuMZ[_0x48b27f(0x941)][_0x48b27f(0xab7)][_0xf3fec3]){if(_0x48b27f(0x848)!==_0x48b27f(0x848))this[_0x48b27f(0x42a)](_0x48b27f(0x972));else{const _0x44e571=VisuMZ['BattleCore']['_commonEventKey'][_0xf3fec3],_0x535448={'code':0x2c,'dataId':_0x44e571,'value1':0x1,'value2':0x0};_0x39ef22['effects'][_0x48b27f(0x18b)](_0x535448);}}}},Scene_Boot['prototype'][_0x3fd7af(0x598)]=function(){const _0x312414=_0x3fd7af,_0x35cb2a=$dataSkills[_0x312414(0x795)]($dataItems);for(const _0x51a130 of _0x35cb2a){if(!_0x51a130)continue;VisuMZ[_0x312414(0x941)][_0x312414(0x167)](_0x51a130);}},VisuMZ[_0x3fd7af(0x941)][_0x3fd7af(0x3e8)]=VisuMZ[_0x3fd7af(0x3e8)],VisuMZ[_0x3fd7af(0x3e8)]=function(_0x311422){const _0x25c9b9=_0x3fd7af;VisuMZ[_0x25c9b9(0x941)][_0x25c9b9(0x3e8)]&&(_0x25c9b9(0x742)!=='LuByx'?VisuMZ[_0x25c9b9(0x941)][_0x25c9b9(0x3e8)][_0x25c9b9(0x145)](this,_0x311422):this['selectNextActor']()),VisuMZ['BattleCore']['Parse_Notetags_TraitObjects'](_0x311422);},VisuMZ['BattleCore'][_0x3fd7af(0x34c)]=VisuMZ['ParseClassNotetags'],VisuMZ['ParseClassNotetags']=function(_0x648e55){const _0x97e9ae=_0x3fd7af;if(VisuMZ[_0x97e9ae(0x941)][_0x97e9ae(0x34c)]){if(_0x97e9ae(0x442)==='qrqfE')VisuMZ[_0x97e9ae(0x941)]['ParseClassNotetags'][_0x97e9ae(0x145)](this,_0x648e55);else{if(!this[_0x97e9ae(0x5ee)])return;if(!_0x3a54bc)return;this[_0x97e9ae(0x5ee)][_0x97e9ae(0x5f7)](_0x5be967);}}VisuMZ[_0x97e9ae(0x941)]['Parse_Notetags_TraitObjects'](_0x648e55);},VisuMZ[_0x3fd7af(0x941)][_0x3fd7af(0x603)]=VisuMZ[_0x3fd7af(0x603)],VisuMZ[_0x3fd7af(0x603)]=function(_0x1d479b){const _0x5656ad=_0x3fd7af;VisuMZ['BattleCore'][_0x5656ad(0x603)]&&VisuMZ[_0x5656ad(0x941)][_0x5656ad(0x603)][_0x5656ad(0x145)](this,_0x1d479b),VisuMZ[_0x5656ad(0x941)][_0x5656ad(0x5c6)](_0x1d479b),VisuMZ['BattleCore'][_0x5656ad(0x167)](_0x1d479b);},VisuMZ[_0x3fd7af(0x941)][_0x3fd7af(0x472)]=VisuMZ[_0x3fd7af(0x472)],VisuMZ['ParseItemNotetags']=function(_0x23e0e5){const _0x467980=_0x3fd7af;VisuMZ['BattleCore'][_0x467980(0x472)]&&VisuMZ[_0x467980(0x941)][_0x467980(0x472)][_0x467980(0x145)](this,_0x23e0e5),VisuMZ[_0x467980(0x941)]['Parse_Notetags_Action'](_0x23e0e5),VisuMZ[_0x467980(0x941)][_0x467980(0x167)](_0x23e0e5);},VisuMZ[_0x3fd7af(0x941)][_0x3fd7af(0x8b8)]=VisuMZ[_0x3fd7af(0x8b8)],VisuMZ[_0x3fd7af(0x8b8)]=function(_0xa52481){const _0x229d12=_0x3fd7af;VisuMZ[_0x229d12(0x941)]['ParseWeaponNotetags']&&VisuMZ[_0x229d12(0x941)][_0x229d12(0x8b8)]['call'](this,_0xa52481),VisuMZ[_0x229d12(0x941)]['Parse_Notetags_TraitObjects'](_0xa52481);},VisuMZ[_0x3fd7af(0x941)]['ParseArmorNotetags']=VisuMZ[_0x3fd7af(0x80f)],VisuMZ[_0x3fd7af(0x80f)]=function(_0x16733f){const _0x1f32b1=_0x3fd7af;VisuMZ['BattleCore'][_0x1f32b1(0x80f)]&&(_0x1f32b1(0x35a)===_0x1f32b1(0x35a)?VisuMZ[_0x1f32b1(0x941)][_0x1f32b1(0x80f)][_0x1f32b1(0x145)](this,_0x16733f):_0x4626cf['performAttack']()),VisuMZ[_0x1f32b1(0x941)][_0x1f32b1(0x108)](_0x16733f);},VisuMZ['BattleCore'][_0x3fd7af(0x63c)]=VisuMZ[_0x3fd7af(0x63c)],VisuMZ[_0x3fd7af(0x63c)]=function(_0x3430bd){const _0xb97e44=_0x3fd7af;VisuMZ[_0xb97e44(0x941)][_0xb97e44(0x63c)]&&VisuMZ[_0xb97e44(0x941)][_0xb97e44(0x63c)][_0xb97e44(0x145)](this,_0x3430bd),VisuMZ[_0xb97e44(0x941)][_0xb97e44(0x108)](_0x3430bd);},VisuMZ[_0x3fd7af(0x941)]['ParseStateNotetags']=VisuMZ[_0x3fd7af(0xe3)],VisuMZ[_0x3fd7af(0xe3)]=function(_0x35925d){const _0x271bb3=_0x3fd7af;VisuMZ[_0x271bb3(0x941)][_0x271bb3(0xe3)]&&VisuMZ[_0x271bb3(0x941)][_0x271bb3(0xe3)]['call'](this,_0x35925d),VisuMZ[_0x271bb3(0x941)]['Parse_Notetags_TraitObjects'](_0x35925d);},VisuMZ[_0x3fd7af(0x941)][_0x3fd7af(0x5c6)]=function(_0x109ad6){const _0x47799b=_0x3fd7af,_0x2aec1b=[_0x47799b(0x89c),_0x47799b(0x900),_0x47799b(0x65d),'PostDamageJS',_0x47799b(0x9ae),_0x47799b(0x582),_0x47799b(0x30c),_0x47799b(0x1f0)];for(const _0x50fc6c of _0x2aec1b){'dpPwC'!==_0x47799b(0x262)?VisuMZ[_0x47799b(0x941)][_0x47799b(0x415)](_0x109ad6,_0x50fc6c):(this[_0x47799b(0xa80)]=![],this['_autoBattle']=_0x93a22f[_0x47799b(0x667)],this[_0x47799b(0xa39)](_0x47799b(0x94f)),_0x399a53[_0x47799b(0x941)][_0x47799b(0x496)][_0x47799b(0x145)](this),this['processBattleCoreJS']('PostStartBattleJS'));}const _0x23e581=_0x109ad6[_0x47799b(0x7b9)];_0x23e581[_0x47799b(0x265)](/<ALWAYS CRITICAL/i)&&(_0x109ad6[_0x47799b(0xa59)][_0x47799b(0xa77)]=!![]);_0x23e581[_0x47799b(0x265)](/<(?:REPEAT|REPEATS|REPEAT HITS):[ ](\d+)/i)&&(_0x47799b(0x8ca)!==_0x47799b(0x549)?_0x109ad6[_0x47799b(0x5fe)]=Math[_0x47799b(0x305)](0x1,Number(RegExp['$1'])):(_0x21e1e1[_0x47799b(0x941)]['Game_Party_removeActor'][_0x47799b(0x145)](this,_0x2d122b),_0x441930['refreshStatusWindow']()));if(_0x23e581[_0x47799b(0x265)](/<TARGET:[ ](.*)>/i)){if(_0x47799b(0x86a)===_0x47799b(0x86a))_0x109ad6['scope']=String(RegExp['$1'])['toUpperCase']()[_0x47799b(0x306)]();else return _0x1cdba9[_0x47799b(0x941)]['Game_Action_needsSelection'][_0x47799b(0x145)](this);}},VisuMZ['BattleCore'][_0x3fd7af(0x108)]=function(_0x118a80){const _0x2377e4=_0x3fd7af,_0x3a8b4d=['PreApplyAsUserJS',_0x2377e4(0x547),'PreDamageAsUserJS','PostDamageAsUserJS','PreApplyAsTargetJS',_0x2377e4(0x1bd),'PreDamageAsTargetJS',_0x2377e4(0x590),_0x2377e4(0x9ae),_0x2377e4(0x582),_0x2377e4(0x30c),_0x2377e4(0x1f0),_0x2377e4(0x94f),_0x2377e4(0x600),_0x2377e4(0x4c4),_0x2377e4(0x5c3),_0x2377e4(0x413),_0x2377e4(0x6c4),_0x2377e4(0x7b7),'EscapeFailureJS',_0x2377e4(0x8cf),_0x2377e4(0x16b),_0x2377e4(0x580),_0x2377e4(0x71e),_0x2377e4(0x880),'PostRegenerateJS'];for(const _0x4f6cea of _0x3a8b4d){VisuMZ[_0x2377e4(0x941)]['createJS'](_0x118a80,_0x4f6cea);}},VisuMZ['BattleCore'][_0x3fd7af(0x167)]=function(_0x2d75d5){const _0x41c9f6=_0x3fd7af,_0x205808=_0x2d75d5['note'];if(_0x205808[_0x41c9f6(0x265)](/<JS TARGETS>\s*([\s\S]*)\s*<\/JS TARGETS>/i)){const _0x38895b=String(RegExp['$1']),_0x47b37e=VisuMZ[_0x41c9f6(0x941)][_0x41c9f6(0xd2)](_0x2d75d5,_0x41c9f6(0xc5));VisuMZ['BattleCore'][_0x41c9f6(0x94e)](_0x38895b,_0x47b37e);}if(_0x205808[_0x41c9f6(0x265)](/<JS COMMAND (?:VISIBLE|SHOW|HIDE)>\s*([\s\S]*)\s*<\/JS COMMAND (?:VISIBLE|SHOW|HIDE)>/i)){const _0x25b78e=String(RegExp['$1']),_0xc4e3b2=VisuMZ['BattleCore'][_0x41c9f6(0xd2)](_0x2d75d5,'CommandVisible');VisuMZ[_0x41c9f6(0x941)]['createCommandVisibleJS'](_0x25b78e,_0xc4e3b2);}},VisuMZ['BattleCore']['JS']={},VisuMZ[_0x3fd7af(0x941)][_0x3fd7af(0x415)]=function(_0x28fffa,_0xa20033){const _0x18af82=_0x3fd7af,_0x46740d=_0x28fffa[_0x18af82(0x7b9)];if(_0x46740d[_0x18af82(0x265)](VisuMZ['BattleCore'][_0x18af82(0x240)][_0xa20033])){const _0x792954=RegExp['$1'],_0x30e39d=_0x18af82(0x2ba)['format'](_0x792954),_0x44c78f=VisuMZ[_0x18af82(0x941)][_0x18af82(0xd2)](_0x28fffa,_0xa20033);VisuMZ[_0x18af82(0x941)]['JS'][_0x44c78f]=new Function(_0x30e39d);}},VisuMZ[_0x3fd7af(0x941)][_0x3fd7af(0xd2)]=function(_0x5bde67,_0x2ec7ca){const _0x521015=_0x3fd7af;let _0x51602d='';if($dataActors[_0x521015(0x402)](_0x5bde67))_0x51602d=_0x521015(0x54f)[_0x521015(0xab2)](_0x5bde67['id'],_0x2ec7ca);if($dataClasses[_0x521015(0x402)](_0x5bde67))_0x51602d=_0x521015(0xa88)[_0x521015(0xab2)](_0x5bde67['id'],_0x2ec7ca);if($dataSkills['includes'](_0x5bde67))_0x51602d='Skill-%1-%2'['format'](_0x5bde67['id'],_0x2ec7ca);if($dataItems[_0x521015(0x402)](_0x5bde67))_0x51602d='Item-%1-%2'['format'](_0x5bde67['id'],_0x2ec7ca);if($dataWeapons[_0x521015(0x402)](_0x5bde67))_0x51602d=_0x521015(0x244)[_0x521015(0xab2)](_0x5bde67['id'],_0x2ec7ca);if($dataArmors['includes'](_0x5bde67))_0x51602d=_0x521015(0xa5f)[_0x521015(0xab2)](_0x5bde67['id'],_0x2ec7ca);if($dataEnemies['includes'](_0x5bde67))_0x51602d='Enemy-%1-%2'[_0x521015(0xab2)](_0x5bde67['id'],_0x2ec7ca);if($dataStates[_0x521015(0x402)](_0x5bde67))_0x51602d=_0x521015(0x19a)[_0x521015(0xab2)](_0x5bde67['id'],_0x2ec7ca);return _0x51602d;},VisuMZ['BattleCore'][_0x3fd7af(0x94e)]=function(_0x1ded2a,_0x5da555){const _0x4e3e60=_0x3fd7af,_0x572429=_0x4e3e60(0x3dd)[_0x4e3e60(0xab2)](_0x1ded2a);VisuMZ[_0x4e3e60(0x941)]['JS'][_0x5da555]=new Function(_0x572429);},VisuMZ[_0x3fd7af(0x941)][_0x3fd7af(0x5d7)]=function(_0x36bfc7,_0x4a78a2){const _0x2cb46e=_0x3fd7af,_0x314b14='\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Declare\x20Arguments\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20user\x20=\x20arguments[0];\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20skill\x20=\x20arguments[1];\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20a\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20b\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20let\x20visible\x20=\x20true;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Process\x20Code\x0a\x20\x20\x20\x20\x20\x20\x20\x20try\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20%1\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x20catch\x20(e)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20($gameTemp.isPlaytest())\x20console.log(e);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Return\x20Value\x0a\x20\x20\x20\x20\x20\x20\x20\x20return\x20visible;\x0a\x20\x20\x20\x20'[_0x2cb46e(0xab2)](_0x36bfc7);VisuMZ[_0x2cb46e(0x941)]['JS'][_0x4a78a2]=new Function(_0x314b14);},TextManager[_0x3fd7af(0x428)]=VisuMZ['BattleCore'][_0x3fd7af(0xa6b)]['PartyCmd'][_0x3fd7af(0x832)],TextManager[_0x3fd7af(0x6fa)]=VisuMZ[_0x3fd7af(0x941)]['Settings'][_0x3fd7af(0x79a)][_0x3fd7af(0x2af)],TextManager[_0x3fd7af(0x423)]=VisuMZ[_0x3fd7af(0x941)][_0x3fd7af(0xa6b)][_0x3fd7af(0x79a)][_0x3fd7af(0x791)],TextManager[_0x3fd7af(0x18d)]=VisuMZ['BattleCore'][_0x3fd7af(0xa6b)][_0x3fd7af(0x7fe)]['Name'],ColorManager['getColor']=function(_0xab998b){const _0x2acc04=_0x3fd7af;return _0xab998b=String(_0xab998b),_0xab998b[_0x2acc04(0x265)](/#(.*)/i)?_0x2acc04(0x73b)['format'](String(RegExp['$1'])):this[_0x2acc04(0xaab)](Number(_0xab998b));},DataManager[_0x3fd7af(0x1c1)]=function(_0x575db4){const _0x13d4f9=_0x3fd7af;if(_0x575db4[_0x13d4f9(0x7b9)]['match'](/<DAMAGE STYLE:[ ](.*)>/i)){const _0x4e18ed=String(RegExp['$1'])[_0x13d4f9(0x989)]()[_0x13d4f9(0x306)]();if(_0x4e18ed===_0x13d4f9(0x623))return _0x13d4f9(0x623);if(VisuMZ[_0x13d4f9(0x9b5)][_0x4e18ed])return _0x4e18ed;}const _0x592d74=VisuMZ[_0x13d4f9(0x941)][_0x13d4f9(0xa6b)][_0x13d4f9(0x81f)][_0x13d4f9(0x2b1)][_0x13d4f9(0x989)]()['trim']();if(VisuMZ[_0x13d4f9(0x9b5)][_0x592d74])return _0x592d74;return _0x13d4f9(0x623);},DataManager[_0x3fd7af(0x2c3)]=function(_0x1a7b2c){const _0x57293c=_0x3fd7af;_0x1a7b2c=_0x1a7b2c['toUpperCase']()[_0x57293c(0x306)](),this['_stypeIDs']=this[_0x57293c(0x346)]||{};if(this[_0x57293c(0x346)][_0x1a7b2c])return this[_0x57293c(0x346)][_0x1a7b2c];for(let _0x475f0d=0x1;_0x475f0d<0x64;_0x475f0d++){if(!$dataSystem[_0x57293c(0x376)][_0x475f0d])continue;let _0x146093=$dataSystem[_0x57293c(0x376)][_0x475f0d]['toUpperCase']()[_0x57293c(0x306)]();_0x146093=_0x146093[_0x57293c(0x256)](/\x1I\[(\d+)\]/gi,''),_0x146093=_0x146093[_0x57293c(0x256)](/\\I\[(\d+)\]/gi,''),this['_stypeIDs'][_0x146093]=_0x475f0d;}return this['_stypeIDs'][_0x1a7b2c]||0x0;},DataManager[_0x3fd7af(0x3c6)]=function(_0x306e17){const _0x1a9b48=_0x3fd7af;_0x306e17=_0x306e17[_0x1a9b48(0x989)]()['trim'](),this[_0x1a9b48(0x383)]=this[_0x1a9b48(0x383)]||{};if(this[_0x1a9b48(0x383)][_0x306e17])return this['_skillIDs'][_0x306e17];for(const _0x6308ea of $dataSkills){if(!_0x6308ea)continue;this[_0x1a9b48(0x383)][_0x6308ea[_0x1a9b48(0x504)]['toUpperCase']()[_0x1a9b48(0x306)]()]=_0x6308ea['id'];}return this[_0x1a9b48(0x383)][_0x306e17]||0x0;},DataManager[_0x3fd7af(0x79f)]=function(_0x5581d4){const _0x2f404a=_0x3fd7af;_0x5581d4=_0x5581d4[_0x2f404a(0x989)]()[_0x2f404a(0x306)](),this[_0x2f404a(0x17d)]=this[_0x2f404a(0x17d)]||{};if(this['_enemyIDs'][_0x5581d4])return this[_0x2f404a(0x17d)][_0x5581d4];for(const _0x64a077 of $dataEnemies){if(!_0x64a077)continue;this[_0x2f404a(0x17d)][_0x64a077[_0x2f404a(0x504)]['toUpperCase']()[_0x2f404a(0x306)]()]=_0x64a077['id'];}return this['_enemyIDs'][_0x5581d4]||0x0;},DataManager['getWtypeIdWithName']=function(_0x59088c){const _0x2531a8=_0x3fd7af;_0x59088c=_0x59088c[_0x2531a8(0x989)]()[_0x2531a8(0x306)](),this[_0x2531a8(0x2f3)]=this[_0x2531a8(0x2f3)]||{};if(this['_wtypeIDs'][_0x59088c])return this[_0x2531a8(0x2f3)][_0x59088c];for(let _0x18635d=0x1;_0x18635d<0x64;_0x18635d++){if(!$dataSystem[_0x2531a8(0x6a2)][_0x18635d])continue;let _0x4d4465=$dataSystem['weaponTypes'][_0x18635d][_0x2531a8(0x989)]()[_0x2531a8(0x306)]();_0x4d4465=_0x4d4465[_0x2531a8(0x256)](/\x1I\[(\d+)\]/gi,''),_0x4d4465=_0x4d4465['replace'](/\\I\[(\d+)\]/gi,''),this[_0x2531a8(0x2f3)][_0x4d4465]=_0x18635d;}return this[_0x2531a8(0x2f3)]['BARE\x20HANDS']=0x0,this['_wtypeIDs'][_0x59088c]||0x0;},DataManager[_0x3fd7af(0x58e)]=function(_0x47bf08){const _0x3f94cd=_0x3fd7af,_0x5cff8a=_0x3f94cd(0x80e);let _0x396483=_0x47bf08[_0x3f94cd(0x381)],_0x212259=_0x47bf08[_0x3f94cd(0x504)];const _0x19e8a0=_0x47bf08['note'];return _0x19e8a0[_0x3f94cd(0x265)](/<DISPLAY ICON: (\d+)>/i)&&(_0x396483=Number(RegExp['$1'])),_0x19e8a0[_0x3f94cd(0x265)](/<DISPLAY TEXT: (.*)>/i)&&(_0x212259=String(RegExp['$1'])),_0x5cff8a['format'](_0x396483,_0x212259);},DataManager['battleCommandName']=function(_0x47e95f){const _0x50be9a=_0x3fd7af;return _0x47e95f[_0x50be9a(0x7b9)][_0x50be9a(0x265)](/<COMMAND TEXT: (.*)>/i)?String(RegExp['$1']):_0x47e95f[_0x50be9a(0x504)];},DataManager['battleCommandIcon']=function(_0x52b164){const _0x33c1c0=_0x3fd7af;if(_0x52b164[_0x33c1c0(0x7b9)][_0x33c1c0(0x265)](/<COMMAND ICON: (\d+)>/i))return Number(RegExp['$1']);else{if('azXrB'==='NBOSB')_0xeb5c2d[_0x33c1c0(0x807)](),_0x45e6bd['addState'](_0x12241e[_0x33c1c0(0x588)]());else return _0x52b164[_0x33c1c0(0x381)];}},DataManager['swapEnemyIDs']=function(_0xe2be88){const _0x1e1b61=_0x3fd7af,_0x33d95d=$dataEnemies[_0xe2be88];if(_0x33d95d){if(_0x33d95d[_0x1e1b61(0x7b9)][_0x1e1b61(0x265)](/<SWAP ENEMIES>\s*([\s\S]*)\s*<\/SWAP ENEMIES>/i)){const _0x1bf3c3=String(RegExp['$1'])['split'](/[\r\n]+/)[_0x1e1b61(0x861)](''),_0x119e96=this['processRandomizedData'](_0x1bf3c3);_0xe2be88=this[_0x1e1b61(0x79f)](_0x119e96)||_0xe2be88,_0xe2be88=DataManager[_0x1e1b61(0x45d)](_0xe2be88);}}return _0xe2be88;},DataManager[_0x3fd7af(0x5d8)]=function(_0x5d7b0c){const _0x3d806b=_0x3fd7af;let _0x3786f5=0x0;const _0x2f20d8={};for(const _0x40a69b of _0x5d7b0c){if(_0x3d806b(0x617)===_0x3d806b(0x710)){if(!_0xc2d2e['isSceneBattle']())return;if(!_0x13775d[_0x3d806b(0x6e6)])return;if(!_0x19f82f[_0x3d806b(0x5f5)]())return;_0x26f1fa[_0x3d806b(0x187)](_0x5e5afa,_0x47fe68);const _0x5302f8=_0xe7a0f7['Actions'];_0x4189f2['_subject']&&_0x2a86ab['_subject'][_0x3d806b(0x3c5)](_0x5302f8);}else{if(_0x40a69b[_0x3d806b(0x265)](/(.*):[ ](\d+)/i)){const _0x41d628=String(RegExp['$1'])[_0x3d806b(0x306)](),_0x31e444=Number(RegExp['$2']);_0x2f20d8[_0x41d628]=_0x31e444,_0x3786f5+=_0x31e444;}else{if(_0x40a69b['match'](/(.*):[ ](\d+\.?\d+)/i)){const _0xa88f4=String(RegExp['$1'])['trim'](),_0x538e9a=Number(RegExp['$2']);_0x2f20d8[_0xa88f4]=_0x538e9a,_0x3786f5+=_0x538e9a;}else{if(_0x40a69b!==''){if(_0x3d806b(0x264)===_0x3d806b(0x3d2)){let _0x304b84=0x0;if(this['_distortionSprite']&&this['constructor']!==_0x302434){const _0x55d287=this['_distortionSprite'][_0x3d806b(0x1c9)]['y'];_0x304b84-=(_0x55d287-0x1)*this['height'];}return _0x304b84;}else _0x2f20d8[_0x40a69b]=0x1,_0x3786f5++;}}}}}if(_0x3786f5<=0x0)return'';let _0x211ee8=Math[_0x3d806b(0x562)]()*_0x3786f5;for(const _0x489a9e in _0x2f20d8){_0x211ee8-=_0x2f20d8[_0x489a9e];if(_0x211ee8<=0x0)return _0x489a9e;}return'';},DataManager[_0x3fd7af(0x3b1)]=function(_0x3c4e70){const _0x4251e1=_0x3fd7af;if(!_0x3c4e70)return![];if(!VisuMZ[_0x4251e1(0x941)][_0x4251e1(0xa6b)][_0x4251e1(0x844)][_0x4251e1(0x39f)])return![];if(_0x3c4e70[_0x4251e1(0x7b9)][_0x4251e1(0x265)](/<AUTO ACTION SEQUENCE>/i))return![];if(_0x3c4e70[_0x4251e1(0x7b9)][_0x4251e1(0x265)](/<COMMON (?:EVENT|EVENTS):[ ](.*)>/gi))return!![];for(const _0x2a851e of _0x3c4e70[_0x4251e1(0x6ee)]){if(!_0x2a851e)continue;if(_0x2a851e[_0x4251e1(0x205)]===Game_Action['EFFECT_COMMON_EVENT'])return!![];}return![];},DataManager[_0x3fd7af(0x714)]=function(_0x4fc3d4){const _0x296b5d=_0x3fd7af,_0x3d5a5e=$dataTroops[_0x4fc3d4];if(!_0x3d5a5e)return'';let _0x1fd692='';_0x1fd692+=_0x3d5a5e['name'];for(const _0x3cac5f of _0x3d5a5e[_0x296b5d(0x2c1)]){if(_0x296b5d(0x2e6)!==_0x296b5d(0x2e6)){if(!this[_0x296b5d(0xa9a)][_0x296b5d(0x347)]())return;while(this[_0x296b5d(0xa9a)][_0x296b5d(0x347)]()){this[_0x296b5d(0xa9a)][_0x296b5d(0x8bc)]()&&this['createDamageSprite']();}this['_battler'][_0x296b5d(0x570)](),this['_battler'][_0x296b5d(0x1d9)]();}else for(const _0x409afd of _0x3cac5f[_0x296b5d(0xfb)]){[0x6c,0x198]['includes'](_0x409afd[_0x296b5d(0x205)])&&(_0x1fd692+='\x0a',_0x1fd692+=_0x409afd[_0x296b5d(0xab)][0x0]);}}return _0x1fd692;},ConfigManager[_0x3fd7af(0x667)]=ConfigManager[_0x3fd7af(0x667)]??![],ConfigManager[_0x3fd7af(0x692)]=ConfigManager[_0x3fd7af(0x692)]??![],ConfigManager[_0x3fd7af(0x18d)]=ConfigManager[_0x3fd7af(0x18d)]??!![],VisuMZ[_0x3fd7af(0x941)][_0x3fd7af(0x1a4)]=ConfigManager[_0x3fd7af(0x76d)],ConfigManager[_0x3fd7af(0x76d)]=function(){const _0x331545=_0x3fd7af,_0x4f5a38=VisuMZ[_0x331545(0x941)]['ConfigManager_makeData'][_0x331545(0x145)](this);return _0x4f5a38[_0x331545(0x667)]=this[_0x331545(0x667)],_0x4f5a38[_0x331545(0x692)]=this[_0x331545(0x692)],_0x4f5a38[_0x331545(0x18d)]=this['visualHpGauge'],_0x4f5a38;},VisuMZ[_0x3fd7af(0x941)][_0x3fd7af(0x1b6)]=ConfigManager[_0x3fd7af(0x6b2)],ConfigManager[_0x3fd7af(0x6b2)]=function(_0x1aee32){const _0x3b0d59=_0x3fd7af;VisuMZ['BattleCore'][_0x3b0d59(0x1b6)]['call'](this,_0x1aee32),'autoBattleAtStart'in _0x1aee32?this['autoBattleAtStart']=_0x1aee32[_0x3b0d59(0x667)]:this[_0x3b0d59(0x667)]=![],'autoBattleUseSkills'in _0x1aee32?this['autoBattleUseSkills']=_0x1aee32['autoBattleUseSkills']:this['autoBattleUseSkills']=![],_0x3b0d59(0x18d)in _0x1aee32?this['visualHpGauge']=_0x1aee32[_0x3b0d59(0x18d)]:this[_0x3b0d59(0x18d)]=!![];},VisuMZ[_0x3fd7af(0x941)][_0x3fd7af(0x38a)]=BattleManager[_0x3fd7af(0x2c4)],BattleManager[_0x3fd7af(0x2c4)]=function(){const _0x539a92=_0x3fd7af;VisuMZ[_0x539a92(0x941)][_0x539a92(0x38a)][_0x539a92(0x145)](this),this[_0x539a92(0xeb)]=[];},BattleManager[_0x3fd7af(0x92e)]=function(){const _0x57b3f5=_0x3fd7af;if(!SceneManager[_0x57b3f5(0x970)]())return;const _0x31c48d=SceneManager[_0x57b3f5(0x450)][_0x57b3f5(0x6bb)];if(_0x31c48d)_0x31c48d[_0x57b3f5(0x48a)]();},BattleManager[_0x3fd7af(0x4dc)]=function(){const _0x228fa8=_0x3fd7af;if(BattleManager[_0x228fa8(0x9fa)]())return _0x228fa8(0x49b);return'DTB';},BattleManager[_0x3fd7af(0x969)]=function(_0x355945){const _0x4bdeec=_0x3fd7af;return _0x355945=_0x355945['toUpperCase']()[_0x4bdeec(0x306)](),this[_0x4bdeec(0x4dc)]()===_0x355945;},BattleManager[_0x3fd7af(0x23b)]=function(){const _0x588ca3=_0x3fd7af;return this[_0x588ca3(0x969)](_0x588ca3(0x993));},BattleManager[_0x3fd7af(0xa1a)]=function(){return this['isDTB']();},BattleManager['isTickBased']=function(){const _0x3760a4=_0x3fd7af;return!this[_0x3760a4(0xa1a)]();},BattleManager['isTeamBased']=function(){const _0x4ef067=_0x3fd7af;return!this[_0x4ef067(0xa1a)]()&&!this[_0x4ef067(0x344)]();},BattleManager[_0x3fd7af(0xa39)]=function(_0x347b1a){const _0x21c546=_0x3fd7af;$gameParty[_0x21c546(0xa39)](_0x347b1a),$gameTroop[_0x21c546(0xa39)](_0x347b1a);},VisuMZ[_0x3fd7af(0x941)][_0x3fd7af(0x496)]=BattleManager[_0x3fd7af(0xa5a)],BattleManager[_0x3fd7af(0xa5a)]=function(){const _0x147538=_0x3fd7af;this[_0x147538(0xa80)]=![],this[_0x147538(0x435)]=ConfigManager['autoBattleAtStart'],this[_0x147538(0xa39)](_0x147538(0x94f)),VisuMZ[_0x147538(0x941)][_0x147538(0x496)][_0x147538(0x145)](this),this[_0x147538(0xa39)](_0x147538(0x600));},BattleManager[_0x3fd7af(0x7f0)]=function(_0x1fe387){const _0xc5d76a=_0x3fd7af,_0x409014=VisuMZ[_0xc5d76a(0x941)]['Settings'][_0xc5d76a(0x9fe)];_0x409014[_0xc5d76a(0x703)]&&VisuMZ[_0xc5d76a(0x941)][_0xc5d76a(0x120)](_0x409014[_0xc5d76a(0x703)])&&$gameTemp[_0xc5d76a(0xab4)](_0x409014[_0xc5d76a(0x703)]);const _0x19e6fa=_0xc5d76a(0x76c)[_0xc5d76a(0xab2)](_0x1fe387);_0x409014[_0x19e6fa]&&VisuMZ[_0xc5d76a(0x941)]['CheckMapBattleEventValid'](_0x409014[_0x19e6fa])&&$gameTemp[_0xc5d76a(0xab4)](_0x409014[_0x19e6fa]);},VisuMZ[_0x3fd7af(0x941)][_0x3fd7af(0x657)]=BattleManager[_0x3fd7af(0x43c)],BattleManager[_0x3fd7af(0x43c)]=function(){const _0x32bfe9=_0x3fd7af;this[_0x32bfe9(0xa39)]('BattleVictoryJS'),VisuMZ['BattleCore'][_0x32bfe9(0x657)][_0x32bfe9(0x145)](this),this[_0x32bfe9(0x7f0)]('Victory');},VisuMZ[_0x3fd7af(0x941)][_0x3fd7af(0x14c)]=BattleManager[_0x3fd7af(0x9ec)],BattleManager[_0x3fd7af(0x9ec)]=function(){const _0xe8aa76=_0x3fd7af;this[_0xe8aa76(0xa39)](_0xe8aa76(0x6c4)),VisuMZ[_0xe8aa76(0x941)]['BattleManager_processDefeat']['call'](this),this[_0xe8aa76(0x7f0)](_0xe8aa76(0x642));},VisuMZ[_0x3fd7af(0x941)][_0x3fd7af(0xc0)]=BattleManager[_0x3fd7af(0x6a3)],BattleManager[_0x3fd7af(0x6a3)]=function(_0x2cdbbd){const _0x5beba2=_0x3fd7af;this[_0x5beba2(0xa80)]=!![],this[_0x5beba2(0x435)]=![],this['processBattleCoreJS'](_0x5beba2(0x4c4)),VisuMZ['BattleCore'][_0x5beba2(0xc0)][_0x5beba2(0x145)](this,_0x2cdbbd),this[_0x5beba2(0xa39)](_0x5beba2(0x5c3));},VisuMZ[_0x3fd7af(0x941)][_0x3fd7af(0x88a)]=BattleManager[_0x3fd7af(0xa2c)],BattleManager[_0x3fd7af(0xa2c)]=function(){const _0x34e7d=_0x3fd7af;if(this[_0x34e7d(0xa1a)]())this['processBattleCoreJS']('PreStartTurnJS');VisuMZ[_0x34e7d(0x941)][_0x34e7d(0x88a)][_0x34e7d(0x145)](this);if(this[_0x34e7d(0xa1a)]())this[_0x34e7d(0xa39)](_0x34e7d(0x16b));},VisuMZ[_0x3fd7af(0x941)][_0x3fd7af(0x3e6)]=BattleManager[_0x3fd7af(0x514)],BattleManager[_0x3fd7af(0x514)]=function(){const _0x253851=_0x3fd7af,_0x58121d=this[_0x253851(0x470)]['currentAction'](),_0x45ebc5=this[_0x253851(0x470)];_0x58121d&&_0x58121d[_0x253851(0x22a)]()===_0x45ebc5&&_0x58121d[_0x253851(0x99a)](_0x253851(0x9ae)),VisuMZ[_0x253851(0x941)][_0x253851(0x3e6)]['call'](this),_0x58121d&&_0x58121d[_0x253851(0x22a)]()===_0x45ebc5&&_0x58121d['actionBattleCoreJS'](_0x253851(0x582));},VisuMZ[_0x3fd7af(0x941)][_0x3fd7af(0x379)]=BattleManager[_0x3fd7af(0x318)],BattleManager[_0x3fd7af(0x318)]=function(){const _0x42ee1f=_0x3fd7af,_0x592687=this['_action'],_0x79db20=this['_subject'];if(_0x592687&&_0x592687!==this['_lastAction']&&_0x592687['subject']()===_0x79db20){if(_0x42ee1f(0x6d6)!==_0x42ee1f(0x8d1))_0x592687[_0x42ee1f(0x99a)](_0x42ee1f(0x30c));else{if(!_0xce1614)return 0x0;let _0x4f0a3a=0x0;const _0x551fb7=_0x3b6408[_0x42ee1f(0x7b9)];return _0x551fb7['match'](/<BATTLE UI OFFSET Y:[ ]([\+\-]\d+)>/i)&&(_0x4f0a3a+=_0x1d62b6(_0x50486f['$1'])),_0x551fb7[_0x42ee1f(0x265)](/<BATTLE UI OFFSET:[ ]([\+\-]\d+),[ ]([\+\-]\d+)>/i)&&(_0x4f0a3a+=_0x909d5d(_0x1a548e['$2'])),_0x4f0a3a;}}VisuMZ[_0x42ee1f(0x941)][_0x42ee1f(0x379)][_0x42ee1f(0x145)](this);if(_0x592687&&_0x592687!==this[_0x42ee1f(0xad2)]&&_0x592687['subject']()===_0x79db20){if(_0x42ee1f(0x928)==='cBRkz'){if(_0x25ed5a[_0x42ee1f(0x5a1)])return;this['process_VisuMZ_BattleCore_Action_Notetags'](),this[_0x42ee1f(0x4e9)](),this[_0x42ee1f(0x598)]();}else _0x592687[_0x42ee1f(0x99a)](_0x42ee1f(0x1f0));}this[_0x42ee1f(0xc9)](this[_0x42ee1f(0x801)]()),this[_0x42ee1f(0xad2)]=this['_action'];},BattleManager[_0x3fd7af(0xc9)]=function(_0x52e03a){const _0x5e8381=_0x3fd7af;for(const _0x1b2010 of _0x52e03a){if(!_0x1b2010)continue;if(!_0x1b2010[_0x5e8381(0x181)]())continue;_0x1b2010['battler']()[_0x5e8381(0x1f6)]();}},BattleManager[_0x3fd7af(0x6ad)]=function(){const _0x26b9cc=_0x3fd7af;!this[_0x26b9cc(0x4bd)][_0x26b9cc(0x2a0)]()&&this[_0x26b9cc(0x318)]();},Game_Battler[_0x3fd7af(0x9fd)][_0x3fd7af(0x8bd)]=function(){const _0x51feec=_0x3fd7af;this[_0x51feec(0x1d9)]();if(Imported['VisuMZ_1_SkillsStatesCore']){if(_0x51feec(0xd4)!=='UUlbf')this[_0x51feec(0x871)]();else{const _0x5e404a=VisuMZ[_0x51feec(0x40c)]['Settings'][_0x51feec(0x2be)];_0x5e404a&&_0x5e404a[_0x51feec(0x89b)]===![]&&this[_0x51feec(0x647)](0x1);}}else{if(_0x51feec(0x408)==='kphVh')this[_0x51feec(0x647)](0x1);else{if(!_0x1a1a03[_0x51feec(0x970)]())return;_0x47e9fa['ConvertParams'](_0x2130a4,_0x435d1c);const _0x14ba6f=_0x83f466['getLastPluginCommandInterpreter'](),_0x484fd6=_0x73a2fe['JumpToLabel'];if(!_0x14ba6f)return;_0x36f844[_0x51feec(0x82a)]--,_0x3b6f1d['_target']=_0x19b5f6[_0x51feec(0x232)][_0x5829e1[_0x51feec(0x82a)]]||null,_0xacd6d5[_0x51feec(0xad1)]&&_0x484fd6['toUpperCase']()['trim']()!==_0x51feec(0x656)&&_0x14ba6f[_0x51feec(0x9dd)]([_0x484fd6]);}}this[_0x51feec(0x322)]();},BattleManager[_0x3fd7af(0x755)]=function(){const _0x3ce312=_0x3fd7af;this[_0x3ce312(0x198)]=VisuMZ[_0x3ce312(0x941)][_0x3ce312(0xa6b)][_0x3ce312(0x9fe)][_0x3ce312(0xa9f)][_0x3ce312(0x145)](this);},VisuMZ['BattleCore']['BattleManager_onEscapeSuccess']=BattleManager[_0x3fd7af(0x9d2)],BattleManager[_0x3fd7af(0x9d2)]=function(){const _0x5ee33b=_0x3fd7af;this[_0x5ee33b(0xa39)](_0x5ee33b(0x7b7)),BattleManager['_spriteset'][_0x5ee33b(0x104)](),VisuMZ['BattleCore'][_0x5ee33b(0x6c2)]['call'](this),this[_0x5ee33b(0x7f0)](_0x5ee33b(0x214));},VisuMZ[_0x3fd7af(0x941)][_0x3fd7af(0xac1)]=BattleManager[_0x3fd7af(0x24c)],BattleManager[_0x3fd7af(0x24c)]=function(){const _0x5ecfa0=_0x3fd7af;this[_0x5ecfa0(0xa39)](_0x5ecfa0(0x74f));const _0x5023d2=this['_escapeRatio'];VisuMZ[_0x5ecfa0(0x941)][_0x5ecfa0(0xac1)][_0x5ecfa0(0x145)](this),this[_0x5ecfa0(0x198)]=_0x5023d2+VisuMZ['BattleCore'][_0x5ecfa0(0xa6b)][_0x5ecfa0(0x9fe)]['CalcEscapeRaiseJS']['call'](this),this[_0x5ecfa0(0x7f0)]('EscapeFail');},BattleManager[_0x3fd7af(0x294)]=function(){const _0x516651=_0x3fd7af;let _0x51bca4=![];if(this[_0x516651(0x64c)]()){if(_0x516651(0x3e9)===_0x516651(0xb9)){if(_0x445f31[_0x516651(0x604)]&&_0x2e094e[_0x516651(0x690)]!==_0x1d3ed5)return _0x3706de[_0x516651(0x690)];else{if(this[_0x516651(0xafe)]()===_0x516651(0x2bf))return![];else{return _0x1498be['prototype']['isRightInputMode']['call'](this);;}}}else for(const _0x2cd17d of $gameTroop['enemyNames']()){_0x516651(0x2b2)!==_0x516651(0xa99)?(this[_0x516651(0x4bd)]['push']('addText',TextManager[_0x516651(0x300)]['format'](_0x2cd17d)),this[_0x516651(0x4bd)][_0x516651(0x18b)](_0x516651(0x474)),_0x51bca4=!![]):_0x5df51e[_0x516651(0x950)](_0x496c4c[_0x516651(0x11b)],0x0);}}if(this['_preemptive'])this['_logWindow'][_0x516651(0x18b)](_0x516651(0x2d6),TextManager[_0x516651(0x53a)]['format']($gameParty['name']())),this[_0x516651(0x4bd)][_0x516651(0x18b)](_0x516651(0x474));else this[_0x516651(0xc8)]&&(_0x516651(0x9c0)===_0x516651(0x9c0)?(this[_0x516651(0x4bd)][_0x516651(0x18b)]('addText',TextManager[_0x516651(0x3ab)]['format']($gameParty[_0x516651(0x504)]())),this['_logWindow']['push'](_0x516651(0x474))):_0x39b4e5['push'](_0xe23820[_0x516651(0x943)]()));_0x51bca4&&(_0x516651(0x6c1)===_0x516651(0x4d2)?(_0x4e4bad[_0x516651(0x941)][_0x516651(0x1f9)][_0x516651(0x145)](this),this['_enemyWindow'][_0x516651(0x535)](),this['makeTargetSelectionMoreVisible']()):(this[_0x516651(0x4bd)]['push'](_0x516651(0x474)),this[_0x516651(0x4bd)]['push'](_0x516651(0x8b9)))),this[_0x516651(0x9fa)]()&&this[_0x516651(0x78b)]()&&(this[_0x516651(0x589)]=![]);},BattleManager['isDisplayEmergedEnemies']=function(){const _0x5f0bfd=_0x3fd7af;if(BattleManager[_0x5f0bfd(0x435)])return![];return VisuMZ[_0x5f0bfd(0x941)]['Settings'][_0x5f0bfd(0x520)][_0x5f0bfd(0x152)];},VisuMZ[_0x3fd7af(0x941)][_0x3fd7af(0xa03)]=BattleManager['startInput'],BattleManager['startInput']=function(){const _0x3004ec=_0x3fd7af;VisuMZ['BattleCore'][_0x3004ec(0xa03)][_0x3004ec(0x145)](this),this[_0x3004ec(0x23b)]()&&this[_0x3004ec(0x78b)]()&&!this[_0x3004ec(0xc8)]&&$gameParty[_0x3004ec(0x87d)]()&&this[_0x3004ec(0x7bb)]();},BattleManager[_0x3fd7af(0x78b)]=function(){const _0x27cd00=_0x3fd7af;return VisuMZ[_0x27cd00(0x941)]['Settings'][_0x27cd00(0xa2b)][_0x27cd00(0x40b)];},BattleManager['checkTpbInputOpen']=function(){const _0x3a2ee0=_0x3fd7af;this[_0x3a2ee0(0x3b2)]()&&this[_0x3a2ee0(0x7bb)]();},VisuMZ['BattleCore'][_0x3fd7af(0x68c)]=Scene_Battle[_0x3fd7af(0x9fd)][_0x3fd7af(0x62d)],Scene_Battle['prototype']['startActorCommandSelection']=function(){const _0x2a50cd=_0x3fd7af;VisuMZ['BattleCore'][_0x2a50cd(0x68c)]['call'](this),BattleManager[_0x2a50cd(0x9fa)]()&&BattleManager[_0x2a50cd(0x589)]&&(BattleManager[_0x2a50cd(0x589)]=![],this[_0x2a50cd(0x613)]());},BattleManager[_0x3fd7af(0x72b)]=function(_0x47a019,_0x1030ed){const _0x430387=_0x3fd7af;this[_0x430387(0x2dd)][_0x430387(0x409)]=_0x1030ed,this[_0x430387(0x4bd)]['displayReflection'](_0x1030ed),this['_logWindow'][_0x430387(0x5da)](_0x47a019,this[_0x430387(0x2dd)]),this[_0x430387(0x2dd)][_0x430387(0x3ca)](_0x47a019),this[_0x430387(0x4bd)]['displayActionResults'](_0x47a019,_0x47a019);},VisuMZ[_0x3fd7af(0x941)][_0x3fd7af(0x84c)]=BattleManager[_0x3fd7af(0x8c0)],BattleManager[_0x3fd7af(0x8c0)]=function(){const _0x9b1b9c=_0x3fd7af;VisuMZ[_0x9b1b9c(0x941)][_0x9b1b9c(0x84c)][_0x9b1b9c(0x145)](this),this['_actionBattlers']=this['_actionBattlers']['filter'](_0x2731d6=>_0x2731d6&&_0x2731d6['isAppeared']());},VisuMZ[_0x3fd7af(0x941)][_0x3fd7af(0x2fd)]=BattleManager['updatePhase'],BattleManager[_0x3fd7af(0x705)]=function(_0x243af0){const _0x4e4fd8=_0x3fd7af;if(this[_0x4e4fd8(0x7b5)]===_0x4e4fd8(0x4c9))this['updateCustomActionSequence']();else{if(this[_0x4e4fd8(0x7b5)]===_0x4e4fd8(0x3c7)){if(_0x4e4fd8(0x740)==='LlQyD'){if(_0x4899f5[_0x4e4fd8(0x9fa)]()&&this[_0x4e4fd8(0x352)]==='casting')return this[_0x4e4fd8(0xc3)]()?this[_0x4e4fd8(0x9d8)]()&&this[_0x4e4fd8(0x9d8)]()[_0x4e4fd8(0xaf4)]()&&!this[_0x4e4fd8(0x9d8)]()[_0x4e4fd8(0x695)]():this['currentAction']()&&this['currentAction']()[_0x4e4fd8(0xaf4)]()&&!this[_0x4e4fd8(0x9d8)]()[_0x4e4fd8(0x7ce)]();return![];}else this[_0x4e4fd8(0x2a1)]();}else{if(_0x4e4fd8(0xa47)!==_0x4e4fd8(0xa47)){if(!this[_0x4e4fd8(0x223)])this[_0x4e4fd8(0x570)]();return _0x2549ab[_0x4e4fd8(0x941)]['Settings'][_0x4e4fd8(0x81f)][_0x4e4fd8(0x851)]?this[_0x4e4fd8(0x223)][_0x4e4fd8(0x997)]():this[_0x4e4fd8(0x223)][_0x4e4fd8(0x946)]();}else VisuMZ[_0x4e4fd8(0x941)][_0x4e4fd8(0x2fd)][_0x4e4fd8(0x145)](this,_0x243af0);}}},BattleManager[_0x3fd7af(0xa31)]=function(){const _0x43c52b=_0x3fd7af;this[_0x43c52b(0x232)]=this[_0x43c52b(0xab6)][_0x43c52b(0x7c7)](0x0),this[_0x43c52b(0x82a)]=0x0,this[_0x43c52b(0xad1)]=this[_0x43c52b(0x232)][0x0]||null,this[_0x43c52b(0x7b5)]=_0x43c52b(0x4c9);},BattleManager[_0x3fd7af(0x3be)]=function(){const _0xb92b48=_0x3fd7af;!this['updateEventMain']()&&!this[_0xb92b48(0x4bd)][_0xb92b48(0x2a0)]()&&(this[_0xb92b48(0x7b5)]='action');},BattleManager[_0x3fd7af(0x3c7)]=function(_0xa58ed){const _0x2266a1=_0x3fd7af;this[_0x2266a1(0xa45)]['remove'](_0xa58ed);if(_0xa58ed===this[_0x2266a1(0x470)])return;const _0x3c7737=JsonEx[_0x2266a1(0x4ad)](_0xa58ed['currentAction']());this[_0x2266a1(0xeb)]['push']([_0xa58ed,_0x3c7737]);},BattleManager[_0x3fd7af(0xaa0)]=function(){},BattleManager[_0x3fd7af(0x92f)]=function(){const _0x4d5dd9=_0x3fd7af;if(this['isTpb']()){if(_0x4d5dd9(0x7ac)==='UvNnD'){if(_0x542e44){const _0x49ad88=_0x568fda[_0x4d5dd9(0x760)](_0x4812a3);return _0x49ad88>=0x0?[_0x4cf58a[_0x49ad88-0x1]||_0x4ad085]:[_0x55e290];}}else this[_0x4d5dd9(0x7b5)]=_0x4d5dd9(0xac3);}else this[_0x4d5dd9(0xeb)]['length']>0x0?this[_0x4d5dd9(0x7b5)]='turn':this['startInput']();},BattleManager[_0x3fd7af(0x5e9)]=function(){const _0x5ae180=_0x3fd7af,_0x45b592=this[_0x5ae180(0x470)];_0x45b592&&this['isTpb']()&&(_0x5ae180(0x842)==='CdVez'?(this['_cache']={},_0x38b8a2[_0x5ae180(0x941)][_0x5ae180(0x921)][_0x5ae180(0x145)](this)):_0x45b592[_0x5ae180(0x169)](_0x5ae180(0x901)));for(;;){const _0x4673e4=this['getNextSubjectFromPool']();if(!_0x4673e4)return null;if(_0x4673e4[_0x5ae180(0x9e4)]()&&_0x4673e4[_0x5ae180(0x7fd)]())return _0x4673e4;}},BattleManager[_0x3fd7af(0x483)]=function(){const _0x2765e6=_0x3fd7af;if(this[_0x2765e6(0xeb)][_0x2765e6(0x732)]>0x0){const _0x50522f=this[_0x2765e6(0xeb)][_0x2765e6(0x997)](),_0x39fe83=_0x50522f[0x0];return _0x39fe83[_0x2765e6(0x90f)]=_0x39fe83[_0x2765e6(0x90f)]||[],_0x39fe83['_actions'][0x0]=_0x50522f[0x1],_0x39fe83;}else return this[_0x2765e6(0xa45)]['shift']();},VisuMZ[_0x3fd7af(0x941)]['Game_Battler_forceAction']=Game_Battler['prototype'][_0x3fd7af(0x3c7)],Game_Battler[_0x3fd7af(0x9fd)][_0x3fd7af(0x3c7)]=function(_0x52f6b1,_0x264e0d){const _0x370ff4=_0x3fd7af;VisuMZ['BattleCore'][_0x370ff4(0x99b)][_0x370ff4(0x145)](this,_0x52f6b1,_0x264e0d),this[_0x370ff4(0x90f)][this[_0x370ff4(0x90f)]['length']-0x1][_0x370ff4(0x150)]=!![];},Game_Interpreter[_0x3fd7af(0x9fd)][_0x3fd7af(0x11c)]=function(_0x143863){return this['iterateBattler'](_0x143863[0x0],_0x143863[0x1],_0x27d082=>{const _0x1e86e4=_0x499e;!_0x27d082[_0x1e86e4(0xa79)]()&&(_0x27d082[_0x1e86e4(0x3c7)](_0x143863[0x2],_0x143863[0x3]),BattleManager[_0x1e86e4(0x3c7)](_0x27d082));}),!![];},VisuMZ[_0x3fd7af(0x941)]['Game_Battler_makeSpeed']=Game_Battler[_0x3fd7af(0x9fd)]['makeSpeed'],Game_Battler[_0x3fd7af(0x9fd)][_0x3fd7af(0x13e)]=function(){const _0x4ddd25=_0x3fd7af;VisuMZ[_0x4ddd25(0x941)][_0x4ddd25(0x4a4)][_0x4ddd25(0x145)](this),this['_actions']['length']<=0x0&&(this[_0x4ddd25(0xa6d)]=Number['MIN_SAFE_INTEGER']);},VisuMZ['BattleCore'][_0x3fd7af(0xacf)]=BattleManager[_0x3fd7af(0x7bb)],BattleManager[_0x3fd7af(0x7bb)]=function(){const _0xb7b522=_0x3fd7af;this[_0xb7b522(0x9fa)]()?_0xb7b522(0x5bd)!=='Ovbwd'?_0x26c0ea[_0x4a1654]=null:this[_0xb7b522(0x68a)]():VisuMZ[_0xb7b522(0x941)][_0xb7b522(0xacf)]['call'](this);},BattleManager[_0x3fd7af(0x68a)]=function(){const _0x47f2cf=_0x3fd7af;if(this['_currentActor']){if(this[_0x47f2cf(0xa6a)]['selectNextCommand']())return;this[_0x47f2cf(0x85d)](),this[_0x47f2cf(0xa75)](),!this[_0x47f2cf(0x470)]&&!this[_0x47f2cf(0xa6a)]&&SceneManager[_0x47f2cf(0x450)][_0x47f2cf(0x829)]();}else!this[_0x47f2cf(0x470)]&&this[_0x47f2cf(0x5f1)]();},BattleManager[_0x3fd7af(0xa75)]=function(){const _0x37bfb7=_0x3fd7af;if(!this[_0x37bfb7(0x3b2)]()||this[_0x37bfb7(0x124)]()){if(_0x37bfb7(0x693)!==_0x37bfb7(0x7cd))this[_0x37bfb7(0x7fb)]&&(!$gameParty['battleMembers']()[_0x37bfb7(0x402)](this[_0x37bfb7(0x7fb)])&&(this[_0x37bfb7(0x7fb)]=null)),!this[_0x37bfb7(0x7fb)]?(this[_0x37bfb7(0x780)](),this['_currentActor']=null,this[_0x37bfb7(0x533)]=![]):this[_0x37bfb7(0x467)]();else{if(!_0x10c2cb['isSceneBattle']())return;const _0x7e0e6c=_0xffd73a[_0x37bfb7(0x8be)]();if(!_0x7e0e6c)return;_0x7e0e6c[_0x37bfb7(0x992)](_0x37bfb7(0x77a));}}},BattleManager['revertTpbCachedActor']=function(){const _0x39a470=_0x3fd7af;!$gameParty[_0x39a470(0x892)]()['includes'](this[_0x39a470(0x7fb)])&&(this[_0x39a470(0x7fb)]=null),this[_0x39a470(0x7fb)]?(this['_currentActor']=this['_tpbSceneChangeCacheActor'],this['_currentActor'][_0x39a470(0x352)]=_0x39a470(0x6b9),this[_0x39a470(0x533)]=!![],this['_tpbSceneChangeCacheActor']=null):'eKPAE'===_0x39a470(0x8f3)?(this[_0x39a470(0x780)](),this[_0x39a470(0xa6a)]=null,this[_0x39a470(0x533)]=![]):_0x4eefd9-=_0x1ac835['mainSpriteHeight']();},VisuMZ[_0x3fd7af(0x941)][_0x3fd7af(0x68f)]=BattleManager[_0x3fd7af(0x35c)],BattleManager[_0x3fd7af(0x35c)]=function(){const _0x5e275f=_0x3fd7af;return this[_0x5e275f(0x7b5)]===_0x5e275f(0x4c9)?this[_0x5e275f(0x509)]():VisuMZ[_0x5e275f(0x941)][_0x5e275f(0x68f)][_0x5e275f(0x145)](this);},BattleManager['battleCoreTpbMainPhase']=function(){const _0x30f3ab=_0x3fd7af;return this[_0x30f3ab(0x922)]();},VisuMZ[_0x3fd7af(0x941)]['BattleManager_cancelActorInput']=BattleManager['cancelActorInput'],BattleManager[_0x3fd7af(0x780)]=function(){const _0x5414ca=_0x3fd7af;this[_0x5414ca(0x9fa)]()&&this[_0x5414ca(0x7b5)]===_0x5414ca(0x8a9)&&(this['_currentActor']=null),VisuMZ[_0x5414ca(0x941)][_0x5414ca(0x3e5)][_0x5414ca(0x145)](this);},VisuMZ[_0x3fd7af(0x941)][_0x3fd7af(0x811)]=BattleManager[_0x3fd7af(0x681)],BattleManager['inputtingAction']=function(){const _0x42d292=_0x3fd7af,_0x47b430=this['_currentActor'];if(_0x47b430&&!_0x47b430[_0x42d292(0x681)]()){const _0x3e330e=_0x47b430[_0x42d292(0x99e)];_0x47b430[_0x42d292(0x90f)][_0x3e330e]=new Game_Action(_0x47b430);}return VisuMZ['BattleCore'][_0x42d292(0x811)][_0x42d292(0x145)](this);},SceneManager[_0x3fd7af(0x970)]=function(){const _0x2d79d6=_0x3fd7af;return this[_0x2d79d6(0x450)]&&this[_0x2d79d6(0x450)][_0x2d79d6(0x26b)]===Scene_Battle;},SceneManager[_0x3fd7af(0xb6)]=function(){const _0x1673d8=_0x3fd7af;return Spriteset_Battle[_0x1673d8(0x9fd)][_0x1673d8(0xaee)]();},SceneManager[_0x3fd7af(0x228)]=function(){const _0xd1d665=_0x3fd7af;if(SceneManager[_0xd1d665(0x90c)](Scene_Options))return!![];return![];},SceneManager[_0x3fd7af(0x722)]=function(){const _0x3d6c27=_0x3fd7af;if(SceneManager[_0x3d6c27(0x9d4)](Scene_Options))return!![];return![];},SceneManager[_0x3fd7af(0x3c9)]=function(_0x150f39){const _0x493687=_0x3fd7af;if(!SceneManager[_0x493687(0x970)]())return!![];const _0x2280a8=[_0x493687(0x6d9),_0x493687(0x1c2)];return _0x2280a8[_0x493687(0x402)](_0x150f39[_0x493687(0x504)]);},VisuMZ['BattleCore'][_0x3fd7af(0x9e2)]=SceneManager[_0x3fd7af(0x18b)],SceneManager[_0x3fd7af(0x18b)]=function(_0x54d511){const _0xe62d62=_0x3fd7af;if(!SceneManager['checkSceneBattleTransitionable'](_0x54d511)){if(_0xe62d62(0x44b)!==_0xe62d62(0x44b)){const _0x34ea6a=this[_0xe62d62(0xa5c)][this[_0xe62d62(0xa5c)][_0xe62d62(0x732)]-0x1];_0x34ea6a&&(_0x5edd64['x']=_0x34ea6a['x']+_0x166f9e[_0xe62d62(0x5b3)]*_0x26ecca,_0x5058fe['y']=_0x34ea6a['y']+_0x2367cd[_0xe62d62(0x53e)]);}else return this[_0xe62d62(0xa52)](_0x54d511);}VisuMZ[_0xe62d62(0x941)][_0xe62d62(0x9e2)][_0xe62d62(0x145)](this,_0x54d511);},SceneManager[_0x3fd7af(0xa52)]=function(_0x292cb6){const _0x1ffa2a=_0x3fd7af;if(!$gameTemp['isPlaytest']())return;if(this['_displayBattleCoreTransitionErrorMsg'])return;this[_0x1ffa2a(0x170)]=!![];let _0x4d8a19='';_0x4d8a19+=_0x1ffa2a(0x360),_0x4d8a19+=_0x1ffa2a(0x9cc)[_0x1ffa2a(0xab2)](_0x292cb6['name']),alert(_0x4d8a19);},VisuMZ[_0x3fd7af(0x941)]['Game_Temp_requestAnimation']=Game_Temp[_0x3fd7af(0x9fd)][_0x3fd7af(0x97f)],Game_Temp[_0x3fd7af(0x9fd)][_0x3fd7af(0x97f)]=function(_0x320880,_0x4df101,_0xcff949){const _0x196a3f=_0x3fd7af;_0x320880=_0x320880[_0x196a3f(0xa8)]((_0xa0942d,_0x17acf3,_0x5c8a87)=>_0x5c8a87[_0x196a3f(0x760)](_0xa0942d)===_0x17acf3),SceneManager[_0x196a3f(0x970)]()&&SceneManager[_0x196a3f(0xb6)]()&&(_0xcff949=!_0xcff949),VisuMZ[_0x196a3f(0x941)][_0x196a3f(0x913)][_0x196a3f(0x145)](this,_0x320880,_0x4df101,_0xcff949),SceneManager[_0x196a3f(0x970)]()&&(_0x196a3f(0x7a3)!==_0x196a3f(0x7a3)?this[_0x196a3f(0x1f6)]():BattleManager[_0x196a3f(0x3b4)][_0x196a3f(0x59a)]());},Game_Temp[_0x3fd7af(0x9fd)][_0x3fd7af(0x3d3)]=function(_0x23546f){const _0x39e81c=_0x3fd7af;this[_0x39e81c(0x42d)]=_0x23546f;},Game_Temp[_0x3fd7af(0x9fd)]['getLastPluginCommandInterpreter']=function(){const _0x321e63=_0x3fd7af;return this[_0x321e63(0x42d)];},Game_Temp[_0x3fd7af(0x9fd)][_0x3fd7af(0xa42)]=function(){const _0x3c41fa=_0x3fd7af;this[_0x3c41fa(0x1e2)]=undefined;},Game_Temp[_0x3fd7af(0x9fd)][_0x3fd7af(0x503)]=function(_0xcf7f7c){const _0x5a936c=_0x3fd7af;$gameMap&&$dataMap&&$dataMap[_0x5a936c(0x7b9)]&&this['parseForcedGameTroopSettingsBattleCore']($dataMap['note']);const _0x1f05d0=$dataTroops[_0xcf7f7c];if(_0x1f05d0){let _0x3b4e56=DataManager[_0x5a936c(0x714)](_0x1f05d0['id']);this[_0x5a936c(0x3a8)](_0x3b4e56);}},Game_Temp['prototype'][_0x3fd7af(0x3a8)]=function(_0xfb8e03){const _0x133913=_0x3fd7af;if(!_0xfb8e03)return;if(_0xfb8e03[_0x133913(0x265)](/<(?:BATTLELAYOUT|BATTLE LAYOUT|LAYOUT):[ ](.*)>/i)){const _0xf6679e=String(RegExp['$1']);if(_0xf6679e[_0x133913(0x265)](/DEFAULT/i))'XZXkn'===_0x133913(0x97e)?this['_forcedBattleLayout']=_0x133913(0x986):this[_0x133913(0x923)](_0x133913(0x8cb));else{if(_0xf6679e['match'](/LIST/i))this[_0x133913(0x1e2)]=_0x133913(0xfb);else{if(_0xf6679e[_0x133913(0x265)](/XP/i))this['_forcedBattleLayout']='xp';else{if(_0xf6679e[_0x133913(0x265)](/PORTRAIT/i)){if('vsmPm'===_0x133913(0x61e))this[_0x133913(0x1e2)]=_0x133913(0x833);else{const _0x560ecd=_0x473e8b[_0x133913(0x181)]();this[_0x133913(0x18b)](_0x133913(0x621),[_0x3e2068],_0x43bae2,_0x2855aa),this[_0x133913(0x18b)]('performMoveToPoint',_0x4cc451,_0x560ecd[_0x133913(0x2e7)],_0x560ecd['_homeY'],_0xca141f,![],'Linear'),this[_0x133913(0x18b)](_0x133913(0x42a),[_0xbed309],_0x133913(0x940)),this[_0x133913(0x18b)](_0x133913(0x798)),this[_0x133913(0x18b)](_0x133913(0x42a),[_0x1e67e9],_0x133913(0x8cb));}}else{if(_0xf6679e[_0x133913(0x265)](/BORDER/i)){if(_0x133913(0x553)==='tJcxx')return!![];else this['_forcedBattleLayout']=_0x133913(0x2bf);}else{if(_0xf6679e['match'](/(?:SIDEVIEW UI|SIDEVIEW)/i)){if(Imported[_0x133913(0x507)])_0x133913(0x994)!==_0x133913(0x994)?_0x47e453=_0x579959[_0x133913(0x1b8)]:this[_0x133913(0x1e2)]=_0x133913(0x556);else{if('eMcmk'===_0x133913(0x6e7))this[_0x133913(0x1e2)]=_0x133913(0x986);else return this[_0x133913(0x2b0)];}}}}}}}}},VisuMZ[_0x3fd7af(0x941)]['Game_System_initialize']=Game_System[_0x3fd7af(0x9fd)][_0x3fd7af(0x709)],Game_System[_0x3fd7af(0x9fd)][_0x3fd7af(0x709)]=function(){const _0x8268c0=_0x3fd7af;VisuMZ[_0x8268c0(0x941)][_0x8268c0(0x2f5)][_0x8268c0(0x145)](this),this[_0x8268c0(0x708)]();},Game_System[_0x3fd7af(0x9fd)]['initBattleCore']=function(){const _0x3beb4c=_0x3fd7af;this[_0x3beb4c(0x7d5)]=this[_0x3beb4c(0x7d5)]||[];},Game_System[_0x3fd7af(0x9fd)]['getDefeatedEnemies']=function(){const _0x5bdf1c=_0x3fd7af;if(this[_0x5bdf1c(0x7d5)]===undefined)this[_0x5bdf1c(0x708)]();return this['_defeatedEnemies'];},Game_System[_0x3fd7af(0x9fd)][_0x3fd7af(0x52c)]=function(_0x328fe9){const _0x5a5dc8=_0x3fd7af;if(this['_defeatedEnemies']===undefined)this[_0x5a5dc8(0x708)]();if(!_0x328fe9)return;if(this[_0x5a5dc8(0x7d5)][_0x5a5dc8(0x402)](_0x328fe9))return;this['_defeatedEnemies'][_0x5a5dc8(0x18b)](_0x328fe9),this['_defeatedEnemies'][_0x5a5dc8(0x65c)]((_0x41f0ef,_0x37f024)=>_0x41f0ef-_0x37f024);},VisuMZ[_0x3fd7af(0x941)]['Game_BattlerBase_addNewState']=Game_BattlerBase[_0x3fd7af(0x9fd)][_0x3fd7af(0x93c)],Game_BattlerBase[_0x3fd7af(0x9fd)][_0x3fd7af(0x93c)]=function(_0x1fca47){const _0x3d0007=_0x3fd7af,_0x5d067a=this['isAlive'](),_0x4fc586=this[_0x3d0007(0x3e3)]();VisuMZ[_0x3d0007(0x941)][_0x3d0007(0xa4f)][_0x3d0007(0x145)](this,_0x1fca47);this[_0x3d0007(0x7e8)]()&&_0x5d067a&&this[_0x3d0007(0x217)]()&&(this[_0x3d0007(0x3af)]=!this['hasBeenDefeatedBefore'](),$gameSystem[_0x3d0007(0x52c)](this[_0x3d0007(0x8fe)]()));if(SceneManager[_0x3d0007(0x970)]()&&_0x4fc586!==this['stateMotionIndex']()){if('ULSAt'===_0x3d0007(0x1fa)){if(this[_0x3d0007(0xafe)]()===_0x3d0007(0x2bf))return this[_0x3d0007(0x20c)]();else return this[_0x3d0007(0x7be)]()?this['skillItemWindowRectMiddle']():_0x4d70c0['BattleCore']['Scene_Battle_skillWindowRect']['call'](this);}else{if(this[_0x3d0007(0x181)]()){if(_0x3d0007(0xa46)===_0x3d0007(0xa46))this[_0x3d0007(0x181)]()[_0x3d0007(0x1f6)]();else for(const _0x650137 of _0x2b953a){const _0x315f46=_0x4d18a2[_0x3d0007(0xab2)](_0x1be4e8['name'](),_0xf4b78['param'](_0x650137));this[_0x3d0007(0x18b)](_0x3d0007(0xe7)),this[_0x3d0007(0x18b)](_0x3d0007(0x86f)),this['push'](_0x3d0007(0x2d6),_0x315f46),this[_0x3d0007(0x18b)](_0x3d0007(0x474));}}}}},Game_Enemy[_0x3fd7af(0x9fd)]['hasBeenDefeatedBefore']=function(){const _0xde180b=_0x3fd7af;return $gameSystem['getDefeatedEnemies']()[_0xde180b(0x402)](this[_0xde180b(0x88f)]);},VisuMZ[_0x3fd7af(0x941)]['Game_BattlerBase_eraseState']=Game_BattlerBase[_0x3fd7af(0x9fd)][_0x3fd7af(0x843)],Game_BattlerBase[_0x3fd7af(0x9fd)][_0x3fd7af(0x843)]=function(_0x342128){const _0xc88396=_0x3fd7af;VisuMZ[_0xc88396(0x941)][_0xc88396(0x697)][_0xc88396(0x145)](this,_0x342128);if(this[_0xc88396(0x7e8)]()&&_0x342128===this[_0xc88396(0x588)]()&&this['isAlive']()){if(_0xc88396(0x34b)===_0xc88396(0x20d)){if(!_0x506eb0['isSceneBattle']())return![];if(!_0x416dca)return![];if(!_0x49e553['item']())return![];if(_0x37d160[_0xc88396(0xaf4)]()[_0xc88396(0x7b9)][_0xc88396(0x265)](/<CUSTOM ACTION SEQUENCE>/i))return!![];if(_0x491d3f[_0xc88396(0x3b1)](_0x360481[_0xc88396(0xaf4)]()))return!![];return![];}else this['_visualHpGauge_JustDied']=![];}!this[_0xc88396(0xad3)]&&!this[_0xc88396(0x8de)]&&SceneManager[_0xc88396(0x970)]()&&this[_0xc88396(0x4da)]();},VisuMZ['BattleCore'][_0x3fd7af(0x3e2)]=Game_Action['prototype'][_0x3fd7af(0x8b9)],Game_Action[_0x3fd7af(0x9fd)][_0x3fd7af(0x8b9)]=function(){const _0x93f054=_0x3fd7af;VisuMZ[_0x93f054(0x941)][_0x93f054(0x3e2)]['call'](this),this['_armorPenetration']={'arPenRate':0x0,'arPenFlat':0x0,'arRedRate':0x0,'arRedFlat':0x0},this['_multipliers']={'criticalHitRate':0x1,'criticalHitFlat':0x0,'criticalDmgRate':0x1,'criticalDmgFlat':0x0,'damageRate':0x1,'damageFlat':0x0,'hitRate':0x1,'hitFlat':0x0},this[_0x93f054(0x62b)]='default';},Game_Action[_0x3fd7af(0x9fd)][_0x3fd7af(0x636)]=function(_0x154a14,_0x524c35){const _0x29a851=_0x3fd7af;return VisuMZ[_0x29a851(0x941)][_0x29a851(0xa6b)]['Damage'][_0x29a851(0x6b7)][_0x29a851(0x145)](this,_0x154a14,_0x524c35);},Game_Action[_0x3fd7af(0x9fd)][_0x3fd7af(0x88b)]=function(_0x52fb52,_0x2c923c){const _0x257eb2=_0x3fd7af;return VisuMZ[_0x257eb2(0x941)][_0x257eb2(0xa6b)]['Damage']['VarianceFormulaJS'][_0x257eb2(0x145)](this,_0x52fb52,_0x2c923c);},Game_Action['prototype'][_0x3fd7af(0x297)]=function(_0x249f7f,_0x3a625c){const _0x22656a=_0x3fd7af;return VisuMZ['BattleCore'][_0x22656a(0xa6b)][_0x22656a(0x81f)]['GuardFormulaJS'][_0x22656a(0x145)](this,_0x249f7f,_0x3a625c);},VisuMZ[_0x3fd7af(0x941)][_0x3fd7af(0x91c)]=Game_Action[_0x3fd7af(0x9fd)][_0x3fd7af(0x6ce)],Game_Action[_0x3fd7af(0x9fd)]['itemHit']=function(_0x34a166){const _0x4428ec=_0x3fd7af,_0x158473=this[_0x4428ec(0xaf4)]()[_0x4428ec(0x7b9)];if(_0x158473['match'](/<ALWAYS HIT>/i))return 0x1;else{if(_0x158473[_0x4428ec(0x265)](/<ALWAYS HIT RATE: (\d+)([%％])>/i))return Number(RegExp['$1'])/0x64;else{let _0x4d0094=VisuMZ[_0x4428ec(0x941)]['Game_Action_itemHit'][_0x4428ec(0x145)](this,_0x34a166);return _0x4d0094=this[_0x4428ec(0x445)]['hitRate']*_0x4d0094+this['_multipliers'][_0x4428ec(0x141)],_0x4d0094;}}},Game_Action[_0x3fd7af(0x9fd)][_0x3fd7af(0xfd)]=function(_0x35379c){const _0x360f00=_0x3fd7af;if(!this['item']()[_0x360f00(0xa59)][_0x360f00(0xa77)])return 0x0;let _0x26b896=VisuMZ['BattleCore'][_0x360f00(0xa6b)][_0x360f00(0x81f)]['CriticalHitRateJS']['call'](this,_0x35379c);return _0x26b896=this[_0x360f00(0x445)][_0x360f00(0x2ad)]*_0x26b896+this[_0x360f00(0x445)]['criticalHitFlat'],_0x26b896;},Game_Action[_0x3fd7af(0x9fd)][_0x3fd7af(0x9e)]=function(_0x27f3f8){const _0x3290d5=_0x3fd7af;return _0x27f3f8=VisuMZ[_0x3290d5(0x941)][_0x3290d5(0xa6b)][_0x3290d5(0x81f)][_0x3290d5(0x1b7)][_0x3290d5(0x145)](this,_0x27f3f8),_0x27f3f8=this[_0x3290d5(0x445)][_0x3290d5(0x7df)]*_0x27f3f8+this[_0x3290d5(0x445)][_0x3290d5(0x680)],_0x27f3f8;},VisuMZ[_0x3fd7af(0x941)]['Game_Action_evalDamageFormula']=Game_Action[_0x3fd7af(0x9fd)][_0x3fd7af(0xae1)],Game_Action[_0x3fd7af(0x9fd)][_0x3fd7af(0xae1)]=function(_0x52848a){const _0x4c6ade=_0x3fd7af;if(this[_0x4c6ade(0x62b)]!==_0x4c6ade(0x986)){if(_0x4c6ade(0xa36)!==_0x4c6ade(0xa36)){if(!this[_0x4c6ade(0x804)][_0x4c6ade(0x9ca)](_0x5137db['id']))return![];}else return this['customDamageFormula'](_0x52848a);}else return DataManager[_0x4c6ade(0x1c1)](this['item']())==='MANUAL'?VisuMZ[_0x4c6ade(0x941)][_0x4c6ade(0x2d9)][_0x4c6ade(0x145)](this,_0x52848a):this[_0x4c6ade(0xa1)](_0x52848a);},Game_Action[_0x3fd7af(0x9fd)][_0x3fd7af(0xa74)]=function(_0x3ced2e){const _0xf92d59=_0x3fd7af;this[_0xf92d59(0x62b)]=_0x3ced2e;},Game_Action['prototype'][_0x3fd7af(0x550)]=function(_0x1c40fb){const _0x14618e=_0x3fd7af,_0xaa6f70=this[_0x14618e(0xaf4)](),_0x188e46=_0xaa6f70[_0x14618e(0xa59)][_0x14618e(0x803)];_0xaa6f70['damage'][_0x14618e(0x803)]=this[_0x14618e(0x62b)];let _0x5286cc=VisuMZ[_0x14618e(0x941)][_0x14618e(0x2d9)][_0x14618e(0x145)](this,_0x1c40fb);return _0xaa6f70[_0x14618e(0xa59)][_0x14618e(0x803)]=_0x188e46,_0x5286cc;},Game_Action[_0x3fd7af(0x9fd)][_0x3fd7af(0x204)]=function(){const _0x2d49fc=_0x3fd7af;if(this[_0x2d49fc(0xaf4)]()[_0x2d49fc(0x7b9)][_0x2d49fc(0x265)](/<DAMAGE STYLE:[ ](.*)>/i)){const _0x3b650c=String(RegExp['$1'])[_0x2d49fc(0x989)]()[_0x2d49fc(0x306)]();return _0x3b650c;}return _0x2d49fc(0x623);},Game_Action[_0x3fd7af(0x9fd)][_0x3fd7af(0xa1)]=function(_0x22863){const _0xaec7c4=_0x3fd7af,_0x556cf8=DataManager['getDamageStyle'](this[_0xaec7c4(0xaf4)]()),_0x5445eb=VisuMZ[_0xaec7c4(0x9b5)][_0x556cf8];try{return _0x5445eb['Formula']['call'](this,_0x22863);}catch(_0x19dfc2){if('FNhzc'!=='FNhzc')this['showHelpWindow']();else{if($gameTemp[_0xaec7c4(0x887)]())console[_0xaec7c4(0x712)](_0x19dfc2);return VisuMZ[_0xaec7c4(0x941)]['Game_Action_evalDamageFormula']['call'](this);}}},Game_Action[_0x3fd7af(0x9fd)][_0x3fd7af(0xac5)]=function(_0x441c43,_0x2e061a){const _0xec1bb1=_0x3fd7af;if(this[_0xec1bb1(0x884)]())return _0x2e061a;const _0x467003=this[_0xec1bb1(0x22a)](),_0x30ce69=_0x441c43;let _0x94b245=[],_0x28e598=[];_0x94b245[_0xec1bb1(0x18b)](this[_0xec1bb1(0x75e)][_0xec1bb1(0x5d3)],this['_armorPenetration'][_0xec1bb1(0x87f)]),_0x28e598['push'](this['_armorPenetration'][_0xec1bb1(0x8e0)],this[_0xec1bb1(0x75e)][_0xec1bb1(0x729)]);const _0x1d9b38=this['isPhysical']()?/<ARMOR REDUCTION:[ ](\d+\.?\d*)>/i:/<MAGIC REDUCTION:[ ](\d+\.?\d*)>/i,_0x2aba1a=this[_0xec1bb1(0x782)]()?/<ARMOR REDUCTION:[ ](\d+\.?\d*)([%％])>/i:/<MAGIC REDUCTION:[ ](\d+\.?\d*)([%％])>/i,_0x47c03d=this[_0xec1bb1(0x782)]()?/<ARMOR PENETRATION:[ ](\d+\.?\d*)>/i:/<MAGIC PENETRATION:[ ](\d+\.?\d*)>/i,_0xe5b8e5=this[_0xec1bb1(0x782)]()?/<ARMOR PENETRATION:[ ](\d+\.?\d*)([%％])>/i:/<MAGIC PENETRATION:[ ](\d+\.?\d*)([%％])>/i;_0x94b245=_0x94b245[_0xec1bb1(0x795)](_0x30ce69[_0xec1bb1(0x492)]()[_0xec1bb1(0x826)](_0x3e5877=>_0x3e5877&&_0x3e5877[_0xec1bb1(0x7b9)]['match'](_0x1d9b38)?Number(RegExp['$1']):0x0)),_0x28e598=_0x28e598[_0xec1bb1(0x795)](_0x30ce69['traitObjects']()[_0xec1bb1(0x826)](_0x4ad86c=>_0x4ad86c&&_0x4ad86c[_0xec1bb1(0x7b9)][_0xec1bb1(0x265)](_0x2aba1a)?Number(RegExp['$1'])/0x64:0x0)),_0x94b245=_0x94b245[_0xec1bb1(0x795)](_0x467003[_0xec1bb1(0x492)]()[_0xec1bb1(0x826)](_0x1d9de5=>_0x1d9de5&&_0x1d9de5[_0xec1bb1(0x7b9)]['match'](_0x47c03d)?Number(RegExp['$1']):0x0)),_0x28e598=_0x28e598[_0xec1bb1(0x795)](_0x467003[_0xec1bb1(0x492)]()['map'](_0x421213=>_0x421213&&_0x421213['note'][_0xec1bb1(0x265)](_0xe5b8e5)?Number(RegExp['$1'])/0x64:0x0));this[_0xec1bb1(0xaf4)]()['note'][_0xec1bb1(0x265)](_0x47c03d)&&(_0xec1bb1(0x96e)===_0xec1bb1(0x2c5)?this[_0xec1bb1(0x620)]()[_0xec1bb1(0x96c)](_0x274f29):_0x94b245[_0xec1bb1(0x18b)](Number(RegExp['$1'])));this[_0xec1bb1(0xaf4)]()[_0xec1bb1(0x7b9)][_0xec1bb1(0x265)](_0xe5b8e5)&&_0x28e598[_0xec1bb1(0x18b)](Number(RegExp['$1']));_0x2e061a=_0x94b245[_0xec1bb1(0x218)]((_0x48ce8f,_0x46676e)=>_0x48ce8f-_0x46676e,_0x2e061a);if(_0x2e061a>0x0){if(_0xec1bb1(0x673)===_0xec1bb1(0x673))_0x2e061a=_0x28e598['reduce']((_0x356e80,_0x58bf3d)=>_0x356e80*(0x1-_0x58bf3d),_0x2e061a);else{if(!_0x5e2c41['isSceneBattle']())return;_0x5b6cb4[_0xec1bb1(0x187)](_0x23dca8,_0x1d00ef);const _0x19fdbf=_0x588d28[_0xec1bb1(0x8be)](),_0x144f35=_0x1616f4['_subject'],_0x9d0d32=_0x5382f5[_0xec1bb1(0xa62)](_0x2a0a1d[_0xec1bb1(0xc5)]),_0xe11db0=_0x345e48[_0xec1bb1(0x951)],_0xe1fa5=_0x18cb6b[_0xec1bb1(0x4bd)];if(!_0x19fdbf||!_0x144f35)return;const _0x66168d=_0x144f35[_0xec1bb1(0x8f1)]();_0xd6b8e6[_0xec1bb1(0x97f)](_0x9d0d32,_0x66168d,_0xe11db0),_0x3d3cff[_0xec1bb1(0xaa7)]&&_0x19fdbf[_0xec1bb1(0x992)](_0xec1bb1(0x77a));}}return _0x2e061a;},VisuMZ[_0x3fd7af(0x941)][_0x3fd7af(0x325)]=Game_Action[_0x3fd7af(0x9fd)][_0x3fd7af(0x364)],Game_Action[_0x3fd7af(0x9fd)][_0x3fd7af(0x364)]=function(_0x41bd85,_0x4b8840){const _0x54d0b6=_0x3fd7af;_0x4b8840=_0x4b8840*this['_multipliers'][_0x54d0b6(0xa67)],_0x4b8840+=this['_multipliers'][_0x54d0b6(0xa51)]*(_0x4b8840>=0x0?0x1:-0x1),_0x4b8840=this[_0x54d0b6(0x163)](_0x54d0b6(0x2cc),_0x41bd85,_0x4b8840,![]),_0x4b8840=this['applyDamageCaps'](_0x4b8840),_0x4b8840=Math[_0x54d0b6(0x819)](_0x4b8840),this[_0x54d0b6(0x733)]=_0x4b8840,this[_0x54d0b6(0xd8)]=this[_0x54d0b6(0xd8)]||0x0,this[_0x54d0b6(0xd8)]+=_0x4b8840,VisuMZ[_0x54d0b6(0x941)][_0x54d0b6(0x325)][_0x54d0b6(0x145)](this,_0x41bd85,_0x4b8840),this['applyBattleCoreJS'](_0x54d0b6(0x850),_0x41bd85,_0x4b8840,!![]);},Game_Action['prototype']['applyDamageCaps']=function(_0x25d86c){const _0x429e54=_0x3fd7af;if(this[_0x429e54(0x224)]())return _0x25d86c;return _0x25d86c=this[_0x429e54(0x5e3)](_0x25d86c),_0x25d86c=this[_0x429e54(0x80d)](_0x25d86c),_0x25d86c;},Game_Action[_0x3fd7af(0x9fd)][_0x3fd7af(0x224)]=function(){const _0x56deea=_0x3fd7af,_0x11d910=/<BYPASS DAMAGE CAP>/i;if(this['item']()[_0x56deea(0x7b9)][_0x56deea(0x265)](_0x11d910))return!![];if(this[_0x56deea(0x22a)]()['traitObjects']()[_0x56deea(0xb8)](_0x5391bd=>_0x5391bd&&_0x5391bd[_0x56deea(0x7b9)][_0x56deea(0x265)](_0x11d910)))return!![];return!VisuMZ['BattleCore']['Settings']['Damage'][_0x56deea(0x454)];},Game_Action[_0x3fd7af(0x9fd)][_0x3fd7af(0x5e3)]=function(_0x22ccfd){const _0xb45b3f=_0x3fd7af;if(!VisuMZ['BattleCore'][_0xb45b3f(0xa6b)][_0xb45b3f(0x81f)]['EnableSoftCap'])return _0x22ccfd;const _0x1b89ae=/<BYPASS SOFT DAMAGE CAP>/i;if(this[_0xb45b3f(0xaf4)]()[_0xb45b3f(0x7b9)][_0xb45b3f(0x265)](_0x1b89ae))return!![];if(this[_0xb45b3f(0x22a)]()[_0xb45b3f(0x492)]()['some'](_0x4d77e8=>_0x4d77e8&&_0x4d77e8[_0xb45b3f(0x7b9)][_0xb45b3f(0x265)](_0x1b89ae)))return!![];const _0x3624e2=_0x22ccfd<0x0?-0x1:0x1;_0x22ccfd=Math['abs'](_0x22ccfd);let _0x3ef78a=this[_0xb45b3f(0x22a)]()['softDamageCapRate']();this[_0xb45b3f(0xaf4)]()['note']['match'](/<SOFT DAMAGE CAP:[ ]([\+\-]\d+)([%％])>/i)&&(_0xb45b3f(0x74d)===_0xb45b3f(0x74d)?_0x3ef78a+=Number(RegExp['$1'])/0x64:this[_0xb45b3f(0x677)]());_0x3ef78a=_0x3ef78a[_0xb45b3f(0x372)](0.01,0x1);const _0x254402=this['getHardDamageCap'](),_0x34134f=_0x3ef78a*_0x254402;if(_0x22ccfd>_0x34134f&&_0x254402>_0x34134f){_0x22ccfd-=_0x34134f;const _0x36f773=VisuMZ[_0xb45b3f(0x941)]['Settings'][_0xb45b3f(0x81f)][_0xb45b3f(0x702)],_0x3b631f=Math[_0xb45b3f(0x305)](0x1-_0x22ccfd/((_0x254402-_0x34134f)*_0x36f773+_0x22ccfd),0.01);_0x22ccfd*=_0x3b631f,_0x22ccfd+=_0x34134f;}return _0x22ccfd*_0x3624e2;},Game_Action['prototype'][_0x3fd7af(0x889)]=function(){const _0x36ba28=_0x3fd7af;if(this[_0x36ba28(0xaf4)]()[_0x36ba28(0x7b9)][_0x36ba28(0x265)](/<DAMAGE CAP:[ ](\d+)>/i)){if(_0x36ba28(0x9a7)===_0x36ba28(0x9a7))return Number(RegExp['$1']);else this[_0x36ba28(0x3be)]();}else{if(_0x36ba28(0xa3a)===_0x36ba28(0x209)){if(!_0x547bd5['isSceneBattle']())return;const _0x339cf6=_0x21fe95[_0x36ba28(0x4bd)];_0x339cf6[_0x36ba28(0x898)]();}else return this['subject']()['hardDamageCap']();}},Game_Action[_0x3fd7af(0x9fd)][_0x3fd7af(0x80d)]=function(_0x5688a8){const _0x5cf6a6=_0x3fd7af;let _0x3a45b5=this['getHardDamageCap']();return _0x5688a8[_0x5cf6a6(0x372)](-_0x3a45b5,_0x3a45b5);},VisuMZ[_0x3fd7af(0x941)][_0x3fd7af(0x29b)]=Game_Action[_0x3fd7af(0x9fd)][_0x3fd7af(0x3ca)],Game_Action['prototype'][_0x3fd7af(0x3ca)]=function(_0x1bac34){const _0x59020a=_0x3fd7af;this[_0x59020a(0x163)](_0x59020a(0x389),_0x1bac34,0x0,!![]),VisuMZ[_0x59020a(0x941)]['Game_Action_apply']['call'](this,_0x1bac34),this[_0x59020a(0x163)](_0x59020a(0x55d),_0x1bac34,this[_0x59020a(0x733)]||0x0,!![]),this[_0x59020a(0x9cf)](_0x1bac34);},Game_Action['prototype']['applyBattleCoreJS']=function(_0x413336,_0x1bd114,_0x105511,_0x249130){const _0x645132=_0x3fd7af;if(this['_tempBattler']||this[_0x645132(0xad3)])return;_0x105511=_0x105511||0x0;const _0x36c05c=_0x105511,_0x2d6b06=VisuMZ[_0x645132(0x941)][_0x645132(0xa6b)][_0x645132(0x9fe)],_0x1af3d0=_0x413336[_0x645132(0xab2)]('');if(_0x2d6b06[_0x1af3d0]){if(_0x645132(0x2de)!==_0x645132(0x792)){_0x105511=_0x2d6b06[_0x1af3d0]['call'](this,_0x105511,_0x1bd114);if(_0x249130)_0x105511=_0x36c05c;}else _0x3fcaa6['BattleCore'][_0x645132(0x63c)][_0x645132(0x145)](this,_0x4df38f);}let _0x586072=VisuMZ[_0x645132(0x941)]['createKeyJS'](this[_0x645132(0xaf4)](),_0x413336[_0x645132(0xab2)](''));if(VisuMZ[_0x645132(0x941)]['JS'][_0x586072]){_0x105511=VisuMZ[_0x645132(0x941)]['JS'][_0x586072][_0x645132(0x145)](this,this[_0x645132(0x22a)](),_0x1bd114,this['item'](),_0x105511);if(_0x249130)_0x105511=_0x36c05c;}for(const _0x3227f8 of this[_0x645132(0x22a)]()[_0x645132(0x492)]()){if(!_0x3227f8)continue;_0x586072=VisuMZ[_0x645132(0x941)][_0x645132(0xd2)](_0x3227f8,_0x413336[_0x645132(0xab2)](_0x645132(0x9f3)));if(VisuMZ['BattleCore']['JS'][_0x586072]){_0x105511=VisuMZ[_0x645132(0x941)]['JS'][_0x586072]['call'](this,this[_0x645132(0x22a)](),_0x1bd114,_0x3227f8,_0x105511);if(_0x249130)_0x105511=_0x36c05c;}}for(const _0x56fa7d of _0x1bd114[_0x645132(0x492)]()){if(_0x645132(0x8da)==='ERybT'){if(!this[_0x645132(0xaee)]())return;this[_0x645132(0x57a)][_0x645132(0x1c9)]['x']=-0x1,this['_battlerContainer']['x']=this['_battleField'][_0x645132(0xad0)],this[_0x645132(0x7eb)][_0x645132(0x1c9)]['x']=-0x1,this[_0x645132(0x7eb)]['x']=this[_0x645132(0x17a)]['width'],this[_0x645132(0x5ee)][_0x645132(0x1c9)]['x']=-0x1,this['_damageContainer']['x']=this[_0x645132(0x17a)]['x']+this[_0x645132(0x17a)][_0x645132(0xad0)];}else{if(!_0x56fa7d)continue;_0x586072=VisuMZ[_0x645132(0x941)]['createKeyJS'](_0x56fa7d,_0x413336[_0x645132(0xab2)](_0x645132(0x37c)));if(VisuMZ[_0x645132(0x941)]['JS'][_0x586072]){_0x105511=VisuMZ['BattleCore']['JS'][_0x586072][_0x645132(0x145)](this,this[_0x645132(0x22a)](),_0x1bd114,_0x56fa7d,_0x105511);if(_0x249130)_0x105511=_0x36c05c;}}}return _0x105511;},Game_Action[_0x3fd7af(0x9fd)]['actionBattleCoreJS']=function(_0x2a25ce){const _0x3213c4=_0x3fd7af,_0x28b12d=this['_totalValue']||0x0,_0x7c5a66=VisuMZ[_0x3213c4(0x941)][_0x3213c4(0xa6b)][_0x3213c4(0x9fe)],_0x13c3ad=_0x2a25ce[_0x3213c4(0xab2)]('');_0x7c5a66[_0x13c3ad]&&_0x7c5a66[_0x13c3ad][_0x3213c4(0x145)](this,_0x28b12d);let _0x58ef0a=VisuMZ['BattleCore'][_0x3213c4(0xd2)](this[_0x3213c4(0xaf4)](),_0x2a25ce);if(VisuMZ[_0x3213c4(0x941)]['JS'][_0x58ef0a]){if('sOzFP'!==_0x3213c4(0x6fe))VisuMZ[_0x3213c4(0x941)]['JS'][_0x58ef0a]['call'](this,this[_0x3213c4(0x22a)](),this['subject'](),this[_0x3213c4(0xaf4)](),_0x28b12d);else return _0x332758[_0x3213c4(0x941)][_0x3213c4(0x920)][_0x3213c4(0x145)](this);}for(const _0x1bc3f8 of this['subject']()['traitObjects']()){if(_0x3213c4(0x47d)===_0x3213c4(0x47d)){if(!_0x1bc3f8)continue;_0x58ef0a=VisuMZ[_0x3213c4(0x941)][_0x3213c4(0xd2)](_0x1bc3f8,_0x2a25ce),VisuMZ['BattleCore']['JS'][_0x58ef0a]&&VisuMZ[_0x3213c4(0x941)]['JS'][_0x58ef0a][_0x3213c4(0x145)](this,this[_0x3213c4(0x22a)](),this['subject'](),_0x1bc3f8,_0x28b12d);}else{const _0x26d6fa=this['_subject']['currentAction'](),_0x5a40b8=this[_0x3213c4(0x470)];_0x26d6fa&&_0x26d6fa['subject']()===_0x5a40b8&&_0x26d6fa[_0x3213c4(0x99a)](_0x3213c4(0x9ae)),_0x5bb740[_0x3213c4(0x941)][_0x3213c4(0x3e6)]['call'](this),_0x26d6fa&&_0x26d6fa[_0x3213c4(0x22a)]()===_0x5a40b8&&_0x26d6fa[_0x3213c4(0x99a)](_0x3213c4(0x582));}}},Game_Action[_0x3fd7af(0x9fd)][_0x3fd7af(0x706)]=function(){const _0x13ad13=_0x3fd7af;return VisuMZ['BattleCore'][_0x13ad13(0xa6b)][_0x13ad13(0x9fe)][_0x13ad13(0xaa2)]['call'](this);},Game_Action['prototype']['allowRandomSpeed']=function(){const _0xc3985b=_0x3fd7af;return VisuMZ[_0xc3985b(0x941)]['Settings']['Mechanics'][_0xc3985b(0x40f)];},Game_Action['prototype'][_0x3fd7af(0x6f2)]=function(){const _0x542379=_0x3fd7af;return this[_0x542379(0xaf4)]()[_0x542379(0x7b9)][_0x542379(0x265)](/<JS TARGETS>/i);},Game_Action[_0x3fd7af(0x9fd)][_0x3fd7af(0x5d5)]=function(){const _0x464487=_0x3fd7af;if(!this['_forcing']&&this['subject']()[_0x464487(0x388)]())return![];if(this['isCustomBattleScope']())return!![];return typeof this['item']()[_0x464487(0x3e1)]==='string';},VisuMZ[_0x3fd7af(0x941)]['Game_Action_isForOpponent']=Game_Action[_0x3fd7af(0x9fd)][_0x3fd7af(0x558)],Game_Action[_0x3fd7af(0x9fd)][_0x3fd7af(0x558)]=function(){const _0x38b61e=_0x3fd7af;return this[_0x38b61e(0x5d5)]()&&!this[_0x38b61e(0x6f2)]()?this[_0x38b61e(0x9ab)]():VisuMZ['BattleCore']['Game_Action_isForOpponent'][_0x38b61e(0x145)](this);},Game_Action[_0x3fd7af(0x9fd)][_0x3fd7af(0x9ab)]=function(){const _0x32ce2f=_0x3fd7af,_0x1c05a5=this[_0x32ce2f(0xaf4)]()[_0x32ce2f(0x3e1)];return _0x1c05a5['match'](/(?:ENEMY|ENEMIES|FOE|FOES)/i);},VisuMZ[_0x3fd7af(0x941)][_0x3fd7af(0x8a0)]=Game_Action[_0x3fd7af(0x9fd)][_0x3fd7af(0x61f)],Game_Action[_0x3fd7af(0x9fd)][_0x3fd7af(0x61f)]=function(){const _0x38cb94=_0x3fd7af;if(this[_0x38cb94(0x5d5)]()&&!this[_0x38cb94(0x6f2)]())return this[_0x38cb94(0x242)]();else{if(_0x38cb94(0x387)!==_0x38cb94(0x387))this['resizeWindowBorderStyle'](_0x57ac38),this[_0x38cb94(0x28b)]();else return VisuMZ[_0x38cb94(0x941)][_0x38cb94(0x8a0)][_0x38cb94(0x145)](this);}},Game_Action[_0x3fd7af(0x9fd)][_0x3fd7af(0x242)]=function(){const _0x16c4f2=_0x3fd7af,_0x7daf5d=this[_0x16c4f2(0xaf4)]()[_0x16c4f2(0x3e1)];return _0x7daf5d['match'](/(?:ALLY|ALLIES|FRIEND|FRIENDS)/i);},VisuMZ['BattleCore'][_0x3fd7af(0x920)]=Game_Action['prototype'][_0x3fd7af(0x368)],Game_Action[_0x3fd7af(0x9fd)]['isForRandom']=function(){const _0x4e8565=_0x3fd7af;return this['isBattleCoreTargetScope']()&&!this[_0x4e8565(0x6f2)]()?this[_0x4e8565(0x23f)]():VisuMZ[_0x4e8565(0x941)][_0x4e8565(0x920)][_0x4e8565(0x145)](this);},Game_Action[_0x3fd7af(0x9fd)][_0x3fd7af(0x23f)]=function(){const _0x3f52ae=_0x3fd7af,_0x4aaa96=this['item']()['scope'];return _0x4aaa96[_0x3f52ae(0x265)](/(?:RAND|RANDOM)/i);},VisuMZ[_0x3fd7af(0x941)][_0x3fd7af(0x1f2)]=Game_Action[_0x3fd7af(0x9fd)][_0x3fd7af(0x303)],Game_Action[_0x3fd7af(0x9fd)][_0x3fd7af(0x303)]=function(){const _0x260cd6=_0x3fd7af;if(this[_0x260cd6(0x5d5)]()&&!this[_0x260cd6(0x6f2)]()){if(_0x260cd6(0x63f)===_0x260cd6(0x480))_0x19da36[_0x260cd6(0x99a)]('PostStartActionJS');else return this[_0x260cd6(0xa09)]();}else return VisuMZ[_0x260cd6(0x941)][_0x260cd6(0x1f2)][_0x260cd6(0x145)](this);},Game_Action[_0x3fd7af(0x9fd)][_0x3fd7af(0xa09)]=function(){const _0x3a887b=_0x3fd7af,_0x3030ec=this[_0x3a887b(0xaf4)]()[_0x3a887b(0x3e1)];if(_0x3030ec['match'](/RANDOM/i))return![];if(_0x3030ec[_0x3a887b(0x265)](/ALL (?:ALLY|ALLIES|FRIEND|FRIENDS)/i))return![];if(_0x3030ec[_0x3a887b(0x265)](/ALL (?:ENEMY|ENEMIES|FOE|FOES)/i))return![];return VisuMZ[_0x3a887b(0x941)][_0x3a887b(0x1f2)][_0x3a887b(0x145)](this);},VisuMZ[_0x3fd7af(0x941)][_0x3fd7af(0x172)]=Game_Action[_0x3fd7af(0x9fd)]['makeTargets'],Game_Action[_0x3fd7af(0x9fd)][_0x3fd7af(0x107)]=function(){const _0x151a52=_0x3fd7af;let _0x445ed5=[];return this['isBattleCoreTargetScope']()?_0x445ed5=this[_0x151a52(0x40d)]():_0x445ed5=VisuMZ[_0x151a52(0x941)][_0x151a52(0x172)][_0x151a52(0x145)](this),_0x445ed5=this[_0x151a52(0xad7)](_0x445ed5),_0x445ed5;},Game_Action[_0x3fd7af(0x9fd)][_0x3fd7af(0x40d)]=function(){const _0x2a6e7b=_0x3fd7af;let _0x586f36=[];const _0x12d54f=String(this[_0x2a6e7b(0xaf4)]()['scope']),_0x1ddea4=VisuMZ[_0x2a6e7b(0x941)][_0x2a6e7b(0xd2)](this['item'](),_0x2a6e7b(0xc5));if(VisuMZ[_0x2a6e7b(0x941)]['JS'][_0x1ddea4]){_0x586f36=VisuMZ[_0x2a6e7b(0x941)][_0x2a6e7b(0x172)][_0x2a6e7b(0x145)](this);const _0x52cf2f=VisuMZ[_0x2a6e7b(0x941)]['createKeyJS'](this[_0x2a6e7b(0xaf4)](),'Targets');return _0x586f36=VisuMZ['BattleCore']['JS'][_0x52cf2f][_0x2a6e7b(0x145)](this,this[_0x2a6e7b(0x22a)](),_0x586f36),this[_0x2a6e7b(0x4e5)](_0x586f36);}if(_0x12d54f[_0x2a6e7b(0x265)](/(\d+) RANDOM ANY/i)){if(_0x2a6e7b(0x375)!==_0x2a6e7b(0x5ed)){let _0x1612b6=Number(RegExp['$1']);while(_0x1612b6--){const _0x40c88e=Math[_0x2a6e7b(0x545)](0x2)===0x0?this[_0x2a6e7b(0xaae)]():this['friendsUnit']();_0x586f36[_0x2a6e7b(0x18b)](_0x40c88e[_0x2a6e7b(0x943)]());}return this[_0x2a6e7b(0x4e5)](_0x586f36);}else{this[_0x2a6e7b(0xad0)]=_0x3feb34[_0x2a6e7b(0xad0)],this[_0x2a6e7b(0x26a)]=_0x179a1b[_0x2a6e7b(0x26a)];const _0x29c0ae=this[_0x2a6e7b(0xad0)]/this[_0x2a6e7b(0x2cf)][_0x2a6e7b(0xad0)],_0x43be6a=this[_0x2a6e7b(0x26a)]/this['bitmap'][_0x2a6e7b(0x26a)],_0x4368a6=_0x1865b6[_0x2a6e7b(0x305)](_0x29c0ae,_0x43be6a);this[_0x2a6e7b(0x1c9)]['x']=_0x4368a6,this['scale']['y']=_0x4368a6,this['x']=(_0x1a23b9['width']-this['width'])/0x2,this['y']=_0x3c5046[_0x2a6e7b(0x26a)]-this[_0x2a6e7b(0x26a)];}}if(_0x12d54f['match'](/(\d+) RANDOM (?:ENEMY|ENEMIES|FOE|FOES)/i)){let _0x5048d9=Number(RegExp['$1']);while(_0x5048d9--){if(_0x2a6e7b(0xad5)!==_0x2a6e7b(0x7ca))_0x586f36[_0x2a6e7b(0x18b)](this[_0x2a6e7b(0xaae)]()[_0x2a6e7b(0x943)]());else{const _0x19a904=_0xe665ee[_0x2a6e7b(0x1c1)](this[_0x2a6e7b(0x72d)]),_0x44bc74=_0x3bd08f[_0x2a6e7b(0x9b5)][_0x19a904];if(!_0x44bc74)return this[_0x2a6e7b(0x9b7)]();const _0x4f61d3=_0x2a6e7b(0x81a)[_0x2a6e7b(0xab2)](this[_0x2a6e7b(0x72d)][_0x2a6e7b(0xa59)][_0x2a6e7b(0x28f)]),_0xdf58fb=[null,_0x57475b['hp'],_0x148704['mp'],_0x55a94b['hp'],_0x19d6b4['mp'],_0x9a5b77['hp'],_0x120695['mp']][this[_0x2a6e7b(0x72d)][_0x2a6e7b(0xa59)]['type']];return _0x44bc74[_0x4f61d3][_0x2a6e7b(0xab2)](_0xdf58fb);}}return this[_0x2a6e7b(0x4e5)](_0x586f36);}if(_0x12d54f[_0x2a6e7b(0x265)](/(\d+) RANDOM (?:ALLY|ALLIES|FRIEND|FRIENDS)/i)){if(_0x2a6e7b(0x74e)!==_0x2a6e7b(0xa9d)){let _0x56ed6d=Number(RegExp['$1']);while(_0x56ed6d--){_0x586f36['push'](this[_0x2a6e7b(0x8b0)]()[_0x2a6e7b(0x943)]());}return this[_0x2a6e7b(0x4e5)](_0x586f36);}else{const _0x5cef97=!!this[_0x2a6e7b(0x84e)];this['_freezeMotionData']=_0x3d02b4,_0x5cef97&&(this[_0x2a6e7b(0x4da)](),this[_0x2a6e7b(0xa3)]());}}if(_0x12d54f['match'](/ALL (?:ALLY|ALLIES|FRIEND|FRIENDS) (?:BUT|EXCEPT) (?:USER|SELF)/i))return _0x586f36[_0x2a6e7b(0x18b)](...this[_0x2a6e7b(0x8b0)]()['aliveMembers']()[_0x2a6e7b(0xa8)](_0x593c86=>_0x593c86!==this[_0x2a6e7b(0x22a)]())),this[_0x2a6e7b(0x4e5)](_0x586f36);return VisuMZ[_0x2a6e7b(0x941)][_0x2a6e7b(0x172)][_0x2a6e7b(0x145)](this);},Game_Action[_0x3fd7af(0x9fd)][_0x3fd7af(0xad8)]=function(_0x213ba4){const _0x19ab46=_0x3fd7af,_0x32cd6c=[];for(let _0x26f695=0x0;_0x26f695<this[_0x19ab46(0x575)]();_0x26f695++){if(_0x19ab46(0x4a2)==='bDSIY'){if(_0x265959['battleCameraData']()[_0x19ab46(0x981)]>0x0)return!![];if(_0x27165d['battleCameraData']()[_0x19ab46(0x3a5)]>0x0)return!![];this[_0x19ab46(0x954)]='';}else _0x32cd6c[_0x19ab46(0x18b)](_0x213ba4[_0x19ab46(0x943)]());}return _0x32cd6c;},Game_Action[_0x3fd7af(0x9fd)][_0x3fd7af(0xad7)]=function(_0x563883){const _0x42eec3=_0x3fd7af;if(!this[_0x42eec3(0xaf4)]())return _0x563883;const _0x3e591d=this['item']()[_0x42eec3(0x7b9)];if(_0x3e591d[_0x42eec3(0x265)](/(?:BUT|EXCEPT) (?:USER|SELF)/i)){if(_0x42eec3(0x581)===_0x42eec3(0x7a8)){const _0x3fca4e=_0x362189['$1'],_0x12b396=_0x42eec3(0x2ba)[_0x42eec3(0xab2)](_0x3fca4e),_0x218480=_0x2370f8[_0x42eec3(0x941)][_0x42eec3(0xd2)](_0x3fb866,_0x4e1a16);_0x15356b[_0x42eec3(0x941)]['JS'][_0x218480]=new _0x56d322(_0x12b396);}else _0x563883[_0x42eec3(0x861)](this[_0x42eec3(0x22a)]());}return _0x563883;},VisuMZ[_0x3fd7af(0x941)]['Game_Action_itemEffectAddAttackState']=Game_Action['prototype'][_0x3fd7af(0x3e4)],Game_Action[_0x3fd7af(0x9fd)][_0x3fd7af(0x3e4)]=function(_0x507018,_0x54c5ea){const _0x3c8412=_0x3fd7af;VisuMZ[_0x3c8412(0x941)][_0x3c8412(0x331)][_0x3c8412(0x145)](this,_0x507018,_0x54c5ea);if(!_0x507018['isImmortal']())return;for(const _0x26c3d1 of this[_0x3c8412(0x22a)]()['attackStates']()){if(_0x3c8412(0x9ee)===_0x3c8412(0x9ee)){if(_0x26c3d1===_0x507018[_0x3c8412(0x588)]()){let _0x57aff5=_0x54c5ea[_0x3c8412(0x4e6)];_0x57aff5*=_0x507018[_0x3c8412(0x7ec)](_0x26c3d1),_0x57aff5*=this[_0x3c8412(0x22a)]()[_0x3c8412(0x2c0)](_0x26c3d1),_0x57aff5*=this[_0x3c8412(0x649)](_0x507018),Math['random']()<_0x57aff5&&(_0x3c8412(0x868)===_0x3c8412(0x868)?(_0x507018[_0x3c8412(0x2a2)]=!![],this[_0x3c8412(0xd6)](_0x507018)):this['windowskin']=_0x7b1926[_0x3c8412(0x802)](_0x775931[_0x3c8412(0x74c)]));}}else{if(!_0xabf3ab[_0x3c8412(0x970)]())return;if(!_0x420b25['VisuMZ_3_ActSeqCamera'])return;const _0x3572f3=_0x1c54a8[_0x3c8412(0x8be)]();if(!_0x3572f3)return;_0x3572f3[_0x3c8412(0x992)]('battleZoom');}}},VisuMZ['BattleCore'][_0x3fd7af(0x770)]=Game_Action[_0x3fd7af(0x9fd)][_0x3fd7af(0x1bf)],Game_Action[_0x3fd7af(0x9fd)][_0x3fd7af(0x1bf)]=function(_0x11490f,_0x204d99){const _0x3c9fa1=_0x3fd7af;VisuMZ[_0x3c9fa1(0x941)][_0x3c9fa1(0x770)][_0x3c9fa1(0x145)](this,_0x11490f,_0x204d99);if(!_0x11490f['isImmortal']())return;if(_0x204d99[_0x3c9fa1(0x320)]!==_0x11490f[_0x3c9fa1(0x588)]())return;let _0x53b45a=_0x204d99[_0x3c9fa1(0x4e6)];!this[_0x3c9fa1(0x884)]()&&('MKfXH'!=='MKfXH'?_0x3539a7[_0x3c9fa1(0x49a)](_0x5a1d14):(_0x53b45a*=_0x11490f[_0x3c9fa1(0x7ec)](_0x204d99['dataId']),_0x53b45a*=this[_0x3c9fa1(0x649)](_0x11490f))),Math['random']()<_0x53b45a&&(_0x11490f[_0x3c9fa1(0x2a2)]=!![],this[_0x3c9fa1(0xd6)](_0x11490f));},VisuMZ[_0x3fd7af(0x941)][_0x3fd7af(0x354)]=Game_Action[_0x3fd7af(0x9fd)]['applyGlobal'],Game_Action['prototype'][_0x3fd7af(0x538)]=function(){const _0x4acd24=_0x3fd7af;VisuMZ[_0x4acd24(0x941)][_0x4acd24(0x354)]['call'](this),this['applyGlobalCommonEventNotetags'](),this[_0x4acd24(0x97d)]();},Game_Action[_0x3fd7af(0x9fd)][_0x3fd7af(0x513)]=function(){const _0x3f888d=_0x3fd7af;if(!SceneManager[_0x3f888d(0x970)]())return;const _0x56f6ac=/<COMMON (?:EVENT|EVENTS):[ ](.*)>/gi,_0x2647f8=this[_0x3f888d(0xaf4)]()[_0x3f888d(0x7b9)][_0x3f888d(0x265)](_0x56f6ac);if(_0x2647f8)for(const _0x53b8c8 of _0x2647f8){if(!_0x53b8c8)continue;_0x53b8c8['match'](_0x56f6ac);const _0x40db62=String(RegExp['$1'])[_0x3f888d(0xaa3)](',')['map'](_0x1e70f4=>String(_0x1e70f4)[_0x3f888d(0x306)]()),_0x1d8c77=_0x40db62[_0x3f888d(0x826)](_0x4207a9=>DataManager[_0x3f888d(0xa3e)](_0x4207a9));for(const _0x4da89c of _0x1d8c77){if(_0x3f888d(0x5cc)===_0x3f888d(0x288))_0x2c8da0=_0x4b91c7;else{const _0x3308a1=$dataCommonEvents[_0x4da89c];_0x3308a1&&$gameTemp[_0x3f888d(0xab4)](_0x4da89c);}}}},DataManager['getCommonEventIdWithName']=function(_0xc239d3){const _0x495005=_0x3fd7af;_0xc239d3=_0xc239d3['toUpperCase']()[_0x495005(0x306)](),this[_0x495005(0x90e)]=this['_commonEventIDs']||{};if(this['_commonEventIDs'][_0xc239d3])return this[_0x495005(0x90e)][_0xc239d3];for(const _0x2a18e2 of $dataCommonEvents){if(!_0x2a18e2)continue;let _0x1c23c5=_0x2a18e2[_0x495005(0x504)];_0x1c23c5=_0x1c23c5[_0x495005(0x256)](/\x1I\[(\d+)\]/gi,''),_0x1c23c5=_0x1c23c5[_0x495005(0x256)](/\\I\[(\d+)\]/gi,''),this[_0x495005(0x90e)][_0x1c23c5[_0x495005(0x989)]()['trim']()]=_0x2a18e2['id'];}return this['_commonEventIDs'][_0xc239d3]||0x0;},Game_Action[_0x3fd7af(0x9fd)][_0x3fd7af(0x97d)]=function(){const _0x559d9d=_0x3fd7af;if(!SceneManager[_0x559d9d(0x970)]())return;const _0x39f034=VisuMZ[_0x559d9d(0x941)][_0x559d9d(0xa6b)][_0x559d9d(0x9fe)];if(_0x39f034[_0x559d9d(0x8eb)]){if(_0x559d9d(0xa93)!==_0x559d9d(0xaac))$gameSwitches[_0x559d9d(0x950)](_0x39f034[_0x559d9d(0x8eb)],![]);else return _0x350b0e[_0x559d9d(0x813)]();}_0x39f034[_0x559d9d(0x16f)]&&$gameSwitches[_0x559d9d(0x950)](_0x39f034[_0x559d9d(0x16f)],![]),_0x39f034['VariableDmg']&&$gameVariables[_0x559d9d(0x950)](_0x39f034[_0x559d9d(0x11b)],0x0),_0x39f034[_0x559d9d(0x3eb)]&&(_0x559d9d(0xa55)!=='YLxZB'?this[_0x559d9d(0x923)](_0x559d9d(0x142)):$gameVariables['setValue'](_0x39f034[_0x559d9d(0x3eb)],0x0));},Game_Action[_0x3fd7af(0x9fd)]['applyResultSwitches']=function(_0x1cc38f){const _0x18c9e0=_0x3fd7af;if(!SceneManager['isSceneBattle']())return;if(!_0x1cc38f)return;const _0x2be0fc=_0x1cc38f[_0x18c9e0(0x2c7)](),_0x149201=VisuMZ[_0x18c9e0(0x941)]['Settings'][_0x18c9e0(0x9fe)];_0x149201[_0x18c9e0(0x8eb)]&&_0x2be0fc[_0x18c9e0(0xa77)]&&$gameSwitches[_0x18c9e0(0x950)](_0x149201[_0x18c9e0(0x8eb)],!![]);_0x149201[_0x18c9e0(0x16f)]&&(_0x2be0fc[_0x18c9e0(0xb01)]||_0x2be0fc[_0x18c9e0(0x9af)])&&$gameSwitches[_0x18c9e0(0x950)](_0x149201['SwitchMissEvade'],!![]);if(_0x149201[_0x18c9e0(0x11b)]){if(_0x18c9e0(0x3c2)!=='DoSOV')return this['item']()[_0x18c9e0(0x7b9)][_0x18c9e0(0x265)](/<DAMAGE CAP:[ ](\d+)>/i)?_0x1f0642(_0x252841['$1']):this[_0x18c9e0(0x22a)]()[_0x18c9e0(0x799)]();else{let _0x2d779c=$gameVariables[_0x18c9e0(0x13a)](_0x149201[_0x18c9e0(0x11b)]);_0x2be0fc[_0x18c9e0(0x84d)]>0x0&&(_0x18c9e0(0x9e0)===_0x18c9e0(0x2ae)?(_0x59cbd9--,_0x2d4786++):_0x2d779c+=Math[_0x18c9e0(0x278)](_0x2be0fc['hpDamage'])),$gameVariables[_0x18c9e0(0x950)](_0x149201['VariableDmg'],_0x2d779c);}}if(_0x149201[_0x18c9e0(0x3eb)]){if(_0x18c9e0(0x401)!==_0x18c9e0(0x401))return this[_0x18c9e0(0xa45)][_0x18c9e0(0x997)]();else{let _0x3cb630=$gameVariables[_0x18c9e0(0x13a)](_0x149201[_0x18c9e0(0x3eb)]);if(_0x2be0fc[_0x18c9e0(0x84d)]<0x0){if(_0x18c9e0(0x399)===_0x18c9e0(0x3d9))return _0x141718[_0x18c9e0(0x91d)]()?_0x4a8277[_0x18c9e0(0xae3)]()[_0x18c9e0(0x732)]||0x1:0x1;else _0x3cb630+=Math[_0x18c9e0(0x278)](_0x2be0fc['hpDamage']);}$gameVariables[_0x18c9e0(0x950)](_0x149201['VariableHeal'],_0x3cb630);}}},VisuMZ[_0x3fd7af(0x941)][_0x3fd7af(0xa5)]=Game_BattlerBase[_0x3fd7af(0x9fd)][_0x3fd7af(0x2c4)],Game_BattlerBase[_0x3fd7af(0x9fd)]['initMembers']=function(){const _0x433caa=_0x3fd7af;VisuMZ[_0x433caa(0x941)][_0x433caa(0xa5)][_0x433caa(0x145)](this),this[_0x433caa(0x768)]();},Game_BattlerBase[_0x3fd7af(0x9fd)][_0x3fd7af(0x768)]=function(){this['_immortal']=![];},VisuMZ[_0x3fd7af(0x941)]['Game_BattlerBase_refresh']=Game_BattlerBase[_0x3fd7af(0x9fd)][_0x3fd7af(0x898)],Game_BattlerBase['prototype'][_0x3fd7af(0x898)]=function(){const _0x5bfe98=_0x3fd7af;this[_0x5bfe98(0x8d4)]={},VisuMZ[_0x5bfe98(0x941)]['Game_BattlerBase_refresh'][_0x5bfe98(0x145)](this);},Game_BattlerBase[_0x3fd7af(0x9fd)][_0x3fd7af(0x8a3)]=function(_0xce9808){const _0x470c82=_0x3fd7af;return this[_0x470c82(0x8d4)]=this[_0x470c82(0x8d4)]||{},this['_cache'][_0xce9808]!==undefined;},Game_BattlerBase[_0x3fd7af(0x9fd)]['hardDamageCap']=function(){const _0x281582=_0x3fd7af;if(this[_0x281582(0x8d4)][_0x281582(0x799)]!==undefined)return this[_0x281582(0x8d4)]['hardDamageCap'];const _0x343ee5=/<DAMAGE CAP:[ ](\d+)>/i,_0x4ba021=this[_0x281582(0x492)]()[_0x281582(0x826)](_0x27bde3=>_0x27bde3&&_0x27bde3['note'][_0x281582(0x265)](_0x343ee5)?Number(RegExp['$1']):0x0);let _0x61b1bb=_0x4ba021[_0x281582(0x732)]>0x0?Math[_0x281582(0x305)](..._0x4ba021):0x0;if(_0x61b1bb<=0x0)_0x61b1bb=VisuMZ[_0x281582(0x941)][_0x281582(0xa6b)][_0x281582(0x81f)][_0x281582(0x8e9)];return this[_0x281582(0x8d4)][_0x281582(0x799)]=_0x61b1bb,this[_0x281582(0x8d4)]['hardDamageCap'];},Game_BattlerBase[_0x3fd7af(0x9fd)][_0x3fd7af(0xa9)]=function(){const _0x2a8871=_0x3fd7af;if(this[_0x2a8871(0x8d4)]['softDamageCap']!==undefined)return this[_0x2a8871(0x8d4)]['softDamageCap'];let _0x4e82cf=VisuMZ['BattleCore'][_0x2a8871(0xa6b)][_0x2a8871(0x81f)][_0x2a8871(0x7e7)];const _0x25839b=/<SOFT DAMAGE CAP:[ ]([\+\-]\d+)([%％])>/i,_0x4d9c49=this[_0x2a8871(0x492)]()[_0x2a8871(0x826)](_0x50b02f=>_0x50b02f&&_0x50b02f[_0x2a8871(0x7b9)][_0x2a8871(0x265)](_0x25839b)?Number(RegExp['$1'])/0x64:0x0);return _0x4e82cf=_0x4d9c49[_0x2a8871(0x218)]((_0x4f3600,_0x3c7640)=>_0x4f3600+_0x3c7640,_0x4e82cf),this[_0x2a8871(0x8d4)][_0x2a8871(0xa8d)]=_0x4e82cf,this[_0x2a8871(0x8d4)][_0x2a8871(0xa8d)][_0x2a8871(0x372)](0.01,0x1);},VisuMZ[_0x3fd7af(0x941)][_0x3fd7af(0x106)]=Game_BattlerBase[_0x3fd7af(0x9fd)]['die'],Game_BattlerBase['prototype'][_0x3fd7af(0x5c2)]=function(){const _0x247c64=_0x3fd7af;VisuMZ['BattleCore'][_0x247c64(0x106)]['call'](this),SceneManager['isSceneBattle']()&&this[_0x247c64(0x42a)](_0x247c64(0x6f5));},Game_BattlerBase['prototype']['battler']=function(){const _0x19d959=_0x3fd7af;if(!SceneManager[_0x19d959(0x970)]())return null;if(!SceneManager[_0x19d959(0x450)][_0x19d959(0x3b4)])return null;return SceneManager[_0x19d959(0x450)][_0x19d959(0x3b4)][_0x19d959(0x6d7)](this);},Game_BattlerBase[_0x3fd7af(0x9fd)][_0x3fd7af(0x73a)]=function(){const _0x19b3fb=_0x3fd7af;return VisuMZ[_0x19b3fb(0x941)][_0x19b3fb(0xa6b)]['Actor']['AnchorX'];},Game_BattlerBase[_0x3fd7af(0x9fd)]['svBattlerAnchorY']=function(){const _0x3d2d9e=_0x3fd7af;return VisuMZ[_0x3d2d9e(0x941)][_0x3d2d9e(0xa6b)]['Actor'][_0x3d2d9e(0xaa)];},Game_BattlerBase[_0x3fd7af(0x9fd)]['svBattlerShadowVisible']=function(){const _0x5511ed=_0x3fd7af;return this[_0x5511ed(0x91d)]&&this[_0x5511ed(0x91d)]()?VisuMZ[_0x5511ed(0x941)]['Settings'][_0x5511ed(0x9de)][_0x5511ed(0x5b4)]:VisuMZ[_0x5511ed(0x941)][_0x5511ed(0xa6b)][_0x5511ed(0x520)][_0x5511ed(0x5b4)];},Game_BattlerBase[_0x3fd7af(0x9fd)][_0x3fd7af(0x3bc)]=function(){return!![];},Game_BattlerBase['prototype'][_0x3fd7af(0x117)]=function(){return 0x0;},Game_BattlerBase[_0x3fd7af(0x9fd)]['battleUIOffsetY']=function(){return 0x0;},Game_BattlerBase[_0x3fd7af(0x9fd)][_0x3fd7af(0x456)]=function(_0x8f1339){const _0x530a25=_0x3fd7af;if(!_0x8f1339)return 0x0;let _0x559778=0x0;const _0x757c94=_0x8f1339[_0x530a25(0x7b9)];return _0x757c94[_0x530a25(0x265)](/<BATTLE UI OFFSET X:[ ]([\+\-]\d+)>/i)&&(_0x559778+=Number(RegExp['$1'])),_0x757c94[_0x530a25(0x265)](/<BATTLE UI OFFSET:[ ]([\+\-]\d+),[ ]([\+\-]\d+)>/i)&&(_0x559778+=Number(RegExp['$1'])),_0x559778;},Game_BattlerBase[_0x3fd7af(0x9fd)][_0x3fd7af(0x400)]=function(_0x370d86){const _0x48428b=_0x3fd7af;if(!_0x370d86)return 0x0;let _0x229563=0x0;const _0x219d6e=_0x370d86[_0x48428b(0x7b9)];return _0x219d6e[_0x48428b(0x265)](/<BATTLE UI OFFSET Y:[ ]([\+\-]\d+)>/i)&&(_0x229563+=Number(RegExp['$1'])),_0x219d6e['match'](/<BATTLE UI OFFSET:[ ]([\+\-]\d+),[ ]([\+\-]\d+)>/i)&&('NQfLS'===_0x48428b(0x186)?this[_0x48428b(0x923)](_0x48428b(0x7b2)):_0x229563+=Number(RegExp['$2'])),_0x229563;},VisuMZ[_0x3fd7af(0x941)][_0x3fd7af(0x481)]=Game_BattlerBase[_0x3fd7af(0x9fd)][_0x3fd7af(0x5ce)],Game_BattlerBase[_0x3fd7af(0x9fd)]['isStateResist']=function(_0x221fe5){const _0x201578=_0x3fd7af;if(_0x221fe5===this['deathStateId']()&&this[_0x201578(0xa0b)]())return!![];return VisuMZ[_0x201578(0x941)][_0x201578(0x481)][_0x201578(0x145)](this,_0x221fe5);},Game_BattlerBase[_0x3fd7af(0x9fd)][_0x3fd7af(0xa0b)]=function(){const _0x5c8534=_0x3fd7af;return this[_0x5c8534(0x493)];},Game_BattlerBase[_0x3fd7af(0x9fd)]['setImmortal']=function(_0x4b4d0d){const _0x211008=_0x3fd7af;if(_0x4b4d0d)this[_0x211008(0x9d9)]();else{if(_0x211008(0x20b)!=='YmWNk'){if(_0x5eced7[_0x211008(0x5a0)])return![];return _0x35243a[_0x211008(0x941)]['SceneManager_isSceneChanging'][_0x211008(0x145)](this);}else this[_0x211008(0x807)]();}},Game_BattlerBase[_0x3fd7af(0x9fd)][_0x3fd7af(0x9d9)]=function(){const _0x418a24=_0x3fd7af;if(this[_0x418a24(0x217)]())return;this['_immortal']=!![],this[_0x418a24(0x2a2)]=![];},Game_BattlerBase['prototype'][_0x3fd7af(0x807)]=function(){const _0x144c68=_0x3fd7af,_0x38a05e=this[_0x144c68(0x7fd)]();this['_immortal']=![];if(_0x38a05e&&this[_0x144c68(0x2a2)]){if(_0x144c68(0x385)===_0x144c68(0x494))return this[_0x144c68(0x9d8)]()&&this[_0x144c68(0x9d8)]()[_0x144c68(0xaf4)]()&&!this['currentAction']()[_0x144c68(0x7ce)]();else this[_0x144c68(0x5c2)]();}this['_deathStateApplied']=![],this[_0x144c68(0x898)](),this['isDead']()&&_0x38a05e&&(this[_0x144c68(0x75f)](),this[_0x144c68(0x4da)]());},VisuMZ['BattleCore'][_0x3fd7af(0x3a4)]=Game_Action[_0x3fd7af(0x9fd)][_0x3fd7af(0x5e6)],Game_Action[_0x3fd7af(0x9fd)][_0x3fd7af(0x5e6)]=function(){const _0x208fab=_0x3fd7af;if(this[_0x208fab(0xaf4)]()){if(_0x208fab(0x1c7)===_0x208fab(0x79c))_0x1e762e[_0x208fab(0x504)]=_0x4595cb(_0x29f96d['$1']);else return VisuMZ[_0x208fab(0x941)][_0x208fab(0x3a4)]['call'](this);}else return 0x0;},VisuMZ[_0x3fd7af(0x941)][_0x3fd7af(0x7a1)]=Game_Action[_0x3fd7af(0x9fd)][_0x3fd7af(0x537)],Game_Action[_0x3fd7af(0x9fd)][_0x3fd7af(0x537)]=function(){const _0x39e7b6=_0x3fd7af;if(this[_0x39e7b6(0x22a)]()&&this[_0x39e7b6(0x22a)]()[_0x39e7b6(0x505)]()){if('eqUYM'!=='eqUYM'){const _0x43b331=this['faceRect'](_0x1af3da);this[_0x39e7b6(0x90d)](_0x7730ef,_0x43b331['x'],_0x43b331['y'],_0x43b331[_0x39e7b6(0xad0)],_0x43b331[_0x39e7b6(0x26a)]);}else VisuMZ['BattleCore'][_0x39e7b6(0x7a1)][_0x39e7b6(0x145)](this);}else this['clear']();},VisuMZ[_0x3fd7af(0x941)][_0x3fd7af(0x69b)]=Game_BattlerBase['prototype']['canAttack'],Game_BattlerBase[_0x3fd7af(0x9fd)][_0x3fd7af(0x505)]=function(){const _0x5b2c75=_0x3fd7af;if(!this[_0x5b2c75(0x578)]())return![];return VisuMZ[_0x5b2c75(0x941)][_0x5b2c75(0x69b)][_0x5b2c75(0x145)](this);},Game_BattlerBase['prototype']['canAttackBattleCore']=function(){const _0x968ebc=_0x3fd7af;for(const _0x406db2 of this[_0x968ebc(0x492)]()){if(_0x968ebc(0x4fc)===_0x968ebc(0x4fc)){if(!_0x406db2)continue;if(_0x406db2['note'][_0x968ebc(0x265)](/<(?:ATTACK SEAL|SEAL ATTACK)>/i))return![];}else{const _0x255acc=this['getChildIndex'](this[_0x968ebc(0xa0e)]);this['addChildAt'](this[_0x968ebc(0xac2)],_0x255acc),this[_0x968ebc(0x168)]();}}return!![];},VisuMZ[_0x3fd7af(0x941)][_0x3fd7af(0x947)]=Game_Action[_0x3fd7af(0x9fd)][_0x3fd7af(0xabd)],Game_Action['prototype'][_0x3fd7af(0xabd)]=function(){const _0x27b554=_0x3fd7af;this[_0x27b554(0x22a)]()[_0x27b554(0x4ef)]()&&('Qqlos'!=='Qqlos'?this[_0x27b554(0x627)](0x0,0x0,0xc):VisuMZ['BattleCore'][_0x27b554(0x947)][_0x27b554(0x145)](this));},VisuMZ[_0x3fd7af(0x941)][_0x3fd7af(0xe1)]=Game_BattlerBase[_0x3fd7af(0x9fd)][_0x3fd7af(0x4ef)],Game_BattlerBase[_0x3fd7af(0x9fd)][_0x3fd7af(0x4ef)]=function(){const _0x56dd7=_0x3fd7af;if(!this['canGuardBattleCore']())return![];return VisuMZ[_0x56dd7(0x941)][_0x56dd7(0xe1)][_0x56dd7(0x145)](this);},Game_BattlerBase['prototype'][_0x3fd7af(0x6d3)]=function(){const _0x58d79a=_0x3fd7af;for(const _0x54755d of this[_0x58d79a(0x492)]()){if(!_0x54755d)continue;if(_0x54755d[_0x58d79a(0x7b9)][_0x58d79a(0x265)](/<(?:GUARD SEAL|SEAL GUARD)>/i))return![];}return!![];},Game_BattlerBase['prototype'][_0x3fd7af(0x434)]=function(){const _0x419f4f=_0x3fd7af;for(const _0xdca122 of this[_0x419f4f(0x492)]()){if(_0x419f4f(0x7b8)==='GCvAi')this[_0x419f4f(0x52a)]=this[_0x419f4f(0x9f1)](this['_floatHeight'],this[_0x419f4f(0x6eb)],_0x4bee2a,_0x1d330b,_0x2abda4);else{if(!_0xdca122)continue;if(_0xdca122[_0x419f4f(0x7b9)][_0x419f4f(0x265)](/<(?:ITEM SEAL|SEAL ITEM|SEAL ITEMS)>/i))return![];}}return!![];},Game_Battler[_0x3fd7af(0x9fd)][_0x3fd7af(0x73e)]=function(){const _0x327556=_0x3fd7af;return VisuMZ[_0x327556(0x941)][_0x327556(0xa6b)]['Mechanics'][_0x327556(0x40f)];},VisuMZ['BattleCore'][_0x3fd7af(0x736)]=Game_Battler[_0x3fd7af(0x9fd)]['regenerateAll'],Game_Battler['prototype'][_0x3fd7af(0x9eb)]=function(){const _0xa49b6b=_0x3fd7af;if(SceneManager['isSceneBattle']()&&$gameTroop[_0xa49b6b(0x4b4)]()<=0x0)return;if(SceneManager['isSceneBattle']()&&BattleManager['isTpb']()&&this['_lastRegenFrameCount']===Graphics[_0xa49b6b(0x3fc)])return;this['_lastRegenFrameCount']=Graphics[_0xa49b6b(0x3fc)],this[_0xa49b6b(0xa39)](_0xa49b6b(0x880)),VisuMZ[_0xa49b6b(0x941)][_0xa49b6b(0x736)]['call'](this),this[_0xa49b6b(0x50b)](),this[_0xa49b6b(0xa39)](_0xa49b6b(0x309));},Game_Battler[_0x3fd7af(0x9fd)][_0x3fd7af(0x50b)]=function(){const _0x33bf70=_0x3fd7af;if(SceneManager[_0x33bf70(0x970)]())for(const _0x1281f7 of this[_0x33bf70(0x492)]()){if(_0x33bf70(0x611)!==_0x33bf70(0x289)){if(!_0x1281f7)continue;this[_0x33bf70(0x679)](_0x1281f7);}else this[_0x33bf70(0x5a4)]();}},Game_Battler[_0x3fd7af(0x9fd)][_0x3fd7af(0x679)]=function(_0x15b2fb){const _0x36a04d=_0x3fd7af;if(!Imported[_0x36a04d(0x28a)])return;if(!SceneManager[_0x36a04d(0x970)]())return;if(this[_0x36a04d(0x217)]())return;if(this[_0x36a04d(0x9cb)]())return;if(_0x15b2fb[_0x36a04d(0x7b9)][_0x36a04d(0x265)](/<(?:REGENERATE|REGEN|DEGEN|DOT|SLIP)[ ]ANIMATION:[ ](\d+)>/i)){if(_0x36a04d(0x4cb)===_0x36a04d(0x290))_0x3a9932=_0x2e1b8a[_0x36a04d(0x181)]()[_0x36a04d(0x2e7)],_0xdbdb08=_0x41b420[_0x36a04d(0x181)]()['_homeY'];else{const _0x4e459c=Number(RegExp['$1']);$gameTemp[_0x36a04d(0x476)]([this],_0x4e459c,![],![]);}}},VisuMZ['BattleCore'][_0x3fd7af(0x652)]=Game_Battler[_0x3fd7af(0x9fd)]['startTpbTurn'],Game_Battler[_0x3fd7af(0x9fd)]['startTpbTurn']=function(){const _0x2546e3=_0x3fd7af;this['processBattleCoreJS'](_0x2546e3(0x8cf)),VisuMZ[_0x2546e3(0x941)][_0x2546e3(0x652)]['call'](this),this[_0x2546e3(0xa39)](_0x2546e3(0x16b));},VisuMZ[_0x3fd7af(0x941)]['Game_Battler_onTurnEnd']=Game_Battler[_0x3fd7af(0x9fd)][_0x3fd7af(0x641)],Game_Battler[_0x3fd7af(0x9fd)][_0x3fd7af(0x641)]=function(){const _0x197c50=_0x3fd7af;this[_0x197c50(0xa39)](_0x197c50(0x580)),VisuMZ['BattleCore'][_0x197c50(0xa4d)][_0x197c50(0x145)](this),this[_0x197c50(0xa39)](_0x197c50(0x71e));},Game_Battler[_0x3fd7af(0x9fd)]['processBattleCoreJS']=function(_0x4a9cc2){const _0x20b17c=_0x3fd7af;if(this['_tempBattler']||this[_0x20b17c(0xad3)])return;const _0x5c8d9c=VisuMZ[_0x20b17c(0x941)]['Settings'][_0x20b17c(0x9fe)];if(_0x5c8d9c[_0x4a9cc2])_0x5c8d9c[_0x4a9cc2][_0x20b17c(0x145)](this);for(const _0x7f52e3 of this[_0x20b17c(0x492)]()){if(_0x20b17c(0x1e6)!=='iUKTy'){if(!_0x5a4b82[_0x20b17c(0x941)]['Settings'][_0x20b17c(0x81f)][_0x20b17c(0x857)])return _0x4dda55;const _0x56fc64=/<BYPASS SOFT DAMAGE CAP>/i;if(this[_0x20b17c(0xaf4)]()[_0x20b17c(0x7b9)][_0x20b17c(0x265)](_0x56fc64))return!![];if(this[_0x20b17c(0x22a)]()[_0x20b17c(0x492)]()['some'](_0x321cad=>_0x321cad&&_0x321cad[_0x20b17c(0x7b9)]['match'](_0x56fc64)))return!![];const _0xc573f2=_0x2ad609<0x0?-0x1:0x1;_0x5c3bad=_0x57c690[_0x20b17c(0x278)](_0x58aedd);let _0x3a5de0=this['subject']()[_0x20b17c(0xa9)]();this['item']()[_0x20b17c(0x7b9)][_0x20b17c(0x265)](/<SOFT DAMAGE CAP:[ ]([\+\-]\d+)([%％])>/i)&&(_0x3a5de0+=_0x3bf6a2(_0x10092c['$1'])/0x64);_0x3a5de0=_0x3a5de0['clamp'](0.01,0x1);const _0xa3ec1b=this[_0x20b17c(0x889)](),_0x52d127=_0x3a5de0*_0xa3ec1b;if(_0x50c172>_0x52d127&&_0xa3ec1b>_0x52d127){_0x39e2f0-=_0x52d127;const _0x2417ca=_0x5487ac['BattleCore']['Settings']['Damage']['DefaultSoftScaler'],_0x12b905=_0x260c6b[_0x20b17c(0x305)](0x1-_0x361b99/((_0xa3ec1b-_0x52d127)*_0x2417ca+_0x2e868d),0.01);_0x1ebffb*=_0x12b905,_0x2c73f1+=_0x52d127;}return _0x1b66a4*_0xc573f2;}else{if(!_0x7f52e3)continue;key=VisuMZ[_0x20b17c(0x941)][_0x20b17c(0xd2)](_0x7f52e3,_0x4a9cc2),VisuMZ[_0x20b17c(0x941)]['JS'][key]&&VisuMZ[_0x20b17c(0x941)]['JS'][key][_0x20b17c(0x145)](this,this,this,_0x7f52e3,0x0);}}},Game_Battler[_0x3fd7af(0x9fd)][_0x3fd7af(0xc3)]=function(){const _0x35ef23=_0x3fd7af;return VisuMZ[_0x35ef23(0x941)][_0x35ef23(0xa6b)][_0x35ef23(0x9de)]['ChantStyle']||![];},Game_Battler[_0x3fd7af(0x9fd)][_0x3fd7af(0x5fd)]=function(){const _0x21db92=_0x3fd7af;if(this['isWaiting']()){if(this[_0x21db92(0xc3)]()){if('NHSQx'!=='KCKov'){if(this['_actions'][_0x21db92(0xb8)](_0x1d962c=>_0x1d962c[_0x21db92(0xaf4)]()&&_0x1d962c[_0x21db92(0x695)]()))return!![];}else _0xb958a3[_0x21db92(0x941)][_0x21db92(0x436)][_0x21db92(0x145)](this),this[_0x21db92(0x9a3)]();}else{if(this[_0x21db92(0x90f)]['some'](_0x21a61d=>_0x21a61d[_0x21db92(0xaf4)]()&&_0x21a61d[_0x21db92(0x7ce)]())){if(_0x21db92(0x81c)!==_0x21db92(0x81c)){if(!_0x1a05a6[_0x21db92(0x941)][_0x21db92(0xa6b)][_0x21db92(0x83a)]['ShowCurrentState'])return;_0xa692a7[_0x21db92(0x941)][_0x21db92(0x8ea)][_0x21db92(0x145)](this,_0x207435);}else return!![];}}}if(BattleManager[_0x21db92(0x9fa)]()&&this['_tpbState']===_0x21db92(0x64e)){if('zTvko'!==_0x21db92(0x471))return!![];else{if(this['chantStyle']()){if('nMVBy'===_0x21db92(0x7d2))return this[_0x21db92(0x9d8)]()&&this['currentAction']()[_0x21db92(0xaf4)]()&&this[_0x21db92(0x9d8)]()[_0x21db92(0x695)]();else{if(!_0x48576f[_0x21db92(0x941)]['Settings']['HpGauge']['AddHpGaugeOption'])return;const _0x39eda2=_0x531ba3[_0x21db92(0x18d)],_0x22a589=_0x21db92(0x18d);this[_0x21db92(0xf7)](_0x39eda2,_0x22a589);}}else{if(_0x21db92(0x2a9)===_0x21db92(0x4fe))this[_0x21db92(0x763)][_0x21db92(0x63d)](),this[_0x21db92(0x776)]['close']();else return this['currentAction']()&&this[_0x21db92(0x9d8)]()[_0x21db92(0xaf4)]()&&this[_0x21db92(0x9d8)]()[_0x21db92(0x7ce)]();}}}return![];},Game_Battler[_0x3fd7af(0x9fd)][_0x3fd7af(0xdc)]=function(){const _0xc42007=_0x3fd7af;if(BattleManager[_0xc42007(0x9fa)]()&&this['_tpbState']===_0xc42007(0x64e)){if(_0xc42007(0x336)!==_0xc42007(0x60f))return this[_0xc42007(0xc3)]()?this['currentAction']()&&this[_0xc42007(0x9d8)]()[_0xc42007(0xaf4)]()&&!this[_0xc42007(0x9d8)]()[_0xc42007(0x695)]():this['currentAction']()&&this[_0xc42007(0x9d8)]()[_0xc42007(0xaf4)]()&&!this['currentAction']()['isMagicSkill']();else{if(_0x482fc5[_0xc42007(0x13a)](_0x23825b))return![];}}return![];},VisuMZ[_0x3fd7af(0x941)]['Game_Battler_clearDamagePopup']=Game_Battler[_0x3fd7af(0x9fd)][_0x3fd7af(0x570)],Game_Battler[_0x3fd7af(0x9fd)][_0x3fd7af(0x570)]=function(){const _0xe39b42=_0x3fd7af;VisuMZ[_0xe39b42(0x941)][_0xe39b42(0x778)]['call'](this),this[_0xe39b42(0x223)]=[];},Game_Battler['prototype']['isDamagePopupRequested']=function(){const _0x53d8e7=_0x3fd7af;if(!this[_0x53d8e7(0x223)])this[_0x53d8e7(0x570)]();return this['_damagePopupArray'][_0x53d8e7(0x732)]>0x0;},Game_Battler[_0x3fd7af(0x9fd)][_0x3fd7af(0x39d)]=function(){const _0x2ddabd=_0x3fd7af;if(!SceneManager[_0x2ddabd(0x970)]())return;if(!this[_0x2ddabd(0x223)])this['clearDamagePopup']();this[_0x2ddabd(0x20f)]();const _0x54ed83=this[_0x2ddabd(0x181)]();if(_0x54ed83)_0x54ed83[_0x2ddabd(0x4d0)]();},Game_Battler[_0x3fd7af(0x9fd)][_0x3fd7af(0x20f)]=function(){const _0x3b4363=_0x3fd7af,_0x512bb0=this['result']();if(_0x512bb0[_0x3b4363(0xb01)]||_0x512bb0['evaded']){const _0x1baee9=JsonEx[_0x3b4363(0x4ad)](_0x512bb0);_0x1baee9[_0x3b4363(0x3ac)]=![],_0x1baee9['mpDamage']=0x0,this[_0x3b4363(0x223)][_0x3b4363(0x18b)](_0x1baee9);}if(_0x512bb0[_0x3b4363(0x3ac)]){const _0x5643ed=JsonEx[_0x3b4363(0x4ad)](_0x512bb0);_0x5643ed[_0x3b4363(0xb01)]=![],_0x5643ed[_0x3b4363(0x9af)]=![],_0x5643ed[_0x3b4363(0x430)]=0x0,this[_0x3b4363(0x223)]['push'](_0x5643ed);}if(_0x512bb0[_0x3b4363(0x430)]!==0x0){if(_0x3b4363(0x544)===_0x3b4363(0x2df)){if(!_0x39e45b[_0x3b4363(0x970)]())return null;if(!_0x32c5d0['_scene'][_0x3b4363(0x3b4)])return null;return _0x2ab93b[_0x3b4363(0x450)][_0x3b4363(0x3b4)][_0x3b4363(0x6d7)](this);}else{const _0x1b33fa=JsonEx[_0x3b4363(0x4ad)](_0x512bb0);_0x1b33fa[_0x3b4363(0xb01)]=![],_0x1b33fa[_0x3b4363(0x9af)]=![],_0x1b33fa[_0x3b4363(0x3ac)]=![],this[_0x3b4363(0x223)][_0x3b4363(0x18b)](_0x1b33fa);}}},Game_Battler[_0x3fd7af(0x9fd)][_0x3fd7af(0x378)]=function(){const _0x89fe11=_0x3fd7af;if(!this[_0x89fe11(0x223)])this['clearDamagePopup']();return VisuMZ[_0x89fe11(0x941)][_0x89fe11(0xa6b)][_0x89fe11(0x81f)]['NewPopupBottom']?this[_0x89fe11(0x223)][_0x89fe11(0x997)]():this[_0x89fe11(0x223)][_0x89fe11(0x946)]();},Game_Battler[_0x3fd7af(0x9fd)][_0x3fd7af(0x86b)]=function(_0x1e2448,_0x45cd18){const _0x3d28dc=_0x3fd7af;if(!SceneManager[_0x3d28dc(0x970)]())return;if(!this[_0x3d28dc(0x181)]())return;if(_0x1e2448[_0x3d28dc(0x732)]<=0x0)return;_0x45cd18=_0x45cd18||{},_0x45cd18[_0x3d28dc(0xaab)]=_0x45cd18['textColor']||_0x3d28dc(0x2cd),_0x45cd18['flashColor']=_0x45cd18[_0x3d28dc(0x7cf)]||[0x0,0x0,0x0,0x0],_0x45cd18[_0x3d28dc(0x528)]=_0x45cd18[_0x3d28dc(0x528)]||0x0,this['battler']()['setupTextPopup'](_0x1e2448,_0x45cd18);},Game_Battler[_0x3fd7af(0x9fd)]['setupIconTextPopup']=function(_0x4191dc,_0xbe78f,_0x149a5d){const _0xa596b5=_0x3fd7af;if(!SceneManager[_0xa596b5(0x970)]())return;if(!this[_0xa596b5(0x181)]())return;if(_0xbe78f['length']<=0x0)return;_0x149a5d=_0x149a5d||{},_0x149a5d[_0xa596b5(0xaab)]=_0x149a5d[_0xa596b5(0xaab)]||_0xa596b5(0x2cd),_0x149a5d[_0xa596b5(0x7cf)]=_0x149a5d[_0xa596b5(0x7cf)]||[0x0,0x0,0x0,0x0],_0x149a5d[_0xa596b5(0x528)]=_0x149a5d[_0xa596b5(0x528)]||0x0,this['battler']()[_0xa596b5(0x3c3)](_0x4191dc,_0xbe78f,_0x149a5d);},Game_Battler[_0x3fd7af(0x9fd)]['notFocusValid']=function(){const _0x2ec7f0=_0x3fd7af;if(this['isHidden']())return![];if(this[_0x2ec7f0(0x7fd)]()&&this[_0x2ec7f0(0x8ac)]())return!![];if(this['isEnemy']()&&this[_0x2ec7f0(0x5db)]()){if(this[_0x2ec7f0(0x217)]()&&this[_0x2ec7f0(0x944)]())return![];}else{if(this['isDead']()){if('aoEnm'===_0x2ec7f0(0x4f1))return![];else{if(this[_0x2ec7f0(0x82d)]===_0x5851b8)this[_0x2ec7f0(0x5fb)]();return this[_0x2ec7f0(0x82d)];}}}return!![];},VisuMZ[_0x3fd7af(0x941)]['Game_Battler_clearMotion']=Game_Battler['prototype'][_0x3fd7af(0x1a5)],Game_Battler['prototype']['clearMotion']=function(){const _0x18125b=_0x3fd7af;VisuMZ[_0x18125b(0x941)][_0x18125b(0x88c)][_0x18125b(0x145)](this),this[_0x18125b(0x67a)]();},Game_Battler[_0x3fd7af(0x9fd)][_0x3fd7af(0x6e8)]=function(){return!![];},Game_Battler[_0x3fd7af(0x9fd)][_0x3fd7af(0x691)]=function(){return![];},VisuMZ[_0x3fd7af(0x941)][_0x3fd7af(0x4fd)]=Game_Battler[_0x3fd7af(0x9fd)][_0x3fd7af(0x138)],Game_Battler[_0x3fd7af(0x9fd)][_0x3fd7af(0x138)]=function(_0x16f849){const _0xd18d76=_0x3fd7af;VisuMZ['BattleCore']['Game_Battler_onBattleStart'][_0xd18d76(0x145)](this,_0x16f849),this['onBattleStartBattleCore'](_0x16f849);},Game_Battler['prototype'][_0x3fd7af(0x29a)]=function(_0x52aee4){const _0x5d7e59=_0x3fd7af;this[_0x5d7e59(0x49f)](![]);},VisuMZ[_0x3fd7af(0x941)]['Game_Battler_performActionStart']=Game_Battler[_0x3fd7af(0x9fd)]['performActionStart'],Game_Battler[_0x3fd7af(0x9fd)][_0x3fd7af(0xaea)]=function(_0x1e41a3){const _0xe9ed86=_0x3fd7af;VisuMZ[_0xe9ed86(0x941)][_0xe9ed86(0xa73)][_0xe9ed86(0x145)](this,_0x1e41a3);if(!_0x1e41a3[_0xe9ed86(0x404)]()){if(_0xe9ed86(0x4d6)!==_0xe9ed86(0x4d6))_0x1bdf0c=_0x2a57b3*this[_0xe9ed86(0x445)][_0xe9ed86(0xa67)],_0x415225+=this[_0xe9ed86(0x445)][_0xe9ed86(0xa51)]*(_0x581a94>=0x0?0x1:-0x1),_0x1ddefd=this[_0xe9ed86(0x163)](_0xe9ed86(0x2cc),_0x34dd13,_0x1f0252,![]),_0x156b25=this[_0xe9ed86(0x9c6)](_0x988b7b),_0x826bf8=_0x24148f[_0xe9ed86(0x819)](_0x3afadd),this['_executedValue']=_0x222adf,this[_0xe9ed86(0xd8)]=this[_0xe9ed86(0xd8)]||0x0,this[_0xe9ed86(0xd8)]+=_0x5dfaa8,_0x286481[_0xe9ed86(0x941)][_0xe9ed86(0x325)][_0xe9ed86(0x145)](this,_0x549a51,_0x3d2696),this[_0xe9ed86(0x163)](_0xe9ed86(0x850),_0x48a40e,_0x57bc37,!![]);else{const _0x2566ed=this['battler']();_0x2566ed&&_0x2566ed[_0xe9ed86(0x9f0)]();}}this['setBattlerFlip'](![]);},Game_Battler['prototype'][_0x3fd7af(0x664)]=function(){const _0x55fda3=_0x3fd7af,_0x1e8527=this[_0x55fda3(0x8a6)];this[_0x55fda3(0x8a6)]=![];if(BattleManager['isActiveTpb']()&&this[_0x55fda3(0x12e)]()){if(_0x55fda3(0x276)!==_0x55fda3(0x276)){const _0x58d73d=[],_0x4e9a27=new _0x1cb9cd(this);return _0x4e9a27[_0x55fda3(0x537)](),_0x58d73d['push'](_0x4e9a27),_0x58d73d;}else{const _0xd4e015=this['battler']();if(_0xd4e015&&_0x1e8527)_0xd4e015['stepForward']();return;}}const _0x5dc7e5=this['battler']();if(_0x5dc7e5)_0x5dc7e5[_0x55fda3(0x965)]();this[_0x55fda3(0x49f)](![]),this['requestMotionRefresh']();},Game_Battler[_0x3fd7af(0x9fd)][_0x3fd7af(0xca)]=function(_0x47187f){const _0x5cfe57=_0x3fd7af;if(_0x47187f[_0x5cfe57(0x77e)]())this[_0x5cfe57(0x5a4)]();else{if(_0x47187f[_0x5cfe57(0x404)]()){if(_0x5cfe57(0x70b)===_0x5cfe57(0x70b))this[_0x5cfe57(0x42a)](_0x5cfe57(0x2ff));else return _0x49dd55[_0x5cfe57(0x181)]()['_baseX']-_0x4e8421[_0x5cfe57(0x181)]()[_0x5cfe57(0x62e)];}else{if(_0x47187f[_0x5cfe57(0x695)]())this['requestMotion'](_0x5cfe57(0x972));else{if(_0x47187f[_0x5cfe57(0x20a)]())_0x47187f[_0x5cfe57(0xaf4)]()[_0x5cfe57(0xa59)][_0x5cfe57(0x28f)]>0x0?_0x5cfe57(0xb5)!==_0x5cfe57(0x7cc)?this[_0x5cfe57(0x5a4)]():(_0x2f3692[_0x5cfe57(0x5a0)]=_0x541709,_0x43d357[_0x5cfe57(0x13f)]=!![],this['stop']()):this['requestMotion']('skill');else{if(_0x47187f[_0x5cfe57(0x936)]()){if(_0x5cfe57(0x374)===_0x5cfe57(0x374))this[_0x5cfe57(0x42a)](_0x5cfe57(0xaf4));else{this[_0x5cfe57(0x704)](_0x6574ef)[_0x5cfe57(0x265)](/\\I\[(\d+)\]/i);const _0x1f8409=_0x23de87(_0x52d18e['$1'])||0x0,_0x285ce8=this['itemLineRect'](_0x1f7869),_0x4fd99f=_0x285ce8['x']+_0x4a19dc[_0x5cfe57(0x63b)]((_0x285ce8[_0x5cfe57(0xad0)]-_0x4d3919[_0x5cfe57(0x542)])/0x2),_0x58f905=_0x285ce8['y']+(_0x285ce8[_0x5cfe57(0x26a)]-_0x1d64db[_0x5cfe57(0x5b6)])/0x2;this[_0x5cfe57(0x5a3)](_0x1f8409,_0x4fd99f,_0x58f905);}}}}}}},Game_Battler[_0x3fd7af(0x9fd)]['getAttackMotion']=function(){const _0x330cb9=_0x3fd7af;return $dataSystem[_0x330cb9(0x3b0)][0x0];},Game_Battler['prototype'][_0x3fd7af(0x5f9)]=function(){const _0x2e5906=_0x3fd7af,_0xb8a4a3=this['getAttackMotion']();return _0xb8a4a3?_0xb8a4a3[_0x2e5906(0x762)]:0x0;},Game_Battler[_0x3fd7af(0x9fd)][_0x3fd7af(0x1e0)]=function(_0x57e24b){const _0x504f90=_0x3fd7af;if(!$gameSystem[_0x504f90(0x151)]())return;const _0x275e99=this[_0x504f90(0x181)](),_0x90b6c0=_0x57e24b[_0x504f90(0x181)]();if(!_0x275e99||!_0x90b6c0)return;const _0x259bba=_0x90b6c0[_0x504f90(0x62e)],_0x4bd46a=_0x90b6c0[_0x504f90(0x69d)];this[_0x504f90(0xa44)](_0x259bba,_0x4bd46a,0x0,![],_0x504f90(0xa2d),-0x1),_0x275e99['updatePosition']();const _0x5982fa=VisuMZ['BattleCore'][_0x504f90(0xa6b)][_0x504f90(0x844)];let _0x31db10=(_0x90b6c0[_0x504f90(0xad0)]+_0x275e99['width'])/0x2;_0x31db10*=this[_0x504f90(0x91d)]()?0x1:-0x1;let _0x5ce452=_0x5982fa['StepDistanceY']*(this['isActor']()?0x1:-0x1);_0x57e24b[_0x504f90(0x440)](_0x31db10,_0x5ce452,0x0,![],_0x504f90(0xa2d)),_0x90b6c0['updatePosition']();},Game_Battler[_0x3fd7af(0x9fd)][_0x3fd7af(0x42a)]=function(_0x1770b9){const _0x4437c0=_0x3fd7af;if(SceneManager[_0x4437c0(0x970)]()){const _0x530892=this[_0x4437c0(0x181)]();_0x530892&&(_0x530892[_0x4437c0(0x58f)](_0x1770b9),[_0x4437c0(0x384),_0x4437c0(0x96d),'missile'][_0x4437c0(0x402)](_0x1770b9)&&this['performWeaponAnimation']());}this['clearFreezeMotion']();},Game_Battler[_0x3fd7af(0x9fd)][_0x3fd7af(0x567)]=function(){},Game_Battler[_0x3fd7af(0x9fd)][_0x3fd7af(0x68d)]=function(_0x27deeb){const _0xbb02ed=_0x3fd7af;if(SceneManager['isSceneBattle']()){if('YSrFC'===_0xbb02ed(0x980)){const _0x26178d=this['battler']();if(_0x26178d)_0x26178d[_0xbb02ed(0xaf)](_0x27deeb);}else this[_0xbb02ed(0x18b)](_0xbb02ed(0x2d6),_0xbb02ed(0x48e)['format'](_0x397536[_0xbb02ed(0x58e)](_0x46d201)));}},Game_Battler[_0x3fd7af(0x9fd)]['startAttackWeaponAnimation']=function(){const _0x5e0cf9=_0x3fd7af;if(SceneManager[_0x5e0cf9(0x970)]()){if(_0x5e0cf9(0x552)!==_0x5e0cf9(0x753)){const _0x11e3ef=this['getAttackWeaponAnimationId']();this[_0x5e0cf9(0x68d)](_0x11e3ef);}else this[_0x5e0cf9(0x418)]();}},Game_Battler[_0x3fd7af(0x9fd)]['performCastAnimation']=function(_0xf1f1bf,_0x1c33bf){const _0x4f55a7=_0x3fd7af;if(!_0xf1f1bf)return;if(!_0xf1f1bf['item']())return;if(_0xf1f1bf[_0x4f55a7(0x77e)]())return;if(_0xf1f1bf[_0x4f55a7(0x404)]())return;if(_0xf1f1bf[_0x4f55a7(0x936)]())return;let _0x4e11a2=0x0;const _0x4f054f=VisuMZ[_0x4f55a7(0x941)][_0x4f55a7(0xa6b)][_0x4f55a7(0x844)],_0x470bcb=_0xf1f1bf[_0x4f55a7(0xaf4)]()[_0x4f55a7(0x7b9)];if(_0x470bcb[_0x4f55a7(0x265)](/<CAST ANIMATION: (\d+)>/i))'pceil'==='pceil'?_0x4e11a2=Number(RegExp['$1']):(this['_action'][_0x4f55a7(0x409)]=_0x370b82,this[_0x4f55a7(0x4bd)][_0x4f55a7(0x64f)](_0x331568),this['_logWindow'][_0x4f55a7(0x5da)](_0x597e33,this[_0x4f55a7(0x2dd)]),this[_0x4f55a7(0x2dd)]['apply'](_0x4b940d),this[_0x4f55a7(0x4bd)][_0x4f55a7(0xa24)](_0x1ecd95,_0x1afab9));else{if(_0x470bcb[_0x4f55a7(0x265)](/<NO CAST ANIMATION>/i)){if(_0x4f55a7(0x95e)===_0x4f55a7(0x95e))return;else{if(!_0x26f359['isSceneBattle']())return;if(!_0x2a2569[_0x4f55a7(0x8b2)])return;_0x3d9b10['ConvertParams'](_0x200363,_0x8f6f74);const _0x2ba35f=_0x28c0fc[_0x4f55a7(0x8be)](),_0x408b13=_0x379df5[_0x4f55a7(0xa62)](_0x202d8e['Targets']),_0x23682f=_0x4e5a2d[_0x4f55a7(0x7f7)];_0x170b33[_0x4f55a7(0x565)](_0x408b13,_0x395c3a[_0x4f55a7(0x200)],_0x27452a[_0x4f55a7(0x9f6)]);if(_0x23682f)_0x2ba35f[_0x4f55a7(0x992)]('battleCamera');}}else{if(_0xf1f1bf[_0x4f55a7(0x884)]())_0x4e11a2=_0x4f054f[_0x4f55a7(0x94d)];else{if(_0xf1f1bf[_0x4f55a7(0x782)]())_0x4e11a2=_0x4f054f[_0x4f55a7(0x721)];else _0xf1f1bf[_0x4f55a7(0x695)]()&&(_0x4e11a2=_0x4f054f[_0x4f55a7(0x1b8)]);}}}if(_0x4e11a2>0x0){if(_0x4f55a7(0x165)===_0x4f55a7(0x165))$gameTemp[_0x4f55a7(0x97f)]([this],_0x4e11a2,!!_0x1c33bf);else{if(this['_skewDuration']<=0x0)return;if(!this['_distortionSprite'])return;const _0x1a5533=this[_0x4f55a7(0x7bc)],_0x3062cf=this['_skewWholeDuration'],_0x11f7c1=this[_0x4f55a7(0x609)],_0xc020b8=this[_0x4f55a7(0xa0e)];_0x3d7212[_0x4f55a7(0x28a)]?(_0xc020b8[_0x4f55a7(0x249)]['x']=this['applyEasing'](_0xc020b8[_0x4f55a7(0x249)]['x'],this[_0x4f55a7(0xac9)],_0x1a5533,_0x3062cf,_0x11f7c1),_0xc020b8['skew']['y']=this['applyEasing'](_0xc020b8['skew']['y'],this[_0x4f55a7(0x30a)],_0x1a5533,_0x3062cf,_0x11f7c1)):(_0xc020b8[_0x4f55a7(0x249)]['x']=(_0xc020b8[_0x4f55a7(0x249)]['x']*(_0x1a5533-0x1)+this[_0x4f55a7(0xac9)])/_0x1a5533,_0xc020b8[_0x4f55a7(0x249)]['y']=(_0xc020b8['skew']['y']*(_0x1a5533-0x1)+this[_0x4f55a7(0x30a)])/_0x1a5533);this[_0x4f55a7(0x7bc)]--;if(this[_0x4f55a7(0x7bc)]<=0x0)this['onSkewEnd']();}}},Game_Battler[_0x3fd7af(0x9fd)][_0x3fd7af(0x696)]=function(){const _0x2de4c0=_0x3fd7af;SoundManager[_0x2de4c0(0x178)]();let _0x53e647=VisuMZ[_0x2de4c0(0x941)]['Settings'][_0x2de4c0(0x844)][_0x2de4c0(0x4b9)];if(_0x53e647>0x0){if('VEWxK'!=='VEWxK'){if(!_0xd4d4cb['isSceneBattle']())return;if(!_0x38bc18[_0x2de4c0(0x8b2)])return;_0x28f6bd['ConvertParams'](_0x35df13,_0x30a4e2);const _0x4f626d=_0x3e7984['getLastPluginCommandInterpreter'](),_0xcc7ba0=_0x64dba0['WaitForCamera'];_0x5826c3[_0x2de4c0(0x595)](_0x3639a6[_0x2de4c0(0x245)],_0x16aed7['FocusY'],_0x360fed[_0x2de4c0(0x200)],_0x34de77['EasingType']);if(_0xcc7ba0)_0x4f626d['setWaitMode'](_0x2de4c0(0x899));}else Imported['VisuMZ_0_CoreEngine']?_0x2de4c0(0x6c8)!=='MQyaq'?_0x3cf605?this[_0x2de4c0(0x9d9)]():this[_0x2de4c0(0x807)]():$gameTemp['requestFauxAnimation']([this],_0x53e647):'yVpIb'!==_0x2de4c0(0x531)?(_0x48a14a[_0x2de4c0(0xa39)](_0x14b1d3),_0x1e062f[_0x2de4c0(0xa39)](_0x1033db)):$gameTemp[_0x2de4c0(0x97f)]([this],_0x53e647);}},VisuMZ[_0x3fd7af(0x941)][_0x3fd7af(0x723)]=Game_Battler[_0x3fd7af(0x9fd)][_0x3fd7af(0x236)],Game_Battler[_0x3fd7af(0x9fd)][_0x3fd7af(0x236)]=function(){const _0x2da3d3=_0x3fd7af;VisuMZ['BattleCore'][_0x2da3d3(0x723)]['call'](this),this[_0x2da3d3(0x36b)]();},VisuMZ[_0x3fd7af(0x941)][_0x3fd7af(0x82e)]=Game_Battler[_0x3fd7af(0x9fd)]['performMiss'],Game_Battler['prototype'][_0x3fd7af(0x3f9)]=function(){const _0x2dd22f=_0x3fd7af;VisuMZ[_0x2dd22f(0x941)][_0x2dd22f(0x82e)][_0x2dd22f(0x145)](this),this[_0x2dd22f(0x36b)]();},VisuMZ[_0x3fd7af(0x941)][_0x3fd7af(0x1a8)]=Game_Battler['prototype']['performEvasion'],Game_Battler[_0x3fd7af(0x9fd)]['performEvasion']=function(){const _0x28ca6e=_0x3fd7af;VisuMZ[_0x28ca6e(0x941)]['Game_Battler_performEvasion'][_0x28ca6e(0x145)](this),this[_0x28ca6e(0x36b)]();},Game_Battler['prototype'][_0x3fd7af(0x36b)]=function(){const _0x2cf887=_0x3fd7af;if(!$gameSystem[_0x2cf887(0x151)]())return;if(this['_flinched'])return;this[_0x2cf887(0x8a6)]=!![];const _0x4226a6=this['battler']();if(_0x4226a6)_0x4226a6[_0x2cf887(0x7e2)]();},Game_Battler[_0x3fd7af(0x9fd)][_0x3fd7af(0x4da)]=function(){const _0xd76502=_0x3fd7af;if(this[_0xd76502(0x217)]()&&this['_motionType']!==_0xd76502(0x6f5)){if(_0xd76502(0x525)!==_0xd76502(0x25e)){this[_0xd76502(0x42a)](_0xd76502(0x6f5));return;}else{if(!_0x59cbdd[_0xd76502(0x970)]())return;if(!_0x155621[_0xd76502(0x8b2)])return;const _0x9ed582=_0x597c51[_0xd76502(0x8be)]();if(!_0x9ed582)return;_0x9ed582[_0xd76502(0x992)](_0xd76502(0x7bf));}}if(this['isDead']()&&this['_motionType']===_0xd76502(0x6f5))return;if(!!this[_0xd76502(0x84e)])return;if(this[_0xd76502(0x7e8)]()){if(!this[_0xd76502(0xae4)]()&&this!==BattleManager['_subject']){if(this[_0xd76502(0x181)]())this[_0xd76502(0x181)]()[_0xd76502(0x1f6)]();}this['clearFreezeMotion']();return;}if(this[_0xd76502(0x8ec)]===_0xd76502(0x60a))return;if(this[_0xd76502(0x8ec)]===_0xd76502(0x362)&&!BattleManager[_0xd76502(0x12e)]())return;if(this[_0xd76502(0x8ec)]===_0xd76502(0x2ff)&&!BattleManager[_0xd76502(0x12e)]())return;this['clearMotion']();if(this[_0xd76502(0x181)]()&&BattleManager[_0xd76502(0x12e)]()){this[_0xd76502(0x181)]()[_0xd76502(0x1f6)](),this[_0xd76502(0x67a)]();return;}},Game_Enemy['prototype']['isDuringNonLoopingMotion']=function(){const _0x50a426=_0x3fd7af;if(!this[_0x50a426(0x5db)]())return![];const _0x216ba9=this[_0x50a426(0x181)]();if(!_0x216ba9)return![];const _0x257624=_0x216ba9['_svBattlerSprite'];if(!_0x257624)return![];const _0xea3941=_0x257624[_0x50a426(0x48d)];return _0xea3941&&!_0xea3941[_0x50a426(0x785)];},Game_Battler['prototype'][_0x3fd7af(0x77d)]=function(){const _0x4d826c=_0x3fd7af;return this[_0x4d826c(0x2b0)];},Game_Battler[_0x3fd7af(0x9fd)][_0x3fd7af(0x49f)]=function(_0xcaba5c){const _0x26552f=_0x3fd7af;if(!$gameSystem[_0x26552f(0x151)]())return;this[_0x26552f(0x2b0)]=_0xcaba5c;const _0x1b6916=this['battler']();if(_0x1b6916)_0x1b6916[_0x26552f(0x6c9)]();},Game_Battler[_0x3fd7af(0x9fd)][_0x3fd7af(0x1c8)]=function(_0x5d1db3,_0x10539b,_0x4223e5){const _0x2dbbc7=_0x3fd7af;if(!$gameSystem['isSideView']())return;const _0x280e7d=this[_0x2dbbc7(0x181)]();if(!_0x280e7d)return;if(_0x5d1db3===_0x280e7d[_0x2dbbc7(0x62e)])return;let _0x57b48c=![];if(this['isActor']()){if(_0x5d1db3>_0x280e7d[_0x2dbbc7(0x62e)])_0x57b48c=!![];if(_0x5d1db3<_0x280e7d[_0x2dbbc7(0x62e)])_0x57b48c=![];}else{if(this[_0x2dbbc7(0x7e8)]()){if('fOBca'!==_0x2dbbc7(0x51b)){if(_0x5d1db3>_0x280e7d['_baseX'])_0x57b48c=![];if(_0x5d1db3<_0x280e7d[_0x2dbbc7(0x62e)])_0x57b48c=!![];}else _0x3aba6a[_0x2dbbc7(0x470)]['friendsUnit']()[_0x2dbbc7(0x32f)](_0x47ef8e);}};this[_0x2dbbc7(0x49f)](_0x4223e5?!_0x57b48c:_0x57b48c),_0x280e7d['updateFlip']();},Game_Battler[_0x3fd7af(0x9fd)]['moveBattlerDistance']=function(_0x2d968b,_0x32c0a1,_0x4dccba,_0x58e68a,_0x43e403){const _0x322bc2=_0x3fd7af;if(!$gameSystem[_0x322bc2(0x151)]())return;const _0x1576e6=this[_0x322bc2(0x181)]();if(!_0x1576e6)return;if(_0x58e68a)this['setBattlerFacePoint'](_0x2d968b+_0x1576e6[_0x322bc2(0x62e)],_0x32c0a1+_0x1576e6[_0x322bc2(0x69d)],![]);_0x2d968b+=_0x1576e6['_baseX']-_0x1576e6[_0x322bc2(0x2e7)],_0x32c0a1+=_0x1576e6[_0x322bc2(0x69d)]-_0x1576e6[_0x322bc2(0x939)],_0x1576e6['startMove'](_0x2d968b,_0x32c0a1,_0x4dccba);if(Imported[_0x322bc2(0x28a)])_0x1576e6[_0x322bc2(0x64b)](_0x43e403||'Linear');},Game_Battler[_0x3fd7af(0x9fd)]['moveBattlerToPoint']=function(_0x59a8c6,_0x6767c0,_0x4381cc,_0x37d8e3,_0x229acd,_0x2b4462){const _0x32b92b=_0x3fd7af;if(!$gameSystem[_0x32b92b(0x151)]())return;const _0x3dade2=this[_0x32b92b(0x181)]();if(!_0x3dade2)return;_0x2b4462=_0x2b4462||0x0;if(_0x2b4462>0x0){if(_0x3dade2[_0x32b92b(0x62e)]>_0x59a8c6)_0x59a8c6+=_0x3dade2[_0x32b92b(0xad0)]/0x2+_0x2b4462;if(_0x3dade2[_0x32b92b(0x62e)]<_0x59a8c6)_0x59a8c6-=_0x3dade2[_0x32b92b(0xad0)]/0x2+_0x2b4462;}if(_0x37d8e3)this[_0x32b92b(0x1c8)](_0x59a8c6,_0x6767c0,![]);_0x59a8c6-=_0x3dade2['_homeX'],_0x6767c0-=_0x3dade2[_0x32b92b(0x939)],_0x3dade2[_0x32b92b(0x627)](_0x59a8c6,_0x6767c0,_0x4381cc);if(Imported[_0x32b92b(0x28a)])_0x3dade2[_0x32b92b(0x64b)](_0x229acd||_0x32b92b(0xa2d));},Game_Battler[_0x3fd7af(0x9fd)][_0x3fd7af(0xa2a)]=function(_0x5c0853,_0x2a15e1,_0x4b986b){const _0x304d8e=_0x3fd7af;if(!$gameSystem[_0x304d8e(0x151)]())return;const _0x3abbc5=this[_0x304d8e(0x181)]();if(!_0x3abbc5)return;_0x3abbc5['startFloat'](_0x5c0853,_0x2a15e1,_0x4b986b);},Game_Battler[_0x3fd7af(0x9fd)][_0x3fd7af(0x6c0)]=function(_0x147fe6,_0x5f4752){const _0x2a01ae=_0x3fd7af;if(!$gameSystem[_0x2a01ae(0x151)]())return;const _0x4b1967=this[_0x2a01ae(0x181)]();if(!_0x4b1967)return;_0x4b1967[_0x2a01ae(0x8b4)](_0x147fe6,_0x5f4752);},Game_Battler['prototype']['spinBattler']=function(_0x1cb0e5,_0x5a7d89,_0x4c9096,_0x180e95){const _0x158ae3=_0x3fd7af;if(!$gameSystem[_0x158ae3(0x151)]())return;const _0x217b08=this['battler']();if(!_0x217b08)return;_0x217b08['startSpin'](_0x1cb0e5,_0x5a7d89,_0x4c9096,_0x180e95);},Game_Battler['prototype'][_0x3fd7af(0x9c1)]=function(_0x1c1498,_0x49fecc,_0x5903ee,_0x20340b){const _0x32979c=_0x3fd7af;if(!$gameSystem[_0x32979c(0x151)]())return;const _0x569ca8=this[_0x32979c(0x181)]();if(!_0x569ca8)return;this[_0x32979c(0x91d)]()&&(_0x1c1498*=-0x1,_0x49fecc*=-0x1),_0x569ca8[_0x32979c(0x739)](_0x1c1498,_0x49fecc,_0x5903ee,_0x20340b);},Game_Battler[_0x3fd7af(0x9fd)][_0x3fd7af(0xa92)]=function(_0x418a88,_0x445bc7,_0x1e7421,_0x55aeaa){const _0x284afc=_0x3fd7af;if(!$gameSystem[_0x284afc(0x151)]())return;const _0x2cc11d=this['battler']();if(!_0x2cc11d)return;_0x2cc11d[_0x284afc(0x1ea)](_0x418a88,_0x445bc7,_0x1e7421,_0x55aeaa);},Game_Battler[_0x3fd7af(0x9fd)][_0x3fd7af(0x8c6)]=function(_0x478908,_0x5f3139,_0x101a7b){const _0x100db3=_0x3fd7af;if(!$gameSystem['isSideView']())return;const _0x538797=this['battler']();if(!_0x538797)return;_0x538797[_0x100db3(0x319)](_0x478908,_0x5f3139,_0x101a7b);},Game_Battler[_0x3fd7af(0x9fd)][_0x3fd7af(0x67a)]=function(){const _0x456b8f=_0x3fd7af,_0x14ac49=!!this[_0x456b8f(0x84e)];this['_freezeMotionData']=undefined,_0x14ac49&&(_0x456b8f(0x659)===_0x456b8f(0x659)?(this[_0x456b8f(0x4da)](),this[_0x456b8f(0xa3)]()):(_0x18e099[_0x456b8f(0x941)]['Window_BattleStatus_initialize'][_0x456b8f(0x145)](this,_0x22667b),this[_0x456b8f(0x708)](),this[_0x456b8f(0x50e)]()));},Game_Battler[_0x3fd7af(0x9fd)]['clearFreezeMotionForWeapons']=function(){const _0x50a6f4=_0x3fd7af;if(!SceneManager[_0x50a6f4(0x970)]())return;const _0x21fa07=this['battler']();if(!_0x21fa07)return;let _0x1c5f31=this[_0x50a6f4(0x91d)]()?_0x21fa07[_0x50a6f4(0xaa4)]:_0x21fa07[_0x50a6f4(0x6bc)][_0x50a6f4(0xaa4)];_0x1c5f31&&(_0x50a6f4(0x43d)===_0x50a6f4(0x78e)?(this[_0x50a6f4(0x380)](),this[_0x50a6f4(0x49d)](),this[_0x50a6f4(0x2e2)](),this['addOptionsCommand'](),this[_0x50a6f4(0x6b3)]()):_0x1c5f31['setup'](0x0));},Game_Battler['prototype'][_0x3fd7af(0x190)]=function(_0x994cfc,_0x3f7311,_0xc85d8d){const _0x1aeb08=_0x3fd7af;if(this[_0x1aeb08(0x7e8)]()&&!this['hasSvBattler']())return;let _0x589e3e=0x0,_0x113cb2=0x0;if(_0x994cfc[_0x1aeb08(0x265)](/ATTACK[ ](\d+)/i)){if('mvAnL'!==_0x1aeb08(0x1a7))_0x113cb2=Number(RegExp['$1']),_0x113cb2--;else{_0x571861['match'](_0x337cbf);const _0x51ade8=_0x4858b0(_0x169b26['$1'])[_0x1aeb08(0xaa3)](',')[_0x1aeb08(0x826)](_0xc475d5=>_0x138c18(_0xc475d5)['toUpperCase']()[_0x1aeb08(0x306)]());_0x4912c2=_0x18b826[_0x1aeb08(0x795)](_0x51ade8);}}if(this['isActor']()){const _0x57df08=this['weapons']();_0x589e3e=_0x57df08[_0x113cb2]?_0x57df08[_0x113cb2][_0x1aeb08(0x14d)]:0x0;}else{if(this[_0x1aeb08(0x7e8)]()){if('mcEum'!==_0x1aeb08(0x7a4)){const _0xd97d88=_0x2d031b[_0x1aeb08(0x941)][_0x1aeb08(0xa6b)][_0x1aeb08(0x501)];if(_0xd97d88['StatusWindowAttachmentBack']){const _0x508df5=new _0x3ec20a();_0x508df5[_0x1aeb08(0x2cf)]=_0xc055af[_0x1aeb08(0x802)](_0xd97d88[_0x1aeb08(0x74a)]),_0x508df5['x']=_0xd97d88[_0x1aeb08(0xbd)]||0x0,_0x508df5['y']=_0xd97d88[_0x1aeb08(0xf4)]||0x0,this['addChildToBack'](_0x508df5),this[_0x1aeb08(0x20e)]=_0x508df5;}if(_0xd97d88[_0x1aeb08(0x8c4)]){const _0xc0745e=new _0x2c0693();_0xc0745e[_0x1aeb08(0x2cf)]=_0x3e0acd['loadSystem'](_0xd97d88[_0x1aeb08(0x8c4)]),_0xc0745e['x']=_0xd97d88[_0x1aeb08(0x867)]||0x0,_0xc0745e['y']=_0xd97d88[_0x1aeb08(0x30f)]||0x0,this['addChild'](_0xc0745e),this[_0x1aeb08(0x77c)]=_0xc0745e;}}else _0x589e3e=this['svBattlerData']()[_0x1aeb08(0x14d)]||0x0;}}const _0xc45b91=$dataSystem[_0x1aeb08(0x3b0)][_0x589e3e];_0x994cfc[_0x1aeb08(0x265)](/attack/i)&&(_0x994cfc=[_0x1aeb08(0x96d),'swing',_0x1aeb08(0x486)][_0xc45b91[_0x1aeb08(0x28f)]]||_0x1aeb08(0x384)),this[_0x1aeb08(0x84e)]={'motionType':_0x994cfc,'weaponImageId':_0x3f7311?_0xc45b91['weaponImageId']:0x0,'pattern':_0xc85d8d};},Game_Battler[_0x3fd7af(0x9fd)]['isFriendly']=function(_0x4f5ab0){const _0x47fec0=_0x3fd7af;if(!_0x4f5ab0)return![];return _0x4f5ab0['friendsUnit']()===this[_0x47fec0(0x8b0)]();},Game_Battler['prototype'][_0x3fd7af(0x466)]=function(_0x4639ba){const _0x48d460=_0x3fd7af;if(!_0x4639ba)return![];return _0x4639ba['opponentsUnit']()===this[_0x48d460(0x8b0)]();},VisuMZ[_0x3fd7af(0x941)][_0x3fd7af(0xb0)]=Game_Actor[_0x3fd7af(0x9fd)][_0x3fd7af(0xbb)],Game_Actor[_0x3fd7af(0x9fd)][_0x3fd7af(0xbb)]=function(_0x37d10b){const _0xac2aaa=_0x3fd7af;VisuMZ[_0xac2aaa(0x941)]['Game_Actor_setup'][_0xac2aaa(0x145)](this,_0x37d10b),this['initBattlePortrait']();},Game_Actor['prototype'][_0x3fd7af(0x5fb)]=function(){const _0x4b4e00=_0x3fd7af;this['_battlePortrait']='',this[_0x4b4e00(0xe9)]()&&this[_0x4b4e00(0xe9)]()[_0x4b4e00(0x7b9)][_0x4b4e00(0x265)](/<BATTLE (?:IMAGE|PORTRAIT):[ ](.*)>/i)&&(this[_0x4b4e00(0x82d)]=String(RegExp['$1']));},Game_Actor[_0x3fd7af(0x9fd)][_0x3fd7af(0x468)]=function(){const _0x999f14=_0x3fd7af;if(this['getBattlePortrait']()!==''){if(_0x999f14(0x2ac)===_0x999f14(0x2ac))return this[_0x999f14(0xa3c)]();else{this[_0x999f14(0xad0)]=_0x190ec6[_0x999f14(0xad0)],this[_0x999f14(0x26a)]=_0x482f7a['height'];const _0x220bdc=0x1;this[_0x999f14(0x1c9)]['x']=_0x220bdc,this['scale']['y']=_0x220bdc,this['x']=0x0,this['y']=0x0;}}else{if(Imported[_0x999f14(0xa3b)]&&this[_0x999f14(0x4ae)]()!=='')return this[_0x999f14(0x4ae)]();}return'';},Game_Actor[_0x3fd7af(0x9fd)]['getBattlePortrait']=function(){const _0x5033c0=_0x3fd7af;if(this[_0x5033c0(0x82d)]===undefined)this[_0x5033c0(0x5fb)]();return this['_battlePortrait'];},Game_Actor[_0x3fd7af(0x9fd)][_0x3fd7af(0x452)]=function(_0x3788d5){const _0x5bbb30=_0x3fd7af;if(this[_0x5bbb30(0x82d)]===undefined)this[_0x5bbb30(0x5fb)]();this[_0x5bbb30(0x82d)]=_0x3788d5;if(SceneManager[_0x5bbb30(0x970)]()&&$gameParty[_0x5bbb30(0x892)]()[_0x5bbb30(0x402)](this)){const _0x16a269=SceneManager[_0x5bbb30(0x450)][_0x5bbb30(0x6bb)];if(_0x16a269)_0x16a269[_0x5bbb30(0x1e3)](this);}},Game_Actor[_0x3fd7af(0x9fd)][_0x3fd7af(0x8bc)]=function(){return!![];},Game_Actor['prototype'][_0x3fd7af(0x3a3)]=function(){const _0x49bfce=_0x3fd7af;if(!this[_0x49bfce(0x388)]()&&BattleManager[_0x49bfce(0x435)])return!![];return Game_Battler['prototype'][_0x49bfce(0x3a3)][_0x49bfce(0x145)](this);},VisuMZ[_0x3fd7af(0x941)][_0x3fd7af(0x2c9)]=Game_Actor[_0x3fd7af(0x9fd)][_0x3fd7af(0x5e1)],Game_Actor[_0x3fd7af(0x9fd)]['makeActionList']=function(){const _0x2670ff=_0x3fd7af;if(BattleManager[_0x2670ff(0x435)]&&!ConfigManager[_0x2670ff(0x692)])return this[_0x2670ff(0x896)]();else{if(_0x2670ff(0x8d3)!==_0x2670ff(0x8d3)){const _0x178d4c=_0x465d87[_0x2670ff(0x941)][_0x2670ff(0xa6b)][_0x2670ff(0x501)];if(_0x178d4c[_0x2670ff(0x458)])return;_0xa66bdf[_0x2670ff(0x9fd)][_0x2670ff(0x902)][_0x2670ff(0x145)](this,_0x511aff);}else{return VisuMZ[_0x2670ff(0x941)][_0x2670ff(0x2c9)][_0x2670ff(0x145)](this);;}}},Game_Actor['prototype'][_0x3fd7af(0x896)]=function(){const _0x2c5c80=_0x3fd7af,_0x333253=[],_0x52489b=new Game_Action(this);return _0x52489b[_0x2c5c80(0x537)](),_0x333253[_0x2c5c80(0x18b)](_0x52489b),_0x333253;},Game_Actor[_0x3fd7af(0x9fd)][_0x3fd7af(0x14b)]=function(){const _0x4cd25a=_0x3fd7af;if(this['currentClass']()[_0x4cd25a(0x7b9)]['match'](/<BATTLE COMMANDS>\s*([\s\S]*)\s*<\/BATTLE COMMANDS>/i)){if(_0x4cd25a(0x47c)!==_0x4cd25a(0x47c))_0x4db1e3+=_0x167d8e(_0x59857b['$2']);else return String(RegExp['$1'])[_0x4cd25a(0xaa3)](/[\r\n]+/);}else return VisuMZ[_0x4cd25a(0x941)][_0x4cd25a(0xa6b)][_0x4cd25a(0x3a9)][_0x4cd25a(0x949)];},Game_Actor['prototype']['svBattlerAnchorX']=function(){const _0x2a5db7=_0x3fd7af;if(this[_0x2a5db7(0x8d4)][_0x2a5db7(0xcb)]!==undefined)return this['_cache']['svAnchorX'];if(this[_0x2a5db7(0xe9)]()[_0x2a5db7(0x7b9)]['match'](/<SIDEVIEW ANCHOR: (.*), (.*)>/i))this[_0x2a5db7(0x8d4)][_0x2a5db7(0xcb)]=eval(RegExp['$1']),this[_0x2a5db7(0x8d4)][_0x2a5db7(0x469)]=eval(RegExp['$2']);else{if('weYKm'===_0x2a5db7(0x157)){if(!_0x55dad6[_0x2a5db7(0x970)]())return;const _0x406c7e=_0x5b4cc3[_0x2a5db7(0x8be)]();if(!_0x406c7e)return;_0x406c7e[_0x2a5db7(0x992)](_0x2a5db7(0x19d));}else this['_cache'][_0x2a5db7(0xcb)]=Game_Battler['prototype']['svBattlerAnchorX'][_0x2a5db7(0x145)](this);}return this[_0x2a5db7(0x8d4)][_0x2a5db7(0xcb)];},Game_Actor['prototype']['svBattlerAnchorY']=function(){const _0x4d9a6a=_0x3fd7af;if(this[_0x4d9a6a(0x8d4)][_0x4d9a6a(0x469)]!==undefined)return this[_0x4d9a6a(0x8d4)][_0x4d9a6a(0x469)];if(this[_0x4d9a6a(0xe9)]()[_0x4d9a6a(0x7b9)]['match'](/<SIDEVIEW ANCHOR: (.*), (.*)>/i)){if(_0x4d9a6a(0x820)!==_0x4d9a6a(0x820)){const _0x3120a8=_0x56e7f1[_0x4d9a6a(0xaf4)]();this['push']('showAnimation',_0x207bc4,[_0x4d24ab],_0x3120a8[_0x4d9a6a(0x15f)]);}else this[_0x4d9a6a(0x8d4)][_0x4d9a6a(0xcb)]=eval(RegExp['$1']),this[_0x4d9a6a(0x8d4)][_0x4d9a6a(0x469)]=eval(RegExp['$2']);}else{if(_0x4d9a6a(0x9a6)===_0x4d9a6a(0x9a6))this[_0x4d9a6a(0x8d4)][_0x4d9a6a(0x469)]=Game_Battler['prototype'][_0x4d9a6a(0x5dd)][_0x4d9a6a(0x145)](this);else{if(!_0x4ed1f0[_0x4d9a6a(0x970)]())return;if(!_0xe43ebb[_0x4d9a6a(0x8b2)])return;_0x2a819e['ConvertParams'](_0x14ac6a,_0x25720a);const _0x38d613=_0x3ed0da[_0x4d9a6a(0x8be)](),_0x248f06=_0x1b8e58['WaitForAngle'];if(!_0x38d613)return;_0x12c53e[_0x4d9a6a(0x619)](_0x30dda4[_0x4d9a6a(0x462)],_0x5dada4[_0x4d9a6a(0x200)],_0x2b2251[_0x4d9a6a(0x9f6)]);if(_0x248f06)_0x38d613[_0x4d9a6a(0x992)](_0x4d9a6a(0x1a9));}}return this[_0x4d9a6a(0x8d4)][_0x4d9a6a(0x469)];},Game_Actor[_0x3fd7af(0x9fd)][_0x3fd7af(0x4cc)]=function(){const _0x59c091=_0x3fd7af;if(this[_0x59c091(0x8d4)][_0x59c091(0xa98)]!==undefined)return this['_cache'][_0x59c091(0xa98)];if(this[_0x59c091(0xe9)]()[_0x59c091(0x7b9)][_0x59c091(0x265)](/<SIDEVIEW SHOW SHADOW>/i))_0x59c091(0x195)===_0x59c091(0x195)?this[_0x59c091(0x8d4)][_0x59c091(0xa98)]=!![]:this[_0x59c091(0x3b2)]()&&this[_0x59c091(0x7bb)]();else this['actor']()[_0x59c091(0x7b9)]['match'](/<SIDEVIEW HIDE SHADOW>/i)?_0x59c091(0x909)===_0x59c091(0xaaa)?_0x3eb505['snapForBackground']():this[_0x59c091(0x8d4)][_0x59c091(0xa98)]=![]:this[_0x59c091(0x8d4)][_0x59c091(0xa98)]=Game_Battler['prototype'][_0x59c091(0x4cc)][_0x59c091(0x145)](this);return this[_0x59c091(0x8d4)][_0x59c091(0xa98)];},Game_Actor[_0x3fd7af(0x9fd)][_0x3fd7af(0x3bc)]=function(){const _0x1f8e4d=_0x3fd7af;return VisuMZ['BattleCore'][_0x1f8e4d(0xa6b)][_0x1f8e4d(0x9de)][_0x1f8e4d(0x267)];},Game_Actor['prototype'][_0x3fd7af(0x567)]=function(){const _0x208c87=_0x3fd7af,_0x3e7e75=this[_0x208c87(0xae3)](),_0x1a1d9b=_0x3e7e75[0x0]?_0x3e7e75[0x0][_0x208c87(0x14d)]:0x0,_0x2bd25f=$dataSystem[_0x208c87(0x3b0)][_0x1a1d9b];_0x2bd25f&&(_0x208c87(0x6fb)==='IorKO'?this['startWeaponAnimation'](_0x2bd25f['weaponImageId']):(_0x3e9c18[_0x208c87(0x941)][_0x208c87(0xa6b)]['HpGauge'][_0x208c87(0x4e0)]&&this[_0x208c87(0x56e)](),_0x305b71['BattleCore']['Sprite_Enemy_createStateIconSprite'][_0x208c87(0x145)](this)));},Game_Actor['prototype'][_0x3fd7af(0x386)]=function(_0x210719){const _0x4777d5=_0x3fd7af;Game_Battler[_0x4777d5(0x9fd)][_0x4777d5(0x386)][_0x4777d5(0x145)](this,_0x210719),this[_0x4777d5(0xca)](_0x210719);},Game_Actor[_0x3fd7af(0x9fd)]['getAttackMotion']=function(){const _0x3f30d3=_0x3fd7af,_0x11de61=this[_0x3f30d3(0xae3)](),_0x398a63=_0x11de61[0x0]?_0x11de61[0x0][_0x3f30d3(0x14d)]:0x0;return $dataSystem['attackMotions'][_0x398a63];},Game_Actor['prototype'][_0x3fd7af(0x554)]=function(_0x3de373){const _0x71b977=_0x3fd7af;_0x3de373=_0x3de373||0x1,_0x3de373--;const _0x22d210=this[_0x71b977(0xae3)]();return _0x22d210[_0x3de373]?_0x22d210[_0x3de373][_0x71b977(0x15f)]:0x0;},Game_Actor[_0x3fd7af(0x9fd)]['getAttackMotionSlot']=function(_0x34d610){const _0x47e983=_0x3fd7af;_0x34d610=_0x34d610||0x1,_0x34d610--;const _0x39ebbc=this['weapons'](),_0x4766c2=_0x39ebbc[_0x34d610]?_0x39ebbc[_0x34d610][_0x47e983(0x14d)]:0x0;return $dataSystem[_0x47e983(0x3b0)][_0x4766c2];},Game_Actor[_0x3fd7af(0x9fd)][_0x3fd7af(0x9bf)]=function(_0x3fbf90){const _0x10bccf=_0x3fd7af;_0x3fbf90=_0x3fbf90||0x1,_0x3fbf90--;const _0x457777=this[_0x10bccf(0xae3)](),_0x3e00e2=_0x457777[_0x3fbf90]?_0x457777[_0x3fbf90][_0x10bccf(0x14d)]:0x0,_0x3bbbf8=$dataSystem['attackMotions'][_0x3e00e2];if(_0x3bbbf8){if(_0x3bbbf8['type']===0x0){if(_0x10bccf(0x559)===_0x10bccf(0x25d)){if(_0x36ea7f===this[_0x10bccf(0x588)]()&&this[_0x10bccf(0xa0b)]())return!![];return _0xbf0507[_0x10bccf(0x941)][_0x10bccf(0x481)][_0x10bccf(0x145)](this,_0x454900);}else this['requestMotion'](_0x10bccf(0x96d));}else{if(_0x3bbbf8['type']===0x1)this[_0x10bccf(0x42a)](_0x10bccf(0x384));else _0x3bbbf8[_0x10bccf(0x28f)]===0x2&&this[_0x10bccf(0x42a)](_0x10bccf(0x486));}this['startWeaponAnimation'](_0x3bbbf8[_0x10bccf(0x762)]);}},Game_Battler[_0x3fd7af(0x9fd)][_0x3fd7af(0x26e)]=function(_0x48797c){const _0x204ee7=_0x3fd7af;this[_0x204ee7(0x1ba)]=_0x48797c||0x0;},Game_Battler['prototype'][_0x3fd7af(0x222)]=function(){const _0x55b189=_0x3fd7af;this[_0x55b189(0x1ba)]=this[_0x55b189(0x1ba)]||0x0,this[_0x55b189(0x1ba)]++;},Game_Battler[_0x3fd7af(0x9fd)][_0x3fd7af(0x328)]=function(){this['_activeWeaponSlot']=undefined;},VisuMZ[_0x3fd7af(0x941)]['Game_Actor_equips']=Game_Actor['prototype']['equips'],Game_Actor[_0x3fd7af(0x9fd)]['equips']=function(){const _0x55ebc2=_0x3fd7af;let _0x5083df=VisuMZ[_0x55ebc2(0x941)][_0x55ebc2(0x4b7)]['call'](this);if(this[_0x55ebc2(0x437)])return _0x5083df;if(this['_activeWeaponSlot']!==undefined){this['_tempEquipCheck']=!![];const _0x57ce35=this['equipSlots']();for(let _0x3408cd=0x0;_0x3408cd<_0x57ce35[_0x55ebc2(0x732)];_0x3408cd++){_0x55ebc2(0x4b3)==='mVqtJ'?_0x57ce35[_0x3408cd]===0x1&&this[_0x55ebc2(0x1ba)]!==_0x3408cd&&(_0x55ebc2(0x498)!==_0x55ebc2(0x19f)?_0x5083df[_0x3408cd]=null:this[_0x55ebc2(0x96c)](this['_frontAttachmentSprite'])):(_0x4502ec[_0x55ebc2(0x2a2)]=!![],this[_0x55ebc2(0xd6)](_0x496668));}this[_0x55ebc2(0x437)]=undefined;}return _0x5083df;},Window_BattleLog[_0x3fd7af(0x9fd)][_0x3fd7af(0x1da)]=function(_0x432e2a){const _0x8048fd=_0x3fd7af;return _0x432e2a['isActor']()?_0x432e2a[_0x8048fd(0xae3)]()[_0x8048fd(0x732)]||0x1:0x1;},Window_BattleLog['prototype'][_0x3fd7af(0x5c9)]=function(_0x305130,_0x268fcd){const _0xc46c2f=_0x3fd7af;_0x305130&&_0x305130[_0xc46c2f(0x91d)]()&&_0x305130[_0xc46c2f(0x26e)](_0x268fcd),this[_0xc46c2f(0x9a3)]();},Window_BattleLog[_0x3fd7af(0x9fd)][_0x3fd7af(0x16c)]=function(_0x45156e){const _0x2b308f=_0x3fd7af;_0x45156e&&_0x45156e[_0x2b308f(0x91d)]()&&_0x45156e[_0x2b308f(0x328)](),this[_0x2b308f(0x9a3)]();},Game_Actor[_0x3fd7af(0x9fd)][_0x3fd7af(0x117)]=function(){const _0x24185c=_0x3fd7af;let _0x3da4c4='battleUIOffsetX';if(this[_0x24185c(0x8a3)](_0x3da4c4))return this[_0x24185c(0x8d4)][_0x3da4c4];return this[_0x24185c(0x8d4)][_0x3da4c4]=this[_0x24185c(0x456)](this[_0x24185c(0xe9)]()),this[_0x24185c(0x8d4)][_0x3da4c4];},Game_Actor[_0x3fd7af(0x9fd)][_0x3fd7af(0x4ac)]=function(){const _0xa757a8=_0x3fd7af;let _0x349024=_0xa757a8(0x4ac);if(this[_0xa757a8(0x8a3)](_0x349024))return this['_cache'][_0x349024];return this[_0xa757a8(0x8d4)][_0x349024]=this['createBattleUIOffsetY'](this[_0xa757a8(0xe9)]()),this['_cache'][_0x349024];},VisuMZ[_0x3fd7af(0x941)][_0x3fd7af(0x9fc)]=Game_Enemy[_0x3fd7af(0x9fd)][_0x3fd7af(0xbb)],Game_Enemy[_0x3fd7af(0x9fd)][_0x3fd7af(0xbb)]=function(_0x5cf5f7,_0x306893,_0x37de24){const _0x33942b=_0x3fd7af;_0x5cf5f7=DataManager[_0x33942b(0x45d)](_0x5cf5f7),VisuMZ[_0x33942b(0x941)][_0x33942b(0x9fc)][_0x33942b(0x145)](this,_0x5cf5f7,_0x306893,_0x37de24);Imported['VisuMZ_1_ElementStatusCore']&&this['initElementStatusCore']();this[_0x33942b(0x93f)](),this['setupBattleCoreData']();if(Imported[_0x33942b(0x618)]){if('ujduf'===_0x33942b(0x58c)){if(this[_0x33942b(0x517)]>0x0){const _0x19f987=this['_borderPortraitDuration'],_0x5b5abb=this[_0x33942b(0xf6)];_0x5b5abb['x']=(_0x5b5abb['x']*(_0x19f987-0x1)+this['_borderPortraitTargetX'])/_0x19f987,_0x5b5abb[_0x33942b(0x824)]=(_0x5b5abb['opacity']*(_0x19f987-0x1)+0xff)/_0x19f987,this[_0x33942b(0x517)]--;}}else this[_0x33942b(0x661)]();}},Game_Enemy['prototype'][_0x3fd7af(0x93f)]=function(){const _0x45b0a4=_0x3fd7af,_0x269989=VisuMZ[_0x45b0a4(0x941)]['Settings'][_0x45b0a4(0x520)];this['_attackAnimationId']=_0x269989[_0x45b0a4(0xe5)],this[_0x45b0a4(0x6e2)]={};},Game_Enemy[_0x3fd7af(0x9fd)]['setupBattleCoreData']=function(){const _0x21c25e=_0x3fd7af,_0x597baa=VisuMZ[_0x21c25e(0x941)]['Settings'][_0x21c25e(0x520)],_0x2ef407=this[_0x21c25e(0xb4)]()[_0x21c25e(0x7b9)];this[_0x21c25e(0x6e2)]={'name':'','wtypeId':_0x597baa['WtypeId'],'collapse':_0x597baa['AllowCollapse'],'motionIdle':_0x597baa[_0x21c25e(0xaa1)],'width':_0x597baa[_0x21c25e(0xa30)]||0x40,'height':_0x597baa[_0x21c25e(0x51c)]||0x40,'anchorX':_0x597baa[_0x21c25e(0x9f9)]||0x0,'anchorY':_0x597baa[_0x21c25e(0xaa)]||0x0,'shadow':_0x597baa[_0x21c25e(0x5b4)]};if(_0x2ef407[_0x21c25e(0x265)](/<ATTACK ANIMATION:[ ](\d+)>/i)){if(_0x21c25e(0x69c)===_0x21c25e(0xa15)){const _0xb77a5f=new _0x5e999c(0x0,0x0,_0x436fbf[_0x21c25e(0xad0)],_0x230c9d[_0x21c25e(0x26a)]);this['_commandNameWindow']=new _0xda0e3c(_0xb77a5f),this[_0x21c25e(0x3a0)][_0x21c25e(0x824)]=0x0,this[_0x21c25e(0x96c)](this[_0x21c25e(0x3a0)]),this['updateCommandNameWindow']();}else this[_0x21c25e(0x3f8)]=Number(RegExp['$1']);}const _0x2bc27e=this[_0x21c25e(0x6e2)];if(_0x2ef407[_0x21c25e(0x265)](/<SIDEVIEW BATTLER: (.*)>/i)){if(_0x21c25e(0xa10)!==_0x21c25e(0xa10))return!![];else _0x2bc27e[_0x21c25e(0x504)]=String(RegExp['$1']);}else{if(_0x2ef407[_0x21c25e(0x265)](/<SIDEVIEW BATTLERS>\s*([\s\S]*)\s*<\/SIDEVIEW BATTLERS>/i)){if(_0x21c25e(0x615)===_0x21c25e(0x90b))_0x1046c0['item']()[_0x21c25e(0xa59)][_0x21c25e(0x28f)]>0x0?this[_0x21c25e(0x5a4)]():this['requestMotion'](_0x21c25e(0x13d));else{const _0x258eca=String(RegExp['$1'])[_0x21c25e(0xaa3)](/[\r\n]+/)[_0x21c25e(0x861)]('');_0x2bc27e[_0x21c25e(0x504)]=DataManager[_0x21c25e(0x5d8)](_0x258eca);}}}_0x2ef407[_0x21c25e(0x265)](/<SIDEVIEW ANCHOR: (.*), (.*)>/i)&&(_0x2bc27e[_0x21c25e(0x275)]=eval(RegExp['$1']),_0x2bc27e['anchorY']=eval(RegExp['$2']));if(_0x2ef407[_0x21c25e(0x265)](/<SIDEVIEW COLLAPSE>/i))_0x2bc27e[_0x21c25e(0x8e7)]=!![];else _0x2ef407['match'](/<SIDEVIEW NO COLLAPSE>/i)&&(_0x2bc27e[_0x21c25e(0x8e7)]=![]);if(_0x2ef407[_0x21c25e(0x265)](/<SIDEVIEW SHOW SHADOW>/i))_0x2bc27e[_0x21c25e(0x886)]=!![];else _0x2ef407[_0x21c25e(0x265)](/<SIDEVIEW HIDE SHADOW>/i)&&(_0x2bc27e[_0x21c25e(0x886)]=![]);if(_0x2ef407[_0x21c25e(0x265)](/<SIDEVIEW IDLE MOTION: (.*)>/i))_0x2bc27e[_0x21c25e(0x924)]=String(RegExp['$1'])['toLowerCase']()['trim']();else{if(_0x2ef407['match'](/<SIDEVIEW IDLE MOTIONS>\s*([\s\S]*)\s*<\/SIDEVIEW IDLE MOTIONS>/i)){if(_0x21c25e(0x630)!==_0x21c25e(0x635)){const _0x423ce2=String(RegExp['$1'])['split'](/[\r\n]+/)[_0x21c25e(0x861)]('');_0x2bc27e[_0x21c25e(0x924)]=DataManager['processRandomizedData'](_0x423ce2);}else this[_0x21c25e(0x3bd)]()?delete _0x32c9e2[_0x21c25e(0x410)]['cancel']:_0x40148d[_0x21c25e(0x2da)](_0x21c25e(0xac4),this[_0x21c25e(0x613)]['bind'](this));}}_0x2ef407[_0x21c25e(0x265)](/<SIDEVIEW SIZE: (\d+), (\d+)>/i)&&(_0x2bc27e['width']=Number(RegExp['$1']),_0x2bc27e[_0x21c25e(0x26a)]=Number(RegExp['$2']));if(_0x2ef407['match'](/<SIDEVIEW WEAPON: (.*)>/i))_0x2bc27e[_0x21c25e(0x14d)]=DataManager[_0x21c25e(0xa97)](RegExp['$1']);else{if(_0x2ef407[_0x21c25e(0x265)](/<SIDEVIEW WEAPONS>\s*([\s\S]*)\s*<\/SIDEVIEW WEAPONS>/i)){const _0x540e6c=String(RegExp['$1'])['split'](/[\r\n]+/)[_0x21c25e(0x861)](''),_0x4f30e0=DataManager[_0x21c25e(0x5d8)](_0x540e6c);_0x2bc27e[_0x21c25e(0x14d)]=DataManager['getWtypeIdWithName'](_0x4f30e0);}}if(Imported[_0x21c25e(0x618)]){if('mDFAD'!==_0x21c25e(0x9b9)){const _0x4d4028=this[_0x21c25e(0x794)]();for(const _0x26cc15 of _0x4d4028){const _0xa6b351=this[_0x21c25e(0x441)](_0x26cc15)['Name'][_0x21c25e(0x989)]()[_0x21c25e(0x306)](),_0x50ba26=_0x26cc15['toUpperCase']()[_0x21c25e(0x306)]();if(_0x2ef407[_0x21c25e(0x265)](VisuMZ[_0x21c25e(0x927)][_0x21c25e(0x240)]['SvBattlerSolo-%1-%2'[_0x21c25e(0xab2)](_0x50ba26,_0xa6b351)]))_0x2bc27e['name']=String(RegExp['$1']);else{if(_0x2ef407[_0x21c25e(0x265)](VisuMZ[_0x21c25e(0x927)][_0x21c25e(0x240)][_0x21c25e(0x601)['format'](_0x50ba26,_0xa6b351)])){if('QqHHd'===_0x21c25e(0x643))return _0x39dab2[_0x21c25e(0x941)][_0x21c25e(0x7e6)]['call'](this);else{const _0x36f39c=String(RegExp['$1'])['split'](/[\r\n]+/)[_0x21c25e(0x861)]('');_0x2bc27e['name']=DataManager[_0x21c25e(0x5d8)](_0x36f39c);}}}if(_0x2ef407['match'](VisuMZ[_0x21c25e(0x927)][_0x21c25e(0x240)][_0x21c25e(0x30e)[_0x21c25e(0xab2)](_0x50ba26,_0xa6b351)]))_0x2bc27e['wtypeId']=DataManager[_0x21c25e(0xa97)](RegExp['$1']);else{if(_0x2ef407['match'](VisuMZ[_0x21c25e(0x927)]['RegExp'][_0x21c25e(0xa95)[_0x21c25e(0xab2)](_0x50ba26,_0xa6b351)])){if(_0x21c25e(0x834)==='pEacN'){const _0x5a7932=String(RegExp['$1'])[_0x21c25e(0xaa3)](/[\r\n]+/)[_0x21c25e(0x861)](''),_0x1b3863=DataManager[_0x21c25e(0x5d8)](_0x5a7932);_0x2bc27e[_0x21c25e(0x14d)]=DataManager[_0x21c25e(0xa97)](_0x1b3863);}else this[_0x21c25e(0x44e)][_0x21c25e(0x6c7)]();}}if(_0x2ef407[_0x21c25e(0x265)](VisuMZ[_0x21c25e(0x927)][_0x21c25e(0x240)][_0x21c25e(0x790)[_0x21c25e(0xab2)](_0x50ba26,_0xa6b351)])){if('kIlng'===_0x21c25e(0x447))_0x2bc27e['motionIdle']=String(RegExp['$1'])[_0x21c25e(0x81b)]()[_0x21c25e(0x306)]();else{this[_0x21c25e(0x42a)](_0x21c25e(0x6f5));return;}}else{if(_0x2ef407['match'](VisuMZ[_0x21c25e(0x927)][_0x21c25e(0x240)][_0x21c25e(0x9e6)[_0x21c25e(0xab2)](_0x50ba26,_0xa6b351)])){const _0x4f0040=String(RegExp['$1'])['split'](/[\r\n]+/)[_0x21c25e(0x861)]('');_0x2bc27e[_0x21c25e(0x924)]=DataManager[_0x21c25e(0x5d8)](_0x4f0040);}}}}else{const _0x41f6be=_0x4a5567[_0x21c25e(0x7b9)];if(_0x41f6be[_0x21c25e(0x265)](/<SIDEVIEW SHADOW (?:SCALE|SCALE X):[ ](\d+)([%％])>/i))return _0x365c2f(_0x2fbe9b['$1'])*0.01;else{if(_0x41f6be[_0x21c25e(0x265)](/<SIDEVIEW SHADOW (?:SCALE|SCALE X):[ ](.*)>/i))return _0x5f2836(_0x5b0909['$1'])||0x0;}}}},Game_Enemy[_0x3fd7af(0x9fd)]['attackAnimationId1']=function(){const _0x22496c=_0x3fd7af;return this[_0x22496c(0x3f8)]||0x0;},Game_Enemy[_0x3fd7af(0x9fd)][_0x3fd7af(0x5f6)]=function(){const _0x3e9894=_0x3fd7af;return this[_0x3e9894(0x8f1)]();},Game_Enemy[_0x3fd7af(0x9fd)][_0x3fd7af(0x554)]=function(_0x16fa4e){return this['attackAnimationId1']();},Game_Enemy[_0x3fd7af(0x9fd)][_0x3fd7af(0x6e8)]=function(){const _0x5bff2d=_0x3fd7af;if(this[_0x5bff2d(0xb4)]()[_0x5bff2d(0x7b9)][_0x5bff2d(0x265)](/<BATTLER SPRITE CANNOT MOVE>/i))return![];return Game_Battler['prototype'][_0x5bff2d(0x6e8)][_0x5bff2d(0x145)](this);},Game_Enemy[_0x3fd7af(0x9fd)][_0x3fd7af(0x691)]=function(){const _0x1bc00c=_0x3fd7af;if(this[_0x1bc00c(0xb4)]()[_0x1bc00c(0x7b9)][_0x1bc00c(0x265)](/<BATTLER SPRITE GROUNDED>/i))return!![];return![];},Game_Enemy['prototype'][_0x3fd7af(0x4f7)]=function(){const _0x33aaf3=_0x3fd7af,_0x1b3207=[];for(const _0x2cee82 of this[_0x33aaf3(0xb4)]()[_0x33aaf3(0x968)]){if(_0x33aaf3(0x747)!=='SrWGK'){const _0xbb4b67=$dataSkills[_0x2cee82['skillId']];if(_0xbb4b67&&!_0x1b3207[_0x33aaf3(0x402)](_0xbb4b67))_0x1b3207[_0x33aaf3(0x18b)](_0xbb4b67);}else return this[_0x33aaf3(0xa90)]>0x0;}return _0x1b3207;},Game_Enemy[_0x3fd7af(0x9fd)]['battleUIOffsetX']=function(){const _0x303cf0=_0x3fd7af;let _0x5f5c7f='battleUIOffsetX';if(this['checkCacheKey'](_0x5f5c7f))return this[_0x303cf0(0x8d4)][_0x5f5c7f];return this[_0x303cf0(0x8d4)][_0x5f5c7f]=this[_0x303cf0(0x456)](this[_0x303cf0(0xb4)]()),this['_cache'][_0x5f5c7f];},Game_Enemy['prototype'][_0x3fd7af(0x4ac)]=function(){const _0xf52b39=_0x3fd7af;let _0x5102de=_0xf52b39(0x4ac);if(this['checkCacheKey'](_0x5102de))return this[_0xf52b39(0x8d4)][_0x5102de];return this[_0xf52b39(0x8d4)][_0x5102de]=this[_0xf52b39(0x400)](this[_0xf52b39(0xb4)]()),this[_0xf52b39(0x8d4)][_0x5102de];},Game_Enemy[_0x3fd7af(0x9fd)][_0x3fd7af(0x36a)]=function(){const _0xa3b7a=_0x3fd7af;if(this['_svBattlerData']!==undefined)return this[_0xa3b7a(0x6e2)];return this['setupBattleCoreData'](),this['_svBattlerData'];},Game_Enemy['prototype'][_0x3fd7af(0x5db)]=function(){const _0x23b48f=_0x3fd7af;return this[_0x23b48f(0x36a)]()['name']!=='';},Game_Enemy[_0x3fd7af(0x9fd)][_0x3fd7af(0x4c5)]=function(){const _0x581c7d=_0x3fd7af;return this[_0x581c7d(0x36a)]()['name'];},Game_Enemy[_0x3fd7af(0x9fd)][_0x3fd7af(0x3bc)]=function(){const _0x4cf16e=_0x3fd7af;return this[_0x4cf16e(0x5db)]()?VisuMZ['BattleCore'][_0x4cf16e(0xa6b)][_0x4cf16e(0x9de)]['SmoothImage']:_0x4cf16e(0x191)!==_0x4cf16e(0x191)?this[_0x4cf16e(0x942)]()[_0x4cf16e(0xb8)](_0x36b7fb=>_0x36b7fb[_0x4cf16e(0x2eb)]()):VisuMZ['BattleCore']['Settings'][_0x4cf16e(0x520)][_0x4cf16e(0x267)];},Game_Enemy[_0x3fd7af(0x9fd)][_0x3fd7af(0x386)]=function(_0x30faa2){const _0x4bdc99=_0x3fd7af;Game_Battler[_0x4bdc99(0x9fd)]['performAction']['call'](this,_0x30faa2);if(this['hasSvBattler']())this['performActionMotions'](_0x30faa2);},Game_Enemy[_0x3fd7af(0x9fd)][_0x3fd7af(0x5a4)]=function(){const _0x46e5e9=_0x3fd7af,_0x1a4101=this[_0x46e5e9(0x36a)]()[_0x46e5e9(0x14d)]||0x0,_0x35f2b9=$dataSystem[_0x46e5e9(0x3b0)][_0x1a4101];if(_0x35f2b9){if(_0x46e5e9(0x3e0)===_0x46e5e9(0x3e0)){if(_0x35f2b9[_0x46e5e9(0x28f)]===0x0){if(_0x46e5e9(0x808)===_0x46e5e9(0x808))this[_0x46e5e9(0x42a)](_0x46e5e9(0x96d));else{const _0x500205=_0x45f209[_0x46e5e9(0x941)]['Settings'][_0x46e5e9(0x501)],_0x1d29b3=this['actor'](_0x291dd2),_0xc60c65=this[_0x46e5e9(0x864)](_0x14c739),_0x124802=_0x2c6a1b[_0x46e5e9(0x819)](_0xc60c65['x']+(_0xc60c65[_0x46e5e9(0xad0)]-0x80)/0x2),_0xadc856=this[_0x46e5e9(0x66c)](_0xc60c65);let _0x154649=_0x124802-_0x2bc315[_0x46e5e9(0x542)]/0x2-0x4,_0x1206eb=_0xadc856+_0x1965d2[_0x46e5e9(0x5b6)]/0x2;_0x154649-_0x2189f2['iconWidth']/0x2<_0xc60c65['x']&&(_0x154649=_0x124802+_0x51d80d['iconWidth']/0x2-0x4,_0x1206eb=_0xadc856-_0x321d45[_0x46e5e9(0x5b6)]/0x2);const _0x279b9d=_0x124802,_0x4456fd=this[_0x46e5e9(0x2f8)](_0xc60c65);this['placeTimeGauge'](_0x1d29b3,_0x124802+(_0x500205['TpbGaugeOffsetX']||0x0),_0xadc856+(_0x500205[_0x46e5e9(0x597)]||0x0)),this[_0x46e5e9(0xa6f)](_0x1d29b3,_0x124802+(_0x500205['NameOffsetX']||0x0),_0xadc856+(_0x500205[_0x46e5e9(0xa48)]||0x0)),this[_0x46e5e9(0x6b1)](_0x1d29b3,_0x154649+(_0x500205[_0x46e5e9(0xa20)]||0x0),_0x1206eb+(_0x500205['StateIconOffsetY']||0x0)),this['placeGauge'](_0x1d29b3,'hp',_0x279b9d+(_0x500205[_0x46e5e9(0x1f4)]||0x0),_0x4456fd+(_0x500205[_0x46e5e9(0x85b)]||0x0)),this['placeGauge'](_0x1d29b3,'mp',_0x279b9d+(_0x500205[_0x46e5e9(0x287)]||0x0),_0x4456fd+this[_0x46e5e9(0x665)]()+(_0x500205['MpGaugeOffsetY']||0x0)),_0x12fe08[_0x46e5e9(0x64d)]&&this[_0x46e5e9(0x8b3)](_0x1d29b3,'tp',_0x279b9d+(_0x500205[_0x46e5e9(0x258)]||0x0),_0x4456fd+this[_0x46e5e9(0x665)]()*0x2+(_0x500205['TpGaugeOffsetY']||0x0));}}else{if(_0x35f2b9[_0x46e5e9(0x28f)]===0x1)this[_0x46e5e9(0x42a)](_0x46e5e9(0x384));else _0x35f2b9[_0x46e5e9(0x28f)]===0x2&&this[_0x46e5e9(0x42a)]('missile');}}else{if(this[_0x46e5e9(0x9cb)]())return![];if(this['isAlive']()&&this[_0x46e5e9(0x8ac)]())return!![];if(this[_0x46e5e9(0x7e8)]()&&this[_0x46e5e9(0x5db)]()){if(this[_0x46e5e9(0x217)]()&&this[_0x46e5e9(0x944)]())return![];}else{if(this[_0x46e5e9(0x217)]())return![];}return!![];}}},Game_Enemy[_0x3fd7af(0x9fd)][_0x3fd7af(0x567)]=function(){const _0x4be6ae=_0x3fd7af,_0x5ac17d=this[_0x4be6ae(0x36a)]()[_0x4be6ae(0x14d)]||0x0,_0x5a9e0c=$dataSystem['attackMotions'][_0x5ac17d];_0x5a9e0c&&this['startWeaponAnimation'](_0x5a9e0c[_0x4be6ae(0x762)]);},Game_Enemy[_0x3fd7af(0x9fd)][_0x3fd7af(0x125)]=function(){const _0x3f0b9b=_0x3fd7af,_0x53568=this['svBattlerData']()[_0x3f0b9b(0x14d)]||0x0;return $dataSystem['attackMotions'][_0x53568];},Game_Enemy[_0x3fd7af(0x9fd)][_0x3fd7af(0x24a)]=function(_0x339398){return this['getAttackMotion']();},Game_Enemy[_0x3fd7af(0x9fd)]['performDamage']=function(){const _0x300cd1=_0x3fd7af;Game_Battler[_0x300cd1(0x9fd)][_0x300cd1(0x236)]['call'](this),this[_0x300cd1(0x8bc)]()&&this[_0x300cd1(0x5db)]()&&this[_0x300cd1(0x42a)](_0x300cd1(0xa59)),SoundManager[_0x300cd1(0x201)]();},Game_Enemy[_0x3fd7af(0x9fd)][_0x3fd7af(0xff)]=function(){const _0xb2336a=_0x3fd7af;Game_Battler[_0xb2336a(0x9fd)]['performEvasion'][_0xb2336a(0x145)](this),this[_0xb2336a(0x42a)](_0xb2336a(0x940));},Game_Enemy[_0x3fd7af(0x9fd)][_0x3fd7af(0x869)]=function(){const _0x1a1494=_0x3fd7af;Game_Battler[_0x1a1494(0x9fd)][_0x1a1494(0x869)][_0x1a1494(0x145)](this),this[_0x1a1494(0x42a)]('evade');},Game_Enemy[_0x3fd7af(0x9fd)][_0x3fd7af(0x39c)]=function(){const _0x184fc9=_0x3fd7af;Game_Battler['prototype'][_0x184fc9(0x39c)]['call'](this),this[_0x184fc9(0x5a4)]();},Game_Enemy['prototype'][_0x3fd7af(0x944)]=function(){const _0x12d1e5=_0x3fd7af;if(this['hasSvBattler']()){if(this[_0x12d1e5(0x21f)]()>=0x1)return!![];return this[_0x12d1e5(0x36a)]()['collapse'];}else{if(_0x12d1e5(0x728)===_0x12d1e5(0x74b))_0x131445[_0x12d1e5(0x3ec)](_0x3241dc),this[_0x12d1e5(0x9a3)]();else return!![];}},Game_Enemy[_0x3fd7af(0x9fd)][_0x3fd7af(0x73a)]=function(){const _0x34dae6=_0x3fd7af;return this[_0x34dae6(0x36a)]()[_0x34dae6(0x275)];},Game_Enemy[_0x3fd7af(0x9fd)]['svBattlerAnchorY']=function(){const _0x22e538=_0x3fd7af;return this[_0x22e538(0x36a)]()['anchorY'];},Game_Enemy[_0x3fd7af(0x9fd)][_0x3fd7af(0x4cc)]=function(){const _0x261a2a=_0x3fd7af;return this[_0x261a2a(0x36a)]()[_0x261a2a(0x886)];},VisuMZ[_0x3fd7af(0x941)]['Game_Enemy_transform']=Game_Enemy[_0x3fd7af(0x9fd)]['transform'],Game_Enemy[_0x3fd7af(0x9fd)][_0x3fd7af(0x241)]=function(_0x35069c){const _0x35596b=_0x3fd7af;VisuMZ['BattleCore'][_0x35596b(0x883)][_0x35596b(0x145)](this,_0x35069c),this[_0x35596b(0x93f)](),this[_0x35596b(0x283)]();const _0x3d5443=this['battler']();if(_0x3d5443)_0x3d5443[_0x35596b(0xa84)](this);},Game_Unit[_0x3fd7af(0x9fd)][_0x3fd7af(0xa39)]=function(_0x33e514){const _0x37aa59=_0x3fd7af;for(const _0x42c9cc of this['members']()){if('yetGg'!=='xcaMs'){if(_0x42c9cc)_0x42c9cc['processBattleCoreJS'](_0x33e514);}else _0x386635['result']()[_0x37aa59(0x84d)]>0x0&&!_0x2f901f['result']()[_0x37aa59(0x85e)]&&this[_0x37aa59(0x18b)](_0x37aa59(0x236),_0x30abbc),_0x5e12dd['result']()['hpDamage']<0x0&&this[_0x37aa59(0x18b)](_0x37aa59(0x1d0),_0x5c7c16),_0x51ae54[_0x37aa59(0x941)][_0x37aa59(0xa6b)]['BattleLog'][_0x37aa59(0x4e7)]&&this[_0x37aa59(0x18b)](_0x37aa59(0x2d6),this['makeHpDamageText'](_0x36a716));}},Game_Unit[_0x3fd7af(0x9fd)]['trueRandomTarget']=function(){const _0x4fb69b=_0x3fd7af,_0x278e6=this[_0x4fb69b(0x813)]();return _0x278e6[Math[_0x4fb69b(0x545)](_0x278e6[_0x4fb69b(0x732)])];},VisuMZ[_0x3fd7af(0x941)][_0x3fd7af(0x625)]=Game_Party['prototype'][_0x3fd7af(0x1ca)],Game_Party[_0x3fd7af(0x9fd)]['addActor']=function(_0x266a9f){const _0x4bf9cd=_0x3fd7af;VisuMZ['BattleCore'][_0x4bf9cd(0x625)][_0x4bf9cd(0x145)](this,_0x266a9f),BattleManager[_0x4bf9cd(0x92e)]();},VisuMZ[_0x3fd7af(0x941)][_0x3fd7af(0x61c)]=Game_Party['prototype'][_0x3fd7af(0x1ee)],Game_Party[_0x3fd7af(0x9fd)][_0x3fd7af(0x1ee)]=function(_0x352cd4){const _0x1d6871=_0x3fd7af;VisuMZ['BattleCore'][_0x1d6871(0x61c)][_0x1d6871(0x145)](this,_0x352cd4),BattleManager['refreshStatusWindow']();},VisuMZ[_0x3fd7af(0x941)][_0x3fd7af(0xa32)]=Game_Troop[_0x3fd7af(0x9fd)]['setup'],Game_Troop['prototype'][_0x3fd7af(0xbb)]=function(_0x3ab716){const _0x88b68e=_0x3fd7af;$gameTemp[_0x88b68e(0xa42)](),$gameTemp[_0x88b68e(0x503)](_0x3ab716),VisuMZ[_0x88b68e(0x941)][_0x88b68e(0xa32)][_0x88b68e(0x145)](this,_0x3ab716);},VisuMZ[_0x3fd7af(0x941)]['Game_Troop_expTotal']=Game_Troop['prototype']['expTotal'],Game_Troop[_0x3fd7af(0x9fd)][_0x3fd7af(0x455)]=function(){const _0x62bdb=_0x3fd7af;let _0xf3c6d0=VisuMZ['BattleCore'][_0x62bdb(0x96f)][_0x62bdb(0x145)](this);return this[_0x62bdb(0x5f3)]&&(_0xf3c6d0*=this['expRate']()),Math[_0x62bdb(0x821)](_0xf3c6d0);},Game_Troop[_0x3fd7af(0x9fd)][_0x3fd7af(0x5f3)]=function(){return 0x1;},VisuMZ[_0x3fd7af(0x941)][_0x3fd7af(0xea)]=Game_Map[_0x3fd7af(0x9fd)]['setupBattleback'],Game_Map['prototype'][_0x3fd7af(0x60c)]=function(){const _0x29cc4d=_0x3fd7af;VisuMZ['BattleCore'][_0x29cc4d(0xea)][_0x29cc4d(0x145)](this),this[_0x29cc4d(0x79e)]();},Game_Map['prototype'][_0x3fd7af(0x79e)]=function(){const _0x47df5a=_0x3fd7af;this[_0x47df5a(0x991)]={},this[_0x47df5a(0x1cf)]={};if(!$dataMap)return;const _0x5c1747=$dataMap[_0x47df5a(0x7b9)];if(!_0x5c1747)return;const _0x579aba=_0x5c1747[_0x47df5a(0x265)](/<REGION (\d+) BATTLEBACK(\d+): (.*)>/gi);if(_0x579aba)for(const _0x55040e of _0x579aba){_0x55040e[_0x47df5a(0x265)](/<REGION (\d+) BATTLEBACK(\d+): (.*)>/i);const _0x5969d7=Number(RegExp['$1']),_0x27d53f=Number(RegExp['$2']),_0x19a4d2=_0x27d53f===0x1?this[_0x47df5a(0x991)]:this[_0x47df5a(0x1cf)],_0x268260=String(RegExp['$3']);_0x19a4d2[_0x5969d7]=_0x268260;}},VisuMZ[_0x3fd7af(0x941)][_0x3fd7af(0x361)]=Game_Map[_0x3fd7af(0x9fd)][_0x3fd7af(0x2ec)],Game_Map[_0x3fd7af(0x9fd)][_0x3fd7af(0x2ec)]=function(){const _0x15fbe0=_0x3fd7af;if(!BattleManager['isBattleTest']()){const _0x446d3f=$gamePlayer[_0x15fbe0(0xadd)]($gamePlayer['x'],$gamePlayer['y']);if(this[_0x15fbe0(0x991)]&&this[_0x15fbe0(0x991)][_0x446d3f])return _0x15fbe0(0x772)===_0x15fbe0(0x7f3)?!![]:this[_0x15fbe0(0x991)][_0x446d3f];}return VisuMZ['BattleCore'][_0x15fbe0(0x361)][_0x15fbe0(0x145)](this);},VisuMZ[_0x3fd7af(0x941)][_0x3fd7af(0x662)]=Game_Map['prototype']['battleback2Name'],Game_Map['prototype'][_0x3fd7af(0x9d3)]=function(){const _0x3ab5b4=_0x3fd7af;if(!BattleManager[_0x3ab5b4(0xa43)]()){const _0x52b545=$gamePlayer[_0x3ab5b4(0xadd)]($gamePlayer['x'],$gamePlayer['y']);if(this[_0x3ab5b4(0x991)]&&this[_0x3ab5b4(0x1cf)][_0x52b545])return this[_0x3ab5b4(0x1cf)][_0x52b545];}return VisuMZ[_0x3ab5b4(0x941)][_0x3ab5b4(0x662)][_0x3ab5b4(0x145)](this);},VisuMZ[_0x3fd7af(0x941)]['Game_Map_encounterList']=Game_Map[_0x3fd7af(0x9fd)]['encounterList'],Game_Map[_0x3fd7af(0x9fd)][_0x3fd7af(0x406)]=function(){const _0x1a6d00=_0x3fd7af;let _0x3acaa7=JsonEx[_0x1a6d00(0x4ad)](VisuMZ[_0x1a6d00(0x941)]['Game_Map_encounterList'][_0x1a6d00(0x145)](this));return VisuMZ[_0x1a6d00(0x941)][_0x1a6d00(0x227)](_0x3acaa7);},VisuMZ['BattleCore'][_0x3fd7af(0x227)]=function(_0x6da5cb){const _0x25d728=_0x3fd7af;var _0x76af0a,_0xd23d9a,_0x1e57a4;for(_0x1e57a4=_0x6da5cb['length']-0x1;_0x1e57a4>0x0;_0x1e57a4--){if(_0x25d728(0xcf)===_0x25d728(0x2fb)){const _0x3cc91b=this[_0x25d728(0xaec)]()?this[_0x25d728(0x809)]:0x0,_0x58f2ab=_0x2197b5[_0x25d728(0xfb)];this[_0x25d728(0x637)](_0x58f2ab,_0x3cc91b),this[_0x25d728(0x7ba)]=_0x3b76a8[_0x25d728(0x4ad)](this[_0x25d728(0x7ba)]);const _0x5a6a2b={'code':0xbc3,'indent':this[_0x25d728(0x605)],'parameters':_0x27b601[_0x25d728(0x4ad)](_0x40e9e7)};return this[_0x25d728(0x7ba)]['splice'](this[_0x25d728(0x4ab)]+0x1,0x0,_0x5a6a2b),!![];}else _0x76af0a=Math[_0x25d728(0x63b)](Math[_0x25d728(0x562)]()*(_0x1e57a4+0x1)),_0xd23d9a=_0x6da5cb[_0x1e57a4],_0x6da5cb[_0x1e57a4]=_0x6da5cb[_0x76af0a],_0x6da5cb[_0x76af0a]=_0xd23d9a;}return _0x6da5cb;},VisuMZ[_0x3fd7af(0x941)][_0x3fd7af(0x353)]=Game_Interpreter[_0x3fd7af(0x9fd)]['command357'],Game_Interpreter[_0x3fd7af(0x9fd)][_0x3fd7af(0x58b)]=function(_0x8b000d){const _0x44b3c2=_0x3fd7af;return $gameTemp['setLastPluginCommandInterpreter'](this),VisuMZ[_0x44b3c2(0x941)][_0x44b3c2(0x353)][_0x44b3c2(0x145)](this,_0x8b000d);},VisuMZ['BattleCore']['Game_Interpreter_updateWaitMode']=Game_Interpreter['prototype']['updateWaitMode'],Game_Interpreter[_0x3fd7af(0x9fd)][_0x3fd7af(0x271)]=function(){const _0xfb19cd=_0x3fd7af;if(SceneManager[_0xfb19cd(0x970)]()){if(_0xfb19cd(0xa27)!==_0xfb19cd(0x3d5))switch(this[_0xfb19cd(0x954)]){case _0xfb19cd(0x1a9):if(Imported[_0xfb19cd(0x8b2)]){if($gameScreen[_0xfb19cd(0xa5b)]()[_0xfb19cd(0x453)]>0x0)return!![];this[_0xfb19cd(0x954)]='';}break;case'battleAnimation':if(BattleManager['_spriteset'][_0xfb19cd(0x135)]())return!![];this[_0xfb19cd(0x954)]='';break;case _0xfb19cd(0x899):if(Imported['VisuMZ_3_ActSeqCamera']){if('Pxhnw'!==_0xfb19cd(0x377)){if($gameScreen[_0xfb19cd(0xa5b)]()[_0xfb19cd(0x981)]>0x0)return!![];if($gameScreen[_0xfb19cd(0xa5b)]()[_0xfb19cd(0x3a5)]>0x0)return!![];this[_0xfb19cd(0x954)]='';}else{if(!_0x2bafad[_0xfb19cd(0x970)]())return;const _0x54b1de=_0x1e6574['_logWindow'];_0x54b1de[_0xfb19cd(0x86f)]();}}break;case _0xfb19cd(0x676):if(BattleManager[_0xfb19cd(0x3b4)][_0xfb19cd(0x957)]())return!![];this[_0xfb19cd(0x954)]='';break;case _0xfb19cd(0xacb):if(BattleManager['_spriteset'][_0xfb19cd(0xe0)]())return!![];this[_0xfb19cd(0x954)]='';break;case _0xfb19cd(0x1ab):if(BattleManager[_0xfb19cd(0x3b4)]['isAnyoneJumping']())return!![];this[_0xfb19cd(0x954)]='';break;case _0xfb19cd(0x548):if(BattleManager[_0xfb19cd(0x4bd)][_0xfb19cd(0x2a0)]())return!![];this['_waitMode']='';break;case'battleMove':if(BattleManager[_0xfb19cd(0x3b4)][_0xfb19cd(0x7d6)]())return!![];this[_0xfb19cd(0x954)]='';break;case _0xfb19cd(0x76e):if(BattleManager[_0xfb19cd(0x3b4)][_0xfb19cd(0x579)]())return!![];this[_0xfb19cd(0x954)]='';break;case _0xfb19cd(0x771):if(BattleManager[_0xfb19cd(0x3b4)][_0xfb19cd(0x573)]())return!![];this[_0xfb19cd(0x954)]='';break;case _0xfb19cd(0x1cc):if(BattleManager[_0xfb19cd(0x3b4)]['isAnyoneSkewing']())return!![];this[_0xfb19cd(0x954)]='';break;case'battleProjectiles':if(Imported[_0xfb19cd(0xaca)]){if(_0xfb19cd(0xa01)!==_0xfb19cd(0xa01)){if(!_0x3d4b1b[_0xfb19cd(0x970)]())return;if(!_0x49d509[_0xfb19cd(0xaca)])return;_0x4866b9[_0xfb19cd(0x187)](_0x48c9a2,_0x2dc29c);const _0x2ca783=_0x29fc6d[_0xfb19cd(0x8be)](),_0x4548e3=_0x5cb3eb[_0xfb19cd(0x38c)];if(!_0x2ca783)return;const _0x475169=_0x560597[_0xfb19cd(0x3b4)];if(!_0x475169)return;_0x475169[_0xfb19cd(0x343)](_0x5d3a8d);if(_0x4548e3)_0x2ca783[_0xfb19cd(0x992)](_0xfb19cd(0x403));}else{if(BattleManager[_0xfb19cd(0x3b4)][_0xfb19cd(0x164)]())return!![];this['_waitMode']='';}}break;case _0xfb19cd(0x7bf):if(Imported[_0xfb19cd(0x8b2)]){if($gameScreen[_0xfb19cd(0xa5b)]()[_0xfb19cd(0x2d1)]>0x0)return!![];this['_waitMode']='';}break;case'battleSpin':if(BattleManager['_spriteset'][_0xfb19cd(0x8e4)]())return!![];this[_0xfb19cd(0x954)]='';break;case'battleZoom':if(Imported['VisuMZ_3_ActSeqCamera']){if(_0xfb19cd(0x593)===_0xfb19cd(0x593)){if($gameScreen[_0xfb19cd(0xa5b)]()[_0xfb19cd(0xaad)]>0x0)return!![];this['_waitMode']='';}else{const _0x5e4b51=this[_0xfb19cd(0xae3)](),_0x36e2a0=_0x5e4b51[0x0]?_0x5e4b51[0x0][_0xfb19cd(0x14d)]:0x0;return _0xb64c05[_0xfb19cd(0x3b0)][_0x36e2a0];}}break;}else _0x335bfb[_0xfb19cd(0x941)][_0xfb19cd(0xa4c)][_0xfb19cd(0x145)](this,_0x126836),this[_0xfb19cd(0x9a3)]();}return VisuMZ[_0xfb19cd(0x941)]['Game_Interpreter_updateWaitMode'][_0xfb19cd(0x145)](this);},VisuMZ[_0x3fd7af(0x941)]['Game_Interpreter_command301']=Game_Interpreter[_0x3fd7af(0x9fd)][_0x3fd7af(0x5e2)],Game_Interpreter['prototype'][_0x3fd7af(0x5e2)]=function(_0x368e7b){const _0x5862d2=_0x3fd7af;return!$gameParty[_0x5862d2(0xef)]()?this[_0x5862d2(0xaf3)](_0x368e7b):VisuMZ[_0x5862d2(0x941)][_0x5862d2(0x475)]['call'](this,_0x368e7b);},Game_Interpreter[_0x3fd7af(0x9fd)][_0x3fd7af(0x569)]=function(_0x5c1993){const _0x570556=_0x3fd7af;return VisuMZ[_0x570556(0x941)]['Game_Interpreter_command301'][_0x570556(0x145)](this,_0x5c1993),BattleManager[_0x570556(0x515)](_0x5cf255=>{const _0xbea4f5=_0x570556;this[_0xbea4f5(0x6ab)][this['_indent']]=_0x5cf255;}),!![];},VisuMZ[_0x3fd7af(0x941)]['CheckMapBattleEventValid']=function(_0x1f5b10){const _0x6f2c23=_0x3fd7af,_0x1437ed=$dataCommonEvents[_0x1f5b10];if(!_0x1437ed)return![];if(_0x1437ed[_0x6f2c23(0xfb)]['length']<=0x1)return![];return!![];},Game_Interpreter['prototype']['command301_PreBattleEvent']=function(_0x197571){const _0x35fda9=_0x3fd7af,_0xf3f2d6=VisuMZ[_0x35fda9(0x941)][_0x35fda9(0xa6b)]['Mechanics'],_0x517735=_0xf3f2d6[_0x35fda9(0x4f3)],_0x4ba649=$dataCommonEvents[_0x517735];if(_0x4ba649&&VisuMZ['BattleCore'][_0x35fda9(0x120)](_0x517735)){if('oNLUL'==='WDUnc'){const _0xa39cbb=_0x2ff841[_0x35fda9(0x2c3)](_0x2e8232['$1']);this[_0x35fda9(0x90a)](_0xa39cbb);}else{const _0x264231=this['isOnCurrentMap']()?this['_eventId']:0x0,_0x438bf9=_0x4ba649[_0x35fda9(0xfb)];this[_0x35fda9(0x637)](_0x438bf9,_0x264231),this[_0x35fda9(0x7ba)]=JsonEx[_0x35fda9(0x4ad)](this[_0x35fda9(0x7ba)]);const _0xabe4aa={'code':0xbc3,'indent':this[_0x35fda9(0x605)],'parameters':JsonEx[_0x35fda9(0x4ad)](_0x197571)};return this[_0x35fda9(0x7ba)]['splice'](this['_index']+0x1,0x0,_0xabe4aa),!![];}}else return VisuMZ[_0x35fda9(0x941)][_0x35fda9(0x475)][_0x35fda9(0x145)](this,_0x197571);},VisuMZ['BattleCore']['BattleManager_onEncounter']=BattleManager['onEncounter'],BattleManager[_0x3fd7af(0x862)]=function(){const _0xc671bb=_0x3fd7af;VisuMZ['BattleCore'][_0xc671bb(0x357)][_0xc671bb(0x145)](this),this[_0xc671bb(0x3bb)]();},BattleManager[_0x3fd7af(0x3bb)]=function(){const _0x439a13=_0x3fd7af,_0x1b2760=VisuMZ[_0x439a13(0x941)]['Settings'][_0x439a13(0x9fe)],_0x341af9=_0x1b2760[_0x439a13(0x4f3)];_0x341af9&&VisuMZ[_0x439a13(0x941)][_0x439a13(0x120)](_0x341af9)&&(_0x439a13(0x41a)===_0x439a13(0x41a)?(this[_0x439a13(0x5a0)]=!![],$gameTemp['reserveCommonEvent'](_0x1b2760[_0x439a13(0x4f3)]),$gameMap['updateInterpreter'](),$gameMap[_0x439a13(0x100)][_0x439a13(0x6a6)]=!![]):(this['push'](_0x439a13(0x621),[_0x126b48],_0x4f1c3a,_0x78eb23),this[_0x439a13(0x18b)](_0x439a13(0x959),_0x51b289,_0xbdd05b,_0x439a13(0x919),_0x50aa0f,!![],_0x439a13(0xa2d),!![]),this['push'](_0x439a13(0x42a),[_0x4c6dfa],_0x439a13(0x8cb)),this[_0x439a13(0x18b)](_0x439a13(0x798))));if(_0x1b2760['DefeatEvent']>0x0){if('IeFKb'!=='TAszF')this['_canLose']=!![];else{_0x3311f3[_0x439a13(0xa6a)][_0x439a13(0x169)](_0x439a13(0x901));const _0x372d0f=_0x184f27[_0x439a13(0xa6a)][_0x439a13(0x181)]();if(_0x372d0f)_0x372d0f['stepBack']();}}},VisuMZ[_0x3fd7af(0x941)]['Scene_Map_updateCallMenu']=Scene_Map[_0x3fd7af(0x9fd)][_0x3fd7af(0x80a)],Scene_Map[_0x3fd7af(0x9fd)][_0x3fd7af(0x80a)]=function(){const _0x56b12f=_0x3fd7af;if(BattleManager[_0x56b12f(0x5a0)])return;VisuMZ[_0x56b12f(0x941)]['Scene_Map_updateCallMenu'][_0x56b12f(0x145)](this);},VisuMZ['BattleCore'][_0x3fd7af(0x22e)]=Scene_Map[_0x3fd7af(0x9fd)]['launchBattle'],Scene_Map['prototype'][_0x3fd7af(0xd7)]=function(){const _0x210813=_0x3fd7af;BattleManager[_0x210813(0x5a0)]?this[_0x210813(0x77b)]():VisuMZ[_0x210813(0x941)][_0x210813(0x22e)][_0x210813(0x145)](this);},Scene_Map[_0x3fd7af(0x9fd)]['battleCorePreBattleCommonEvent']=function(){this['_active']=!![];},VisuMZ[_0x3fd7af(0x941)][_0x3fd7af(0x412)]=SceneManager[_0x3fd7af(0x55e)],SceneManager[_0x3fd7af(0x55e)]=function(){const _0x43d12d=_0x3fd7af;if(BattleManager[_0x43d12d(0x5a0)])return![];return VisuMZ[_0x43d12d(0x941)][_0x43d12d(0x412)][_0x43d12d(0x145)](this);},VisuMZ[_0x3fd7af(0x941)][_0x3fd7af(0x392)]=Game_Interpreter[_0x3fd7af(0x9fd)]['terminate'],Game_Interpreter[_0x3fd7af(0x9fd)][_0x3fd7af(0x75b)]=function(){const _0x235561=_0x3fd7af;VisuMZ['BattleCore'][_0x235561(0x392)]['call'](this),this[_0x235561(0x6a6)]&&(_0x235561(0x8c7)!==_0x235561(0x5c0)?(this['_preBattleCommonEvent']=undefined,SceneManager['_scene']['battleCoreResumeLaunchBattle']()):this[_0x235561(0x18b)](_0x235561(0x869),_0x322d17));},Scene_Map[_0x3fd7af(0x9fd)][_0x3fd7af(0x2c2)]=function(){const _0xe8ce77=_0x3fd7af;BattleManager[_0xe8ce77(0x5a0)]=undefined,BattleManager[_0xe8ce77(0x13f)]=!![],this[_0xe8ce77(0x1eb)]();},VisuMZ['BattleCore'][_0x3fd7af(0x668)]=Scene_Map['prototype'][_0x3fd7af(0x709)],Scene_Map[_0x3fd7af(0x9fd)]['initialize']=function(){const _0xaeb8ce=_0x3fd7af;VisuMZ[_0xaeb8ce(0x941)][_0xaeb8ce(0x668)][_0xaeb8ce(0x145)](this),BattleManager[_0xaeb8ce(0x13f)]&&(this[_0xaeb8ce(0x9c7)]=!![],BattleManager['_battleCoreBattleResumeAfter']=undefined);},VisuMZ[_0x3fd7af(0x941)][_0x3fd7af(0x57b)]=Scene_Map[_0x3fd7af(0x9fd)][_0x3fd7af(0x709)],Scene_Map[_0x3fd7af(0x9fd)][_0x3fd7af(0x709)]=function(){const _0x1fefcd=_0x3fd7af;VisuMZ[_0x1fefcd(0x941)]['Scene_Map_initialize'][_0x1fefcd(0x145)](this),$gameTemp['clearForcedGameTroopSettingsBattleCore']();},VisuMZ['BattleCore'][_0x3fd7af(0x155)]=Scene_ItemBase[_0x3fd7af(0x9fd)]['applyItem'],Scene_ItemBase[_0x3fd7af(0x9fd)][_0x3fd7af(0x4e3)]=function(){const _0x4c7654=_0x3fd7af;VisuMZ[_0x4c7654(0x941)]['Scene_ItemBase_applyItem'][_0x4c7654(0x145)](this),this[_0x4c7654(0xaf4)]()[_0x4c7654(0x7b9)][_0x4c7654(0x265)](/<CUSTOM ACTION SEQUENCE>/i)&&(_0x4c7654(0x2c8)===_0x4c7654(0x2c8)?$gameTemp[_0x4c7654(0x6d4)]=[]:(this[_0x4c7654(0xac2)]=new _0x420b95(),this[_0x4c7654(0xac2)]['bitmap']=_0x5551db[_0x4c7654(0x802)](_0x4c7654(0xda)),this[_0x4c7654(0xac2)]['bitmap'][_0x4c7654(0x6a8)]=_0x4047ec[_0x4c7654(0x941)][_0x4c7654(0xa6b)][_0x4c7654(0x9de)]['SmoothImage'],this['_shadowSprite']['anchor']['x']=0.5,this['_shadowSprite'][_0x4c7654(0x39b)]['y']=0.5,this[_0x4c7654(0xac2)]['y']=-0x2,this[_0x4c7654(0xac2)][_0x4c7654(0x596)]=![],this[_0x4c7654(0x96c)](this[_0x4c7654(0xac2)]))),DataManager[_0x4c7654(0x3b1)](this[_0x4c7654(0xaf4)]())&&(_0x4c7654(0x491)===_0x4c7654(0xa58)?_0x393d99['prototype']['drawItem'][_0x4c7654(0x145)](this,_0x10bdb5):$gameTemp[_0x4c7654(0x6d4)]=[]);},VisuMZ[_0x3fd7af(0x941)][_0x3fd7af(0x39a)]=Scene_Options['prototype']['maxCommands'],Scene_Options['prototype'][_0x3fd7af(0x10e)]=function(){const _0x4d370f=_0x3fd7af;let _0x1d7a62=VisuMZ['BattleCore'][_0x4d370f(0x39a)]['call'](this);const _0x118e73=VisuMZ[_0x4d370f(0x941)][_0x4d370f(0xa6b)];if(_0x118e73['AutoBattle'][_0x4d370f(0x132)]&&_0x118e73[_0x4d370f(0x79a)]['AdjustRect'])_0x1d7a62+=0x2;if(_0x118e73['HpGauge'][_0x4d370f(0x132)]&&_0x118e73[_0x4d370f(0x7fe)]['AdjustRect'])_0x1d7a62+=0x1;return _0x1d7a62;},VisuMZ[_0x3fd7af(0x941)][_0x3fd7af(0x93d)]=Scene_Battle[_0x3fd7af(0x9fd)][_0x3fd7af(0x709)],Scene_Battle['prototype'][_0x3fd7af(0x709)]=function(){const _0x40626d=_0x3fd7af;VisuMZ[_0x40626d(0x941)][_0x40626d(0x93d)][_0x40626d(0x145)](this),this[_0x40626d(0xa33)]();},VisuMZ[_0x3fd7af(0x941)][_0x3fd7af(0x977)]=Scene_Battle[_0x3fd7af(0x9fd)][_0x3fd7af(0x78f)],Scene_Battle[_0x3fd7af(0x9fd)][_0x3fd7af(0x78f)]=function(){const _0x3dc47b=_0x3fd7af;SceneManager[_0x3dc47b(0x228)]()?_0x3dc47b(0x56d)!==_0x3dc47b(0x56d)?this[_0x3dc47b(0x42a)](_0x3dc47b(0x13d)):(Scene_Message[_0x3dc47b(0x9fd)][_0x3dc47b(0x78f)][_0x3dc47b(0x145)](this),this[_0x3dc47b(0x3b4)]&&('cWyYs'===_0x3dc47b(0x725)?(this[_0x3dc47b(0x3af)]=!this[_0x3dc47b(0x134)](),_0x4bff54['registerDefeatedEnemy'](this[_0x3dc47b(0x8fe)]())):this[_0x3dc47b(0x3b4)][_0x3dc47b(0x2e0)]()),BattleManager[_0x3dc47b(0x7fb)]&&(_0x3dc47b(0x79b)===_0x3dc47b(0x411)?this['drawItemStyleIconText'](_0x2977bd):BattleManager[_0x3dc47b(0x467)]())):VisuMZ['BattleCore'][_0x3dc47b(0x977)][_0x3dc47b(0x145)](this);},VisuMZ[_0x3fd7af(0x941)][_0x3fd7af(0x85f)]=Scene_Battle[_0x3fd7af(0x9fd)][_0x3fd7af(0x1eb)],Scene_Battle[_0x3fd7af(0x9fd)][_0x3fd7af(0x1eb)]=function(){const _0x462589=_0x3fd7af;if(SceneManager['isNextSceneBattleTransitionable']())'oFWkE'==='oFWkE'?Scene_Message[_0x462589(0x9fd)][_0x462589(0x1eb)]['call'](this):_0x48776b=_0x4dcb33['x']+_0x4889d2[_0x462589(0x7fc)]+0x8;else{if(_0x462589(0x9e7)===_0x462589(0x39e))return _0xe83d12['canEscape']();else VisuMZ[_0x462589(0x941)][_0x462589(0x85f)][_0x462589(0x145)](this);}},VisuMZ[_0x3fd7af(0x941)]['Scene_Battle_terminate']=Scene_Battle[_0x3fd7af(0x9fd)][_0x3fd7af(0x75b)],Scene_Battle[_0x3fd7af(0x9fd)]['terminate']=function(){const _0x498971=_0x3fd7af;SceneManager[_0x498971(0x722)]()?_0x498971(0xa8f)!==_0x498971(0x4eb)?Scene_Message['prototype'][_0x498971(0x75b)]['call'](this):this[_0x498971(0x28b)]():VisuMZ[_0x498971(0x941)][_0x498971(0x2db)][_0x498971(0x145)](this),this[_0x498971(0xa33)]();},Scene_Battle[_0x3fd7af(0x9fd)][_0x3fd7af(0x557)]=function(){const _0xf14b61=_0x3fd7af;if(ConfigManager['uiMenuStyle']&&ConfigManager['uiInputPosition']!==undefined)return ConfigManager['uiInputPosition'];else{if(this[_0xf14b61(0xafe)]()===_0xf14b61(0x2bf)){if('xOxCw'===_0xf14b61(0x24b)){if(!_0x545cd5[_0xf14b61(0x970)]())return;if(!_0x218dea[_0xf14b61(0x8b2)])return;_0x5c48c2[_0xf14b61(0x187)](_0x202749,_0x3edd85);const _0x5686a6=_0x57331[_0xf14b61(0x8be)](),_0x1d0e87=_0x57c63e[_0xf14b61(0x903)];if(!_0x5686a6)return;_0x43139f[_0xf14b61(0x57c)](0x0,0x0,_0x1bcef8[_0xf14b61(0x200)],_0x37cc83['EasingType']);if(_0x1d0e87)_0x5686a6[_0xf14b61(0x992)]('battleSkew');}else return![];}else{return Scene_Message['prototype'][_0xf14b61(0x557)]['call'](this);;}}},VisuMZ[_0x3fd7af(0x941)][_0x3fd7af(0x5f0)]=Scene_Battle[_0x3fd7af(0x9fd)][_0x3fd7af(0x827)],Scene_Battle[_0x3fd7af(0x9fd)][_0x3fd7af(0x827)]=function(){const _0x19ab6f=_0x3fd7af;this[_0x19ab6f(0x2e4)](),VisuMZ[_0x19ab6f(0x941)]['Scene_Battle_createAllWindows'][_0x19ab6f(0x145)](this),this[_0x19ab6f(0x66a)]();},VisuMZ['BattleCore'][_0x3fd7af(0x12a)]=Scene_Battle[_0x3fd7af(0x9fd)][_0x3fd7af(0x963)],Scene_Battle['prototype']['createCancelButton']=function(){const _0x1cda2b=_0x3fd7af;VisuMZ[_0x1cda2b(0x941)][_0x1cda2b(0x12a)][_0x1cda2b(0x145)](this),this[_0x1cda2b(0xafe)]()==='border'&&('WXHfl'===_0x1cda2b(0x9da)?this[_0x1cda2b(0x42a)](_0x1cda2b(0xa59)):this['repositionCancelButtonBorderStyle']());},Scene_Battle[_0x3fd7af(0x9fd)][_0x3fd7af(0x29c)]=function(_0x5963bf){const _0x2f58c4=_0x3fd7af;_0x5963bf?(this[_0x2f58c4(0x78a)]['x']=(Graphics['width']-Graphics[_0x2f58c4(0xa4b)])/0x2,this['_windowLayer']['y']=(Graphics['height']-Graphics[_0x2f58c4(0x422)])/0x2):_0x2f58c4(0x877)===_0x2f58c4(0x877)?(this[_0x2f58c4(0x78a)]['x']=Graphics['width']*0xa,this[_0x2f58c4(0x78a)]['y']=Graphics[_0x2f58c4(0x26a)]*0xa):(this['processBattleCoreJS'](_0x2f58c4(0x7b7)),_0x1fe1e1['_spriteset']['processEscape'](),_0x4f9ada[_0x2f58c4(0x941)][_0x2f58c4(0x6c2)]['call'](this),this['processPostBattleCommonEvents']('EscapeSuccess'));},VisuMZ[_0x3fd7af(0x941)][_0x3fd7af(0x638)]=Scene_Battle[_0x3fd7af(0x9fd)][_0x3fd7af(0x7bb)],Scene_Battle[_0x3fd7af(0x9fd)][_0x3fd7af(0x7bb)]=function(){const _0x790e21=_0x3fd7af,_0x35b929=BattleManager[_0x790e21(0xe9)]();VisuMZ[_0x790e21(0x941)][_0x790e21(0x638)][_0x790e21(0x145)](this);if(_0x35b929){if(_0x35b929===BattleManager['actor']())return;if(_0x35b929===BattleManager['_subject'])return;if(_0x35b929[_0x790e21(0x181)]())_0x35b929[_0x790e21(0x181)]()['stepBack']();}},VisuMZ[_0x3fd7af(0x941)]['Scene_Battle_selectPreviousCommand']=Scene_Battle[_0x3fd7af(0x9fd)][_0x3fd7af(0x9a0)],Scene_Battle[_0x3fd7af(0x9fd)][_0x3fd7af(0x9a0)]=function(){const _0x238f9c=_0x3fd7af,_0x3a7a86=BattleManager[_0x238f9c(0xe9)]();if(_0x3a7a86&&_0x3a7a86[_0x238f9c(0x181)])_0x3a7a86['battler']()[_0x238f9c(0x965)]();VisuMZ[_0x238f9c(0x941)]['Scene_Battle_selectPreviousCommand'][_0x238f9c(0x145)](this);},VisuMZ[_0x3fd7af(0x941)][_0x3fd7af(0x8dd)]=Scene_Battle[_0x3fd7af(0x9fd)][_0x3fd7af(0x6a7)],Scene_Battle[_0x3fd7af(0x9fd)][_0x3fd7af(0x6a7)]=function(){const _0x405b2b=_0x3fd7af;if(VisuMZ[_0x405b2b(0x941)][_0x405b2b(0xa6b)][_0x405b2b(0x83a)][_0x405b2b(0x71c)])return VisuMZ[_0x405b2b(0x941)][_0x405b2b(0xa6b)]['BattleLog'][_0x405b2b(0x71c)][_0x405b2b(0x145)](this);return VisuMZ[_0x405b2b(0x941)][_0x405b2b(0x8dd)][_0x405b2b(0x145)](this);},VisuMZ['BattleCore'][_0x3fd7af(0x14f)]=Scene_Battle[_0x3fd7af(0x9fd)][_0x3fd7af(0x47a)],Scene_Battle['prototype'][_0x3fd7af(0x47a)]=function(){const _0x41ed36=_0x3fd7af;VisuMZ[_0x41ed36(0x941)][_0x41ed36(0x14f)][_0x41ed36(0x145)](this),this['createPartyCommandWindowBattleCore']();},Scene_Battle[_0x3fd7af(0x9fd)][_0x3fd7af(0x5b0)]=function(){const _0x46fbff=_0x3fd7af,_0x29383f=this['_partyCommandWindow'];_0x29383f[_0x46fbff(0x2da)]('autoBattle',this[_0x46fbff(0x75a)][_0x46fbff(0x769)](this)),_0x29383f[_0x46fbff(0x2da)](_0x46fbff(0xae2),this[_0x46fbff(0x42b)][_0x46fbff(0x769)](this));const _0x1849b8=this[_0x46fbff(0xafe)]();switch(_0x1849b8){case'xp':case _0x46fbff(0x833):return this[_0x46fbff(0x6f3)][_0x46fbff(0x793)](0x1);break;}},Scene_Battle['prototype'][_0x3fd7af(0x75a)]=function(){const _0xcdb45a=_0x3fd7af;BattleManager[_0xcdb45a(0x435)]=!![],$gameParty[_0xcdb45a(0x2a6)](),this[_0xcdb45a(0x7bb)](),BattleManager['isTpb']()&&(BattleManager[_0xcdb45a(0x533)]=![]);},Scene_Battle[_0x3fd7af(0x9fd)][_0x3fd7af(0x42b)]=function(){const _0x271073=_0x3fd7af;if(this[_0x271073(0x67c)]()){if(_0x271073(0x33c)===_0x271073(0x33c))this[_0x271073(0x29f)]=!![],this[_0x271073(0x4bd)][_0x271073(0x18b)](_0x271073(0x2d6),VisuMZ[_0x271073(0x941)][_0x271073(0xa6b)]['PartyCmd'][_0x271073(0x71d)]);else return this[_0x271073(0x991)][_0x11f0f0];}else this[_0x271073(0xa9e)]();},Scene_Battle['prototype']['isQueueOptionsMenu']=function(){const _0x29928a=_0x3fd7af;return BattleManager[_0x29928a(0x922)]();},Scene_Battle['prototype'][_0x3fd7af(0xa9e)]=function(){const _0xdb648f=_0x3fd7af;this['_callSceneOptions']=![],this[_0xdb648f(0x3b4)][_0xdb648f(0x2e0)](),this[_0xdb648f(0x78a)][_0xdb648f(0x596)]=![];if(BattleManager[_0xdb648f(0xa43)]()){if(_0xdb648f(0xbe)!==_0xdb648f(0xbe))return this[_0xdb648f(0x5d5)]()&&!this[_0xdb648f(0x6f2)]()?this[_0xdb648f(0x9ab)]():_0x4b9343[_0xdb648f(0x941)]['Game_Action_isForOpponent'][_0xdb648f(0x145)](this);else($dataSystem[_0xdb648f(0x2ec)]||$dataSystem['battleback2Name'])&&SceneManager[_0xdb648f(0x390)]();}else($gameMap['battleback1Name']()||$gameMap[_0xdb648f(0x9d3)]())&&(_0xdb648f(0x8c8)!==_0xdb648f(0x8c8)?_0x21289f['command119']([_0xbefd5]):SceneManager[_0xdb648f(0x390)]());SceneManager[_0xdb648f(0x18b)](Scene_Options),BattleManager[_0xdb648f(0x9fa)]()&&(BattleManager[_0xdb648f(0x7fb)]=BattleManager[_0xdb648f(0xe9)]());},VisuMZ['BattleCore'][_0x3fd7af(0x960)]=Scene_Battle['prototype']['updateBattleProcess'],Scene_Battle['prototype']['updateBattleProcess']=function(){const _0x4ba1ab=_0x3fd7af;VisuMZ[_0x4ba1ab(0x941)][_0x4ba1ab(0x960)][_0x4ba1ab(0x145)](this);if(this['_callSceneOptions']&&!BattleManager['_subject'])this[_0x4ba1ab(0xa9e)]();this[_0x4ba1ab(0x6cf)]();},Scene_Battle['prototype'][_0x3fd7af(0x66a)]=function(){const _0x2f12f4=_0x3fd7af,_0x2fb210=this[_0x2f12f4(0xdf)]();this[_0x2f12f4(0xa7e)]=new Window_AutoBattleCancel(_0x2fb210),this[_0x2f12f4(0xa7e)][_0x2f12f4(0x96a)](),this[_0x2f12f4(0x96c)](this[_0x2f12f4(0xa7e)]);},Scene_Battle[_0x3fd7af(0x9fd)][_0x3fd7af(0xdf)]=function(){const _0x49a308=_0x3fd7af;return VisuMZ[_0x49a308(0x941)][_0x49a308(0xa6b)][_0x49a308(0x79a)]['AutoBattleRect'][_0x49a308(0x145)](this);},Scene_Battle[_0x3fd7af(0x9fd)]['clearOnceParallelInterpreters']=function(){const _0x521294=_0x3fd7af;this[_0x521294(0x72c)]=[];},Scene_Battle[_0x3fd7af(0x9fd)][_0x3fd7af(0x6cf)]=function(){const _0x4a935b=_0x3fd7af;if(!this[_0x4a935b(0x72c)])return;for(const _0x46a3e8 of this[_0x4a935b(0x72c)]){if('nmwDb'!==_0x4a935b(0x1e7))_0x46a3e8&&(_0x4a935b(0xf0)==='bvqaO'?_0x46a3e8['update']():_0x58e6d8['battler']()[_0x4a935b(0x9f0)]());else{if(this[_0x4a935b(0x8d4)][_0x4a935b(0xa8d)]!==_0x3317a0)return this['_cache'][_0x4a935b(0xa8d)];let _0x58a4ac=_0x5d06cf['BattleCore'][_0x4a935b(0xa6b)][_0x4a935b(0x81f)]['DefaultSoftCap'];const _0x5c93c3=/<SOFT DAMAGE CAP:[ ]([\+\-]\d+)([%％])>/i,_0x41ba21=this[_0x4a935b(0x492)]()[_0x4a935b(0x826)](_0x15214c=>_0x15214c&&_0x15214c[_0x4a935b(0x7b9)]['match'](_0x5c93c3)?_0x4923af(_0x4361cd['$1'])/0x64:0x0);return _0x58a4ac=_0x41ba21['reduce']((_0xf5b0f5,_0x49b0f3)=>_0xf5b0f5+_0x49b0f3,_0x58a4ac),this['_cache'][_0x4a935b(0xa8d)]=_0x58a4ac,this[_0x4a935b(0x8d4)][_0x4a935b(0xa8d)][_0x4a935b(0x372)](0.01,0x1);}}},Scene_Battle[_0x3fd7af(0x9fd)]['playOnceParallelInterpreter']=function(_0x45d1d1){const _0x4ff74e=_0x3fd7af,_0x205a6a=$dataCommonEvents[_0x45d1d1];if(!_0x205a6a)return;const _0x2fd267=new Game_BattleOnceParallelInterpreter();this[_0x4ff74e(0x9db)](_0x2fd267),_0x2fd267[_0x4ff74e(0x382)](_0x45d1d1);},Scene_Battle[_0x3fd7af(0x9fd)][_0x3fd7af(0x9db)]=function(_0x4d24e4){const _0x1c44ab=_0x3fd7af;this['_onceParallelInterpreters']=this[_0x1c44ab(0x72c)]||[],this[_0x1c44ab(0x72c)][_0x1c44ab(0x18b)](_0x4d24e4);},Scene_Battle['prototype'][_0x3fd7af(0x260)]=function(_0x126695){const _0x577544=_0x3fd7af;this[_0x577544(0x72c)]=this[_0x577544(0x72c)]||[],this[_0x577544(0x72c)]['remove'](_0x126695);};function Game_BattleOnceParallelInterpreter(){this['initialize'](...arguments);}Game_BattleOnceParallelInterpreter[_0x3fd7af(0x9fd)]=Object[_0x3fd7af(0x56f)](Game_Interpreter[_0x3fd7af(0x9fd)]),Game_BattleOnceParallelInterpreter[_0x3fd7af(0x9fd)][_0x3fd7af(0x26b)]=Game_BattleOnceParallelInterpreter,Game_BattleOnceParallelInterpreter['prototype'][_0x3fd7af(0x382)]=function(_0x1769f0){const _0x2cf569=_0x3fd7af,_0x443d96=$dataCommonEvents[_0x1769f0];_0x443d96?this[_0x2cf569(0xbb)](_0x443d96[_0x2cf569(0xfb)],0x0):this[_0x2cf569(0x75b)]();},Game_BattleOnceParallelInterpreter['prototype'][_0x3fd7af(0x75b)]=function(){const _0x180f12=_0x3fd7af;if(!SceneManager[_0x180f12(0x970)]())return;SceneManager[_0x180f12(0x450)][_0x180f12(0x260)](this),Game_Interpreter['prototype'][_0x180f12(0x75b)][_0x180f12(0x145)](this);},Scene_Battle[_0x3fd7af(0x9fd)][_0x3fd7af(0x3bd)]=function(){const _0x507bb2=_0x3fd7af;return VisuMZ[_0x507bb2(0x941)][_0x507bb2(0xa6b)]['PartyCmd'][_0x507bb2(0x9aa)];},VisuMZ[_0x3fd7af(0x941)][_0x3fd7af(0x8ae)]=Scene_Battle['prototype'][_0x3fd7af(0x818)],Scene_Battle[_0x3fd7af(0x9fd)][_0x3fd7af(0x818)]=function(){const _0x2a77cc=_0x3fd7af;this[_0x2a77cc(0x3bd)]()?this['onDisabledPartyCommandSelection']():'GBHrl'===_0x2a77cc(0x1f8)?(_0x3ffb7a[_0x2a77cc(0x9fd)]['resetFontSettings'][_0x2a77cc(0x145)](this),this[_0x2a77cc(0x421)][_0x2a77cc(0x854)]=_0x317024[_0x2a77cc(0x941)][_0x2a77cc(0xa6b)]['Enemy'][_0x2a77cc(0x5d9)]):VisuMZ[_0x2a77cc(0x941)]['Scene_Battle_startPartyCommandSelection']['call'](this);},Scene_Battle[_0x3fd7af(0x9fd)][_0x3fd7af(0x495)]=function(){const _0x276b44=_0x3fd7af;if(BattleManager[_0x276b44(0x23b)]())this[_0x276b44(0x7bb)]();else BattleManager[_0x276b44(0x9fa)]()&&('DRhFt'!==_0x276b44(0x407)?VisuMZ['BattleCore'][_0x276b44(0x8ae)]['call'](this):_0x4aa556[_0x276b44(0x2f9)]&&_0x205e36[_0x276b44(0x2f9)]());},VisuMZ[_0x3fd7af(0x941)][_0x3fd7af(0xad)]=Scene_Battle[_0x3fd7af(0x9fd)][_0x3fd7af(0x304)],Scene_Battle[_0x3fd7af(0x9fd)][_0x3fd7af(0x304)]=function(){const _0x4cb14a=_0x3fd7af;BattleManager[_0x4cb14a(0x9fa)]()?(this[_0x4cb14a(0x6c3)](),this[_0x4cb14a(0x62d)]()):'ROYZi'===_0x4cb14a(0x56a)?this[_0x4cb14a(0x18b)]('showAnimation',_0x541fa9,[_0x198e70[_0x4cb14a(0x470)]],-0x1):VisuMZ[_0x4cb14a(0x941)][_0x4cb14a(0xad)][_0x4cb14a(0x145)](this);},Scene_Battle[_0x3fd7af(0x9fd)]['tpbCommandFight']=function(){const _0x558caf=_0x3fd7af;if(!VisuMZ[_0x558caf(0x941)][_0x558caf(0x293)])return;if(Imported['VisuMZ_2_BattleSystemCTB']&&BattleManager[_0x558caf(0x3a6)]())return;const _0x560eec=$gameParty['aliveMembers']()['filter'](_0x15f529=>_0x15f529['isTpbCharged']()&&_0x15f529[_0x558caf(0x87d)]());BattleManager[_0x558caf(0xa6a)]=_0x560eec[0x0]||null,BattleManager[_0x558caf(0xa6a)]&&(_0x558caf(0x4e8)!==_0x558caf(0x4e8)?(this[_0x558caf(0x15e)](),_0x1d55ae[_0x558caf(0x941)][_0x558caf(0x9b1)][_0x558caf(0x145)](this)):BattleManager[_0x558caf(0xa6a)]['setActionState']('inputting'));},VisuMZ[_0x3fd7af(0x941)][_0x3fd7af(0x952)]=Scene_Battle['prototype'][_0x3fd7af(0x797)],Scene_Battle['prototype']['createActorCommandWindow']=function(){const _0xffa6fc=_0x3fd7af;VisuMZ['BattleCore'][_0xffa6fc(0x952)][_0xffa6fc(0x145)](this),this['createActorCommandWindowBattleCore']();},Scene_Battle[_0x3fd7af(0x9fd)][_0x3fd7af(0x1a3)]=function(){const _0x46ddf8=_0x3fd7af,_0x12c245=this[_0x46ddf8(0x44e)];_0x12c245['setHandler']('escape',this[_0x46ddf8(0x7a9)][_0x46ddf8(0x769)](this)),_0x12c245[_0x46ddf8(0x2da)](_0x46ddf8(0x428),this[_0x46ddf8(0x786)][_0x46ddf8(0x769)](this)),_0x12c245[_0x46ddf8(0x2da)](_0x46ddf8(0xd3),this['actorCommandSingleSkill'][_0x46ddf8(0x769)](this)),BattleManager['isTpb']()&&(this[_0x46ddf8(0x3bd)]()?delete _0x12c245['_handlers'][_0x46ddf8(0xac4)]:_0x12c245[_0x46ddf8(0x2da)](_0x46ddf8(0xac4),this[_0x46ddf8(0x613)]['bind'](this)));},Scene_Battle[_0x3fd7af(0x9fd)][_0x3fd7af(0x7a9)]=function(){const _0xb80462=_0x3fd7af;this[_0xb80462(0x269)]();},Scene_Battle['prototype'][_0x3fd7af(0x786)]=function(){const _0x5eb94d=_0x3fd7af;BattleManager[_0x5eb94d(0xe9)]()['makeAutoBattleActions'](),BattleManager[_0x5eb94d(0x85d)](),BattleManager[_0x5eb94d(0x5f1)](),this[_0x5eb94d(0x365)]();},Scene_Battle[_0x3fd7af(0x9fd)]['actorCommandSingleSkill']=function(){const _0x541b39=_0x3fd7af,_0x50d912=BattleManager[_0x541b39(0x681)]();_0x50d912['setSkill'](this[_0x541b39(0x44e)][_0x541b39(0x976)]()),this[_0x541b39(0x36c)]();},Scene_Battle['prototype'][_0x3fd7af(0x613)]=function(){const _0x396afe=_0x3fd7af;this[_0x396afe(0x3f6)]()?this[_0x396afe(0x871)]():this['processActorCommandCancelTPB']();},VisuMZ['BattleCore'][_0x3fd7af(0x293)]=![],Scene_Battle[_0x3fd7af(0x9fd)][_0x3fd7af(0x3f6)]=function(){const _0x3fd532=_0x3fd7af;if(Imported[_0x3fd532(0x879)]&&BattleManager[_0x3fd532(0x3a6)]())return![];else{if(!VisuMZ[_0x3fd532(0x941)][_0x3fd532(0x293)])return![];const _0x3fad57=$gameParty[_0x3fd532(0x813)]()[_0x3fd532(0xa8)](_0x3c6d37=>_0x3c6d37[_0x3fd532(0x5a8)]()&&_0x3c6d37[_0x3fd532(0x87d)]());return _0x3fad57[_0x3fd532(0x732)]>0x0&&BattleManager[_0x3fd532(0xe9)]()!==_0x3fad57[_0x3fad57['length']-0x1];}},Scene_Battle['prototype'][_0x3fd7af(0x871)]=function(){const _0x410dd8=_0x3fd7af,_0x5415d3=BattleManager['actor'](),_0x169bfd=_0x5415d3['battler']();if(_0x169bfd)_0x169bfd[_0x410dd8(0x965)]();const _0x94eb07=$gameParty['aliveMembers']()[_0x410dd8(0xa8)](_0x83b1ca=>_0x83b1ca[_0x410dd8(0x5a8)]()&&_0x83b1ca['canInput']()),_0xfea544=_0x94eb07[_0x410dd8(0x760)](_0x5415d3),_0x5d1d1f=_0x94eb07[_0xfea544+0x1];BattleManager[_0x410dd8(0xa6a)]=_0x5d1d1f||null;if(_0x5d1d1f)_0x5d1d1f[_0x410dd8(0x169)]('inputting');_0x5415d3['setActionState'](_0x410dd8(0x901)),this[_0x410dd8(0x365)]();},Scene_Battle['prototype'][_0x3fd7af(0x8e6)]=function(){const _0xb907ae=_0x3fd7af;this[_0xb907ae(0x6f3)][_0xb907ae(0xbb)](),this[_0xb907ae(0x44e)][_0xb907ae(0x63d)]();if(!VisuMZ['BattleCore'][_0xb907ae(0x293)])return;if(Imported[_0xb907ae(0x879)]&&BattleManager[_0xb907ae(0x3a6)]())return;if(BattleManager['_currentActor']){BattleManager[_0xb907ae(0xa6a)][_0xb907ae(0x169)](_0xb907ae(0x901));const _0x4d8669=BattleManager[_0xb907ae(0xa6a)]['battler']();if(_0x4d8669)_0x4d8669[_0xb907ae(0x965)]();}BattleManager[_0xb907ae(0xa6a)]=null;},VisuMZ['BattleCore'][_0x3fd7af(0x694)]=Scene_Battle['prototype'][_0x3fd7af(0x3c4)],Scene_Battle['prototype'][_0x3fd7af(0x3c4)]=function(){const _0x42a590=_0x3fd7af;VisuMZ[_0x42a590(0x941)]['Scene_Battle_createHelpWindow'][_0x42a590(0x145)](this),this[_0x42a590(0x669)]();},Scene_Battle[_0x3fd7af(0x9fd)][_0x3fd7af(0x669)]=function(){const _0x1ab7d6=_0x3fd7af;this[_0x1ab7d6(0x44e)][_0x1ab7d6(0x129)](this[_0x1ab7d6(0xa76)]),this['_partyCommandWindow'][_0x1ab7d6(0x129)](this[_0x1ab7d6(0xa76)]);},Scene_Battle[_0x3fd7af(0x9fd)]['battleLayoutStyle']=function(){const _0x1f23d6=_0x3fd7af;if($gameTemp[_0x1f23d6(0x1e2)]!==undefined)return $gameTemp[_0x1f23d6(0x1e2)];if(this['_battleLayoutStyle']){if(_0x1f23d6(0x998)===_0x1f23d6(0x998))return this[_0x1f23d6(0x4ec)];else{if(!_0x234ad7[_0x1f23d6(0x970)]())return;if(!_0x126266[_0x1f23d6(0x618)])return;_0xa6dcaa[_0x1f23d6(0x187)](_0xf5141d,_0x55b45f);const _0x404fa5=_0x10620f[_0x1f23d6(0x2dd)],_0x3d7166=_0x458c9b[_0x1f23d6(0x92b)];if(!_0x404fa5)return;_0x404fa5[_0x1f23d6(0x9ed)]=_0x3d7166;}}return this['_battleLayoutStyle']=VisuMZ['BattleCore'][_0x1f23d6(0xa6b)][_0x1f23d6(0x501)][_0x1f23d6(0x948)][_0x1f23d6(0x81b)]()[_0x1f23d6(0x306)](),this[_0x1f23d6(0x4ec)]===_0x1f23d6(0x556)&&!Imported[_0x1f23d6(0x507)]&&(this[_0x1f23d6(0x4ec)]=_0x1f23d6(0x986)),this[_0x1f23d6(0x4ec)];},VisuMZ[_0x3fd7af(0x941)]['Scene_Battle_windowAreaHeight']=Scene_Battle[_0x3fd7af(0x9fd)]['windowAreaHeight'],Scene_Battle[_0x3fd7af(0x9fd)][_0x3fd7af(0x193)]=function(){const _0x5c66a8=_0x3fd7af,_0x596a47=this['battleLayoutStyle']();switch(_0x596a47){case _0x5c66a8(0xfb):return this[_0x5c66a8(0x8ee)](Math[_0x5c66a8(0x305)](0x1,$gameParty['maxBattleMembers']()),!![]);break;default:return VisuMZ[_0x5c66a8(0x941)][_0x5c66a8(0x91f)][_0x5c66a8(0x145)](this);break;}},VisuMZ[_0x3fd7af(0x941)]['Scene_Battle_helpWindowRect']=Scene_Battle[_0x3fd7af(0x9fd)][_0x3fd7af(0x463)],Scene_Battle[_0x3fd7af(0x9fd)]['helpWindowRect']=function(){const _0x421e75=_0x3fd7af,_0x34e3ee=this[_0x421e75(0xafe)]();switch(_0x34e3ee){case _0x421e75(0x2bf):return this['helpWindowRectBorderStyle']();break;case _0x421e75(0x986):case _0x421e75(0xfb):case'xp':case _0x421e75(0x833):default:return VisuMZ[_0x421e75(0x941)][_0x421e75(0x55c)][_0x421e75(0x145)](this);break;}},Scene_Battle['prototype'][_0x3fd7af(0x457)]=function(){const _0x10eef9=_0x3fd7af,_0x2aa74a=this['battleLayoutStyle']();switch(_0x2aa74a){case'xp':case'portrait':return this[_0x10eef9(0x72a)]();break;case _0x10eef9(0x2bf):return this['statusWindowRectBorderStyle']();break;case'default':case _0x10eef9(0xfb):default:return this[_0x10eef9(0xa34)]();break;}},VisuMZ['BattleCore']['Scene_Battle_partyCommandWindowRect']=Scene_Battle[_0x3fd7af(0x9fd)]['partyCommandWindowRect'],Scene_Battle[_0x3fd7af(0x9fd)][_0x3fd7af(0x488)]=function(){const _0x150670=_0x3fd7af,_0xeb6b63=this['battleLayoutStyle']();switch(_0xeb6b63){case'xp':case _0x150670(0x833):return this[_0x150670(0x2ed)]();break;case'border':return this[_0x150670(0xa9b)]();case'default':case'list':default:return this['partyCommandWindowRectDefaultStyle']();break;}},Scene_Battle[_0x3fd7af(0x9fd)][_0x3fd7af(0x908)]=function(){const _0x25c45f=_0x3fd7af,_0x4f52c9=VisuMZ[_0x25c45f(0x941)][_0x25c45f(0xa6b)]['BattleLayout'],_0x485607=_0x4f52c9['CommandWidth']||0xc0,_0x455afa=this[_0x25c45f(0x193)](),_0x1bb1dd=this[_0x25c45f(0x557)]()?Graphics[_0x25c45f(0xa4b)]-_0x485607:0x0,_0x5286ed=Graphics['boxHeight']-_0x455afa;return new Rectangle(_0x1bb1dd,_0x5286ed,_0x485607,_0x455afa);},Scene_Battle[_0x3fd7af(0x9fd)][_0x3fd7af(0x856)]=function(){const _0x3adf56=_0x3fd7af;return this[_0x3adf56(0x488)]();},VisuMZ['BattleCore'][_0x3fd7af(0x345)]=Scene_Battle[_0x3fd7af(0x9fd)][_0x3fd7af(0x42e)],Scene_Battle[_0x3fd7af(0x9fd)]['updateStatusWindowPosition']=function(){const _0x4783cb=_0x3fd7af,_0x5da964=this[_0x4783cb(0xafe)]();switch(_0x5da964){case'xp':case _0x4783cb(0x833):case'border':break;case _0x4783cb(0x986):case _0x4783cb(0xfb):default:VisuMZ['BattleCore'][_0x4783cb(0x345)]['call'](this);break;}},VisuMZ[_0x3fd7af(0x941)][_0x3fd7af(0x31d)]=Scene_Battle[_0x3fd7af(0x9fd)][_0x3fd7af(0x73f)],Scene_Battle[_0x3fd7af(0x9fd)][_0x3fd7af(0x73f)]=function(){const _0x167879=_0x3fd7af;VisuMZ[_0x167879(0x941)][_0x167879(0x31d)][_0x167879(0x145)](this),this['makeTargetSelectionMoreVisible']();},VisuMZ[_0x3fd7af(0x941)][_0x3fd7af(0x1f9)]=Scene_Battle[_0x3fd7af(0x9fd)][_0x3fd7af(0x3aa)],Scene_Battle['prototype']['startEnemySelection']=function(){const _0x2e699c=_0x3fd7af;VisuMZ[_0x2e699c(0x941)][_0x2e699c(0x1f9)][_0x2e699c(0x145)](this),this[_0x2e699c(0x873)][_0x2e699c(0x535)](),this[_0x2e699c(0x7f5)]();},Scene_Battle[_0x3fd7af(0x9fd)]['makeTargetSelectionMoreVisible']=function(){const _0x58dc30=_0x3fd7af,_0x1fd9de=this['battleLayoutStyle']();['xp',_0x58dc30(0x833),_0x58dc30(0x2bf)][_0x58dc30(0x402)](_0x1fd9de)&&(_0x58dc30(0x761)!==_0x58dc30(0x761)?(this[_0x58dc30(0x176)]=null,_0x49443b[_0x58dc30(0x941)][_0x58dc30(0x3d8)][_0x58dc30(0x145)](this,_0x3944b1)):this[_0x58dc30(0x44e)][_0x58dc30(0x63d)]()),(_0x1fd9de==='border'||this[_0x58dc30(0x7be)]())&&(_0x58dc30(0x273)!==_0x58dc30(0x273)?_0x5810de[_0x58dc30(0x97f)]([this],_0x46006d):(this[_0x58dc30(0x763)]['close'](),this[_0x58dc30(0x776)][_0x58dc30(0x63d)]()));},VisuMZ[_0x3fd7af(0x941)][_0x3fd7af(0xa53)]=Scene_Battle['prototype'][_0x3fd7af(0x5e5)],Scene_Battle[_0x3fd7af(0x9fd)][_0x3fd7af(0x5e5)]=function(){const _0xff88e1=_0x3fd7af;VisuMZ['BattleCore'][_0xff88e1(0xa53)][_0xff88e1(0x145)](this),this[_0xff88e1(0xa6)]();},Scene_Battle[_0x3fd7af(0x9fd)][_0x3fd7af(0x188)]=function(){const _0x464d4a=_0x3fd7af;return[_0x464d4a(0x910),_0x464d4a(0x2ff),'singleSkill']['includes'](this[_0x464d4a(0x44e)][_0x464d4a(0x109)]());},VisuMZ[_0x3fd7af(0x941)]['Scene_Battle_onActorCancel']=Scene_Battle[_0x3fd7af(0x9fd)]['onActorCancel'],Scene_Battle['prototype'][_0x3fd7af(0x95b)]=function(){const _0x5eb6a4=_0x3fd7af;this[_0x5eb6a4(0x188)]()?(this[_0x5eb6a4(0x6bb)][_0x5eb6a4(0x35d)](),this[_0x5eb6a4(0xad6)][_0x5eb6a4(0x96a)](),this[_0x5eb6a4(0x44e)]['activate']()):_0x5eb6a4(0x103)==='pCouZ'?_0x4e91ff[_0x5eb6a4(0x476)]([this],_0x3cd90d):VisuMZ[_0x5eb6a4(0x941)]['Scene_Battle_onActorCancel'][_0x5eb6a4(0x145)](this),this[_0x5eb6a4(0x6d5)]();},VisuMZ[_0x3fd7af(0x941)][_0x3fd7af(0x59b)]=Scene_Battle[_0x3fd7af(0x9fd)][_0x3fd7af(0x9be)],Scene_Battle[_0x3fd7af(0x9fd)][_0x3fd7af(0x9be)]=function(){const _0x305fe0=_0x3fd7af;VisuMZ[_0x305fe0(0x941)][_0x305fe0(0x59b)][_0x305fe0(0x145)](this),this['okTargetSelectionVisibility']();},VisuMZ[_0x3fd7af(0x941)][_0x3fd7af(0x9a1)]=Scene_Battle[_0x3fd7af(0x9fd)]['onEnemyCancel'],Scene_Battle[_0x3fd7af(0x9fd)]['onEnemyCancel']=function(){const _0x26774c=_0x3fd7af;this[_0x26774c(0x188)]()?(this[_0x26774c(0x6bb)][_0x26774c(0x35d)](),this[_0x26774c(0x873)][_0x26774c(0x96a)](),this[_0x26774c(0x44e)]['activate']()):VisuMZ['BattleCore'][_0x26774c(0x9a1)]['call'](this),this[_0x26774c(0x6d5)]();},Scene_Battle[_0x3fd7af(0x9fd)][_0x3fd7af(0xa6)]=function(){const _0xacb199=_0x3fd7af,_0x438949=this[_0xacb199(0xafe)]();if(_0x438949===_0xacb199(0x2bf)||this[_0xacb199(0x7be)]()){this[_0xacb199(0x763)][_0xacb199(0x6c7)]();if(this[_0xacb199(0x763)][_0xacb199(0x246)]){if('ljPRi'!==_0xacb199(0x577))this[_0xacb199(0x763)][_0xacb199(0x35d)]();else return _0xaf3916[_0xacb199(0x181)]()[_0xacb199(0x69d)]-_0x248bcf[_0xacb199(0x181)]()['_baseY'];}this[_0xacb199(0x776)]['open'](),this[_0xacb199(0x776)]['active']&&this[_0xacb199(0x776)][_0xacb199(0x35d)]();}},Scene_Battle['prototype'][_0x3fd7af(0x6d5)]=function(){const _0x21f48b=_0x3fd7af,_0xd345c6=this[_0x21f48b(0xafe)]();['xp','portrait',_0x21f48b(0x2bf)][_0x21f48b(0x402)](_0xd345c6)&&(_0x21f48b(0x2cb)==='WZmHQ'?this[_0x21f48b(0x44e)][_0x21f48b(0x6c7)]():_0x582fd8[_0x21f48b(0x450)][_0x21f48b(0x6bb)][_0x21f48b(0x88e)](_0x2df865)),this[_0x21f48b(0xa6)]();},Scene_Battle[_0x3fd7af(0x9fd)][_0x3fd7af(0xa34)]=function(){const _0x197b93=_0x3fd7af,_0x34df5c=VisuMZ[_0x197b93(0x941)]['Settings'][_0x197b93(0x501)],_0x2d540f=Window_BattleStatus[_0x197b93(0x9fd)][_0x197b93(0x3dc)](),_0x11ba9d=Graphics['boxWidth']-(_0x34df5c[_0x197b93(0x5a2)]||0xc0),_0x18f57b=this[_0x197b93(0x193)]()+_0x2d540f,_0x518b48=this[_0x197b93(0x557)]()?0x0:Graphics[_0x197b93(0xa4b)]-_0x11ba9d,_0xbebf18=Graphics[_0x197b93(0x422)]-_0x18f57b+_0x2d540f;return new Rectangle(_0x518b48,_0xbebf18,_0x11ba9d,_0x18f57b);},Scene_Battle[_0x3fd7af(0x9fd)]['statusWindowRectXPStyle']=function(){const _0x16a499=_0x3fd7af,_0x2aeddd=Window_BattleStatus[_0x16a499(0x9fd)][_0x16a499(0x3dc)](),_0x380f14=Graphics[_0x16a499(0xa4b)],_0x4a978e=this[_0x16a499(0x193)]()+_0x2aeddd,_0x80f6cd=0x0,_0x41b57d=Graphics['boxHeight']-_0x4a978e+_0x2aeddd;return new Rectangle(_0x80f6cd,_0x41b57d,_0x380f14,_0x4a978e);},Scene_Battle[_0x3fd7af(0x9fd)][_0x3fd7af(0x2ed)]=function(){const _0x16b523=_0x3fd7af,_0x415dcd=Graphics[_0x16b523(0xa4b)]/0x2,_0x11b5de=this['calcWindowHeight'](VisuMZ['BattleCore']['Settings'][_0x16b523(0x501)]['XPActorCommandLines'],!![]),_0x118fbf=Math[_0x16b523(0x819)]((Graphics[_0x16b523(0xa4b)]-_0x415dcd)/0x2),_0x42c6ba=Graphics['boxHeight']-_0x11b5de-this[_0x16b523(0x72a)]()[_0x16b523(0x26a)];return new Rectangle(_0x118fbf,_0x42c6ba,_0x415dcd,_0x11b5de);},Scene_Battle[_0x3fd7af(0x9fd)][_0x3fd7af(0x45c)]=function(){const _0x202aa1=_0x3fd7af,_0x1a0b4f=Graphics[_0x202aa1(0xad0)],_0x456979=Math['round']((Graphics[_0x202aa1(0xa4b)]-_0x1a0b4f)/0x2),_0x214c76=this[_0x202aa1(0x6fc)](),_0x521e92=(Graphics['height']-Graphics[_0x202aa1(0x422)])/-0x2;return new Rectangle(_0x456979,_0x521e92,_0x1a0b4f,_0x214c76);},Scene_Battle[_0x3fd7af(0x9fd)]['statusWindowRectBorderStyle']=function(){const _0x80c31b=_0x3fd7af,_0x563ca8=Graphics[_0x80c31b(0xad0)],_0x4dc3a8=Math[_0x80c31b(0x819)]((Graphics[_0x80c31b(0xa4b)]-_0x563ca8)/0x2),_0x404186=this['calcWindowHeight'](0x4,!![]),_0x5bf850=Graphics[_0x80c31b(0x422)]-_0x404186+(Graphics[_0x80c31b(0x26a)]-Graphics[_0x80c31b(0x422)])/0x2;return new Rectangle(_0x4dc3a8,_0x5bf850,_0x563ca8,_0x404186);},Scene_Battle[_0x3fd7af(0x9fd)]['partyCommandWindowRectBorderStyle']=function(){const _0x2914c2=_0x3fd7af,_0x1ec401=Math[_0x2914c2(0x63b)](Graphics[_0x2914c2(0xad0)]/0x3),_0x4b456a=this[_0x2914c2(0x557)]()?(Graphics[_0x2914c2(0xad0)]+Graphics[_0x2914c2(0xa4b)])/0x2-_0x1ec401:(Graphics[_0x2914c2(0xad0)]-Graphics[_0x2914c2(0xa4b)])/-0x2,_0x1d26a0=this[_0x2914c2(0x45c)](),_0x12b14e=_0x1d26a0['y']+_0x1d26a0[_0x2914c2(0x26a)],_0x5924ac=this[_0x2914c2(0x841)](),_0x142d02=_0x5924ac['y']-_0x12b14e;return new Rectangle(_0x4b456a,_0x12b14e,_0x1ec401,_0x142d02);},Scene_Battle[_0x3fd7af(0x9fd)]['skillItemWindowRectBorderStyle']=function(){const _0x23da08=_0x3fd7af,_0x2f6907=Math[_0x23da08(0x821)](Graphics[_0x23da08(0xad0)]/0x3),_0x2d736f=Math[_0x23da08(0x819)]((Graphics['boxWidth']-_0x2f6907)/0x2),_0x9b25e5=this[_0x23da08(0xa9b)](),_0x16344a=_0x9b25e5['y'],_0x5f0901=_0x9b25e5[_0x23da08(0x26a)];return new Rectangle(_0x2d736f,_0x16344a,_0x2f6907,_0x5f0901);},Scene_Battle['prototype'][_0x3fd7af(0x49e)]=function(){const _0x559a48=_0x3fd7af;this[_0x559a48(0x12b)]['y']=this[_0x559a48(0xa76)]['y']+this[_0x559a48(0xa76)][_0x559a48(0x26a)],this[_0x559a48(0x557)]()?this['battleLayoutStyle']()===_0x559a48(0x2bf)?this['_cancelButton']['x']=0x8:this[_0x559a48(0x12b)]['x']=-this[_0x559a48(0x12b)][_0x559a48(0xad0)]-0x4:this[_0x559a48(0x12b)]['x']=Graphics[_0x559a48(0xad0)]-(Graphics[_0x559a48(0xad0)]-Graphics[_0x559a48(0xa4b)])/0x2-this[_0x559a48(0x12b)][_0x559a48(0xad0)]-0x4;},VisuMZ[_0x3fd7af(0x941)]['Scene_Battle_skillWindowRect']=Scene_Battle[_0x3fd7af(0x9fd)]['skillWindowRect'],Scene_Battle[_0x3fd7af(0x9fd)][_0x3fd7af(0x4b2)]=function(){const _0x2390a7=_0x3fd7af;if(this[_0x2390a7(0xafe)]()===_0x2390a7(0x2bf))return this[_0x2390a7(0x20c)]();else{if(this['isSkillItemWindowsMiddle']()){if(_0x2390a7(0x140)!==_0x2390a7(0x140)){if(!this['canMove']())return;if(!this['_distortionSprite'])return;if(this[_0x2390a7(0xac9)]===_0x62f771&&this[_0x2390a7(0x30a)]===_0x3f8c06)return;this['_targetSkewX']=_0x10b7d9,this[_0x2390a7(0x30a)]=_0x22967b,this[_0x2390a7(0x7bc)]=_0x32f368,this['_skewWholeDuration']=_0x35d5d4,this[_0x2390a7(0x609)]=_0x5c9a5a||_0x2390a7(0xa2d),_0x27c337<=0x0&&(this['_distortionSprite'][_0x2390a7(0x249)]['x']=this['_targetSkewX'],this['_distortionSprite'][_0x2390a7(0x249)]['y']=this[_0x2390a7(0x30a)]);}else return this[_0x2390a7(0x7a5)]();}else{if('kAkam'!==_0x2390a7(0x312))return VisuMZ[_0x2390a7(0x941)][_0x2390a7(0xa5d)][_0x2390a7(0x145)](this);else this[_0x2390a7(0x5ee)]=new _0x265d53(),this[_0x2390a7(0x96c)](this[_0x2390a7(0x5ee)]);}}},VisuMZ[_0x3fd7af(0x941)][_0x3fd7af(0x405)]=Scene_Battle[_0x3fd7af(0x9fd)][_0x3fd7af(0x36f)],Scene_Battle[_0x3fd7af(0x9fd)][_0x3fd7af(0x36f)]=function(){const _0x540137=_0x3fd7af;if(this[_0x540137(0xafe)]()==='border')return this[_0x540137(0x20c)]();else return this[_0x540137(0x7be)]()?this[_0x540137(0x7a5)]():VisuMZ[_0x540137(0x941)]['Scene_Battle_itemWindowRect'][_0x540137(0x145)](this);},Scene_Battle[_0x3fd7af(0x9fd)]['isSkillItemWindowsMiddle']=function(){const _0xcf37b9=_0x3fd7af;return VisuMZ[_0xcf37b9(0x941)]['Settings']['BattleLayout'][_0xcf37b9(0x42c)];},Scene_Battle['prototype'][_0x3fd7af(0x7a5)]=function(){const _0x4117e3=_0x3fd7af,_0xd3f0f9=Sprite_Button[_0x4117e3(0x9fd)]['blockWidth']()*0x2+0x4;let _0x3eed47=Graphics['boxWidth']-_0xd3f0f9;Imported[_0x4117e3(0x28a)]&&SceneManager[_0x4117e3(0x7f2)]()&&(_0x3eed47+=_0xd3f0f9);const _0x349cc7=this[_0x4117e3(0x83b)](),_0x16d643=Graphics[_0x4117e3(0x422)]-_0x349cc7-this[_0x4117e3(0x457)]()[_0x4117e3(0x26a)]+Window_BattleStatus[_0x4117e3(0x9fd)][_0x4117e3(0x3dc)](),_0x4360d6=0x0;return new Rectangle(_0x4360d6,_0x349cc7,_0x3eed47,_0x16d643);},Scene_Battle['prototype'][_0x3fd7af(0x2e4)]=function(){const _0x172865=_0x3fd7af;if(!VisuMZ[_0x172865(0x941)][_0x172865(0xa6b)][_0x172865(0x520)][_0x172865(0x371)])return;this[_0x172865(0x2ab)]=new Sprite(),this[_0x172865(0x2ab)]['x']=this['_windowLayer']['x'],this[_0x172865(0x2ab)]['y']=this['_windowLayer']['y'];const _0x556ae5=this[_0x172865(0x1bc)][_0x172865(0x760)](this[_0x172865(0x78a)]);this[_0x172865(0x11a)](this['_enemyNameContainer'],_0x556ae5);for(let _0x2d3461=0x0;_0x2d3461<0x8;_0x2d3461++){const _0xdad26d=new Window_EnemyName(_0x2d3461);this['_enemyNameContainer']['addChild'](_0xdad26d);}},Sprite_Battler[_0x3fd7af(0x41d)]=VisuMZ['BattleCore']['Settings'][_0x3fd7af(0x9de)][_0x3fd7af(0x3ed)],VisuMZ[_0x3fd7af(0x941)][_0x3fd7af(0xae9)]=Sprite_Battler['prototype']['initMembers'],Sprite_Battler[_0x3fd7af(0x9fd)]['initMembers']=function(){const _0x15c87e=_0x3fd7af;VisuMZ[_0x15c87e(0x941)][_0x15c87e(0xae9)][_0x15c87e(0x145)](this),this[_0x15c87e(0x768)]();if(this['constructor']===Sprite_Enemy)this['createShadowSprite']();this[_0x15c87e(0x571)]();},Sprite_Battler[_0x3fd7af(0x9fd)][_0x3fd7af(0x768)]=function(){const _0x24b495=_0x3fd7af;this[_0x24b495(0x62e)]=0x0,this[_0x24b495(0x69d)]=0x0,this[_0x24b495(0x52a)]=0x0,this[_0x24b495(0x6eb)]=0x0,this[_0x24b495(0xa41)]=0x0,this[_0x24b495(0x814)]=0x0,this[_0x24b495(0x1d1)]=_0x24b495(0xa2d),this[_0x24b495(0x299)]=0x0,this[_0x24b495(0xa96)]=0x0,this['_jumpDuration']=0x0,this['_jumpWholeDuration']=0x0,this[_0x24b495(0x5b5)]=0xff,this[_0x24b495(0xa90)]=0x0,this[_0x24b495(0x8a2)]=0x0,this[_0x24b495(0x3b7)]=_0x24b495(0xa2d),this[_0x24b495(0x69f)]=0x0,this[_0x24b495(0x933)]=0x0,this[_0x24b495(0xa68)]=0x0,this[_0x24b495(0x699)]=0x0,this[_0x24b495(0x522)]=_0x24b495(0xa2d),this['_angleRevertOnFinish']=!![],this[_0x24b495(0x62a)]=0x0,this[_0x24b495(0x541)]=0x0,this[_0x24b495(0xac9)]=0x0,this[_0x24b495(0x30a)]=0x0,this['_skewDuration']=0x0,this['_skewWholeDuration']=0x0,this[_0x24b495(0x609)]=_0x24b495(0xa2d),this['_growX']=0x1,this[_0x24b495(0x36e)]=0x1,this[_0x24b495(0x85a)]=0x1,this['_targetGrowY']=0x1,this[_0x24b495(0x6a0)]=0x0,this[_0x24b495(0x8d7)]=0x0,this['_growEasing']='Linear',this['_flipScaleX']=0x1;},Sprite_Battler['prototype'][_0x3fd7af(0x41b)]=function(){const _0xb0895a=_0x3fd7af;this[_0xb0895a(0xac2)]=new Sprite(),this[_0xb0895a(0xac2)][_0xb0895a(0x2cf)]=ImageManager[_0xb0895a(0x802)]('Shadow2'),this[_0xb0895a(0xac2)]['bitmap'][_0xb0895a(0x6a8)]=VisuMZ[_0xb0895a(0x941)][_0xb0895a(0xa6b)][_0xb0895a(0x9de)][_0xb0895a(0x267)],this['_shadowSprite'][_0xb0895a(0x39b)]['x']=0.5,this[_0xb0895a(0xac2)][_0xb0895a(0x39b)]['y']=0.5,this[_0xb0895a(0xac2)]['y']=-0x2,this['_shadowSprite'][_0xb0895a(0x596)]=![],this[_0xb0895a(0x96c)](this[_0xb0895a(0xac2)]);},Sprite_Battler[_0x3fd7af(0x9fd)][_0x3fd7af(0x571)]=function(){const _0x86465b=_0x3fd7af;this[_0x86465b(0xa0e)]=new Sprite(),this[_0x86465b(0xa0e)]['anchor']['x']=0.5,this[_0x86465b(0xa0e)][_0x86465b(0x39b)]['y']=0.5,this[_0x86465b(0x96c)](this[_0x86465b(0xa0e)]);},Sprite_Battler[_0x3fd7af(0x9fd)][_0x3fd7af(0xa40)]=function(){const _0x3b252f=_0x3fd7af;if(!this[_0x3b252f(0xa0e)])return;if(this[_0x3b252f(0xac2)]){const _0xeebe97=this['getChildIndex'](this[_0x3b252f(0xa0e)]);this[_0x3b252f(0x11a)](this[_0x3b252f(0xac2)],_0xeebe97),this[_0x3b252f(0x168)]();}if(this[_0x3b252f(0x6bc)]){if(_0x3b252f(0x5b8)!==_0x3b252f(0x2a5))this['_distortionSprite'][_0x3b252f(0x96c)](this[_0x3b252f(0x6bc)]);else return _0x5d7534[_0x3b252f(0xaae)]()[_0x3b252f(0xade)]();}this[_0x3b252f(0xaa4)]&&this[_0x3b252f(0xa0e)][_0x3b252f(0x96c)](this[_0x3b252f(0xaa4)]);if(this['_mainSprite']){if(_0x3b252f(0x774)!==_0x3b252f(0x9ba))this[_0x3b252f(0xa0e)][_0x3b252f(0x96c)](this['_mainSprite']);else return this['_cache']=this['_cache']||{},this[_0x3b252f(0x8d4)][_0xa6eb1c]!==_0x2989e3;}if(this[_0x3b252f(0x490)]){if('sycwx'===_0x3b252f(0x473)){const _0x5aa06f=_0x2485eb[_0x3b252f(0xe9)](),_0x1deba0=_0x5aa06f['battler']();if(_0x1deba0)_0x1deba0[_0x3b252f(0x965)]();const _0x2d1992=_0x4b4a3a[_0x3b252f(0x813)]()['filter'](_0x50d98f=>_0x50d98f[_0x3b252f(0x5a8)]()&&_0x50d98f['canInput']()),_0x5971c0=_0x2d1992[_0x3b252f(0x760)](_0x5aa06f),_0x3270b4=_0x2d1992[_0x5971c0+0x1];_0x41dda4[_0x3b252f(0xa6a)]=_0x3270b4||null;if(_0x3270b4)_0x3270b4[_0x3b252f(0x169)](_0x3b252f(0x179));_0x5aa06f[_0x3b252f(0x169)](_0x3b252f(0x901)),this[_0x3b252f(0x365)]();}else this['_distortionSprite'][_0x3b252f(0x96c)](this[_0x3b252f(0x490)]);}},Sprite_Battler[_0x3fd7af(0x9fd)]['updateShadowVisibility']=function(){const _0x37a349=_0x3fd7af;if(!this[_0x37a349(0xac2)])return;if(this[_0x37a349(0xa9a)]&&this[_0x37a349(0xa9a)][_0x37a349(0x4cc)]()){const _0x2de320=this[_0x37a349(0xac2)][_0x37a349(0x2cf)];this['_shadowSprite'][_0x37a349(0x4e1)](0x0,0x0,_0x2de320[_0x37a349(0xad0)],_0x2de320[_0x37a349(0x26a)]);}else this[_0x37a349(0xac2)]['setFrame'](0x0,0x0,0x0,0x0);},Sprite_Battler[_0x3fd7af(0x9fd)][_0x3fd7af(0x7ed)]=function(){const _0x2d1cc9=_0x3fd7af;return SceneManager[_0x2d1cc9(0x970)]()?SceneManager[_0x2d1cc9(0x450)]['_spriteset'][_0x2d1cc9(0x5ee)]:this[_0x2d1cc9(0x62c)];},Sprite_Battler['prototype'][_0x3fd7af(0x86b)]=function(_0x42900e,_0x1fdbab){const _0x5acb66=_0x3fd7af;if(!this[_0x5acb66(0xa9a)][_0x5acb66(0x8bc)]())return;const _0x16c16d=VisuMZ[_0x5acb66(0x941)][_0x5acb66(0xa6b)][_0x5acb66(0x81f)],_0x23b7ad=new Sprite_Damage();_0x23b7ad[_0x5acb66(0x32d)]=_0x16c16d[_0x5acb66(0x259)],this['sortDamageSprites'](_0x23b7ad),_0x23b7ad[_0x5acb66(0x86b)](_0x42900e,_0x1fdbab),this[_0x5acb66(0x50d)](_0x23b7ad);},Sprite_Battler[_0x3fd7af(0x9fd)][_0x3fd7af(0x3c3)]=function(_0x4c9ab7,_0x4926f8,_0x40f7ba){const _0x592f4c=_0x3fd7af;if(!this[_0x592f4c(0xa9a)][_0x592f4c(0x8bc)]())return;const _0x5dc547=VisuMZ[_0x592f4c(0x941)][_0x592f4c(0xa6b)][_0x592f4c(0x81f)],_0x417a24=new Sprite_Damage();_0x417a24[_0x592f4c(0x32d)]=_0x5dc547[_0x592f4c(0x259)],this[_0x592f4c(0xd9)](_0x417a24),_0x417a24['setupIconTextPopup'](_0x4c9ab7,_0x4926f8,_0x40f7ba),this[_0x592f4c(0x50d)](_0x417a24);},Sprite_Battler[_0x3fd7af(0x9fd)][_0x3fd7af(0x4d0)]=function(){const _0x40e77d=_0x3fd7af;if(!this[_0x40e77d(0xa9a)][_0x40e77d(0x347)]())return;while(this['_battler'][_0x40e77d(0x347)]()){this[_0x40e77d(0xa9a)][_0x40e77d(0x8bc)]()&&this[_0x40e77d(0x34a)]();}this[_0x40e77d(0xa9a)][_0x40e77d(0x570)](),this[_0x40e77d(0xa9a)][_0x40e77d(0x1d9)]();},Sprite_Battler[_0x3fd7af(0x9fd)][_0x3fd7af(0x34a)]=function(){const _0x1e1964=_0x3fd7af,_0x2aaf63=VisuMZ[_0x1e1964(0x941)][_0x1e1964(0xa6b)]['Damage'],_0x4b826c=new Sprite_Damage();_0x4b826c[_0x1e1964(0x32d)]=_0x2aaf63['PopupDuration'],this['sortDamageSprites'](_0x4b826c),_0x4b826c[_0x1e1964(0xbb)](this[_0x1e1964(0xa9a)]),_0x4b826c[_0x1e1964(0xc1)](this['_battler']),this[_0x1e1964(0x50d)](_0x4b826c);},Sprite_Battler[_0x3fd7af(0x9fd)][_0x3fd7af(0x50d)]=function(_0x5222d3){const _0x3c4203=_0x3fd7af;this['_damages'][_0x3c4203(0x18b)](_0x5222d3);if(this[_0x3c4203(0x34f)]())SceneManager['_scene'][_0x3c4203(0x6bb)][_0x3c4203(0x50d)](_0x5222d3,this[_0x3c4203(0xa9a)]);else{if(_0x3c4203(0x5c8)===_0x3c4203(0x98e)){if(!this[_0x3c4203(0x2f0)]())return;const _0x3468ad=this[_0x3c4203(0x4fb)](),_0x3396ea=_0x5cdb4d[_0x3c4203(0x941)]['Settings'][_0x3c4203(0xa2b)]['CmdIconOptions'],_0x9ef1f7=_0x3468ad===_0x3c4203(0x21b)?_0x1175a7['options']:'\x5cI[%1]%2'[_0x3c4203(0xab2)](_0x3396ea,_0x115417[_0x3c4203(0xae2)]),_0x5c8eb8=this[_0x3c4203(0x9e5)]();this[_0x3c4203(0xf7)](_0x9ef1f7,_0x3c4203(0xae2),_0x5c8eb8);}else{this[_0x3c4203(0x7ed)]()[_0x3c4203(0x96c)](_0x5222d3);if(SceneManager[_0x3c4203(0xb6)]())_0x5222d3[_0x3c4203(0x1c9)]['x']=-0x1;}}},Sprite_Battler[_0x3fd7af(0x9fd)][_0x3fd7af(0x34f)]=function(){const _0x2fca9c=_0x3fd7af;return!$gameSystem[_0x2fca9c(0x151)]()&&this[_0x2fca9c(0xa9a)]&&this[_0x2fca9c(0xa9a)][_0x2fca9c(0x91d)]();},Sprite_Battler[_0x3fd7af(0x9fd)]['sortDamageSprites']=function(_0x315a6c){const _0x3e504d=_0x3fd7af;this[_0x3e504d(0x1a2)](_0x315a6c,!![]);const _0x224cdd=VisuMZ[_0x3e504d(0x941)]['Settings'][_0x3e504d(0x81f)],_0x4193c9=SceneManager[_0x3e504d(0xb6)]()?-0x1:0x1;if(_0x224cdd[_0x3e504d(0x851)]){if('vgUED'!==_0x3e504d(0x280))for(const _0xa2f2b3 of this[_0x3e504d(0xa5c)]){_0xa2f2b3['x']+=_0x224cdd[_0x3e504d(0x5b3)]*_0x4193c9,_0xa2f2b3['y']+=_0x224cdd['PopupShiftY'];}else return this[_0x3e504d(0xa41)]>0x0;}else{const _0x51520f=this[_0x3e504d(0xa5c)][this[_0x3e504d(0xa5c)]['length']-0x1];_0x51520f&&(_0x315a6c['x']=_0x51520f['x']+_0x224cdd[_0x3e504d(0x5b3)]*_0x4193c9,_0x315a6c['y']=_0x51520f['y']+_0x224cdd['PopupShiftY']);}},Sprite_Battler['prototype'][_0x3fd7af(0x1a2)]=function(_0x3d68c6,_0x2486f2){const _0x2861e0=_0x3fd7af,_0x2ba666=SceneManager[_0x2861e0(0xb6)]()?-0x1:0x1;let _0x3c4d52=this[_0x2861e0(0x62e)];_0x3c4d52+=this[_0x2861e0(0x92a)]();let _0x4baab5=this[_0x2861e0(0x69d)];const _0x5e222c=this[_0x2861e0(0xa0e)][_0x2861e0(0x1c9)]['y'];_0x4baab5+=this['extraPositionY']();const _0x13d3af=SceneManager[_0x2861e0(0x450)][_0x2861e0(0x6bb)];if(_0x13d3af&&this[_0x2861e0(0x62c)]===_0x13d3af){_0x3c4d52+=_0x13d3af['x']-this[_0x2861e0(0xa7)]();const _0x5c7350=_0x13d3af['lineHeight']()*0x3/0x4;_0x4baab5=_0x13d3af['y']+_0x5c7350,_0x4baab5=Math['min'](_0x4baab5,_0x13d3af['y']+this['y']-this[_0x2861e0(0x26a)]+_0x5c7350);}_0x3d68c6['x']=Math['round'](_0x3c4d52+this[_0x2861e0(0xa7)]()*_0x2ba666),_0x3d68c6['y']=Math[_0x2861e0(0x819)](_0x4baab5+this[_0x2861e0(0x9f2)]());},VisuMZ[_0x3fd7af(0x941)][_0x3fd7af(0x5a6)]=Sprite_Battler[_0x3fd7af(0x9fd)][_0x3fd7af(0xa7)],Sprite_Battler[_0x3fd7af(0x9fd)][_0x3fd7af(0xa7)]=function(){const _0x62e427=_0x3fd7af;let _0x5813d0=VisuMZ[_0x62e427(0x941)][_0x62e427(0x5a6)][_0x62e427(0x145)](this),_0x254645=VisuMZ[_0x62e427(0x941)][_0x62e427(0xa6b)][_0x62e427(0x81f)][_0x62e427(0x566)]||0x0;return Math['round'](_0x5813d0+_0x254645);},VisuMZ[_0x3fd7af(0x941)][_0x3fd7af(0x973)]=Sprite_Battler[_0x3fd7af(0x9fd)][_0x3fd7af(0x9f2)],Sprite_Battler['prototype'][_0x3fd7af(0x9f2)]=function(){const _0xba3487=_0x3fd7af;let _0x2b4aee=VisuMZ[_0xba3487(0x941)][_0xba3487(0x973)]['call'](this);switch(VisuMZ[_0xba3487(0x941)][_0xba3487(0xa6b)]['Damage'][_0xba3487(0x12d)]){case _0xba3487(0x298):_0x2b4aee-=this[_0xba3487(0x26a)]*this[_0xba3487(0x1c9)]['y'];break;case'center':_0x2b4aee-=this[_0xba3487(0x26a)]*this['scale']['y']*0.5;break;}let _0x36ea23=VisuMZ['BattleCore'][_0xba3487(0xa6b)]['Damage'][_0xba3487(0x5d2)]||0x0;return Math[_0xba3487(0x819)](_0x2b4aee+_0x36ea23);},Sprite_Actor[_0x3fd7af(0x9fd)][_0x3fd7af(0xa7)]=function(){const _0x51feea=_0x3fd7af;return Sprite_Battler[_0x51feea(0x9fd)]['damageOffsetX'][_0x51feea(0x145)](this);},Sprite_Actor['prototype'][_0x3fd7af(0x9f2)]=function(){const _0x5eb8c1=_0x3fd7af;return Sprite_Battler[_0x5eb8c1(0x9fd)]['damageOffsetY']['call'](this);},Sprite_Battler[_0x3fd7af(0x9fd)][_0x3fd7af(0x51e)]=function(_0x592fc9){const _0x3c8ab9=_0x3fd7af;this[_0x3c8ab9(0x34f)]()?SceneManager[_0x3c8ab9(0x450)]['_statusWindow'][_0x3c8ab9(0x88e)](_0x592fc9):(this['damageContainer']()[_0x3c8ab9(0x5f7)](_0x592fc9),this[_0x3c8ab9(0xa5c)][_0x3c8ab9(0x861)](_0x592fc9),_0x592fc9['destroy']());},VisuMZ['BattleCore'][_0x3fd7af(0x51a)]=Sprite_Battler[_0x3fd7af(0x9fd)][_0x3fd7af(0x131)],Sprite_Battler['prototype']['setHome']=function(_0x445ec3,_0x3156d7){const _0x2f670d=_0x3fd7af,_0x597272=VisuMZ[_0x2f670d(0x941)]['Settings'];if(this[_0x2f670d(0x26b)]===Sprite_Actor)_0x445ec3+=_0x597272[_0x2f670d(0x9de)][_0x2f670d(0x592)]||0x0,_0x3156d7+=_0x597272[_0x2f670d(0x9de)][_0x2f670d(0x4ee)]||0x0;else this[_0x2f670d(0x26b)]===Sprite_Enemy&&(_0x445ec3+=_0x597272[_0x2f670d(0x520)][_0x2f670d(0x592)]||0x0,_0x3156d7+=_0x597272[_0x2f670d(0x520)][_0x2f670d(0x4ee)]||0x0);VisuMZ[_0x2f670d(0x941)][_0x2f670d(0x51a)][_0x2f670d(0x145)](this,_0x445ec3,_0x3156d7);},VisuMZ['BattleCore'][_0x3fd7af(0x51f)]=Sprite_Battler[_0x3fd7af(0x9fd)][_0x3fd7af(0x2e0)],Sprite_Battler[_0x3fd7af(0x9fd)][_0x3fd7af(0x2e0)]=function(){const _0x33b421=_0x3fd7af;VisuMZ['BattleCore'][_0x33b421(0x51f)][_0x33b421(0x145)](this),!this[_0x33b421(0xa9a)]&&this['_hpGaugeSprite']&&(this[_0x33b421(0x24f)]['visible']=![]);},VisuMZ['BattleCore'][_0x3fd7af(0x350)]=Sprite_Battler[_0x3fd7af(0x9fd)][_0x3fd7af(0x5cb)],Sprite_Battler[_0x3fd7af(0x9fd)][_0x3fd7af(0x5cb)]=function(){const _0x31b99e=_0x3fd7af;this[_0x31b99e(0x838)](),this[_0x31b99e(0x308)](),this[_0x31b99e(0xa7b)](),this[_0x31b99e(0x6c9)](),this[_0x31b99e(0x32a)](),VisuMZ[_0x31b99e(0x941)][_0x31b99e(0x350)][_0x31b99e(0x145)](this);if(this[_0x31b99e(0x26b)]===Sprite_Enemy)this['updateShadow']();},VisuMZ[_0x3fd7af(0x941)][_0x3fd7af(0x3f0)]=Sprite_Battler[_0x3fd7af(0x9fd)]['updatePosition'],Sprite_Battler[_0x3fd7af(0x9fd)][_0x3fd7af(0x700)]=function(){const _0x498ba6=_0x3fd7af;VisuMZ['BattleCore'][_0x498ba6(0x3f0)][_0x498ba6(0x145)](this),this['updatePositionBattleCore'](),this[_0x498ba6(0x632)]();},Sprite_Battler[_0x3fd7af(0x9fd)][_0x3fd7af(0x2d7)]=function(){const _0x57aa91=_0x3fd7af;this['_baseX']=this['x'],this[_0x57aa91(0x69d)]=this['y'],this[_0x57aa91(0x211)](),this[_0x57aa91(0xa06)](),this['x']+=this['extraPositionX'](),this['y']+=this[_0x57aa91(0x682)](),this['y']+=this[_0x57aa91(0x50f)](),this['x']=Math[_0x57aa91(0x63b)](this['x']),this['y']=Math[_0x57aa91(0x63b)](this['y']);},Sprite_Battler[_0x3fd7af(0x9fd)][_0x3fd7af(0x92a)]=function(){let _0x1a48db=0x0;return _0x1a48db;},Sprite_Battler[_0x3fd7af(0x9fd)][_0x3fd7af(0x682)]=function(){const _0x544310=_0x3fd7af;let _0x3a9cf3=0x0;return this['_battler']&&!this['_battler'][_0x544310(0x691)]()&&(_0x3a9cf3-=this[_0x544310(0x52a)],_0x3a9cf3-=this[_0x544310(0x299)]),_0x3a9cf3;},Sprite_Battler['prototype']['extraPositionScaledY']=function(){const _0x54031a=_0x3fd7af;let _0x349f78=0x0;if(this[_0x54031a(0xa0e)]&&this[_0x54031a(0x26b)]!==Sprite_SvEnemy){const _0x1f58b6=this[_0x54031a(0xa0e)]['scale']['y'];_0x349f78-=(_0x1f58b6-0x1)*this[_0x54031a(0x26a)];}return _0x349f78;},Sprite_Battler['prototype'][_0x3fd7af(0x6c9)]=function(){const _0x1ce8b4=_0x3fd7af,_0x5676db=this[_0x1ce8b4(0xa9a)]&&this[_0x1ce8b4(0xa9a)][_0x1ce8b4(0x77d)]();this['_flipScaleX']=(_0x5676db?-0x1:0x1)*Math[_0x1ce8b4(0x278)](this[_0x1ce8b4(0x1c9)]['x']);},Sprite_Battler[_0x3fd7af(0x9fd)][_0x3fd7af(0x1b1)]=function(_0x31c21e,_0x59b478,_0x5cdcb3){const _0xc1b3ea=_0x3fd7af;if(!this[_0xc1b3ea(0x416)]())return;if(this[_0xc1b3ea(0x6eb)]===_0x31c21e)return;this[_0xc1b3ea(0x6eb)]=_0x31c21e,this[_0xc1b3ea(0xa41)]=_0x59b478,this['_floatWholeDuration']=_0x59b478,this[_0xc1b3ea(0x1d1)]=_0x5cdcb3||_0xc1b3ea(0xa2d);if(_0x59b478<=0x0)this['_floatHeight']=_0x31c21e;},Sprite_Battler[_0x3fd7af(0x9fd)][_0x3fd7af(0x211)]=function(){const _0x54d5f3=_0x3fd7af;if(this['_floatDuration']<=0x0)return;const _0x36d900=this[_0x54d5f3(0xa41)],_0x335cbc=this[_0x54d5f3(0x814)],_0xe02bac=this[_0x54d5f3(0x1d1)];if(Imported[_0x54d5f3(0x28a)])this['_floatHeight']=this['applyEasing'](this[_0x54d5f3(0x52a)],this[_0x54d5f3(0x6eb)],_0x36d900,_0x335cbc,_0xe02bac);else{if('lIahR'===_0x54d5f3(0xa18))return this[_0x54d5f3(0x9d8)]()&&this['currentAction']()[_0x54d5f3(0xaf4)]()&&!this['currentAction']()[_0x54d5f3(0x695)]();else this['_floatHeight']=(this[_0x54d5f3(0x52a)]*(_0x36d900-0x1)+this[_0x54d5f3(0x6eb)])/_0x36d900;}this[_0x54d5f3(0xa41)]--;if(this['_floatDuration']<=0x0)this['onFloatEnd']();},Sprite_Battler[_0x3fd7af(0x9fd)][_0x3fd7af(0x5ea)]=function(){const _0x404e26=_0x3fd7af;this[_0x404e26(0x52a)]=this[_0x404e26(0x6eb)];},Sprite_Battler[_0x3fd7af(0x9fd)][_0x3fd7af(0x78c)]=function(){return this['_floatDuration']>0x0;},Sprite_Battler[_0x3fd7af(0x9fd)][_0x3fd7af(0x8b4)]=function(_0x557ebd,_0x42781f){const _0x129447=_0x3fd7af;if(!this[_0x129447(0x416)]())return;if(_0x42781f<=0x0)return;this[_0x129447(0xa96)]=_0x557ebd,this[_0x129447(0x891)]=_0x42781f,this[_0x129447(0x207)]=_0x42781f;},Sprite_Battler[_0x3fd7af(0x9fd)]['updateJump']=function(){const _0x23f23d=_0x3fd7af;if(this[_0x23f23d(0x891)]<=0x0)return;const _0xe091a=this[_0x23f23d(0x207)]-this[_0x23f23d(0x891)],_0x16f8bb=this['_jumpWholeDuration']/0x2,_0x54a7b5=this[_0x23f23d(0xa96)],_0x566e05=-_0x54a7b5/Math[_0x23f23d(0x59d)](_0x16f8bb,0x2);this['_jumpHeight']=_0x566e05*Math[_0x23f23d(0x59d)](_0xe091a-_0x16f8bb,0x2)+_0x54a7b5,this[_0x23f23d(0x891)]--;if(this[_0x23f23d(0x891)]<=0x0)return this[_0x23f23d(0x21d)]();},Sprite_Battler['prototype'][_0x3fd7af(0x21d)]=function(){const _0xd5202e=_0x3fd7af;this[_0xd5202e(0x299)]=0x0;},Sprite_Battler[_0x3fd7af(0x9fd)]['isJumping']=function(){const _0x39a14a=_0x3fd7af;return this[_0x39a14a(0x891)]>0x0;},Sprite_Battler[_0x3fd7af(0x9fd)][_0x3fd7af(0x319)]=function(_0x213707,_0x45c4d6,_0x2e82f1){const _0x23bb23=_0x3fd7af;if(this[_0x23bb23(0x5b5)]===_0x213707)return;this[_0x23bb23(0x5b5)]=_0x213707,this[_0x23bb23(0xa90)]=_0x45c4d6,this[_0x23bb23(0x8a2)]=_0x45c4d6,this[_0x23bb23(0x3b7)]=_0x2e82f1||_0x23bb23(0xa2d);if(_0x45c4d6<=0x0)this[_0x23bb23(0x824)]=_0x213707;},Sprite_Battler[_0x3fd7af(0x9fd)]['updateOpacity']=function(){const _0x5cc4d3=_0x3fd7af;if(this[_0x5cc4d3(0x26b)][_0x5cc4d3(0x504)]===_0x5cc4d3(0xa7f))return;if(this[_0x5cc4d3(0xa90)]<=0x0)return;const _0x34a9a7=this[_0x5cc4d3(0xa90)],_0x5581e9=this['_opacityWholeDuration'],_0x2ca53f=this[_0x5cc4d3(0x3b7)];Imported[_0x5cc4d3(0x28a)]?this[_0x5cc4d3(0x824)]=this['applyEasing'](this[_0x5cc4d3(0x824)],this['_targetOpacity'],_0x34a9a7,_0x5581e9,_0x2ca53f):this['opacity']=(this[_0x5cc4d3(0x824)]*(_0x34a9a7-0x1)+this[_0x5cc4d3(0x5b5)])/_0x34a9a7;this[_0x5cc4d3(0xa90)]--;if(this['_opacityDuration']<=0x0)this[_0x5cc4d3(0x506)]();},Sprite_Battler['prototype'][_0x3fd7af(0x506)]=function(){const _0x3ab0af=_0x3fd7af;this[_0x3ab0af(0x824)]=this[_0x3ab0af(0x5b5)];},Sprite_Battler['prototype'][_0x3fd7af(0x9df)]=function(){const _0x42db90=_0x3fd7af;return this[_0x42db90(0xa90)]>0x0;},Sprite_Battler['prototype'][_0x3fd7af(0x5f2)]=function(){const _0x5d954f=_0x3fd7af;this[_0x5d954f(0xac2)][_0x5d954f(0x596)]=this['_battler'][_0x5d954f(0x5db)](),this['updateShadowPosition']();},Sprite_Battler[_0x3fd7af(0x9fd)][_0x3fd7af(0x5bb)]=function(){const _0x5e37dd=_0x3fd7af;if(!this[_0x5e37dd(0xac2)])return;this[_0x5e37dd(0xac2)]['y']=this['_baseY']-this['y']-0x2;},Sprite_Battler[_0x3fd7af(0x9fd)][_0x3fd7af(0x431)]=function(){const _0x226ae6=_0x3fd7af;if(!this['_battler'])return;this[_0x226ae6(0x310)]=this[_0x226ae6(0xa9a)]['battlerShadowScaleX'](),this[_0x226ae6(0x1e4)]=this[_0x226ae6(0xa9a)][_0x226ae6(0x897)]();},Game_BattlerBase['prototype'][_0x3fd7af(0x958)]=function(){const _0x2b5844=_0x3fd7af,_0x2d37d5=this[_0x2b5844(0x91d)]()?this[_0x2b5844(0xe9)]():this[_0x2b5844(0xb4)]();if(_0x2d37d5){const _0x3d3cdd=_0x2d37d5[_0x2b5844(0x7b9)];if(_0x3d3cdd['match'](/<SIDEVIEW SHADOW (?:SCALE|SCALE X):[ ](\d+)([%％])>/i))return Number(RegExp['$1'])*0.01;else{if(_0x3d3cdd[_0x2b5844(0x265)](/<SIDEVIEW SHADOW (?:SCALE|SCALE X):[ ](.*)>/i))return Number(RegExp['$1'])||0x0;}}return 0x1;},Game_BattlerBase['prototype'][_0x3fd7af(0x897)]=function(){const _0x450c34=_0x3fd7af,_0x46980c=this[_0x450c34(0x91d)]()?this[_0x450c34(0xe9)]():this[_0x450c34(0xb4)]();if(_0x46980c){const _0xb5e313=_0x46980c[_0x450c34(0x7b9)];if(_0xb5e313['match'](/<SIDEVIEW SHADOW (?:SCALE|SCALE Y):[ ](\d+)([%％])>/i))return Number(RegExp['$1'])*0.01;else{if(_0xb5e313['match'](/<SIDEVIEW SHADOW (?:SCALE|SCALE Y):[ ](.*)>/i))return Number(RegExp['$1'])||0x0;}}return 0x1;},Sprite_Battler[_0x3fd7af(0x9fd)][_0x3fd7af(0x838)]=function(){const _0xf854b2=_0x3fd7af;if(this[_0xf854b2(0x26b)]===Sprite_SvEnemy)return;this[_0xf854b2(0x730)](),this[_0xf854b2(0x7e9)]();},Sprite_Battler[_0x3fd7af(0x9fd)]['finalizeScale']=function(){const _0x38a7c5=_0x3fd7af,_0xd0a983=this[_0x38a7c5(0xa0e)];_0xd0a983&&(_0xd0a983[_0x38a7c5(0x1c9)]['x']=this[_0x38a7c5(0x130)](),_0xd0a983[_0x38a7c5(0x1c9)]['y']=this[_0x38a7c5(0x639)]());},Sprite_Battler['prototype']['mainSpriteScaleX']=function(){const _0x2383cf=_0x3fd7af;let _0x92e131=0x1;return _0x92e131*=this[_0x2383cf(0x1ce)],_0x92e131*=this[_0x2383cf(0x828)],_0x92e131;},Sprite_Battler[_0x3fd7af(0x9fd)][_0x3fd7af(0x639)]=function(){const _0x13b2a5=_0x3fd7af;return 0x1*this[_0x13b2a5(0x36e)];},Sprite_Battler[_0x3fd7af(0x9fd)][_0x3fd7af(0x159)]=function(){const _0x1cacfa=_0x3fd7af;return this[_0x1cacfa(0xad0)]*this[_0x1cacfa(0x130)]();},Sprite_Battler['prototype']['mainSpriteHeight']=function(){const _0x443cbd=_0x3fd7af;return this[_0x443cbd(0x26a)]*this['mainSpriteScaleY']();},Sprite_Battler[_0x3fd7af(0x9fd)][_0x3fd7af(0x1ea)]=function(_0x5084ec,_0x5b6e4f,_0x18e8f1,_0x25b684){const _0x55d96d=_0x3fd7af;if(!this[_0x55d96d(0x416)]())return;if(!this[_0x55d96d(0xa0e)])return;if(this[_0x55d96d(0x85a)]===_0x5084ec&&this[_0x55d96d(0x859)]===_0x5b6e4f)return;this[_0x55d96d(0x85a)]=_0x5084ec,this[_0x55d96d(0x859)]=_0x5b6e4f,this[_0x55d96d(0x6a0)]=_0x18e8f1,this['_growWholeDuration']=_0x18e8f1,this[_0x55d96d(0xac8)]=_0x25b684||_0x55d96d(0xa2d),_0x18e8f1<=0x0&&(this['_growX']=this[_0x55d96d(0x85a)],this[_0x55d96d(0x36e)]=this[_0x55d96d(0x859)]);},Sprite_Battler[_0x3fd7af(0x9fd)][_0x3fd7af(0x730)]=function(){const _0x2e7835=_0x3fd7af;if(this['_growDuration']<=0x0)return;if(!this[_0x2e7835(0xa0e)])return;const _0x2ce60b=this['_growDuration'],_0x123230=this['_growWholeDuration'],_0x45b25f=this[_0x2e7835(0xac8)];Imported[_0x2e7835(0x28a)]?(this[_0x2e7835(0x828)]=this[_0x2e7835(0x9f1)](this['_growX'],this[_0x2e7835(0x85a)],_0x2ce60b,_0x123230,_0x45b25f),this[_0x2e7835(0x36e)]=this[_0x2e7835(0x9f1)](this[_0x2e7835(0x36e)],this[_0x2e7835(0x859)],_0x2ce60b,_0x123230,_0x45b25f)):(this['_growX']=(this[_0x2e7835(0x828)]*(_0x2ce60b-0x1)+this[_0x2e7835(0x85a)])/_0x2ce60b,this[_0x2e7835(0x36e)]=(this[_0x2e7835(0x36e)]*(_0x2ce60b-0x1)+this[_0x2e7835(0x859)])/_0x2ce60b);this[_0x2e7835(0x6a0)]--;if(this[_0x2e7835(0x6a0)]<=0x0)this['onGrowEnd']();},Sprite_Battler[_0x3fd7af(0x9fd)][_0x3fd7af(0x341)]=function(){const _0x22e2ec=_0x3fd7af;this[_0x22e2ec(0x828)]=this[_0x22e2ec(0x85a)],this[_0x22e2ec(0x36e)]=this[_0x22e2ec(0x859)];},Sprite_Battler[_0x3fd7af(0x9fd)][_0x3fd7af(0x975)]=function(){return this['_growDuration']>0x0;},Sprite_Battler[_0x3fd7af(0x9fd)][_0x3fd7af(0x739)]=function(_0x523d1e,_0x7ad4,_0x3d5868,_0x491b44){const _0x3be60b=_0x3fd7af;if(!this[_0x3be60b(0x416)]())return;if(!this[_0x3be60b(0xa0e)])return;if(this[_0x3be60b(0xac9)]===_0x523d1e&&this[_0x3be60b(0x30a)]===_0x7ad4)return;this[_0x3be60b(0xac9)]=_0x523d1e,this[_0x3be60b(0x30a)]=_0x7ad4,this['_skewDuration']=_0x3d5868,this[_0x3be60b(0x5c4)]=_0x3d5868,this[_0x3be60b(0x609)]=_0x491b44||'Linear',_0x3d5868<=0x0&&(this['_distortionSprite'][_0x3be60b(0x249)]['x']=this[_0x3be60b(0xac9)],this['_distortionSprite'][_0x3be60b(0x249)]['y']=this[_0x3be60b(0x30a)]);},Sprite_Battler[_0x3fd7af(0x9fd)][_0x3fd7af(0x308)]=function(){const _0x11a126=_0x3fd7af;if(this['_skewDuration']<=0x0)return;if(!this[_0x11a126(0xa0e)])return;const _0x46eba5=this[_0x11a126(0x7bc)],_0x631a1a=this['_skewWholeDuration'],_0x1bc933=this[_0x11a126(0x609)],_0x269790=this['_distortionSprite'];if(Imported['VisuMZ_0_CoreEngine']){if(_0x11a126(0x5fa)!==_0x11a126(0x5fa)){if(!this[_0x11a126(0xa9a)][_0x11a126(0x8bc)]())return;const _0x485ea8=_0xb673f1[_0x11a126(0x941)]['Settings'][_0x11a126(0x81f)],_0x48b69f=new _0x33b035();_0x48b69f['_duration']=_0x485ea8[_0x11a126(0x259)],this[_0x11a126(0xd9)](_0x48b69f),_0x48b69f[_0x11a126(0x3c3)](_0x1ac025,_0x29f265,_0x5460fa),this[_0x11a126(0x50d)](_0x48b69f);}else _0x269790[_0x11a126(0x249)]['x']=this['applyEasing'](_0x269790[_0x11a126(0x249)]['x'],this['_targetSkewX'],_0x46eba5,_0x631a1a,_0x1bc933),_0x269790[_0x11a126(0x249)]['y']=this['applyEasing'](_0x269790['skew']['y'],this[_0x11a126(0x30a)],_0x46eba5,_0x631a1a,_0x1bc933);}else _0x269790[_0x11a126(0x249)]['x']=(_0x269790[_0x11a126(0x249)]['x']*(_0x46eba5-0x1)+this[_0x11a126(0xac9)])/_0x46eba5,_0x269790[_0x11a126(0x249)]['y']=(_0x269790[_0x11a126(0x249)]['y']*(_0x46eba5-0x1)+this['_targetSkewY'])/_0x46eba5;this[_0x11a126(0x7bc)]--;if(this[_0x11a126(0x7bc)]<=0x0)this[_0x11a126(0x715)]();},Sprite_Battler[_0x3fd7af(0x9fd)][_0x3fd7af(0x715)]=function(){const _0x2eb29c=_0x3fd7af;this[_0x2eb29c(0xa0e)][_0x2eb29c(0x249)]['x']=this[_0x2eb29c(0xac9)],this[_0x2eb29c(0xa0e)]['skew']['y']=this[_0x2eb29c(0x30a)];},Sprite_Battler[_0x3fd7af(0x9fd)]['isSkewing']=function(){const _0x2b786e=_0x3fd7af;return this[_0x2b786e(0x7bc)]>0x0;},Sprite_Battler[_0x3fd7af(0x9fd)]['startSpin']=function(_0x4dc367,_0x21f624,_0x351cf5,_0x7c0437){const _0x35e627=_0x3fd7af;if(!this[_0x35e627(0x416)]())return;if(!this[_0x35e627(0xa0e)])return;if(this[_0x35e627(0x933)]===_0x4dc367)return;this['_targetAngle']=_0x4dc367,this[_0x35e627(0xa68)]=_0x21f624,this[_0x35e627(0x699)]=_0x21f624,this[_0x35e627(0x522)]=_0x351cf5||_0x35e627(0xa2d),this[_0x35e627(0x277)]=_0x7c0437,this['_angleRevertOnFinish']===undefined&&(this['_angleRevertOnFinish']=!![]),_0x21f624<=0x0&&(_0x35e627(0x2ef)==='IXpwG'?_0x4e52d3=_0x56392c[_0x35e627(0x218)]((_0x2757f7,_0x406f71)=>_0x2757f7*(0x1-_0x406f71),_0x37e1e4):(this[_0x35e627(0x69f)]=_0x4dc367,this[_0x35e627(0x277)]&&(this['_targetAngle']=0x0,this[_0x35e627(0x69f)]=0x0)));},Sprite_Battler['prototype'][_0x3fd7af(0xa7b)]=function(){const _0x2168f4=_0x3fd7af;this['updateAngleCalculations'](),this[_0x2168f4(0x752)]();},Sprite_Battler['prototype']['updateAngleCalculations']=function(){const _0xbd8251=_0x3fd7af;if(this[_0xbd8251(0xa68)]<=0x0)return;const _0x50b908=this[_0xbd8251(0xa68)],_0xdf1bbc=this[_0xbd8251(0x699)],_0x24e4a3=this[_0xbd8251(0x522)];Imported[_0xbd8251(0x28a)]?this[_0xbd8251(0x69f)]=this[_0xbd8251(0x9f1)](this[_0xbd8251(0x69f)],this[_0xbd8251(0x933)],_0x50b908,_0xdf1bbc,_0x24e4a3):this[_0xbd8251(0x69f)]=(this['_currentAngle']*(_0x50b908-0x1)+this[_0xbd8251(0x933)])/_0x50b908;this[_0xbd8251(0xa68)]--;if(this[_0xbd8251(0xa68)]<=0x0)this[_0xbd8251(0x7c8)]();},Sprite_Battler[_0x3fd7af(0x9fd)][_0x3fd7af(0x7c8)]=function(){const _0x2b1eba=_0x3fd7af;this[_0x2b1eba(0x69f)]=this[_0x2b1eba(0x933)];if(this[_0x2b1eba(0x277)]){if(_0x2b1eba(0x2d4)!==_0x2b1eba(0x2d4))return _0x382ec0['BattleCore'][_0x2b1eba(0xa5d)][_0x2b1eba(0x145)](this);else this[_0x2b1eba(0x933)]=0x0,this[_0x2b1eba(0x69f)]=0x0;}},Sprite_Battler[_0x3fd7af(0x9fd)][_0x3fd7af(0x4ff)]=function(){const _0x3425c7=_0x3fd7af;return this[_0x3425c7(0xa68)]>0x0;},Sprite_Battler[_0x3fd7af(0x9fd)][_0x3fd7af(0x752)]=function(){const _0x20471d=_0x3fd7af;if(!this[_0x20471d(0xa0e)])return;const _0x8a676e=this[_0x20471d(0x69f)],_0x231708=this[_0x20471d(0x1c9)]['x'],_0x37752c=this[_0x20471d(0xa9a)][_0x20471d(0x91d)]()?-0x1:0x1;this[_0x20471d(0xa0e)][_0x20471d(0x5e7)]=_0x8a676e*_0x231708*_0x37752c;const _0x1bf804=this[_0x20471d(0xa0e)][_0x20471d(0x1c9)]['y'];this[_0x20471d(0xa0e)]['y']=this[_0x20471d(0x26a)]*-0.5*(0x2-_0x1bf804),this[_0x20471d(0xa0e)]['y']=Math[_0x20471d(0x821)](this[_0x20471d(0xa0e)]['y']);const _0x406acf=[this['_mainSprite'],this[_0x20471d(0x6bc)],this[_0x20471d(0x490)]];for(const _0x1d7048 of _0x406acf){if(!_0x1d7048)continue;_0x1d7048['y']=this[_0x20471d(0x26a)]*0.5;}if(this[_0x20471d(0xac2)]){if(_0x20471d(0x6e9)===_0x20471d(0x6e9))this[_0x20471d(0x310)]=this[_0x20471d(0x310)]??0x1,this[_0x20471d(0x1e4)]=this[_0x20471d(0x1e4)]??0x1,this['_shadowSprite']['scale']['x']=this[_0x20471d(0xa0e)][_0x20471d(0x1c9)]['x']*this[_0x20471d(0x310)],this[_0x20471d(0xac2)][_0x20471d(0x1c9)]['y']=this[_0x20471d(0xa0e)][_0x20471d(0x1c9)]['y']*this[_0x20471d(0x1e4)];else{if(!this['_battler'])return;if(!this[_0x20471d(0x24f)])return;const _0x527919=_0x4b686e[_0x20471d(0x941)]['Settings'][_0x20471d(0x7fe)],_0x184e4f=this[_0x20471d(0x24f)];_0x184e4f[_0x20471d(0x596)]=this[_0x20471d(0x775)]();const _0x39b55a=_0x527919[_0x20471d(0x592)],_0x4a2dcb=_0x527919[_0x20471d(0x4ee)];_0x184e4f['x']=_0x39b55a,_0x184e4f['x']+=this[_0x20471d(0xa9a)]['battleUIOffsetX'](),_0x184e4f['y']=-this[_0x20471d(0x26a)]+_0x4a2dcb,_0x184e4f['y']+=this[_0x20471d(0xa9a)][_0x20471d(0x4ac)]();}}},VisuMZ[_0x3fd7af(0x941)]['Sprite_Actor_createStateSprite']=Sprite_Actor['prototype']['createStateSprite'],Sprite_Actor[_0x3fd7af(0x9fd)]['createStateSprite']=function(){const _0x33bc57=_0x3fd7af;VisuMZ['BattleCore']['Sprite_Actor_createStateSprite'][_0x33bc57(0x145)](this);if(VisuMZ[_0x33bc57(0x941)][_0x33bc57(0xa6b)][_0x33bc57(0x7fe)]['ShowActorGauge']){if(_0x33bc57(0x9ac)===_0x33bc57(0x917)){const _0x2f356e=this[_0x33bc57(0x3a0)],_0x4d68a3=_0x514d40[_0x33bc57(0x684)](),_0x4261eb=_0x307085['x']+_0x4b866a[_0x33bc57(0x63b)](_0x3f9ede[_0x33bc57(0xad0)]/0x2)+_0x4d68a3;_0x2f356e['x']=_0x2f356e[_0x33bc57(0xad0)]/-0x2+_0x4261eb,_0x2f356e['y']=_0x126779[_0x33bc57(0x63b)](_0x5e33ad[_0x33bc57(0x26a)]/0x2);}else this[_0x33bc57(0x56e)]();}},VisuMZ[_0x3fd7af(0x941)]['Sprite_Enemy_createStateIconSprite']=Sprite_Enemy[_0x3fd7af(0x9fd)]['createStateIconSprite'],Sprite_Enemy[_0x3fd7af(0x9fd)]['createStateIconSprite']=function(){const _0x4b1f14=_0x3fd7af;VisuMZ[_0x4b1f14(0x941)]['Settings']['HpGauge'][_0x4b1f14(0x4e0)]&&(_0x4b1f14(0x3b8)===_0x4b1f14(0x685)?this[_0x4b1f14(0x18d)]=!![]:this['createHpGaugeSprite']()),VisuMZ['BattleCore'][_0x4b1f14(0x8f9)][_0x4b1f14(0x145)](this);},Sprite_Battler['prototype'][_0x3fd7af(0x56e)]=function(){const _0x499682=_0x3fd7af;if(!ConfigManager['visualHpGauge'])return;if(this[_0x499682(0x26b)]===Sprite_SvEnemy)return;const _0x4d0089=VisuMZ[_0x499682(0x941)][_0x499682(0xa6b)][_0x499682(0x7fe)],_0x489fcf=new Sprite_HpGauge();_0x489fcf['anchor']['x']=_0x4d0089[_0x499682(0x9f9)],_0x489fcf[_0x499682(0x39b)]['y']=_0x4d0089[_0x499682(0xaa)],_0x489fcf[_0x499682(0x1c9)]['x']=_0x489fcf[_0x499682(0x1c9)]['y']=_0x4d0089[_0x499682(0x7d8)],this[_0x499682(0x24f)]=_0x489fcf,this['addChild'](this[_0x499682(0x24f)]);},VisuMZ[_0x3fd7af(0x941)]['Sprite_Battler_setBattler']=Sprite_Battler[_0x3fd7af(0x9fd)][_0x3fd7af(0xa84)],Sprite_Battler[_0x3fd7af(0x9fd)][_0x3fd7af(0xa84)]=function(_0x233f24){const _0x40ba49=_0x3fd7af,_0xe3dd3f=this[_0x40ba49(0xa9a)];VisuMZ[_0x40ba49(0x941)]['Sprite_Battler_setBattler'][_0x40ba49(0x145)](this,_0x233f24),this[_0x40ba49(0x7c5)](_0x233f24);if(_0xe3dd3f!==_0x233f24)this[_0x40ba49(0x431)]();},Sprite_Battler[_0x3fd7af(0x9fd)][_0x3fd7af(0x7c5)]=function(_0xc85ad5){const _0x28adcf=_0x3fd7af;if(!_0xc85ad5)return;if(!this['_hpGaugeSprite'])return;if(_0xc85ad5[_0x28adcf(0x91d)]()){}else{if(_0xc85ad5['isEnemy']()){if(this['constructor']===Sprite_SvEnemy&&!_0xc85ad5['hasSvBattler']())return;}}this['_hpGaugeSprite'][_0x28adcf(0xbb)](_0xc85ad5,'hp');},Sprite_Battler[_0x3fd7af(0x9fd)][_0x3fd7af(0x32a)]=function(){const _0xee4c03=_0x3fd7af;if(!this[_0xee4c03(0xa9a)])return;if(!this[_0xee4c03(0x24f)])return;const _0x30af55=VisuMZ[_0xee4c03(0x941)]['Settings']['HpGauge'],_0x322a1f=this[_0xee4c03(0x24f)];_0x322a1f[_0xee4c03(0x596)]=this[_0xee4c03(0x775)]();const _0x443d46=_0x30af55[_0xee4c03(0x592)],_0x2561e8=_0x30af55[_0xee4c03(0x4ee)];_0x322a1f['x']=_0x443d46,_0x322a1f['x']+=this['_battler'][_0xee4c03(0x117)](),_0x322a1f['y']=-this[_0xee4c03(0x26a)]+_0x2561e8,_0x322a1f['y']+=this['_battler']['battleUIOffsetY']();},Sprite_Battler[_0x3fd7af(0x9fd)][_0x3fd7af(0x775)]=function(){const _0x12990c=_0x3fd7af;if(!this[_0x12990c(0xa9a)])return![];if(this[_0x12990c(0xa9a)][_0x12990c(0x91d)]())return!![];const _0x5b3b9b=this['_battler']['enemy']()['note'];if(_0x5b3b9b['match'](/<SHOW HP GAUGE>/i))return!![];if(_0x5b3b9b[_0x12990c(0x265)](/<HIDE HP GAUGE>/i))return![];const _0x5c7aeb=VisuMZ[_0x12990c(0x941)]['Settings'][_0x12990c(0x7fe)];if(_0x5c7aeb[_0x12990c(0x261)]){if(_0x5c7aeb[_0x12990c(0x19b)]&&BattleManager[_0x12990c(0xa43)]())return!![];if(this[_0x12990c(0xa9a)][_0x12990c(0x3af)])return![];return this[_0x12990c(0xa9a)][_0x12990c(0x134)]();}return!![];},VisuMZ[_0x3fd7af(0x941)][_0x3fd7af(0x7fa)]=Sprite_Battler['prototype']['isMoving'],Sprite_Battler[_0x3fd7af(0x9fd)][_0x3fd7af(0x10b)]=function(){const _0x2eb53c=_0x3fd7af;if(!this['_battler'])return![];return VisuMZ['BattleCore']['Sprite_Battler_isMoving'][_0x2eb53c(0x145)](this);},VisuMZ[_0x3fd7af(0x941)][_0x3fd7af(0x6ec)]=Sprite_Battler['prototype'][_0x3fd7af(0x627)],Sprite_Battler['prototype'][_0x3fd7af(0x627)]=function(_0x500c24,_0x1eb7fd,_0x4030ff){const _0x566fb5=_0x3fd7af;this[_0x566fb5(0x416)]()&&(_0x566fb5(0x616)===_0x566fb5(0x616)?VisuMZ[_0x566fb5(0x941)][_0x566fb5(0x6ec)][_0x566fb5(0x145)](this,_0x500c24,_0x1eb7fd,_0x4030ff):_0x3cc953[_0x566fb5(0x9dd)]([_0x17fb81]));},Sprite_Battler[_0x3fd7af(0x9fd)]['canMove']=function(){const _0xd20111=_0x3fd7af;if(this['_battler']&&this[_0xd20111(0xa9a)][_0xd20111(0x217)]())return![];if(this['_battler']&&!this[_0xd20111(0xa9a)][_0xd20111(0x6e8)]())return![];return $gameSystem[_0xd20111(0x151)]();},Sprite_Battler[_0x3fd7af(0x9fd)][_0x3fd7af(0x9f0)]=function(){},Sprite_Battler[_0x3fd7af(0x9fd)]['stepBack']=function(){this['startMove'](0x0,0x0,0xc);},Sprite_Battler[_0x3fd7af(0x9fd)][_0x3fd7af(0x46b)]=function(){},Sprite_Battler['prototype'][_0x3fd7af(0x7e2)]=function(){const _0x3121ce=_0x3fd7af,_0x19cd64=VisuMZ[_0x3121ce(0x941)]['Settings']['Actor'],_0x42c6ae=this[_0x3121ce(0xa9a)]&&this['_battler'][_0x3121ce(0x91d)]()?0x1:-0x1,_0x1b1989=this['_baseX']-this[_0x3121ce(0x2e7)]+_0x42c6ae*_0x19cd64[_0x3121ce(0x286)],_0xafbc4c=this[_0x3121ce(0x69d)]-this[_0x3121ce(0x939)]+_0x42c6ae*_0x19cd64[_0x3121ce(0xa89)],_0x8e8b55=_0x19cd64[_0x3121ce(0x9c5)];this['startMove'](_0x1b1989,_0xafbc4c,_0x8e8b55);},VisuMZ[_0x3fd7af(0x941)][_0x3fd7af(0x523)]=Sprite_Actor[_0x3fd7af(0x9fd)][_0x3fd7af(0x2c4)],Sprite_Actor[_0x3fd7af(0x9fd)][_0x3fd7af(0x2c4)]=function(){const _0x13f322=_0x3fd7af;VisuMZ[_0x13f322(0x941)][_0x13f322(0x523)][_0x13f322(0x145)](this),this[_0x13f322(0xa40)]();},Sprite_Actor['prototype'][_0x3fd7af(0x5a9)]=function(){const _0x1e386d=_0x3fd7af;return this[_0x1e386d(0xa0e)]||this[_0x1e386d(0x6dd)]||this;},VisuMZ['BattleCore'][_0x3fd7af(0x6d2)]=Sprite_Actor[_0x3fd7af(0x9fd)]['moveToStartPosition'],Sprite_Actor[_0x3fd7af(0x9fd)]['moveToStartPosition']=function(){},Sprite_Actor[_0x3fd7af(0x9fd)][_0x3fd7af(0x9d1)]=function(_0x31c97e){const _0x4b304a=_0x3fd7af;if(SceneManager[_0x4b304a(0x228)]())return;if(!_0x31c97e)return;if(!_0x31c97e['canMove']())return;VisuMZ['BattleCore'][_0x4b304a(0x6d2)][_0x4b304a(0x145)](this);},VisuMZ['BattleCore'][_0x3fd7af(0x524)]=Sprite_Actor[_0x3fd7af(0x9fd)][_0x3fd7af(0x930)],Sprite_Actor[_0x3fd7af(0x9fd)][_0x3fd7af(0x930)]=function(_0x47fb6d){const _0x3876ec=_0x3fd7af;if(VisuMZ[_0x3876ec(0x941)]['Settings'][_0x3876ec(0x9de)][_0x3876ec(0x77f)]){if(_0x3876ec(0x11f)!==_0x3876ec(0xa35))VisuMZ['BattleCore'][_0x3876ec(0xa6b)][_0x3876ec(0x9de)][_0x3876ec(0x77f)][_0x3876ec(0x145)](this,_0x47fb6d);else{const _0x508357=this['visibilityState']();if(_0x508357&&this[_0x3876ec(0x824)]<0xff)this[_0x3876ec(0x824)]+=0x10;else!_0x508357&&this[_0x3876ec(0x824)]>0x0&&(this[_0x3876ec(0x824)]-=0x10);}}else{if('mqdvI'!==_0x3876ec(0x62f)){if(!_0x590385[_0x3876ec(0x970)]())return;if(!_0x15a3b8[_0x3876ec(0x974)])return;if(!_0xed224e['_subject'])return;_0x7564e[_0x3876ec(0x187)](_0x5e87aa,_0x51aa0e);const _0x1996c9=_0x5e0fb0[_0x3876ec(0xde)];_0x4f8d60[_0x3876ec(0x950)](_0x1996c9,_0xe33fb4[_0x3876ec(0x470)][_0x3876ec(0x313)]());}else VisuMZ['BattleCore'][_0x3876ec(0x524)][_0x3876ec(0x145)](this,_0x47fb6d);}},VisuMZ[_0x3fd7af(0x941)][_0x3fd7af(0x518)]=Sprite_Actor[_0x3fd7af(0x9fd)][_0x3fd7af(0xa84)],Sprite_Actor['prototype']['setBattler']=function(_0x5167a5){const _0x1e598f=_0x3fd7af;VisuMZ['BattleCore'][_0x1e598f(0x518)]['call'](this,_0x5167a5),this[_0x1e598f(0x147)](_0x5167a5);},Sprite_Actor[_0x3fd7af(0x9fd)]['setBattlerBattleCore']=function(_0x1b1a16){const _0x41cd3e=_0x3fd7af;if(!_0x1b1a16)return;if(!this[_0x41cd3e(0x6dd)])return;this['_mainSprite'][_0x41cd3e(0x39b)]['x']=this[_0x41cd3e(0x804)][_0x41cd3e(0x73a)](),this['_mainSprite'][_0x41cd3e(0x39b)]['y']=this[_0x41cd3e(0x804)][_0x41cd3e(0x5dd)](),this['updateShadowVisibility']();},VisuMZ[_0x3fd7af(0x941)][_0x3fd7af(0x16e)]=Sprite_Actor['prototype'][_0x3fd7af(0x2e0)],Sprite_Actor[_0x3fd7af(0x9fd)][_0x3fd7af(0x2e0)]=function(){const _0x545644=_0x3fd7af;VisuMZ[_0x545644(0x941)]['Sprite_Actor_update'][_0x545644(0x145)](this),this[_0x545644(0x804)]&&('jrOKS'===_0x545644(0x749)?(this[_0x545644(0x6c3)](),this['startActorCommandSelection']()):(this[_0x545644(0x66b)](),this[_0x545644(0x9c9)]()));},VisuMZ[_0x3fd7af(0x941)][_0x3fd7af(0x119)]=Sprite_Actor[_0x3fd7af(0x9fd)][_0x3fd7af(0x3db)],Sprite_Actor[_0x3fd7af(0x9fd)]['updateBitmap']=function(){const _0x56bc91=_0x3fd7af;VisuMZ[_0x56bc91(0x941)][_0x56bc91(0x119)][_0x56bc91(0x145)](this);if(this[_0x56bc91(0x6dd)]&&this[_0x56bc91(0x6dd)][_0x56bc91(0x2cf)]&&this[_0x56bc91(0xa9a)]){if('JixAT'!==_0x56bc91(0x836)){if(this[_0x56bc91(0x82d)]===_0x2ba8f6)this['initBattlePortrait']();this['_battlePortrait']=_0xf60441;if(_0x4431b1[_0x56bc91(0x970)]()&&_0x1428ae[_0x56bc91(0x892)]()['includes'](this)){const _0x27603c=_0x2ec89d[_0x56bc91(0x450)]['_statusWindow'];if(_0x27603c)_0x27603c[_0x56bc91(0x1e3)](this);}}else this[_0x56bc91(0x6dd)]['bitmap'][_0x56bc91(0x6a8)]!==this['_battler'][_0x56bc91(0x3bc)]()&&(_0x56bc91(0x94b)!==_0x56bc91(0x194)?this[_0x56bc91(0x6dd)][_0x56bc91(0x2cf)][_0x56bc91(0x6a8)]=this['_battler'][_0x56bc91(0x3bc)]():_0x3d80b8=_0x50b973);}},VisuMZ[_0x3fd7af(0x941)][_0x3fd7af(0x608)]=Sprite_Actor[_0x3fd7af(0x9fd)][_0x3fd7af(0x5f2)],Sprite_Actor[_0x3fd7af(0x9fd)]['updateShadow']=function(){const _0x25b2b0=_0x3fd7af;VisuMZ[_0x25b2b0(0x941)][_0x25b2b0(0x608)]['call'](this),this[_0x25b2b0(0x54b)]();},Sprite_Actor[_0x3fd7af(0x9fd)][_0x3fd7af(0x54b)]=function(){const _0x141125=_0x3fd7af;if(!this[_0x141125(0x6dd)])return;if(!this['_shadowSprite'])return;this[_0x141125(0x168)](),this[_0x141125(0x5bb)]();},Sprite_Actor[_0x3fd7af(0x9fd)][_0x3fd7af(0x66b)]=function(){const _0x2fa81f=_0x3fd7af;this['_stateSprite'][_0x2fa81f(0x1c9)]['x']=0x1/(this[_0x2fa81f(0x1c9)]['x']||0.001),this[_0x2fa81f(0x831)]['scale']['y']=0x1/(this[_0x2fa81f(0x1c9)]['y']||0.001);},Sprite_Actor[_0x3fd7af(0x9fd)][_0x3fd7af(0x9c9)]=function(){const _0x4abd7f=_0x3fd7af;if(!$gameSystem[_0x4abd7f(0x151)]()&&this[_0x4abd7f(0x26b)]===Sprite_Actor){const _0x5bccef=Scene_Battle[_0x4abd7f(0x9fd)][_0x4abd7f(0xafe)]();[_0x4abd7f(0x986),_0x4abd7f(0xfb),'portrait',_0x4abd7f(0x2bf)][_0x4abd7f(0x402)](_0x5bccef)&&(this['opacity']=0x0);}},Sprite_Actor[_0x3fd7af(0x9fd)][_0x3fd7af(0x1f6)]=function(){const _0xbc2673=_0x3fd7af,_0x210183=this[_0xbc2673(0x804)];if(_0x210183){if(_0xbc2673(0x3cc)===_0xbc2673(0x3ce)){if(!_0x5b2105['isSceneBattle']())return;_0x3170df['ConvertParams'](_0x2e0e6a,_0x1dab41);const _0x268213=_0x1566ee['getLastPluginCommandInterpreter'](),_0x1950b5=_0x161e66[_0xbc2673(0x42f)];if(!_0x268213)return;_0x433a68[_0xbc2673(0x82a)]++,_0x5517b2['_target']=_0x1cbfab['_allTargets'][_0x3bf5cb[_0xbc2673(0x82a)]]||null,_0x624464[_0xbc2673(0xad1)]&&_0x1950b5[_0xbc2673(0x989)]()[_0xbc2673(0x306)]()!==_0xbc2673(0x656)&&_0x268213[_0xbc2673(0x9dd)]([_0x1950b5]);}else{const _0x3dc3c7=_0x210183[_0xbc2673(0x3e3)]();if(_0x210183[_0xbc2673(0x12e)]()||_0x210183[_0xbc2673(0x8fa)]()){if(_0xbc2673(0x6f7)===_0xbc2673(0x6f7))this['startMotion'](_0xbc2673(0x8cb));else{const _0x461da3=this[_0xbc2673(0x2c7)]();if(_0x461da3[_0xbc2673(0xb01)]||_0x461da3[_0xbc2673(0x9af)]){const _0x914884=_0x8568e['makeDeepCopy'](_0x461da3);_0x914884[_0xbc2673(0x3ac)]=![],_0x914884['mpDamage']=0x0,this[_0xbc2673(0x223)][_0xbc2673(0x18b)](_0x914884);}if(_0x461da3['hpAffected']){const _0x56f7d3=_0x1662fe[_0xbc2673(0x4ad)](_0x461da3);_0x56f7d3['missed']=![],_0x56f7d3['evaded']=![],_0x56f7d3['mpDamage']=0x0,this[_0xbc2673(0x223)]['push'](_0x56f7d3);}if(_0x461da3['mpDamage']!==0x0){const _0x3788eb=_0x51d834['makeDeepCopy'](_0x461da3);_0x3788eb[_0xbc2673(0xb01)]=![],_0x3788eb[_0xbc2673(0x9af)]=![],_0x3788eb[_0xbc2673(0x3ac)]=![],this[_0xbc2673(0x223)][_0xbc2673(0x18b)](_0x3788eb);}}}else{if(_0x3dc3c7===0x3){if(_0xbc2673(0xed)==='MgQfY')this[_0xbc2673(0x923)]('dead');else return this[_0xbc2673(0x36a)]()[_0xbc2673(0x504)]!=='';}else{if(_0x3dc3c7===0x2)this[_0xbc2673(0x923)](_0xbc2673(0x142));else{if(this[_0xbc2673(0x35b)])_0xbc2673(0x7f4)!==_0xbc2673(0x7f4)?this[_0xbc2673(0x9fa)]()?this[_0xbc2673(0x68a)]():_0x24fb69[_0xbc2673(0x941)]['BattleManager_selectNextCommand'][_0xbc2673(0x145)](this):this[_0xbc2673(0x923)](_0xbc2673(0x362));else{if(_0x210183['isCharging']()){if(_0xbc2673(0x321)===_0xbc2673(0x321))this['startMotion'](_0xbc2673(0x474));else return this[_0xbc2673(0xaf4)]()[_0xbc2673(0x7b9)][_0xbc2673(0x265)](/<JS TARGETS>/i);}else{if(_0x210183[_0xbc2673(0x5fd)]()){if(_0xbc2673(0x983)===_0xbc2673(0x22f))return _0x9ba22b[_0xbc2673(0x6bf)]-_0x3383e1[_0xbc2673(0x6bf)];else this[_0xbc2673(0x923)](_0xbc2673(0xa6c));}else{if(_0x210183['isGuard']()||_0x210183[_0xbc2673(0x912)]())_0xbc2673(0x55b)===_0xbc2673(0x4a3)?(_0x46e330[_0xbc2673(0x941)][_0xbc2673(0x99b)][_0xbc2673(0x145)](this,_0x3fee18,_0x16fe5d),this['_actions'][this[_0xbc2673(0x90f)][_0xbc2673(0x732)]-0x1][_0xbc2673(0x150)]=!![]):this['startMotion'](_0xbc2673(0x2ff));else{if(_0x3dc3c7===0x1)'qMtML'!==_0xbc2673(0x644)?this[_0xbc2673(0x9a3)]():this['startMotion'](_0xbc2673(0x7b2));else{if(_0x210183[_0xbc2673(0x8d0)]())this[_0xbc2673(0x923)](_0xbc2673(0x585));else{if(_0x210183[_0xbc2673(0x70d)]()){if(_0xbc2673(0xa54)!==_0xbc2673(0xb1))this[_0xbc2673(0x923)](_0xbc2673(0x8cb));else{const _0x383165=_0x1a8e04(_0x53843d['$1']);return[_0x2564c3[_0xbc2673(0x8b0)]()['members']()[_0x383165]];}}else _0x210183['currentAction']()?this[_0xbc2673(0x923)](_0xbc2673(0x474)):this[_0xbc2673(0x923)](_0xbc2673(0x8cb));}}}}}}}}}}}},Sprite_Actor['prototype'][_0x3fd7af(0x46b)]=function(){const _0x14ab33=_0x3fd7af,_0x39e399=0xa,_0x5c842d=0x12c*_0x39e399,_0x4b8f6e=0x1e*_0x39e399;this[_0x14ab33(0x627)](_0x5c842d,0x0,_0x4b8f6e);},Sprite_Actor[_0x3fd7af(0x9fd)]['onMoveEnd']=function(){const _0x2185d2=_0x3fd7af;Sprite_Battler[_0x2185d2(0x9fd)][_0x2185d2(0x671)][_0x2185d2(0x145)](this);},Sprite_Actor[_0x3fd7af(0x9fd)]['motionSpeed']=function(){const _0x5c9b47=_0x3fd7af;return Sprite_Battler[_0x5c9b47(0x41d)];},Sprite_Weapon[_0x3fd7af(0x9fd)][_0x3fd7af(0x252)]=function(){const _0x576954=_0x3fd7af;return Sprite_Battler[_0x576954(0x41d)];},Sprite_Actor['prototype'][_0x3fd7af(0xaaf)]=function(){},Sprite_Actor['prototype'][_0x3fd7af(0x4df)]=function(){},Sprite_Actor[_0x3fd7af(0x9fd)][_0x3fd7af(0x8d6)]=function(){const _0x280a16=_0x3fd7af;if(this[_0x280a16(0x48d)]&&++this[_0x280a16(0x51d)]>=this[_0x280a16(0x86c)]()){if(_0x280a16(0x9bd)!=='JhRBS')_0x350607[_0x280a16(0x8e7)]=!![];else{if(this[_0x280a16(0x48d)][_0x280a16(0x785)]){if(_0x280a16(0x8cc)!==_0x280a16(0x25a))this[_0x280a16(0x1fc)]=(this[_0x280a16(0x1fc)]+0x1)%0x4;else{if(!_0x53f752[_0x280a16(0x970)]())return;const _0x2328b4=_0x243fdb[_0x280a16(0x8be)]();if(!_0x2328b4)return;_0x2328b4[_0x280a16(0x992)](_0x280a16(0x158));}}else{if(this[_0x280a16(0x1fc)]<0x2){if(_0x280a16(0x748)!==_0x280a16(0x33d))this['_pattern']++;else{this[_0x280a16(0x704)](_0x38bb58)[_0x280a16(0x265)](/\\I\[(\d+)\]/i);const _0x3ba21b=_0x277269(_0x913a8d['$1'])||0x0,_0x392b96=this[_0x280a16(0x25b)](_0x41b74e),_0x311972=_0x392b96['x']+_0x4fc6b5[_0x280a16(0x63b)]((_0x392b96[_0x280a16(0xad0)]-_0x470e84[_0x280a16(0x542)])/0x2),_0x3105c8=_0x392b96['y']+(_0x392b96['height']-_0x166156[_0x280a16(0x5b6)])/0x2;this[_0x280a16(0x5a3)](_0x3ba21b,_0x311972,_0x3105c8);}}else _0x280a16(0x4b6)!=='sEHtu'?_0x3d837e+=_0x53223a['abs'](_0x1d136d[_0x280a16(0x84d)]):this[_0x280a16(0x1f6)]();}this['_motionCount']=0x0;}}},Sprite_Actor['prototype'][_0x3fd7af(0x58f)]=function(_0x228e7d){const _0x105708=_0x3fd7af;if(_0x228e7d===_0x105708(0x60a))this[_0x105708(0x3c0)]=!![];if(this[_0x105708(0xa9a)]&&this[_0x105708(0xa9a)][_0x105708(0x217)]()){this[_0x105708(0x48d)]=Sprite_Actor['MOTIONS'][_0x105708(0x6f5)];return;}const _0x41a6a4=Sprite_Actor[_0x105708(0x2f4)][_0x228e7d];this[_0x105708(0x48d)]=_0x41a6a4,this[_0x105708(0x51d)]=0x0,this['_pattern']=0x0;},Sprite_Actor[_0x3fd7af(0x9fd)][_0x3fd7af(0xaf)]=function(_0x3e7660){const _0xf82445=_0x3fd7af;this['adjustWeaponSpriteOffset'](),this[_0xf82445(0xaa4)]['setup'](_0x3e7660),this['_actor'][_0xf82445(0x97a)]();},Sprite_Actor[_0x3fd7af(0x9fd)][_0x3fd7af(0x7f1)]=function(){const _0x5b8a66=_0x3fd7af;let _0x35bfec=-0x10,_0x2c0fd1=this['height']*0.5;const _0x383d88=/<SIDEVIEW WEAPON OFFSET:[ ]([\+\-]\d+),[ ]([\+\-]\d+)>/i,_0x2377af=this[_0x5b8a66(0xa9a)][_0x5b8a66(0x492)]()[_0x5b8a66(0x826)](_0x549f78=>_0x549f78&&_0x549f78['note']['match'](_0x383d88)?Number(RegExp['$1']):0x0),_0x347759=this[_0x5b8a66(0xa9a)][_0x5b8a66(0x492)]()['map'](_0x4498b8=>_0x4498b8&&_0x4498b8[_0x5b8a66(0x7b9)][_0x5b8a66(0x265)](_0x383d88)?Number(RegExp['$2']):0x0);_0x35bfec=_0x2377af['reduce']((_0xca6fd7,_0x273ed5)=>_0xca6fd7+_0x273ed5,_0x35bfec),_0x2c0fd1=_0x347759[_0x5b8a66(0x218)]((_0x1bec56,_0x2d396f)=>_0x1bec56+_0x2d396f,_0x2c0fd1),this[_0x5b8a66(0xaa4)]['x']=_0x35bfec,this[_0x5b8a66(0xaa4)]['y']=_0x2c0fd1,this[_0x5b8a66(0xaa4)][_0x5b8a66(0x2e0)]();},Sprite_Weapon[_0x3fd7af(0x9fd)][_0x3fd7af(0xbb)]=function(_0x94a60e){const _0x233e69=_0x3fd7af;this['_weaponImageId']=_0x94a60e,this[_0x233e69(0x93a)]=-0x1,this[_0x233e69(0x1fc)]=0x0,this[_0x233e69(0x5dc)](),this[_0x233e69(0x46c)]();},Sprite_Actor[_0x3fd7af(0x9fd)][_0x3fd7af(0x83d)]=function(){},Sprite_Actor['prototype'][_0x3fd7af(0x9f0)]=function(){const _0x14f031=_0x3fd7af,_0x394f27=VisuMZ[_0x14f031(0x941)][_0x14f031(0xa6b)][_0x14f031(0x844)],_0x38f082=_0x394f27['StepDistanceX'],_0x2b4c7b=_0x394f27['StepDistanceY'],_0x4e8d82=_0x394f27[_0x14f031(0x89f)];this[_0x14f031(0x627)](-_0x38f082,-_0x2b4c7b,_0x4e8d82);},VisuMZ['BattleCore']['Sprite_Actor_updateFrame']=Sprite_Actor[_0x3fd7af(0x9fd)]['updateFrame'],Sprite_Actor[_0x3fd7af(0x9fd)][_0x3fd7af(0x46c)]=function(){const _0x4cf065=_0x3fd7af;this[_0x4cf065(0x15e)](),VisuMZ[_0x4cf065(0x941)][_0x4cf065(0x9b1)][_0x4cf065(0x145)](this);},Sprite_Actor[_0x3fd7af(0x9fd)][_0x3fd7af(0x15e)]=function(){const _0xdf9707=_0x3fd7af;if(this[_0xdf9707(0xa9a)]&&this[_0xdf9707(0xa9a)]['_freezeMotionData']){const _0x3b9a10=this[_0xdf9707(0xa9a)][_0xdf9707(0x84e)];this[_0xdf9707(0x48d)]=Sprite_Actor[_0xdf9707(0x2f4)][_0x3b9a10['motionType']],this[_0xdf9707(0x1fc)]=_0x3b9a10[_0xdf9707(0x817)];const _0x1c0bc8=this['_weaponSprite'];_0x1c0bc8[_0xdf9707(0x229)](_0x3b9a10['weaponImageId'],_0x3b9a10[_0xdf9707(0x817)]),this['adjustWeaponSpriteOffset']();}},Sprite_Weapon[_0x3fd7af(0x9fd)]['freezeFrame']=function(_0x50566d,_0x452f1d){const _0x27b4fe=_0x3fd7af;this['_weaponImageId']=_0x50566d,this[_0x27b4fe(0x93a)]=-Infinity,this[_0x27b4fe(0x1fc)]=_0x452f1d,this['loadBitmap'](),this['updateFrame']();},Sprite_Enemy[_0x3fd7af(0x9fd)][_0x3fd7af(0x2c4)]=function(){const _0x1aff85=_0x3fd7af;Sprite_Battler[_0x1aff85(0x9fd)][_0x1aff85(0x2c4)][_0x1aff85(0x145)](this),this['_enemy']=null,this[_0x1aff85(0x94a)]=![],this[_0x1aff85(0x990)]='',this['_battlerHue']=0x0,this[_0x1aff85(0xab5)]=null,this[_0x1aff85(0x918)]=0x0,this['_shake']=0x0,this[_0x1aff85(0x1b5)](),this[_0x1aff85(0x666)]();},VisuMZ['BattleCore'][_0x3fd7af(0x633)]=Sprite_Enemy[_0x3fd7af(0x9fd)][_0x3fd7af(0x2e0)],Sprite_Enemy[_0x3fd7af(0x9fd)][_0x3fd7af(0x2e0)]=function(){const _0x2d5a5e=_0x3fd7af;VisuMZ['BattleCore'][_0x2d5a5e(0x633)][_0x2d5a5e(0x145)](this),this[_0x2d5a5e(0x168)]();},Sprite_Enemy[_0x3fd7af(0x9fd)][_0x3fd7af(0x1b5)]=function(){const _0x4c7cca=_0x3fd7af;this[_0x4c7cca(0x6dd)]=new Sprite(),this[_0x4c7cca(0x6dd)][_0x4c7cca(0x39b)]['x']=0.5,this['_mainSprite'][_0x4c7cca(0x39b)]['y']=0x1,this['addChild'](this[_0x4c7cca(0x6dd)]),this[_0x4c7cca(0xa40)]();},Sprite_Enemy[_0x3fd7af(0x9fd)][_0x3fd7af(0x5a9)]=function(){const _0x36e7b5=_0x3fd7af;return this[_0x36e7b5(0xa0e)]||this[_0x36e7b5(0x6dd)]||this;},Sprite_Enemy[_0x3fd7af(0x9fd)][_0x3fd7af(0x5dc)]=function(_0x525c61){const _0x3a0609=_0x3fd7af;this['bitmap']=new Bitmap(0x1,0x1);if(this[_0x3a0609(0x5db)]()){if('wxmIS'!=='wxmIS'){_0xa443da&&_0xd02430&&_0x13fc36[_0x3a0609(0x7b9)]&&this[_0x3a0609(0x3a8)](_0x4e7362[_0x3a0609(0x7b9)]);const _0x49e52b=_0x5ac032[_0x58a670];if(_0x49e52b){let _0x26fb8e=_0x5d3291['createTroopNote'](_0x49e52b['id']);this[_0x3a0609(0x3a8)](_0x26fb8e);}}else{const _0x3930ff=this[_0x3a0609(0x574)][_0x3a0609(0x36a)]();this['bitmap']=new Bitmap(_0x3930ff[_0x3a0609(0xad0)],_0x3930ff[_0x3a0609(0x26a)]),this[_0x3a0609(0x6dd)][_0x3a0609(0x2cf)]=new Bitmap(0x1,0x1);}}else{if($gameSystem[_0x3a0609(0x151)]()){if(_0x3a0609(0x316)===_0x3a0609(0x9a2)){if(!_0x2c790d[_0x3a0609(0x970)]())return;_0x10b6d6[_0x3a0609(0x187)](_0x4d0620,_0x5a4aba);const _0x57830e=_0x105cb4[_0x3a0609(0x4bd)],_0xa7f673=_0x28ec2c[_0x3a0609(0x2b6)]&&_0x2f6324[_0x3a0609(0x4e2)];_0x57830e[_0x3a0609(0x2d6)](_0x3352c7['Text']),_0xa7f673&&_0x4ef184[_0x3a0609(0x4e2)]&&_0x580406[_0x3a0609(0x250)](_0x36f763['Text']||'',_0x5316f5['CombatLogIcon']||0x0);}else this[_0x3a0609(0x6dd)]['bitmap']=ImageManager['loadSvEnemy'](_0x525c61),this[_0x3a0609(0x6dd)][_0x3a0609(0x2cf)]['addLoadListener'](this[_0x3a0609(0xa19)][_0x3a0609(0x769)](this));}else{if(_0x3a0609(0x7ae)!==_0x3a0609(0x670))this[_0x3a0609(0x6dd)][_0x3a0609(0x2cf)]=ImageManager[_0x3a0609(0x48f)](_0x525c61),this[_0x3a0609(0x6dd)]['bitmap'][_0x3a0609(0x251)](this[_0x3a0609(0xa19)][_0x3a0609(0x769)](this));else{return _0x5029cf['BattleCore'][_0x3a0609(0x2c9)][_0x3a0609(0x145)](this);;}}}},Sprite_Enemy[_0x3fd7af(0x9fd)]['createEmptyBitmap']=function(){const _0x4bd7b4=_0x3fd7af,_0x2cca3f=this[_0x4bd7b4(0x6dd)][_0x4bd7b4(0x2cf)];_0x2cca3f&&(this['bitmap']=new Bitmap(_0x2cca3f[_0x4bd7b4(0xad0)],_0x2cca3f[_0x4bd7b4(0x26a)]));},VisuMZ[_0x3fd7af(0x941)][_0x3fd7af(0x1ec)]=Sprite_Enemy[_0x3fd7af(0x9fd)][_0x3fd7af(0x878)],Sprite_Enemy[_0x3fd7af(0x9fd)][_0x3fd7af(0x878)]=function(_0xb586fc){const _0xda0efb=_0x3fd7af;this['_mainSprite']&&this[_0xda0efb(0x6dd)][_0xda0efb(0x878)](_0xb586fc);},VisuMZ['BattleCore'][_0x3fd7af(0x5eb)]=Sprite_Enemy[_0x3fd7af(0x9fd)][_0x3fd7af(0x8c5)],Sprite_Enemy[_0x3fd7af(0x9fd)][_0x3fd7af(0x8c5)]=function(){const _0x222565=_0x3fd7af;if(this[_0x222565(0x944)]())VisuMZ[_0x222565(0x941)]['Sprite_Enemy_initVisibility'][_0x222565(0x145)](this);else{this[_0x222565(0x94a)]=!this[_0x222565(0x574)][_0x222565(0x9cb)]();if(!this['_appeared']){if(_0x222565(0xa3f)!==_0x222565(0x6a5))this[_0x222565(0x824)]=0x0;else{this[_0x222565(0x517)]=0x14,this[_0x222565(0xf6)][_0x222565(0x2cf)]=_0x30fb5d;_0x508744[_0x222565(0x450)]['isRightInputMode']()?(this['_borderPortraitSprite']['x']=0x0,this[_0x222565(0x8c3)]=_0x3db273[_0x222565(0x821)](_0x3128a1['width']/0x2)):(this[_0x222565(0xf6)]['x']=this['width'],this[_0x222565(0x8c3)]=this[_0x222565(0xad0)]*0x3/0x4);this[_0x222565(0xf6)][_0x222565(0x824)]=0x0,this[_0x222565(0xf6)]['y']=this['y']+this['height'];const _0xbf61f9=_0x5df225[_0x222565(0xe9)]();_0xbf61f9&&(this[_0x222565(0x8c3)]+=_0xbf61f9['getBattlePortraitOffsetX'](),this[_0x222565(0xf6)]['y']+=_0xbf61f9[_0x222565(0x113)]());}}}},VisuMZ['BattleCore'][_0x3fd7af(0x98f)]=Sprite_Enemy[_0x3fd7af(0x9fd)][_0x3fd7af(0x650)],Sprite_Enemy['prototype'][_0x3fd7af(0x650)]=function(){const _0x4bc24c=_0x3fd7af;if(this['allowCollapse']())VisuMZ[_0x4bc24c(0x941)][_0x4bc24c(0x98f)]['call'](this);},Sprite_Enemy[_0x3fd7af(0x9fd)][_0x3fd7af(0x46c)]=function(){const _0x40fc59=_0x3fd7af;Sprite_Battler[_0x40fc59(0x9fd)][_0x40fc59(0x46c)]['call'](this);const _0x43fa91=this['mainSprite']()||this;if(!_0x43fa91)return;if(!_0x43fa91[_0x40fc59(0x2cf)]){if('istMU'!==_0x40fc59(0x18c))_0x43fa91[_0x40fc59(0x2cf)]=new Bitmap(this[_0x40fc59(0xad0)],this[_0x40fc59(0x26a)]);else{const _0x13ec55=this[_0x40fc59(0xac2)][_0x40fc59(0x2cf)];this[_0x40fc59(0xac2)][_0x40fc59(0x4e1)](0x0,0x0,_0x13ec55[_0x40fc59(0xad0)],_0x13ec55[_0x40fc59(0x26a)]);}}if(this[_0x40fc59(0xab5)]===_0x40fc59(0x5df)){if(_0x40fc59(0x727)===_0x40fc59(0x727))this[_0x40fc59(0x6dd)][_0x40fc59(0x4e1)](0x0,0x0,this[_0x40fc59(0x6dd)][_0x40fc59(0xad0)],this[_0x40fc59(0x918)]);else{const _0x458ffe=_0x38fd1e['BattleCore'][_0x40fc59(0xa6b)][_0x40fc59(0x9de)],_0x344860=this[_0x40fc59(0xa9a)]&&this['_battler']['isActor']()?0x1:-0x1,_0x42090e=this[_0x40fc59(0x62e)]-this[_0x40fc59(0x2e7)]+_0x344860*_0x458ffe[_0x40fc59(0x286)],_0x23dc31=this[_0x40fc59(0x69d)]-this['_homeY']+_0x344860*_0x458ffe['FlinchDistanceY'],_0x1e3a48=_0x458ffe['FlinchDuration'];this[_0x40fc59(0x627)](_0x42090e,_0x23dc31,_0x1e3a48);}}else{if('WfVMw'!==_0x40fc59(0x443)){if(!_0x4f3fb9[_0x40fc59(0x970)]())return;if(!_0x9a5b6f['VisuMZ_3_ActSeqCamera'])return;_0x2a6f12[_0x40fc59(0x187)](_0x28f0e4,_0x3eb99a);const _0x1154df=_0x56bd70[_0x40fc59(0x8be)](),_0x21090f=_0x16e611['WaitForCamera'];_0x1989e7[_0x40fc59(0x1e9)](_0x1efc6[_0x40fc59(0x592)],_0x191c1c[_0x40fc59(0x4ee)],_0x125de3[_0x40fc59(0x200)],_0x142517[_0x40fc59(0x9f6)]);if(_0x21090f)_0x1154df[_0x40fc59(0x992)](_0x40fc59(0x899));}else _0x43fa91[_0x40fc59(0x4e1)](0x0,0x0,_0x43fa91[_0x40fc59(0x2cf)][_0x40fc59(0xad0)],this['bitmap']['height']);}},VisuMZ[_0x3fd7af(0x941)][_0x3fd7af(0x8fd)]=Sprite_Enemy[_0x3fd7af(0x9fd)][_0x3fd7af(0x6cb)],Sprite_Enemy[_0x3fd7af(0x9fd)][_0x3fd7af(0x6cb)]=function(){const _0x435a2c=_0x3fd7af;if(this['allowCollapse']())VisuMZ[_0x435a2c(0x941)][_0x435a2c(0x8fd)]['call'](this);},Sprite_Enemy[_0x3fd7af(0x9fd)][_0x3fd7af(0x10b)]=function(){const _0x3d3aea=_0x3fd7af;return Sprite_Battler[_0x3d3aea(0x9fd)][_0x3d3aea(0x10b)][_0x3d3aea(0x145)](this);},VisuMZ[_0x3fd7af(0x941)][_0x3fd7af(0x893)]=Sprite_Enemy['prototype'][_0x3fd7af(0x66b)],Sprite_Enemy['prototype'][_0x3fd7af(0x66b)]=function(){const _0x35d6e5=_0x3fd7af;VisuMZ[_0x35d6e5(0x941)]['Sprite_Enemy_updateStateSprite']['call'](this),this[_0x35d6e5(0x239)]();},Sprite_Enemy[_0x3fd7af(0x9fd)][_0x3fd7af(0x239)]=function(){const _0x54932c=_0x3fd7af,_0x440517=VisuMZ[_0x54932c(0x941)][_0x54932c(0xa6b)][_0x54932c(0x520)];if(_0x440517[_0x54932c(0x31f)]&&!_0x440517[_0x54932c(0x371)]){if(_0x54932c(0x711)!==_0x54932c(0x955)){this[_0x54932c(0x25f)][_0x54932c(0x824)]=0x0;return;}else return this[_0x54932c(0x8f1)]();}this[_0x54932c(0x25f)]['x']=0x0,this[_0x54932c(0x25f)]['x']+=this[_0x54932c(0xa9a)][_0x54932c(0x117)](),this['_stateIconSprite']['y']=-this[_0x54932c(0x2cf)][_0x54932c(0x26a)]-this[_0x54932c(0x25f)][_0x54932c(0x26a)],this['_stateIconSprite']['y']+=this[_0x54932c(0xa9a)][_0x54932c(0x4ac)](),this[_0x54932c(0x25f)][_0x54932c(0x1c9)]['x']=0x1/(this[_0x54932c(0x1c9)]['x']||0.001),this[_0x54932c(0x25f)][_0x54932c(0x1c9)]['y']=0x1/(this[_0x54932c(0x1c9)]['y']||0.001),this[_0x54932c(0x5db)]()&&(this[_0x54932c(0x6bc)][_0x54932c(0x831)][_0x54932c(0x1c9)]['x']=-0x1/(this[_0x54932c(0x1c9)]['x']||0.001),this['_svBattlerSprite'][_0x54932c(0x831)][_0x54932c(0x1c9)]['y']=0x1/(this[_0x54932c(0x1c9)]['y']||0.001));},VisuMZ[_0x3fd7af(0x941)][_0x3fd7af(0xa0)]=Sprite_Enemy[_0x3fd7af(0x9fd)][_0x3fd7af(0xa84)],Sprite_Enemy[_0x3fd7af(0x9fd)][_0x3fd7af(0xa84)]=function(_0x25caa8){const _0x18ecf5=_0x3fd7af;VisuMZ[_0x18ecf5(0x941)]['Sprite_Enemy_setBattler']['call'](this,_0x25caa8),this[_0x18ecf5(0xa1b)](_0x25caa8);},Sprite_Enemy[_0x3fd7af(0x9fd)][_0x3fd7af(0xa1b)]=function(_0x2dc7c9){const _0x117984=_0x3fd7af;!this[_0x117984(0x6bc)]&&(this[_0x117984(0x6bc)]=new Sprite_SvEnemy(_0x2dc7c9),this[_0x117984(0xa40)]()),this[_0x117984(0x6bc)]['setBattler'](_0x2dc7c9);},Sprite_Enemy[_0x3fd7af(0x9fd)][_0x3fd7af(0x5db)]=function(){const _0x28a69b=_0x3fd7af;return this['_enemy']&&this['_enemy'][_0x28a69b(0x5db)]();},Sprite_Enemy['prototype'][_0x3fd7af(0x944)]=function(){const _0x458d90=_0x3fd7af;if(this[_0x458d90(0x5db)]())return this[_0x458d90(0x574)][_0x458d90(0x944)]();else{if(_0x458d90(0x5fc)!==_0x458d90(0x5fc)){const _0x491b99=_0x6dab5c['SkillsStatesCore']['Settings'][_0x458d90(0x2be)];_0x491b99&&_0x491b99[_0x458d90(0x89b)]===![]&&this[_0x458d90(0x647)](0x1);}else return!![];}},Sprite_Enemy['prototype'][_0x3fd7af(0x1f6)]=function(){const _0x10d7a6=_0x3fd7af;if(this['hasSvBattler']()){if(_0x10d7a6(0x93e)!=='msUDy')return _0x25ae3b['BattleCore'][_0x10d7a6(0xa6b)][_0x10d7a6(0x9de)][_0x10d7a6(0x5b4)];else this[_0x10d7a6(0x6bc)][_0x10d7a6(0x1f6)]();}},Sprite_Enemy['prototype'][_0x3fd7af(0x58f)]=function(_0x2567e0){const _0x1ac62e=_0x3fd7af;if(this[_0x1ac62e(0x5db)]())this[_0x1ac62e(0x6bc)][_0x1ac62e(0x58f)](_0x2567e0);},Sprite_Enemy[_0x3fd7af(0x9fd)][_0x3fd7af(0xaf)]=function(_0x26ced7){const _0x4e4bb9=_0x3fd7af;if(this[_0x4e4bb9(0x5db)]())this[_0x4e4bb9(0x6bc)][_0x4e4bb9(0xaf)](_0x26ced7);},Sprite_Enemy[_0x3fd7af(0x9fd)][_0x3fd7af(0x9f0)]=function(){const _0x414f86=_0x3fd7af,_0x34de08=VisuMZ[_0x414f86(0x941)][_0x414f86(0xa6b)][_0x414f86(0x844)],_0x4f0245=_0x34de08['StepDistanceX'],_0x1d232a=_0x34de08[_0x414f86(0x92c)],_0x394437=_0x34de08[_0x414f86(0x89f)];this[_0x414f86(0x627)](_0x4f0245,_0x1d232a,_0x394437);};function Sprite_SvEnemy(){const _0x30f384=_0x3fd7af;this[_0x30f384(0x709)](...arguments);}Sprite_SvEnemy[_0x3fd7af(0x9fd)]=Object['create'](Sprite_Actor['prototype']),Sprite_SvEnemy[_0x3fd7af(0x9fd)]['constructor']=Sprite_SvEnemy,Sprite_SvEnemy['prototype']['initialize']=function(_0x136800){const _0x580481=_0x3fd7af;Sprite_Actor[_0x580481(0x9fd)]['initialize'][_0x580481(0x145)](this,_0x136800),this['scale']['x']=-0x1,this[_0x580481(0x831)][_0x580481(0x1c9)]['x']=-0x1;},Sprite_SvEnemy[_0x3fd7af(0x9fd)]['createShadowSprite']=function(){},Sprite_SvEnemy[_0x3fd7af(0x9fd)][_0x3fd7af(0x477)]=function(){},Sprite_SvEnemy[_0x3fd7af(0x9fd)][_0x3fd7af(0x930)]=function(_0xbefe55){},Sprite_SvEnemy[_0x3fd7af(0x9fd)][_0x3fd7af(0x5f2)]=function(){},Sprite_SvEnemy[_0x3fd7af(0x9fd)][_0x3fd7af(0x5bb)]=function(){},Sprite_SvEnemy[_0x3fd7af(0x9fd)]['updateStateSprite']=function(){const _0x3d5260=_0x3fd7af;this[_0x3d5260(0x831)]['visible']=![];},Sprite_SvEnemy[_0x3fd7af(0x9fd)][_0x3fd7af(0x3db)]=function(){const _0x876edb=_0x3fd7af;Sprite_Battler['prototype'][_0x876edb(0x3db)][_0x876edb(0x145)](this);const _0x520c3b=this['_actor'][_0x876edb(0x4c5)]();if(this[_0x876edb(0x990)]!==_0x520c3b){if(_0x876edb(0x845)===_0x876edb(0x845))this['_battlerName']=_0x520c3b,this[_0x876edb(0x6dd)][_0x876edb(0x2cf)]=ImageManager[_0x876edb(0xace)](_0x520c3b);else{const _0x186229=/<BYPASS DAMAGE CAP>/i;if(this[_0x876edb(0xaf4)]()[_0x876edb(0x7b9)][_0x876edb(0x265)](_0x186229))return!![];if(this['subject']()[_0x876edb(0x492)]()[_0x876edb(0xb8)](_0x24555f=>_0x24555f&&_0x24555f[_0x876edb(0x7b9)][_0x876edb(0x265)](_0x186229)))return!![];return!_0x57929b[_0x876edb(0x941)][_0x876edb(0xa6b)][_0x876edb(0x81f)][_0x876edb(0x454)];}}this[_0x876edb(0x6dd)]&&this[_0x876edb(0x6dd)][_0x876edb(0x2cf)]&&this[_0x876edb(0xa9a)]&&('mdIXm'!==_0x876edb(0x296)?this[_0x876edb(0x6dd)]['bitmap'][_0x876edb(0x6a8)]!==this[_0x876edb(0xa9a)][_0x876edb(0x3bc)]()&&(this[_0x876edb(0x6dd)][_0x876edb(0x2cf)][_0x876edb(0x6a8)]=this[_0x876edb(0xa9a)][_0x876edb(0x3bc)]()):this['_mainSprite'][_0x876edb(0x878)](_0x2effb2));},Sprite_SvEnemy[_0x3fd7af(0x9fd)][_0x3fd7af(0x46b)]=function(){},Sprite_SvEnemy[_0x3fd7af(0x9fd)][_0x3fd7af(0x627)]=function(_0x368e4b,_0x1f9cb6,_0x34fa35){const _0x5a2ae5=_0x3fd7af;if(this['parent'])this[_0x5a2ae5(0x62c)]['startMove'](_0x368e4b,_0x1f9cb6,_0x34fa35);},Sprite_SvEnemy[_0x3fd7af(0x9fd)][_0x3fd7af(0x1f6)]=function(){const _0x300fd8=_0x3fd7af,_0x34977a=this[_0x300fd8(0x804)];if(_0x34977a){if('fdGnn'!==_0x300fd8(0xa9c)){const _0x2f96a2=_0x34977a[_0x300fd8(0x3e3)]();if(_0x34977a[_0x300fd8(0x12e)]()||_0x34977a[_0x300fd8(0x8fa)]()){if(_0x300fd8(0x16a)!==_0x300fd8(0x30b))this[_0x300fd8(0x923)](_0x300fd8(0x8cb));else return _0x2d22cd['BattleCore']['Game_Action_isForOpponent']['call'](this);}else{if(_0x2f96a2===0x3)_0x300fd8(0x358)!==_0x300fd8(0xa3d)?this['startMotion'](_0x300fd8(0x6f5)):this['_pattern']=(this[_0x300fd8(0x1fc)]+0x1)%0x4;else{if(_0x2f96a2===0x2)_0x300fd8(0x6b4)===_0x300fd8(0x1d6)?_0x237184[_0x300fd8(0x941)]['createJS'](_0x2bf586,_0x54c897):this['startMotion'](_0x300fd8(0x142));else{if(_0x34977a[_0x300fd8(0x5fd)]())this['startMotion']('chant');else{if(_0x34977a[_0x300fd8(0x404)]()||_0x34977a['isGuardWaiting']()){if(_0x300fd8(0x330)===_0x300fd8(0x2b9)){if(_0x10ef08[_0x300fd8(0x887)]())_0x75b556[_0x300fd8(0x712)](_0x1db1e1);return _0x1bb173[_0x300fd8(0x941)][_0x300fd8(0x2d9)][_0x300fd8(0x145)](this);}else this[_0x300fd8(0x923)]('guard');}else{if(_0x2f96a2===0x1)this['startMotion'](_0x300fd8(0x7b2));else{if(_0x34977a['isDying']())this['startMotion']('dying');else _0x34977a[_0x300fd8(0x70d)]()?this[_0x300fd8(0x923)](_0x300fd8(0x8cb)):this[_0x300fd8(0x923)](_0x34977a['svBattlerData']()[_0x300fd8(0x924)]||_0x300fd8(0x8cb));}}}}}}}else _0x2dd789+=_0x2ef060,_0x37aca2+=_0x7fb1c;}},Sprite_SvEnemy[_0x3fd7af(0x9fd)]['inHomePosition']=function(){const _0x109aa8=_0x3fd7af;if(this['parent'])return this[_0x109aa8(0x62c)][_0x109aa8(0x126)]===0x0&&this[_0x109aa8(0x62c)]['_offsetY']===0x0;else{if(_0x109aa8(0x114)!==_0x109aa8(0x982))return!![];else{if(_0x204dcb[_0x109aa8(0xa5b)]()['angleDuration']>0x0)return!![];this[_0x109aa8(0x954)]='';}}},Sprite_SvEnemy[_0x3fd7af(0x9fd)]['updateFlip']=function(){},VisuMZ[_0x3fd7af(0x941)][_0x3fd7af(0x8ba)]=Sprite_Animation['prototype'][_0x3fd7af(0x29e)],Sprite_Animation['prototype']['targetSpritePosition']=function(_0x4ebe17){const _0x3ba4fa=_0x3fd7af;return _0x4ebe17[_0x3ba4fa(0xa0e)]?this[_0x3ba4fa(0x925)](_0x4ebe17):VisuMZ[_0x3ba4fa(0x941)][_0x3ba4fa(0x8ba)][_0x3ba4fa(0x145)](this,_0x4ebe17);},Sprite_Animation[_0x3fd7af(0x9fd)][_0x3fd7af(0x925)]=function(_0x2e5534){const _0x24cb54=_0x3fd7af;let _0x36c1ac=_0x2e5534['x'],_0x3a1e8b=_0x2e5534['y'],_0x42f0b3=_0x2e5534[_0x24cb54(0x26a)],_0x274c81=_0x2e5534['_distortionSprite'][_0x24cb54(0x1c9)]['y'];_0x2e5534['x']=_0x2e5534[_0x24cb54(0x62e)]+_0x2e5534[_0x24cb54(0x92a)](),_0x2e5534['y']=_0x2e5534[_0x24cb54(0x69d)]+_0x2e5534[_0x24cb54(0x682)](),_0x2e5534['height']*=_0x274c81;let _0x2a7754=VisuMZ[_0x24cb54(0x941)][_0x24cb54(0x8ba)][_0x24cb54(0x145)](this,_0x2e5534);return _0x2e5534['x']=_0x36c1ac,_0x2e5534['y']=_0x3a1e8b,_0x2e5534[_0x24cb54(0x26a)]=_0x42f0b3,_0x2a7754;},Sprite_Damage[_0x3fd7af(0x9fd)][_0x3fd7af(0xc1)]=function(_0x277f5f){const _0xe20e58=_0x3fd7af,_0x4f4181=_0x277f5f[_0xe20e58(0x378)]()||_0x277f5f[_0xe20e58(0x2c7)]();if(_0x4f4181[_0xe20e58(0xb01)]||_0x4f4181['evaded'])this[_0xe20e58(0x56c)]=0x0,this[_0xe20e58(0x9c2)]();else{if(_0x4f4181[_0xe20e58(0x3ac)])this[_0xe20e58(0x56c)]=_0x4f4181[_0xe20e58(0x84d)]>=0x0?0x0:0x1,this[_0xe20e58(0x4a0)](_0x4f4181[_0xe20e58(0x84d)]);else _0x277f5f[_0xe20e58(0x7fd)]()&&_0x4f4181[_0xe20e58(0x430)]!==0x0&&(_0xe20e58(0x112)===_0xe20e58(0x112)?(this['_colorType']=_0x4f4181['mpDamage']>=0x0?0x2:0x3,this[_0xe20e58(0x4a0)](_0x4f4181[_0xe20e58(0x430)])):!_0x3f4349['isDeathStateAffected']()&&(_0x189b39[_0xe20e58(0x3c7)](_0x933974[0x2],_0x1f384a[0x3]),_0x4b0921[_0xe20e58(0x3c7)](_0x1d7c7a)));}_0x4f4181[_0xe20e58(0xa77)]&&(_0xe20e58(0x4c7)===_0xe20e58(0x4c7)?this['setupCriticalEffect']():(_0x9027de[_0xe20e58(0x941)][_0xe20e58(0x53b)][_0xe20e58(0x145)](this,_0x58f66f,_0x44129a),this[_0xe20e58(0x9a3)]()));},Sprite_Damage[_0x3fd7af(0x9fd)]['setup']=function(_0x1aff16){},Sprite_Damage[_0x3fd7af(0x9fd)][_0x3fd7af(0x4a0)]=function(_0xc306e5){const _0x3f4c0d=_0x3fd7af;let _0x558e95=this['createString'](_0xc306e5);const _0x2ed19d=this[_0x3f4c0d(0x854)](),_0x27cafa=Math['floor'](_0x2ed19d*0.75);for(let _0x2e45d7=0x0;_0x2e45d7<_0x558e95['length'];_0x2e45d7++){if('oIGxY'===_0x3f4c0d(0x70e)){const _0xe738d8=this['createChildSprite'](_0x27cafa,_0x2ed19d);_0xe738d8['bitmap'][_0x3f4c0d(0x9d0)](_0x558e95[_0x2e45d7],0x0,0x0,_0x27cafa,_0x2ed19d,_0x3f4c0d(0x8ff)),_0xe738d8['x']=(_0x2e45d7-(_0x558e95['length']-0x1)/0x2)*_0x27cafa,_0xe738d8['dy']=-_0x2e45d7;}else this['wait']();}},Sprite_Damage[_0x3fd7af(0x9fd)][_0x3fd7af(0xa08)]=function(_0x297004){const _0x2834ce=_0x3fd7af;let _0x56825a=Math['abs'](_0x297004)['toString']();this[_0x2834ce(0x3ad)]()&&(_0x56825a=VisuMZ['GroupDigits'](_0x56825a));const _0x2c1f93=VisuMZ[_0x2834ce(0x941)]['Settings'][_0x2834ce(0x81f)];let _0x4b7a54='',_0x48f409='';switch(this[_0x2834ce(0x56c)]){case 0x0:_0x4b7a54=_0x2c1f93['hpDamageFmt']||_0x2834ce(0x1b9),_0x48f409=TextManager['hp'];if(_0x297004===0x0)_0x4b7a54='%1';break;case 0x1:_0x4b7a54=_0x2c1f93['hpHealingFmt']||_0x2834ce(0x36d),_0x48f409=TextManager['hp'];break;case 0x2:_0x4b7a54=_0x2c1f93[_0x2834ce(0x5ac)]||_0x2834ce(0x4d3),_0x48f409=TextManager['mp'];break;case 0x3:_0x4b7a54=_0x2c1f93[_0x2834ce(0x97b)]||_0x2834ce(0xabb),_0x48f409=TextManager['mp'];break;}return _0x4b7a54['format'](_0x56825a,_0x48f409)[_0x2834ce(0x306)]();},Sprite_Damage[_0x3fd7af(0x9fd)][_0x3fd7af(0x3ad)]=function(){const _0x4156ba=_0x3fd7af;return Imported['VisuMZ_0_CoreEngine']?VisuMZ['CoreEngine'][_0x4156ba(0xa6b)][_0x4156ba(0x3d1)][_0x4156ba(0x215)]:![];},Sprite_Damage[_0x3fd7af(0x9fd)][_0x3fd7af(0x7db)]=function(){const _0x451749=_0x3fd7af,_0x1c19ea=VisuMZ['BattleCore'][_0x451749(0xa6b)]['Damage'];this[_0x451749(0x855)]=_0x1c19ea['CriticalColor']['slice'](0x0),this['_flashDuration']=_0x1c19ea[_0x451749(0x655)];},Sprite_Damage[_0x3fd7af(0x9fd)][_0x3fd7af(0x86b)]=function(_0x550279,_0x56e145){const _0x4f06bd=_0x3fd7af;this['_flashColor']=_0x56e145[_0x4f06bd(0x7cf)]||[0x0,0x0,0x0,0x0],this[_0x4f06bd(0x855)]=JsonEx[_0x4f06bd(0x4ad)](this['_flashColor']),this[_0x4f06bd(0xacd)]=_0x56e145[_0x4f06bd(0x528)]||0x0;const _0x231fee=this[_0x4f06bd(0x854)](),_0x463d8b=Math[_0x4f06bd(0x63b)](_0x231fee*0x1e),_0x2159e2=this[_0x4f06bd(0x67f)](_0x463d8b,_0x231fee);_0x2159e2[_0x4f06bd(0x2cf)][_0x4f06bd(0xaab)]=ColorManager[_0x4f06bd(0x10d)](_0x56e145[_0x4f06bd(0xaab)]),_0x2159e2[_0x4f06bd(0x2cf)][_0x4f06bd(0x9d0)](_0x550279,0x0,0x0,_0x463d8b,_0x231fee,_0x4f06bd(0x8ff)),_0x2159e2['dy']=0x0;},Sprite_Damage[_0x3fd7af(0x9fd)][_0x3fd7af(0x3c3)]=function(_0x1d861f,_0x537228,_0x603d44){const _0x3ef1b4=_0x3fd7af,_0x52badb=Math[_0x3ef1b4(0x305)](this[_0x3ef1b4(0x854)](),ImageManager['iconHeight']),_0x471ea0=Math[_0x3ef1b4(0x63b)](_0x52badb*0x1e),_0x5a6a67=this[_0x3ef1b4(0x67f)](_0x471ea0,_0x52badb),_0x37d85a=ImageManager[_0x3ef1b4(0x542)]/0x2,_0x302deb=_0x5a6a67['bitmap'][_0x3ef1b4(0x7c3)](_0x537228+'\x20');_0x5a6a67[_0x3ef1b4(0x2cf)]['textColor']=ColorManager[_0x3ef1b4(0x10d)](_0x603d44[_0x3ef1b4(0xaab)]),_0x5a6a67['bitmap'][_0x3ef1b4(0x9d0)](_0x537228,_0x37d85a,0x0,_0x471ea0-_0x37d85a,_0x52badb,_0x3ef1b4(0x8ff));const _0x1d2fc1=Math[_0x3ef1b4(0x819)]((_0x52badb-ImageManager['iconHeight'])/0x2),_0x365fe1=_0x471ea0/0x2-ImageManager[_0x3ef1b4(0x542)]-_0x302deb/0x2+_0x37d85a/0x2,_0x1b3280=ImageManager['loadSystem'](_0x3ef1b4(0x3e7)),_0x1e1d2e=ImageManager[_0x3ef1b4(0x542)],_0x42a3e9=ImageManager['iconHeight'],_0x4e3c99=_0x1d861f%0x10*_0x1e1d2e,_0x104dd5=Math['floor'](_0x1d861f/0x10)*_0x42a3e9;_0x5a6a67[_0x3ef1b4(0x2cf)]['blt'](_0x1b3280,_0x4e3c99,_0x104dd5,_0x1e1d2e,_0x42a3e9,_0x365fe1,_0x1d2fc1),this[_0x3ef1b4(0x855)]=_0x603d44[_0x3ef1b4(0x7cf)]||[0x0,0x0,0x0,0x0],this[_0x3ef1b4(0x855)]=JsonEx[_0x3ef1b4(0x4ad)](this[_0x3ef1b4(0x855)]),this[_0x3ef1b4(0xacd)]=_0x603d44[_0x3ef1b4(0x528)]||0x0,_0x5a6a67['dy']=0x0;},VisuMZ['BattleCore'][_0x3fd7af(0x98c)]=Sprite_StateIcon[_0x3fd7af(0x9fd)][_0x3fd7af(0x46c)],Sprite_StateIcon[_0x3fd7af(0x9fd)][_0x3fd7af(0x46c)]=function(){const _0x4e71b2=_0x3fd7af;VisuMZ[_0x4e71b2(0x941)]['Sprite_StateIcon_updateFrame'][_0x4e71b2(0x145)](this),this[_0x4e71b2(0x824)]=this[_0x4e71b2(0x532)]>0x0?0xff:0x0;},VisuMZ[_0x3fd7af(0x941)][_0x3fd7af(0x9b2)]=Sprite_Weapon[_0x3fd7af(0x9fd)][_0x3fd7af(0x5dc)],Sprite_Weapon['prototype'][_0x3fd7af(0x5dc)]=function(){const _0x5f1310=_0x3fd7af;VisuMZ[_0x5f1310(0x941)]['Sprite_Weapon_loadBitmap']['call'](this),this[_0x5f1310(0x2cf)]&&(this[_0x5f1310(0x2cf)]['smooth']=VisuMZ[_0x5f1310(0x941)][_0x5f1310(0xa6b)][_0x5f1310(0x9de)][_0x5f1310(0x267)]);};function Sprite_HpGauge(){const _0x2fbfd4=_0x3fd7af;this[_0x2fbfd4(0x709)](...arguments);}Sprite_HpGauge[_0x3fd7af(0x9fd)]=Object[_0x3fd7af(0x56f)](Sprite_Gauge[_0x3fd7af(0x9fd)]),Sprite_HpGauge['prototype']['constructor']=Sprite_HpGauge,Sprite_HpGauge[_0x3fd7af(0x9fd)][_0x3fd7af(0x709)]=function(){const _0x292903=_0x3fd7af;Sprite_Gauge['prototype'][_0x292903(0x709)][_0x292903(0x145)](this);},Sprite_HpGauge['prototype']['gaugeX']=function(){return 0x0;},Sprite_HpGauge[_0x3fd7af(0x9fd)][_0x3fd7af(0x6ef)]=function(){const _0x114628=_0x3fd7af;this[_0x114628(0x2cf)]['clear']();const _0x37711c=this[_0x114628(0x482)]();!isNaN(_0x37711c)&&this[_0x114628(0x907)]();};function Sprite_EnemyName(){const _0x4adb5f=_0x3fd7af;this[_0x4adb5f(0x709)](...arguments);}function _0x499e(_0x47857d,_0x13a6d0){const _0x21dbfe=_0x21db();return _0x499e=function(_0x499e13,_0x75cfcb){_0x499e13=_0x499e13-0x9e;let _0x2b7f2d=_0x21dbfe[_0x499e13];return _0x2b7f2d;},_0x499e(_0x47857d,_0x13a6d0);}Sprite_EnemyName[_0x3fd7af(0x9fd)]=Object[_0x3fd7af(0x56f)](Sprite_Name['prototype']),Sprite_EnemyName[_0x3fd7af(0x9fd)][_0x3fd7af(0x26b)]=Sprite_EnemyName,Sprite_EnemyName[_0x3fd7af(0x9fd)]['initialize']=function(){const _0x56bf35=_0x3fd7af;Sprite_Name['prototype'][_0x56bf35(0x709)][_0x56bf35(0x145)](this),this[_0x56bf35(0x391)]();},Sprite_EnemyName['prototype'][_0x3fd7af(0x2c4)]=function(){const _0x27a5ad=_0x3fd7af;Sprite_Name[_0x27a5ad(0x9fd)][_0x27a5ad(0x2c4)]['call'](this),this['opacity']=0x0,this[_0x27a5ad(0x82b)]=null,this[_0x27a5ad(0x39b)]['x']=0.5,this[_0x27a5ad(0x39b)]['y']=0x0;},Sprite_EnemyName[_0x3fd7af(0x9fd)][_0x3fd7af(0x391)]=function(){const _0x39c4b0=_0x3fd7af;VisuMZ[_0x39c4b0(0x941)][_0x39c4b0(0xa6b)]['Enemy'][_0x39c4b0(0x31f)]&&(_0x39c4b0(0xcc)==='GRDmR'?(this[_0x39c4b0(0xa39)](_0x39c4b0(0x6c4)),_0x7fc384[_0x39c4b0(0x941)][_0x39c4b0(0x14c)][_0x39c4b0(0x145)](this),this[_0x39c4b0(0x7f0)]('Defeat')):(this[_0x39c4b0(0x25f)]=new Sprite_StateIcon(),this[_0x39c4b0(0x96c)](this[_0x39c4b0(0x25f)])));},Sprite_EnemyName[_0x3fd7af(0x9fd)][_0x3fd7af(0x1a0)]=function(){return Graphics['boxWidth'];},Sprite_EnemyName['prototype']['bitmapHeight']=function(){const _0x264554=_0x3fd7af;return this[_0x264554(0x82f)]=this[_0x264554(0x82f)]||Window_Base[_0x264554(0x9fd)][_0x264554(0x41c)]()||0x24,this['_lineHeight']*0x4;},Sprite_EnemyName[_0x3fd7af(0x9fd)][_0x3fd7af(0x854)]=function(){const _0x1376e5=_0x3fd7af;return VisuMZ[_0x1376e5(0x941)]['Settings'][_0x1376e5(0x520)][_0x1376e5(0x5d9)]||$gameSystem[_0x1376e5(0x465)]();},Sprite_EnemyName[_0x3fd7af(0x9fd)][_0x3fd7af(0x82c)]=function(_0xc348f5){const _0x5a1305=_0x3fd7af;this[_0x5a1305(0x82b)]=_0xc348f5;},Sprite_EnemyName[_0x3fd7af(0x9fd)][_0x3fd7af(0x2e0)]=function(){const _0x4d36e2=_0x3fd7af;Sprite_Name[_0x4d36e2(0x9fd)]['update'][_0x4d36e2(0x145)](this),this[_0x4d36e2(0x717)](),this[_0x4d36e2(0x700)](),this[_0x4d36e2(0x433)](),this[_0x4d36e2(0x632)]();},Sprite_EnemyName[_0x3fd7af(0x9fd)][_0x3fd7af(0x6ef)]=function(){const _0x5d9d1d=_0x3fd7af;this['_cacheTextWidth']=undefined;const _0x48327e=this[_0x5d9d1d(0x504)](),_0x3d46a0=this[_0x5d9d1d(0x1a0)](),_0x38325f=Window_Base['prototype']['lineHeight']();this[_0x5d9d1d(0xafc)](),this['bitmap'][_0x5d9d1d(0x8b9)](),this[_0x5d9d1d(0x2cf)][_0x5d9d1d(0x9d0)](_0x48327e,0x0,0x0,_0x3d46a0,_0x38325f,'center');},Sprite_EnemyName[_0x3fd7af(0x9fd)]['updateLink']=function(){const _0x6d7482=_0x3fd7af;if(!this[_0x6d7482(0x82b)])return;if(this[_0x6d7482(0xa9a)]!==this[_0x6d7482(0x82b)][_0x6d7482(0xa9a)]){if(_0x6d7482(0xae7)===_0x6d7482(0x257))return![];else this[_0x6d7482(0xbb)](this[_0x6d7482(0x82b)][_0x6d7482(0xa9a)]);}},Sprite_EnemyName[_0x3fd7af(0x9fd)][_0x3fd7af(0x700)]=function(){const _0x3695fc=_0x3fd7af;if(!this[_0x3695fc(0x82b)])return;this['_lineHeight']=this[_0x3695fc(0x82f)]||Window_Base['prototype'][_0x3695fc(0x41c)](),this['x']=this['_linkedSprite']['_baseX'],this['y']=this[_0x3695fc(0x82b)]['_baseY']-this[_0x3695fc(0x82f)]*0.5;const _0x411d84=VisuMZ[_0x3695fc(0x941)][_0x3695fc(0xa6b)][_0x3695fc(0x520)];this['x']+=_0x411d84[_0x3695fc(0x27a)]||0x0,this['y']+=_0x411d84[_0x3695fc(0xa48)]||0x0;},Sprite_EnemyName[_0x3fd7af(0x9fd)]['updateAttachedSprites']=function(){const _0x2202d9=_0x3fd7af;this[_0x2202d9(0x7e5)]();},Sprite_EnemyName[_0x3fd7af(0x9fd)][_0x3fd7af(0x7e5)]=function(){const _0x1a2eb2=_0x3fd7af;if(!this['_stateIconSprite'])return;if(this['_battler']!==this['_stateIconSprite']['_battler']){if(_0x1a2eb2(0x8bf)!=='eufUM')return _0x2c9ee2['BattleCore']['Settings']['Damage'][_0x1a2eb2(0x6b7)][_0x1a2eb2(0x145)](this,_0x31dfea,_0x32d59b);else this[_0x1a2eb2(0x25f)]['setup'](this[_0x1a2eb2(0xa9a)]);}const _0x48c44c=this['textWidth']();this[_0x1a2eb2(0x82f)]=this['_lineHeight']||Window_Base[_0x1a2eb2(0x9fd)][_0x1a2eb2(0x41c)](),this[_0x1a2eb2(0x25f)]['x']=Math[_0x1a2eb2(0x819)]((_0x48c44c+ImageManager[_0x1a2eb2(0x542)])/0x2)+0x8,this['_stateIconSprite']['y']=this[_0x1a2eb2(0x82f)]/0x2;const _0x4244f9=VisuMZ[_0x1a2eb2(0x941)][_0x1a2eb2(0xa6b)]['Enemy'];this[_0x1a2eb2(0x25f)]['x']+=_0x4244f9[_0x1a2eb2(0x526)]||0x0,this['_stateIconSprite']['y']+=_0x4244f9[_0x1a2eb2(0x31e)]||0x0;},Sprite_EnemyName[_0x3fd7af(0x9fd)][_0x3fd7af(0x632)]=function(){const _0x2b4248=_0x3fd7af,_0x3e7af7=this['visibilityState']();if(_0x3e7af7&&this['opacity']<0xff)'nwdNC'==='ZCElP'?this[_0x2b4248(0x6ab)][this[_0x2b4248(0x605)]]=_0x92600d:this['opacity']+=0x10;else{if(!_0x3e7af7&&this[_0x2b4248(0x824)]>0x0){if(_0x2b4248(0x701)===_0x2b4248(0x4d7)){if(!_0x327782['isSideView']())return;const _0x13d6e2=this[_0x2b4248(0x181)]();if(!_0x13d6e2)return;_0x13d6e2[_0x2b4248(0x8ad)](_0xc276e4,_0x146f9b,_0x180137,_0x43b855);}else this[_0x2b4248(0x824)]-=0x10;}}},Sprite_EnemyName[_0x3fd7af(0x9fd)][_0x3fd7af(0x192)]=function(){const _0x122a5b=_0x3fd7af;if(this['isAlwaysHidden']())return![];else{if(!this[_0x122a5b(0xa9a)]){if('paFrr'==='paFrr')return![];else _0x363aa3=_0x2e979f>=_0x3e8e20?_0x31df60:_0x4973aa;}else{if(this['_battler'][_0x122a5b(0x217)]()){if(_0x122a5b(0x8c9)!=='uILOM'){if(this[_0x122a5b(0x26b)]['name']==='Sprite_SvEnemy')return;if(this['_opacityDuration']<=0x0)return;const _0x4d07a5=this[_0x122a5b(0xa90)],_0x533fa5=this['_opacityWholeDuration'],_0x301bcb=this[_0x122a5b(0x3b7)];_0x30a7ad[_0x122a5b(0x28a)]?this[_0x122a5b(0x824)]=this[_0x122a5b(0x9f1)](this[_0x122a5b(0x824)],this[_0x122a5b(0x5b5)],_0x4d07a5,_0x533fa5,_0x301bcb):this[_0x122a5b(0x824)]=(this['opacity']*(_0x4d07a5-0x1)+this[_0x122a5b(0x5b5)])/_0x4d07a5;this['_opacityDuration']--;if(this['_opacityDuration']<=0x0)this[_0x122a5b(0x506)]();}else return![];}else{if(!this['_battler'][_0x122a5b(0x8ac)]())return![];else{if(this[_0x122a5b(0x4cf)]()){if(_0x122a5b(0x281)===_0x122a5b(0x281))return!![];else this[_0x122a5b(0x52a)]=this['_targetFloatHeight'];}else{if(this[_0x122a5b(0xaba)]())return _0x122a5b(0x6ed)!==_0x122a5b(0x9d6)?!![]:this[_0x122a5b(0x493)];else{if(this['isIncludedInEnemyWindow']()){if(_0x122a5b(0x54c)!==_0x122a5b(0x54c))_0x83d57e[_0x122a5b(0x1e9)](0x0,0x0,_0x1f43df['Duration'],_0x368ed7[_0x122a5b(0x9f6)]);else return!![];}else{if(this['opacity']>0x0){if('RYxop'!=='RYxop')this[_0x122a5b(0x4a8)](_0x292229,_0x1f7224);else return![];}}}}}}}}},Sprite_EnemyName[_0x3fd7af(0x9fd)][_0x3fd7af(0x461)]=function(){const _0x5e064f=_0x3fd7af;return VisuMZ['BattleCore']['Settings'][_0x5e064f(0x520)][_0x5e064f(0x766)];},Sprite_EnemyName['prototype'][_0x3fd7af(0x4cf)]=function(){return![];},Sprite_EnemyName['prototype'][_0x3fd7af(0xaba)]=function(){const _0x16618a=_0x3fd7af;return VisuMZ[_0x16618a(0x941)]['Settings']['Enemy']['NameAlwaysVisible'];},Sprite_EnemyName['prototype']['isIncludedInEnemyWindow']=function(){const _0x210ed0=_0x3fd7af;return VisuMZ['BattleCore'][_0x210ed0(0xa6b)][_0x210ed0(0x520)][_0x210ed0(0x726)]?this[_0x210ed0(0xa9a)][_0x210ed0(0xa66)]():SceneManager['_scene'][_0x210ed0(0x873)]&&SceneManager['_scene'][_0x210ed0(0x873)][_0x210ed0(0x246)]&&SceneManager[_0x210ed0(0x450)]['_enemyWindow'][_0x210ed0(0x397)][_0x210ed0(0x402)](this[_0x210ed0(0xa9a)]);},Sprite_EnemyName[_0x3fd7af(0x9fd)][_0x3fd7af(0x6af)]=function(){const _0x7e19ad=_0x3fd7af;if(!this[_0x7e19ad(0xa9a)])return 0x0;if(this['_cacheTextWidth'])return this[_0x7e19ad(0x987)];const _0x690a9b=this[_0x7e19ad(0x504)]();return this[_0x7e19ad(0xafc)](),this['_cacheTextWidth']=this[_0x7e19ad(0x2cf)][_0x7e19ad(0x7c3)](_0x690a9b)||0x1,this[_0x7e19ad(0x987)];},VisuMZ[_0x3fd7af(0x941)][_0x3fd7af(0x7e6)]=Sprite_Battleback[_0x3fd7af(0x9fd)][_0x3fd7af(0xaa5)],Sprite_Battleback[_0x3fd7af(0x9fd)][_0x3fd7af(0xaa5)]=function(){const _0x1d5830=_0x3fd7af,_0x8266f9=VisuMZ['BattleCore']['Settings']['Battleback'];if(!_0x8266f9)return _0x1d5830(0x8fc)==='TetOv'?VisuMZ[_0x1d5830(0x941)]['Sprite_Battleback_adjustPosition'][_0x1d5830(0x145)](this):![];const _0x37b132=String(_0x8266f9[_0x1d5830(0x27f)])||'MZ';switch(_0x37b132){case'MZ':VisuMZ[_0x1d5830(0x941)][_0x1d5830(0x7e6)][_0x1d5830(0x145)](this);break;case'1:1':this['adjustPosition_1for1']();break;case _0x1d5830(0xa29):this[_0x1d5830(0x89d)]();break;case _0x1d5830(0x3bf):this[_0x1d5830(0x4d4)]();break;case _0x1d5830(0xa4e):this[_0x1d5830(0x5ec)]();break;}},Sprite_Battleback[_0x3fd7af(0x9fd)]['adjustPosition_1for1']=function(){const _0x429c12=_0x3fd7af;this[_0x429c12(0xad0)]=Graphics['width'],this[_0x429c12(0x26a)]=Graphics[_0x429c12(0x26a)];const _0x4c6f6d=0x1;this[_0x429c12(0x1c9)]['x']=_0x4c6f6d,this['scale']['y']=_0x4c6f6d,this['x']=0x0,this['y']=0x0;},Sprite_Battleback['prototype'][_0x3fd7af(0x89d)]=function(){const _0x1a2b0d=_0x3fd7af;this[_0x1a2b0d(0xad0)]=Graphics['width'],this['height']=Graphics[_0x1a2b0d(0x26a)];const _0x5deb7f=this[_0x1a2b0d(0xad0)]/this['bitmap'][_0x1a2b0d(0xad0)],_0x4278c3=this[_0x1a2b0d(0x26a)]/this[_0x1a2b0d(0x2cf)]['height'],_0x1e99aa=Math[_0x1a2b0d(0x305)](_0x5deb7f,_0x4278c3);this[_0x1a2b0d(0x1c9)]['x']=_0x1e99aa,this[_0x1a2b0d(0x1c9)]['y']=_0x1e99aa,this['x']=(Graphics[_0x1a2b0d(0xad0)]-this['width'])/0x2,this['y']=Graphics[_0x1a2b0d(0x26a)]-this[_0x1a2b0d(0x26a)];},Sprite_Battleback['prototype'][_0x3fd7af(0x4d4)]=function(){const _0x3020ea=_0x3fd7af;this[_0x3020ea(0xad0)]=Graphics['width'],this[_0x3020ea(0x26a)]=Graphics[_0x3020ea(0x26a)];const _0x38820e=Math[_0x3020ea(0x88d)](0x1,this['width']/this[_0x3020ea(0x2cf)][_0x3020ea(0xad0)]),_0xd095f8=Math['min'](0x1,this[_0x3020ea(0x26a)]/this[_0x3020ea(0x2cf)][_0x3020ea(0x26a)]),_0x5876a6=Math[_0x3020ea(0x305)](_0x38820e,_0xd095f8);this[_0x3020ea(0x1c9)]['x']=_0x5876a6,this[_0x3020ea(0x1c9)]['y']=_0x5876a6,this['x']=(Graphics[_0x3020ea(0xad0)]-this[_0x3020ea(0xad0)])/0x2,this['y']=Graphics[_0x3020ea(0x26a)]-this[_0x3020ea(0x26a)];},Sprite_Battleback[_0x3fd7af(0x9fd)][_0x3fd7af(0x5ec)]=function(){const _0x3ec283=_0x3fd7af;this['width']=Graphics[_0x3ec283(0xad0)],this[_0x3ec283(0x26a)]=Graphics[_0x3ec283(0x26a)];const _0x2eef19=Math[_0x3ec283(0x305)](0x1,this[_0x3ec283(0xad0)]/this['bitmap']['width']),_0x38d841=Math[_0x3ec283(0x305)](0x1,this[_0x3ec283(0x26a)]/this[_0x3ec283(0x2cf)][_0x3ec283(0x26a)]),_0x48cb1f=Math[_0x3ec283(0x305)](_0x2eef19,_0x38d841);this[_0x3ec283(0x1c9)]['x']=_0x48cb1f,this[_0x3ec283(0x1c9)]['y']=_0x48cb1f,this['x']=(Graphics[_0x3ec283(0xad0)]-this['width'])/0x2,this['y']=Graphics[_0x3ec283(0x26a)]-this['height'];},Spriteset_Battle[_0x3fd7af(0x9fd)][_0x3fd7af(0xaee)]=function(){const _0x96b3a0=_0x3fd7af;if(!$gameSystem[_0x96b3a0(0x151)]())return![];return![];},Spriteset_Battle[_0x3fd7af(0x9fd)][_0x3fd7af(0x966)]=function(){return 0x0;},Spriteset_Battle[_0x3fd7af(0x9fd)][_0x3fd7af(0x38e)]=function(){return 0x0;},VisuMZ['BattleCore']['Spriteset_Battle_createLowerLayer']=Spriteset_Battle['prototype'][_0x3fd7af(0x253)],Spriteset_Battle['prototype'][_0x3fd7af(0x253)]=function(){const _0x1f9423=_0x3fd7af;VisuMZ[_0x1f9423(0x941)][_0x1f9423(0x858)][_0x1f9423(0x145)](this),this[_0x1f9423(0x340)](),this['createUIContainer'](),this[_0x1f9423(0x686)]();},VisuMZ[_0x3fd7af(0x941)]['Spriteset_Battle_update']=Spriteset_Battle[_0x3fd7af(0x9fd)][_0x3fd7af(0x2e0)],Spriteset_Battle[_0x3fd7af(0x9fd)][_0x3fd7af(0x2e0)]=function(){const _0x1ca7bc=_0x3fd7af;VisuMZ[_0x1ca7bc(0x941)][_0x1ca7bc(0x689)][_0x1ca7bc(0x145)](this),this[_0x1ca7bc(0x835)]();},Spriteset_Battle[_0x3fd7af(0x9fd)][_0x3fd7af(0x340)]=function(){const _0x13d381=_0x3fd7af;this[_0x13d381(0xa02)]=new Weather(),this['_battleField']['addChild'](this[_0x13d381(0xa02)]);},Spriteset_Battle[_0x3fd7af(0x9fd)][_0x3fd7af(0x835)]=function(){const _0x5cc517=_0x3fd7af;this['_weather'][_0x5cc517(0x28f)]=$gameScreen[_0x5cc517(0x52f)](),this['_weather'][_0x5cc517(0x1f7)]=$gameScreen[_0x5cc517(0x3cf)]();},Game_Interpreter[_0x3fd7af(0x9fd)][_0x3fd7af(0x1ad)]=function(_0x3d665f){const _0x1ddee7=_0x3fd7af;$gameScreen[_0x1ddee7(0x43a)](_0x3d665f[0x0],_0x3d665f[0x1],_0x3d665f[0x2]);if(_0x3d665f[0x3])this[_0x1ddee7(0x474)](_0x3d665f[0x2]);return!![];},VisuMZ[_0x3fd7af(0x941)][_0x3fd7af(0x174)]=Game_Interpreter['prototype'][_0x3fd7af(0xafb)],Game_Interpreter[_0x3fd7af(0x9fd)][_0x3fd7af(0xafb)]=function(_0x2bb859){const _0x5b4258=_0x3fd7af;return SceneManager[_0x5b4258(0x970)]()?(SceneManager[_0x5b4258(0x450)]['_spriteset'][_0x5b4258(0x128)](_0x2bb859[0x0],_0x2bb859[0x1]),!![]):VisuMZ[_0x5b4258(0x941)][_0x5b4258(0x174)]['call'](this,_0x2bb859);},Spriteset_Battle[_0x3fd7af(0x9fd)][_0x3fd7af(0x4af)]=function(_0x85cfb6,_0x51032b){const _0x4c65a1=_0x3fd7af;_0x85cfb6[_0x4c65a1(0x2cf)]=_0x51032b;},Spriteset_Battle[_0x3fd7af(0x9fd)][_0x3fd7af(0x128)]=function(_0x297ca4,_0x16be6b){const _0x191763=_0x3fd7af;_0x297ca4=_0x297ca4||'',_0x16be6b=_0x16be6b||'';_0x297ca4===''&&_0x16be6b===''&&(_0x297ca4=this[_0x191763(0xa17)][_0x191763(0x2ec)](),_0x16be6b=this[_0x191763(0x502)][_0x191763(0x9d3)]());const _0x128f51=ImageManager[_0x191763(0x7d9)](_0x297ca4),_0xc9038d=ImageManager[_0x191763(0x18f)](_0x16be6b);_0x128f51[_0x191763(0x251)](this[_0x191763(0x243)]['bind'](this,this[_0x191763(0xa17)],this[_0x191763(0x502)],_0x128f51,_0xc9038d));},Spriteset_Battle[_0x3fd7af(0x9fd)]['updateBattlebackBitmap1']=function(_0x5aa290,_0x20f8c5,_0x742624,_0x7bf1f9){const _0x3f6feb=_0x3fd7af;_0x7bf1f9[_0x3f6feb(0x251)](this['updateBattlebackBitmap2'][_0x3f6feb(0x769)](this,_0x5aa290,_0x20f8c5,_0x742624,_0x7bf1f9));},Spriteset_Battle[_0x3fd7af(0x9fd)][_0x3fd7af(0x9f)]=function(_0x1ad63d,_0x20b93c,_0x436d5c,_0x28c976){const _0x3fe8b6=_0x3fd7af;_0x1ad63d[_0x3fe8b6(0x2cf)]=_0x436d5c,_0x20b93c[_0x3fe8b6(0x2cf)]=_0x28c976,_0x1ad63d['adjustPosition'](),_0x20b93c[_0x3fe8b6(0xaa5)]();},VisuMZ[_0x3fd7af(0x941)][_0x3fd7af(0x3d4)]=Spriteset_Battle[_0x3fd7af(0x9fd)]['createBattleField'],Spriteset_Battle[_0x3fd7af(0x9fd)]['createBattleField']=function(){const _0x52a45f=_0x3fd7af;VisuMZ[_0x52a45f(0x941)][_0x52a45f(0x3d4)][_0x52a45f(0x145)](this),this[_0x52a45f(0x645)]();},Spriteset_Battle['prototype'][_0x3fd7af(0x645)]=function(){const _0x284b96=_0x3fd7af;this[_0x284b96(0x337)](),this[_0x284b96(0x6dc)](),this[_0x284b96(0x46e)](),this[_0x284b96(0x97c)]();},Spriteset_Battle[_0x3fd7af(0x9fd)][_0x3fd7af(0x337)]=function(){const _0x1532cf=_0x3fd7af;this[_0x1532cf(0x57a)]=new Sprite(),this[_0x1532cf(0x17a)][_0x1532cf(0x96c)](this[_0x1532cf(0x57a)]);},Spriteset_Battle[_0x3fd7af(0x9fd)]['createAnimationContainer']=function(){const _0x53f883=_0x3fd7af;this[_0x53f883(0x7eb)]=new Sprite(),this[_0x53f883(0x17a)][_0x53f883(0x96c)](this[_0x53f883(0x7eb)]);},Spriteset_Battle[_0x3fd7af(0x9fd)][_0x3fd7af(0x46e)]=function(){const _0x4eb262=_0x3fd7af;this[_0x4eb262(0x5ee)]=new Sprite(),this['_damageContainer']['x']=this['_battleField']['x'],this[_0x4eb262(0x5ee)]['y']=this['_battleField']['y'],this['addChild'](this[_0x4eb262(0x5ee)]);},Spriteset_Battle['prototype'][_0x3fd7af(0x97c)]=function(){const _0xec0e12=_0x3fd7af;if(!this[_0xec0e12(0xaee)]())return;this[_0xec0e12(0x57a)][_0xec0e12(0x1c9)]['x']=-0x1,this['_battlerContainer']['x']=this[_0xec0e12(0x17a)][_0xec0e12(0xad0)],this[_0xec0e12(0x7eb)][_0xec0e12(0x1c9)]['x']=-0x1,this[_0xec0e12(0x7eb)]['x']=this[_0xec0e12(0x17a)][_0xec0e12(0xad0)],this['_damageContainer'][_0xec0e12(0x1c9)]['x']=-0x1,this[_0xec0e12(0x5ee)]['x']=this[_0xec0e12(0x17a)]['x']+this[_0xec0e12(0x17a)][_0xec0e12(0xad0)];},Spriteset_Battle[_0x3fd7af(0x9fd)][_0x3fd7af(0xa12)]=function(){const _0x3f61ab=_0x3fd7af;Imported['VisuMZ_0_CoreEngine']&&this[_0x3f61ab(0x373)]()&&this[_0x3f61ab(0x94c)]();const _0x55ab0b=$gameTroop[_0x3f61ab(0xec)](),_0x2bbc89=[];for(const _0x3108ed of _0x55ab0b){if(_0x3f61ab(0x4c2)!==_0x3f61ab(0x19c))_0x2bbc89[_0x3f61ab(0x18b)](new Sprite_Enemy(_0x3108ed));else return this[_0x3f61ab(0x36a)]()[_0x3f61ab(0x275)];}_0x2bbc89['sort'](this[_0x3f61ab(0x906)]['bind'](this));for(const _0x2808c8 of _0x2bbc89){if(_0x3f61ab(0x3cb)==='iNxuX'){if(!_0x3c1822[_0x3f61ab(0x970)]())return;_0x1c3f51[_0x3f61ab(0x187)](_0x1b32b7,_0x633e6b);const _0x92a3b1=_0x278b15['getLastPluginCommandInterpreter'](),_0x5a36fc=_0x174adc[_0x3f61ab(0x2dd)],_0x2378fa=_0x3376a0[_0x3f61ab(0x470)],_0x269cad=_0xcc7f4f[_0x3f61ab(0x232)]?_0x1548e7[_0x3f61ab(0x232)]['slice'](0x0):[],_0x32a6e4=_0x526348[_0x3f61ab(0x4bd)];if(!_0x92a3b1||!_0x5a36fc||!_0x2378fa)return;if(!_0x5a36fc['item']())return;if(_0x54363f[_0x3f61ab(0x4c1)])_0x32a6e4[_0x3f61ab(0x18b)]('applyImmortal',_0x2378fa,_0x269cad,![]);if(_0x2bab14['WaitForNewLine'])_0x32a6e4[_0x3f61ab(0x18b)](_0x3f61ab(0x363));if(_0x539fe1[_0x3f61ab(0x270)])_0x32a6e4['push'](_0x3f61ab(0x5f4));if(_0x4dd50f[_0x3f61ab(0x272)])_0x32a6e4[_0x3f61ab(0x18b)](_0x3f61ab(0x8b9));if(_0x417c92[_0x3f61ab(0x610)])_0x32a6e4['push'](_0x3f61ab(0xadc),_0x2378fa);if(_0x396c55[_0x3f61ab(0x1a1)])_0x32a6e4['push'](_0x3f61ab(0x798));_0x92a3b1['setWaitMode'](_0x3f61ab(0x548));}else this[_0x3f61ab(0x57a)][_0x3f61ab(0x96c)](_0x2808c8);}this[_0x3f61ab(0x4ed)]=_0x2bbc89;},Spriteset_Battle['prototype'][_0x3fd7af(0x45b)]=function(){const _0xf44582=_0x3fd7af;this['_actorSprites']=[];for(let _0xbb89b1=0x0;_0xbb89b1<$gameParty[_0xf44582(0x55f)]();_0xbb89b1++){const _0x28fe96=$gameParty[_0xf44582(0x892)]()[_0xbb89b1],_0x33179e=new Sprite_Actor();_0x33179e[_0xf44582(0x9d1)](_0x28fe96),_0x33179e[_0xf44582(0xa84)](_0x28fe96),_0x33179e[_0xf44582(0x2e0)](),this['_actorSprites']['push'](_0x33179e),this[_0xf44582(0x57a)][_0xf44582(0x96c)](_0x33179e);}},Spriteset_Battle[_0x3fd7af(0x9fd)][_0x3fd7af(0x654)]=function(_0x168193,_0x8f0db5,_0x5c5651,_0x57b646){const _0x167a64=_0x3fd7af,_0x42f828=this['isMVAnimation'](_0x8f0db5),_0x311858=new(_0x42f828?Sprite_AnimationMV:Sprite_Animation)(),_0x524b7b=this[_0x167a64(0x9ff)](_0x168193);this[_0x167a64(0x806)](_0x168193[0x0])&&(_0x5c5651=!_0x5c5651),_0x311858[_0x167a64(0xada)]=_0x168193,_0x311858[_0x167a64(0xbb)](_0x524b7b,_0x8f0db5,_0x5c5651,_0x57b646),this[_0x167a64(0xd1)](_0x311858);},Spriteset_Battle[_0x3fd7af(0x9fd)][_0x3fd7af(0xd1)]=function(_0xe5b418){const _0x2cbf18=_0x3fd7af;if(this[_0x2cbf18(0x961)](_0xe5b418))'sKsQE'!==_0x2cbf18(0x3fa)?this[_0x2cbf18(0x620)]()[_0x2cbf18(0x96c)](_0xe5b418):(_0x5ae8e9['BattleCore'][_0x2cbf18(0x9e3)][_0x2cbf18(0x145)](this,_0x451810),this[_0x2cbf18(0x301)](_0x5b2987));else{if(_0x2cbf18(0x398)==='cIcgy')return _0xb532d2[_0x2cbf18(0x941)][_0x2cbf18(0xa6b)][_0x2cbf18(0x9de)]['AnchorX'];else this[_0x2cbf18(0x7eb)][_0x2cbf18(0x96c)](_0xe5b418);}this[_0x2cbf18(0x1aa)][_0x2cbf18(0x18b)](_0xe5b418);},Spriteset_Battle[_0x3fd7af(0x9fd)]['isAnimationShownOnBattlePortrait']=function(_0x755e8c){const _0x1e018e=_0x3fd7af;if(!_0x755e8c)return![];if(!_0x755e8c['_animation'])return![];if(_0x755e8c['_animation']['displayType']!==0x0)return![];if(!_0x755e8c[_0x1e018e(0xada)][0x0])return![];if(_0x755e8c[_0x1e018e(0xada)][0x0][_0x1e018e(0x91d)]&&!_0x755e8c['targetObjects'][0x0][_0x1e018e(0x91d)]())return![];if($gameSystem[_0x1e018e(0x151)]())return![];if(!this[_0x1e018e(0x620)]())return![];const _0x439b19=Window_BattleStatus[_0x1e018e(0x9fd)][_0x1e018e(0xafe)]();return[_0x1e018e(0x833),'xp']['contains'](_0x439b19);},Spriteset_Battle['prototype'][_0x3fd7af(0x620)]=function(){const _0x6964b1=_0x3fd7af;if(!SceneManager[_0x6964b1(0x450)])return null;if(!SceneManager[_0x6964b1(0x450)][_0x6964b1(0x6bb)])return null;if(!SceneManager[_0x6964b1(0x450)]['_statusWindow']['_effectsContainer'])return null;return SceneManager[_0x6964b1(0x450)]['_statusWindow'][_0x6964b1(0x1de)];},Spriteset_Battle[_0x3fd7af(0x9fd)][_0x3fd7af(0x13c)]=function(_0x2b378a){const _0x6ebbc9=_0x3fd7af;this[_0x6ebbc9(0x2b5)](_0x2b378a);for(const _0x1b2732 of _0x2b378a[_0x6ebbc9(0xada)]){if(_0x6ebbc9(0x43b)!=='HZzoR'){if(!_0x551f08['isSideView']())return;const _0x3a27a6=this[_0x6ebbc9(0x181)]();if(!_0x3a27a6)return;this[_0x6ebbc9(0x91d)]()&&(_0x74c9a1*=-0x1,_0x38c8df*=-0x1),_0x3a27a6[_0x6ebbc9(0x739)](_0x2868e4,_0x15d571,_0x3d0e52,_0x14ea8d);}else _0x1b2732[_0x6ebbc9(0x2f9)]&&_0x1b2732[_0x6ebbc9(0x2f9)]();}_0x2b378a[_0x6ebbc9(0x1c5)]();},Spriteset_Battle[_0x3fd7af(0x9fd)][_0x3fd7af(0x2b5)]=function(_0x2011d0){const _0x2e83b5=_0x3fd7af;this[_0x2e83b5(0x1aa)][_0x2e83b5(0x861)](_0x2011d0),this[_0x2e83b5(0x961)](_0x2011d0)?_0x2e83b5(0xae0)===_0x2e83b5(0x85c)?this['requestMotion'](_0x2e83b5(0x96d)):this['battleStatusWindowAnimationContainer']()[_0x2e83b5(0x5f7)](_0x2011d0):_0x2e83b5(0xa6e)!==_0x2e83b5(0xa6e)?this[_0x2e83b5(0x7bb)]():this[_0x2e83b5(0x7eb)][_0x2e83b5(0x5f7)](_0x2011d0);},VisuMZ[_0x3fd7af(0x941)][_0x3fd7af(0x735)]=Spriteset_Battle['prototype'][_0x3fd7af(0x767)],Spriteset_Battle['prototype'][_0x3fd7af(0x767)]=function(){const _0x54dccb=_0x3fd7af;VisuMZ[_0x54dccb(0x941)][_0x54dccb(0x735)]['call'](this),this[_0x54dccb(0x863)]();},Spriteset_Battle[_0x3fd7af(0x9fd)]['updateBattlerContainer']=function(){const _0x15fd8a=_0x3fd7af;this[_0x15fd8a(0x57a)][_0x15fd8a(0x1bc)][_0x15fd8a(0x65c)](this[_0x15fd8a(0x678)][_0x15fd8a(0x769)](this)),this[_0x15fd8a(0xa65)]();},Spriteset_Battle[_0x3fd7af(0x9fd)]['compareBattlerSprites']=function(_0x2630e5,_0x487ccf){const _0xcd36fc=_0x3fd7af;if(VisuMZ[_0xcd36fc(0x941)][_0xcd36fc(0xa6b)]['Actor'][_0xcd36fc(0x43e)]){if(_0xcd36fc(0x7d0)===_0xcd36fc(0x7d0)){if(_0x2630e5[_0xcd36fc(0xa9a)]&&_0x487ccf[_0xcd36fc(0xa9a)]){if(_0x2630e5[_0xcd36fc(0xa9a)][_0xcd36fc(0x91d)]()&&_0x487ccf[_0xcd36fc(0xa9a)][_0xcd36fc(0x7e8)]()){if(_0xcd36fc(0x816)!==_0xcd36fc(0x48c))return 0x1;else _0x430898['prototype'][_0xcd36fc(0x709)][_0xcd36fc(0x145)](this),this['createAttachedSprites']();}else{if(_0x487ccf[_0xcd36fc(0xa9a)][_0xcd36fc(0x91d)]()&&_0x2630e5[_0xcd36fc(0xa9a)][_0xcd36fc(0x7e8)]())return-0x1;}}}else{let _0x465218=_0x286b50(_0x66c875['$1']);while(_0x465218--){const _0x2e2028=_0x6aaafc[_0xcd36fc(0x545)](0x2)===0x0?this['opponentsUnit']():this[_0xcd36fc(0x8b0)]();_0x2f5e03['push'](_0x2e2028[_0xcd36fc(0x943)]());}return this['repeatTargets'](_0x4e569a);}}if(_0x2630e5[_0xcd36fc(0x69d)]!==_0x487ccf[_0xcd36fc(0x69d)]){if('lPdQv'===_0xcd36fc(0x110))return _0x2630e5['_baseY']-_0x487ccf[_0xcd36fc(0x69d)];else{let _0xf34929=_0x56c46a[_0xcd36fc(0x941)][_0xcd36fc(0x96f)][_0xcd36fc(0x145)](this);return this[_0xcd36fc(0x5f3)]&&(_0xf34929*=this[_0xcd36fc(0x5f3)]()),_0x4803e7[_0xcd36fc(0x821)](_0xf34929);}}else{if(_0xcd36fc(0xa7d)===_0xcd36fc(0xa7d))return _0x487ccf[_0xcd36fc(0x6bf)]-_0x2630e5[_0xcd36fc(0x6bf)];else this[_0xcd36fc(0x992)]('jump');}},Spriteset_Battle[_0x3fd7af(0x9fd)][_0x3fd7af(0xa65)]=function(){const _0x65a111=_0x3fd7af;if(!VisuMZ['BattleCore'][_0x65a111(0xa6b)][_0x65a111(0x9de)][_0x65a111(0x23c)])return;const _0x19281c=BattleManager[_0x65a111(0x470)];if(_0x19281c){if(_0x19281c['isActor']()&&!$gameSystem[_0x65a111(0x151)]())return;const _0x1fb8f3=_0x19281c[_0x65a111(0x181)]();if(_0x1fb8f3&&_0x19281c['isActor']())this[_0x65a111(0x57a)][_0x65a111(0x96c)](_0x1fb8f3);}},Spriteset_Battle[_0x3fd7af(0x9fd)][_0x3fd7af(0x104)]=function(){const _0x5533ea=_0x3fd7af;for(const _0x3fdf7f of $gameParty['aliveMembers']()){if(_0x5533ea(0x594)===_0x5533ea(0x594)){if(!_0x3fdf7f)continue;if(!_0x3fdf7f[_0x5533ea(0x181)]())continue;_0x3fdf7f[_0x5533ea(0x181)]()[_0x5533ea(0x35b)]=!![],_0x3fdf7f[_0x5533ea(0x181)]()[_0x5533ea(0x46b)]();}else{const _0x4f4902=_0x140fde(_0x548fd8['$1'])[_0x5533ea(0x989)]()[_0x5533ea(0x306)]();if(_0x4f4902===_0x5533ea(0x623))return _0x5533ea(0x623);if(_0x3eda7c[_0x5533ea(0x9b5)][_0x4f4902])return _0x4f4902;}}},Spriteset_Battle[_0x3fd7af(0x9fd)]['createUIContainer']=function(){const _0x1829f6=_0x3fd7af;this['_uiContainer']=new Sprite(),this['_battleField'][_0x1829f6(0x96c)](this[_0x1829f6(0x355)]);},Spriteset_Battle[_0x3fd7af(0x9fd)][_0x3fd7af(0x686)]=function(){const _0x19d580=_0x3fd7af;if(VisuMZ['BattleCore']['Settings'][_0x19d580(0x520)]['NameLegacy'])return;this['_enemyNameContainer']=new Sprite(),this['_uiContainer'][_0x19d580(0x96c)](this[_0x19d580(0x2ab)]);for(const _0x3d9e34 of this[_0x19d580(0x4ed)]){if(_0x19d580(0x707)!==_0x19d580(0x9c8)){const _0x5aae67=new Sprite_EnemyName();this[_0x19d580(0x2ab)]['addChild'](_0x5aae67),_0x5aae67['linkSprite'](_0x3d9e34);}else this['_colorType']=_0x52554e[_0x19d580(0x84d)]>=0x0?0x0:0x1,this[_0x19d580(0x4a0)](_0x7d5abd[_0x19d580(0x84d)]);}},Spriteset_Battle[_0x3fd7af(0x9fd)][_0x3fd7af(0x2a0)]=function(){return![];},Spriteset_Battle[_0x3fd7af(0x9fd)][_0x3fd7af(0xe0)]=function(){const _0x28d216=_0x3fd7af;return this[_0x28d216(0x942)]()['some'](_0x545bb9=>_0x545bb9[_0x28d216(0x78c)]());},Spriteset_Battle[_0x3fd7af(0x9fd)]['isAnyoneJumping']=function(){const _0x488a66=_0x3fd7af;return this[_0x488a66(0x942)]()['some'](_0x4dea42=>_0x4dea42[_0x488a66(0x5d0)]());},Spriteset_Battle[_0x3fd7af(0x9fd)][_0x3fd7af(0x573)]=function(){const _0x4ec5bf=_0x3fd7af;return this[_0x4ec5bf(0x942)]()[_0x4ec5bf(0xb8)](_0x2161cf=>_0x2161cf['isGrowing']());},Spriteset_Battle[_0x3fd7af(0x9fd)][_0x3fd7af(0x5cd)]=function(){const _0x18d387=_0x3fd7af;return this[_0x18d387(0x942)]()['some'](_0x44303f=>_0x44303f[_0x18d387(0x2eb)]());},Spriteset_Battle['prototype'][_0x3fd7af(0x8e4)]=function(){const _0x1d52ff=_0x3fd7af;return this[_0x1d52ff(0x942)]()[_0x1d52ff(0xb8)](_0x2f12d1=>_0x2f12d1[_0x1d52ff(0x4ff)]());},Spriteset_Battle[_0x3fd7af(0x9fd)][_0x3fd7af(0x579)]=function(){const _0xab087e=_0x3fd7af;return this[_0xab087e(0x942)]()['some'](_0x4778bf=>_0x4778bf['isChangingOpacity']());},VisuMZ[_0x3fd7af(0x941)]['Window_ItemList_maxCols']=Window_ItemList[_0x3fd7af(0x9fd)][_0x3fd7af(0x414)],Window_ItemList[_0x3fd7af(0x9fd)]['maxCols']=function(){const _0x5d4fa5=_0x3fd7af;if(SceneManager[_0x5d4fa5(0x970)]()){if(SceneManager[_0x5d4fa5(0x450)][_0x5d4fa5(0xafe)]()==='border'){if(_0x5d4fa5(0x8cd)===_0x5d4fa5(0x8cd))return VisuMZ[_0x5d4fa5(0x941)][_0x5d4fa5(0xa6b)][_0x5d4fa5(0x501)][_0x5d4fa5(0x4db)];else{this[_0x5d4fa5(0x65b)](0x0,0x0,0x0,0x0);return;}}else{if(_0x5d4fa5(0x91b)!==_0x5d4fa5(0x9e8))return VisuMZ['BattleCore'][_0x5d4fa5(0xa6b)][_0x5d4fa5(0x501)][_0x5d4fa5(0x631)];else{if(!_0x11298e[_0x5d4fa5(0x151)]())return;const _0x1676a4=this[_0x5d4fa5(0x181)](),_0xaa9d18=_0xb27d5d['battler']();if(!_0x1676a4||!_0xaa9d18)return;const _0x4e4734=_0xaa9d18[_0x5d4fa5(0x62e)],_0x35dbc5=_0xaa9d18[_0x5d4fa5(0x69d)];this[_0x5d4fa5(0xa44)](_0x4e4734,_0x35dbc5,0x0,![],_0x5d4fa5(0xa2d),-0x1),_0x1676a4[_0x5d4fa5(0x700)]();const _0x693277=_0x308ad4[_0x5d4fa5(0x941)][_0x5d4fa5(0xa6b)][_0x5d4fa5(0x844)];let _0x1378d6=(_0xaa9d18[_0x5d4fa5(0xad0)]+_0x1676a4[_0x5d4fa5(0xad0)])/0x2;_0x1378d6*=this['isActor']()?0x1:-0x1;let _0x56b0be=_0x693277[_0x5d4fa5(0x92c)]*(this[_0x5d4fa5(0x91d)]()?0x1:-0x1);_0xfacb86[_0x5d4fa5(0x440)](_0x1378d6,_0x56b0be,0x0,![],_0x5d4fa5(0xa2d)),_0xaa9d18['updatePosition']();}}}else{if(_0x5d4fa5(0xee)!==_0x5d4fa5(0x9ad))return VisuMZ[_0x5d4fa5(0x941)][_0x5d4fa5(0xa81)]['call'](this);else{if(_0x15de07[_0x5d4fa5(0x879)]&&_0x5d035a[_0x5d4fa5(0x3a6)]())return![];else{if(!_0x4e3f57['BattleCore']['TpbActiveChangeEnabled'])return![];const _0x18f127=_0xce337e[_0x5d4fa5(0x813)]()['filter'](_0xb317f=>_0xb317f[_0x5d4fa5(0x5a8)]()&&_0xb317f['canInput']());return _0x18f127[_0x5d4fa5(0x732)]>0x0&&_0x1cfa38[_0x5d4fa5(0xe9)]()!==_0x18f127[_0x18f127[_0x5d4fa5(0x732)]-0x1];}}}},VisuMZ['BattleCore']['Window_SkillList_maxCols']=Window_SkillList[_0x3fd7af(0x9fd)][_0x3fd7af(0x414)],Window_SkillList['prototype']['maxCols']=function(){const _0x1b1ef3=_0x3fd7af;if(SceneManager[_0x1b1ef3(0x970)]()){if(SceneManager[_0x1b1ef3(0x450)][_0x1b1ef3(0xafe)]()===_0x1b1ef3(0x2bf)){if(_0x1b1ef3(0xad9)!=='oZvGN')return VisuMZ[_0x1b1ef3(0x941)]['Settings']['BattleLayout'][_0x1b1ef3(0x4db)];else _0x451ca7=_0x51c362;}else return _0x1b1ef3(0x4bb)!==_0x1b1ef3(0x4bb)?_0x4d0520[_0x1b1ef3(0x941)][_0x1b1ef3(0xa6b)][_0x1b1ef3(0x9de)]['SmoothImage']:VisuMZ['BattleCore'][_0x1b1ef3(0xa6b)][_0x1b1ef3(0x501)]['SkillItemStandardCols'];}else{if(_0x1b1ef3(0x4a6)!==_0x1b1ef3(0x4a6))this[_0x1b1ef3(0x6a6)]=_0x5fa91d,_0x165ddc[_0x1b1ef3(0x450)][_0x1b1ef3(0x2c2)]();else return VisuMZ[_0x1b1ef3(0x941)][_0x1b1ef3(0x765)][_0x1b1ef3(0x145)](this);}},VisuMZ['BattleCore'][_0x3fd7af(0x37d)]=Window_Options[_0x3fd7af(0x9fd)][_0x3fd7af(0x29d)],Window_Options['prototype'][_0x3fd7af(0x29d)]=function(){const _0x2c11bb=_0x3fd7af;VisuMZ[_0x2c11bb(0x941)][_0x2c11bb(0x37d)][_0x2c11bb(0x145)](this),this['addAutoBattleCommands'](),this[_0x2c11bb(0xe4)]();},Window_Options[_0x3fd7af(0x9fd)][_0x3fd7af(0x895)]=function(){const _0x24fcad=_0x3fd7af;VisuMZ['BattleCore'][_0x24fcad(0xa6b)][_0x24fcad(0x79a)][_0x24fcad(0x132)]&&(this['addBattleCoreAutoBattleStartupCommand'](),this[_0x24fcad(0x812)]());},Window_Options[_0x3fd7af(0x9fd)][_0x3fd7af(0xe4)]=function(){const _0x125a91=_0x3fd7af;if(!VisuMZ[_0x125a91(0x941)]['Settings'][_0x125a91(0x7fe)]['AddHpGaugeOption'])return;const _0xa896f9=TextManager[_0x125a91(0x18d)],_0x26144d='visualHpGauge';this[_0x125a91(0xf7)](_0xa896f9,_0x26144d);},Window_Options[_0x3fd7af(0x9fd)][_0x3fd7af(0x543)]=function(){const _0x2f610f=_0x3fd7af,_0x13dbb9=TextManager[_0x2f610f(0x6fa)],_0x504b4e=_0x2f610f(0x667);this['addCommand'](_0x13dbb9,_0x504b4e);},Window_Options[_0x3fd7af(0x9fd)][_0x3fd7af(0x812)]=function(){const _0x35f45b=_0x3fd7af,_0x274741=TextManager['autoBattleStyle'],_0x20ac0f='autoBattleUseSkills';this[_0x35f45b(0xf7)](_0x274741,_0x20ac0f);},VisuMZ[_0x3fd7af(0x941)][_0x3fd7af(0x30d)]=Window_Options[_0x3fd7af(0x9fd)][_0x3fd7af(0xa05)],Window_Options[_0x3fd7af(0x9fd)][_0x3fd7af(0xa05)]=function(_0x593846){const _0x2d43d4=_0x3fd7af,_0x526165=this['commandSymbol'](_0x593846);return _0x526165==='autoBattleUseSkills'?this['statusTextAutoBattleStyle']():_0x2d43d4(0x5e0)!=='IZqhN'?_0x4d4af0[_0x2d43d4(0x941)]['Settings'][_0x2d43d4(0x520)][_0x2d43d4(0x726)]?this['_battler'][_0x2d43d4(0xa66)]():_0x44e7fc[_0x2d43d4(0x450)][_0x2d43d4(0x873)]&&_0x19c4fd[_0x2d43d4(0x450)]['_enemyWindow'][_0x2d43d4(0x246)]&&_0x18fdb0['_scene'][_0x2d43d4(0x873)][_0x2d43d4(0x397)][_0x2d43d4(0x402)](this[_0x2d43d4(0xa9a)]):VisuMZ['BattleCore'][_0x2d43d4(0x30d)][_0x2d43d4(0x145)](this,_0x593846);},Window_Options[_0x3fd7af(0x9fd)]['statusTextAutoBattleStyle']=function(){const _0x5f14f1=_0x3fd7af,_0x6ad2b2=VisuMZ[_0x5f14f1(0x941)][_0x5f14f1(0xa6b)][_0x5f14f1(0x79a)],_0x346450=this[_0x5f14f1(0x149)](_0x5f14f1(0x692));return _0x346450?_0x6ad2b2[_0x5f14f1(0x99f)]:_0x6ad2b2[_0x5f14f1(0x335)];},Window_ShopStatus[_0x3fd7af(0x9fd)][_0x3fd7af(0x351)]=function(){const _0xc85d14=_0x3fd7af,_0x452847=DataManager['getDamageStyle'](this[_0xc85d14(0x72d)]),_0x5984ba=VisuMZ[_0xc85d14(0x9b5)][_0x452847];if(!_0x5984ba)return this['getItemDamageAmountLabelOriginal']();const _0x1e64a2=_0xc85d14(0x81a)[_0xc85d14(0xab2)](this['_item']['damage'][_0xc85d14(0x28f)]),_0x429a80=[null,TextManager['hp'],TextManager['mp'],TextManager['hp'],TextManager['mp'],TextManager['hp'],TextManager['mp']][this[_0xc85d14(0x72d)][_0xc85d14(0xa59)][_0xc85d14(0x28f)]];return _0x5984ba[_0x1e64a2][_0xc85d14(0xab2)](_0x429a80);},Window_ShopStatus[_0x3fd7af(0x9fd)][_0x3fd7af(0x905)]=function(){const _0x48d2f8=_0x3fd7af,_0x1a3445=DataManager[_0x48d2f8(0x1c1)](this[_0x48d2f8(0x72d)]),_0x27d36d=VisuMZ[_0x48d2f8(0x9b5)][_0x1a3445];if(!_0x27d36d)return this[_0x48d2f8(0xa4)]();return _0x27d36d[_0x48d2f8(0xa56)][_0x48d2f8(0x145)](this);},VisuMZ[_0x3fd7af(0x941)][_0x3fd7af(0x9e3)]=Window_PartyCommand[_0x3fd7af(0x9fd)][_0x3fd7af(0x709)],Window_PartyCommand[_0x3fd7af(0x9fd)][_0x3fd7af(0x709)]=function(_0x3a6162){const _0x1aab85=_0x3fd7af;VisuMZ['BattleCore'][_0x1aab85(0x9e3)][_0x1aab85(0x145)](this,_0x3a6162),this[_0x1aab85(0x301)](_0x3a6162);},Window_PartyCommand[_0x3fd7af(0x9fd)]['createCommandNameWindow']=function(_0x52a063){const _0x293855=_0x3fd7af,_0x4c5294=new Rectangle(0x0,0x0,_0x52a063['width'],_0x52a063['height']);this['_commandNameWindow']=new Window_Base(_0x4c5294),this[_0x293855(0x3a0)][_0x293855(0x824)]=0x0,this['addChild'](this['_commandNameWindow']),this[_0x293855(0x3ef)]();},Window_PartyCommand[_0x3fd7af(0x9fd)][_0x3fd7af(0x5b9)]=function(){const _0x151621=_0x3fd7af;Window_Command[_0x151621(0x9fd)][_0x151621(0x5b9)][_0x151621(0x145)](this);if(this[_0x151621(0x3a0)])this[_0x151621(0x3ef)]();},Window_PartyCommand['prototype'][_0x3fd7af(0x3ef)]=function(){const _0xfa6217=_0x3fd7af,_0x4b392d=this[_0xfa6217(0x3a0)];_0x4b392d[_0xfa6217(0x421)][_0xfa6217(0x8b9)]();const _0x59f180=this['commandStyleCheck'](this[_0xfa6217(0x417)]());if(_0x59f180===_0xfa6217(0x444)&&this[_0xfa6217(0x84f)]()>0x0){if('vHtfj'===_0xfa6217(0x9dc)){if(this['_cache'][_0xfa6217(0xcb)]!==_0x35eb70)return this[_0xfa6217(0x8d4)][_0xfa6217(0xcb)];return this[_0xfa6217(0xe9)]()[_0xfa6217(0x7b9)]['match'](/<SIDEVIEW ANCHOR: (.*), (.*)>/i)?(this[_0xfa6217(0x8d4)][_0xfa6217(0xcb)]=_0x4e4a52(_0x575819['$1']),this[_0xfa6217(0x8d4)]['svAnchorY']=_0x1425b4(_0x2d2ea3['$2'])):this['_cache']['svAnchorX']=_0x3e7f79[_0xfa6217(0x9fd)][_0xfa6217(0x73a)][_0xfa6217(0x145)](this),this[_0xfa6217(0x8d4)][_0xfa6217(0xcb)];}else{const _0x5ed115=this[_0xfa6217(0x25b)](this[_0xfa6217(0x417)]());let _0x5e45c6=this['commandName'](this[_0xfa6217(0x417)]());_0x5e45c6=_0x5e45c6[_0xfa6217(0x256)](/\\I\[(\d+)\]/gi,''),_0x4b392d[_0xfa6217(0xa64)](),this['commandNameWindowDrawBackground'](_0x5e45c6,_0x5ed115),this['commandNameWindowDrawText'](_0x5e45c6,_0x5ed115),this[_0xfa6217(0x529)](_0x5e45c6,_0x5ed115);}}},Window_PartyCommand['prototype'][_0x3fd7af(0x225)]=function(_0x42d6ce,_0x298f97){},Window_PartyCommand['prototype'][_0x3fd7af(0xa87)]=function(_0x116197,_0x1eebbb){const _0x39cf50=_0x3fd7af,_0x484811=this['_commandNameWindow'];_0x484811[_0x39cf50(0x9d0)](_0x116197,0x0,_0x1eebbb['y'],_0x484811[_0x39cf50(0x6f1)],_0x39cf50(0x8ff));},Window_PartyCommand[_0x3fd7af(0x9fd)][_0x3fd7af(0x529)]=function(_0x7a874d,_0x330188){const _0x2f80b6=_0x3fd7af,_0x4c8f10=this[_0x2f80b6(0x3a0)],_0x52da68=$gameSystem[_0x2f80b6(0x684)](),_0x330771=_0x330188['x']+Math[_0x2f80b6(0x63b)](_0x330188[_0x2f80b6(0xad0)]/0x2)+_0x52da68;_0x4c8f10['x']=_0x4c8f10['width']/-0x2+_0x330771,_0x4c8f10['y']=Math[_0x2f80b6(0x63b)](_0x330188[_0x2f80b6(0x26a)]/0x2);},Window_PartyCommand[_0x3fd7af(0x9fd)][_0x3fd7af(0x65a)]=function(){const _0x4da3a5=_0x3fd7af;this[_0x4da3a5(0x380)](),this['addAutoBattleCommand'](),this[_0x4da3a5(0x2e2)](),this[_0x4da3a5(0x971)](),this[_0x4da3a5(0x6b3)]();},Window_PartyCommand['prototype'][_0x3fd7af(0x380)]=function(){const _0x18336c=_0x3fd7af,_0x17a516=this['commandStyle'](),_0x3b3800=VisuMZ[_0x18336c(0x941)]['Settings']['PartyCmd'][_0x18336c(0x61a)],_0x10ca0d=_0x17a516===_0x18336c(0x21b)?TextManager[_0x18336c(0xaf2)]:'\x5cI[%1]%2'[_0x18336c(0xab2)](_0x3b3800,TextManager[_0x18336c(0xaf2)]),_0x2a5b67=this[_0x18336c(0x2d8)]();this[_0x18336c(0xf7)](_0x10ca0d,_0x18336c(0xaf2),_0x2a5b67);},Window_PartyCommand[_0x3fd7af(0x9fd)][_0x3fd7af(0x2d8)]=function(){return!![];},Window_PartyCommand[_0x3fd7af(0x9fd)][_0x3fd7af(0x49d)]=function(){const _0x3d85df=_0x3fd7af;if(!this['isAutoBattleCommandAdded']())return;const _0x4931b8=this[_0x3d85df(0x4fb)](),_0x57f7a2=VisuMZ[_0x3d85df(0x941)][_0x3d85df(0xa6b)][_0x3d85df(0xa2b)][_0x3d85df(0xa22)],_0x238dd9=_0x4931b8==='text'?TextManager[_0x3d85df(0x428)]:_0x3d85df(0x80e)[_0x3d85df(0xab2)](_0x57f7a2,TextManager[_0x3d85df(0x428)]),_0x1201c3=this[_0x3d85df(0x99c)]();this[_0x3d85df(0xf7)](_0x238dd9,'autoBattle',_0x1201c3);},Window_PartyCommand['prototype'][_0x3fd7af(0x123)]=function(){const _0x470813=_0x3fd7af;return VisuMZ[_0x470813(0x941)]['Settings'][_0x470813(0xa2b)]['CommandAddAutoBattle'];},Window_PartyCommand[_0x3fd7af(0x9fd)]['isAutoBattleCommandEnabled']=function(){return!![];},Window_PartyCommand[_0x3fd7af(0x9fd)][_0x3fd7af(0x2e2)]=function(){},Window_PartyCommand[_0x3fd7af(0x9fd)][_0x3fd7af(0x971)]=function(){const _0x5ebd32=_0x3fd7af;if(!this['isOptionsCommandAdded']())return;const _0x1d8ef3=this[_0x5ebd32(0x4fb)](),_0x1b824c=VisuMZ[_0x5ebd32(0x941)]['Settings']['PartyCmd'][_0x5ebd32(0x4d5)],_0x4b860b=_0x1d8ef3===_0x5ebd32(0x21b)?TextManager[_0x5ebd32(0xae2)]:_0x5ebd32(0x80e)[_0x5ebd32(0xab2)](_0x1b824c,TextManager[_0x5ebd32(0xae2)]),_0x11337d=this[_0x5ebd32(0x9e5)]();this[_0x5ebd32(0xf7)](_0x4b860b,_0x5ebd32(0xae2),_0x11337d);},Window_PartyCommand[_0x3fd7af(0x9fd)][_0x3fd7af(0x2f0)]=function(){const _0x3da055=_0x3fd7af;return VisuMZ[_0x3da055(0x941)][_0x3da055(0xa6b)][_0x3da055(0xa2b)]['CommandAddOptions'];},Window_PartyCommand[_0x3fd7af(0x9fd)][_0x3fd7af(0x9e5)]=function(){return!![];},Window_PartyCommand[_0x3fd7af(0x9fd)][_0x3fd7af(0x6b3)]=function(){const _0x45e6c8=_0x3fd7af,_0x5cdc3c=this[_0x45e6c8(0x4fb)](),_0x30cceb=VisuMZ[_0x45e6c8(0x941)][_0x45e6c8(0xa6b)]['PartyCmd'][_0x45e6c8(0xaf9)],_0x434e20=_0x5cdc3c===_0x45e6c8(0x21b)?TextManager['escape']:_0x45e6c8(0x80e)[_0x45e6c8(0xab2)](_0x30cceb,TextManager['escape']),_0x880dbd=this['isEscapeCommandEnabled']();this[_0x45e6c8(0xf7)](_0x434e20,'escape',_0x880dbd);},Window_PartyCommand['prototype'][_0x3fd7af(0x754)]=function(){const _0xe4989c=_0x3fd7af;return BattleManager[_0xe4989c(0x9bc)]();},Window_PartyCommand[_0x3fd7af(0x9fd)]['itemTextAlign']=function(){const _0x5c0743=_0x3fd7af;return VisuMZ[_0x5c0743(0x941)][_0x5c0743(0xa6b)][_0x5c0743(0xa2b)][_0x5c0743(0x4d8)];},Window_PartyCommand[_0x3fd7af(0x9fd)]['drawItem']=function(_0x2aed4e){const _0x23b292=_0x3fd7af,_0x160bca=this[_0x23b292(0x7b3)](_0x2aed4e);if(_0x160bca==='iconText')this['drawItemStyleIconText'](_0x2aed4e);else _0x160bca===_0x23b292(0x444)?this['drawItemStyleIcon'](_0x2aed4e):Window_Command[_0x23b292(0x9fd)][_0x23b292(0x539)][_0x23b292(0x145)](this,_0x2aed4e);},Window_PartyCommand[_0x3fd7af(0x9fd)]['commandStyle']=function(){const _0x15e3b7=_0x3fd7af;return VisuMZ[_0x15e3b7(0x941)][_0x15e3b7(0xa6b)][_0x15e3b7(0xa2b)][_0x15e3b7(0x89e)];},Window_PartyCommand['prototype'][_0x3fd7af(0x7b3)]=function(_0x44d257){const _0x5d2395=_0x3fd7af;if(_0x44d257<0x0)return _0x5d2395(0x21b);const _0x445602=this[_0x5d2395(0x4fb)]();if(_0x445602!==_0x5d2395(0x599))return _0x5d2395(0x44a)===_0x5d2395(0x44a)?_0x445602:!![];else{if(this[_0x5d2395(0x84f)]()>0x0){const _0x11ad64=this['commandName'](_0x44d257);if(_0x11ad64[_0x5d2395(0x265)](/\\I\[(\d+)\]/i)){const _0x67a9c8=this[_0x5d2395(0x25b)](_0x44d257),_0x4435e5=this['textSizeEx'](_0x11ad64)[_0x5d2395(0xad0)];if(_0x4435e5<=_0x67a9c8['width'])return _0x5d2395(0x84a);else{if('anZME'!==_0x5d2395(0xa85))return'icon';else{const _0x413b90=_0x598d81['indexOf'](_0xa62a08);return _0x413b90>=0x0?[_0x5be98a[_0x413b90-0x1]||_0x5a0ab3]:[_0x46df36];}}}}}return _0x5d2395(0x21b);},Window_PartyCommand[_0x3fd7af(0x9fd)][_0x3fd7af(0x284)]=function(_0x54a920){const _0x1cd035=_0x3fd7af,_0x3614f6=this[_0x1cd035(0x25b)](_0x54a920),_0x4a7014=this[_0x1cd035(0x704)](_0x54a920),_0x3593a2=this[_0x1cd035(0x4f6)](_0x4a7014)[_0x1cd035(0xad0)];this[_0x1cd035(0x45e)](this[_0x1cd035(0x6e0)](_0x54a920));const _0x5952f1=this[_0x1cd035(0x872)]();if(_0x5952f1===_0x1cd035(0x6d0)){if('aoirj'!==_0x1cd035(0x4b1)){if(!_0xa53ad1[_0x1cd035(0x151)]())return;const _0x194f13=this[_0x1cd035(0x181)]();if(!_0x194f13)return;if(_0x125515===_0x194f13[_0x1cd035(0x62e)])return;let _0xb941d5=![];if(this[_0x1cd035(0x91d)]()){if(_0x312101>_0x194f13[_0x1cd035(0x62e)])_0xb941d5=!![];if(_0x2632c5<_0x194f13['_baseX'])_0xb941d5=![];}else{if(this[_0x1cd035(0x7e8)]()){if(_0x414f22>_0x194f13[_0x1cd035(0x62e)])_0xb941d5=![];if(_0x43a85a<_0x194f13['_baseX'])_0xb941d5=!![];}};this[_0x1cd035(0x49f)](_0x30dc78?!_0xb941d5:_0xb941d5),_0x194f13[_0x1cd035(0x6c9)]();}else this[_0x1cd035(0x5c1)](_0x4a7014,_0x3614f6['x']+_0x3614f6[_0x1cd035(0xad0)]-_0x3593a2,_0x3614f6['y'],_0x3593a2);}else{if(_0x5952f1===_0x1cd035(0x8ff)){if(_0x1cd035(0x143)!=='PSgZJ'){if(this[_0x1cd035(0x4ec)])return this[_0x1cd035(0x4ec)];return this[_0x1cd035(0x4ec)]=_0x5a3d68[_0x1cd035(0x450)][_0x1cd035(0xafe)](),this['_battleLayoutStyle'];}else{const _0x419b7d=_0x3614f6['x']+Math[_0x1cd035(0x63b)]((_0x3614f6[_0x1cd035(0xad0)]-_0x3593a2)/0x2);this['drawTextEx'](_0x4a7014,_0x419b7d,_0x3614f6['y'],_0x3593a2);}}else this['drawTextEx'](_0x4a7014,_0x3614f6['x'],_0x3614f6['y'],_0x3593a2);}},Window_PartyCommand[_0x3fd7af(0x9fd)][_0x3fd7af(0x5be)]=function(_0x474545){const _0x1ed0b5=_0x3fd7af;this['commandName'](_0x474545)[_0x1ed0b5(0x265)](/\\I\[(\d+)\]/i);const _0x17ea25=Number(RegExp['$1'])||0x0,_0x1812d3=this['itemLineRect'](_0x474545),_0x243ca0=_0x1812d3['x']+Math[_0x1ed0b5(0x63b)]((_0x1812d3[_0x1ed0b5(0xad0)]-ImageManager['iconWidth'])/0x2),_0x268f21=_0x1812d3['y']+(_0x1812d3[_0x1ed0b5(0x26a)]-ImageManager['iconHeight'])/0x2;this[_0x1ed0b5(0x5a3)](_0x17ea25,_0x243ca0,_0x268f21);},Window_PartyCommand[_0x3fd7af(0x9fd)][_0x3fd7af(0x96a)]=function(){},Window_PartyCommand[_0x3fd7af(0x9fd)][_0x3fd7af(0x67e)]=function(){const _0x2d62ac=_0x3fd7af;Window_Command[_0x2d62ac(0x9fd)]['activate'][_0x2d62ac(0x145)](this);const _0x49d671=this[_0x2d62ac(0xafe)]();if(_0x49d671==='border'){if(_0x2d62ac(0xa61)!==_0x2d62ac(0x17c))this[_0x2d62ac(0x28b)]();else return _0x560b7c[_0x2d62ac(0x941)][_0x2d62ac(0x475)][_0x2d62ac(0x145)](this,_0x2c930c),_0x38d8d9[_0x2d62ac(0x515)](_0x427585=>{const _0x1a8a09=_0x2d62ac;this[_0x1a8a09(0x6ab)][this[_0x1a8a09(0x605)]]=_0x427585;}),!![];}},Window_PartyCommand[_0x3fd7af(0x9fd)][_0x3fd7af(0xafe)]=function(){const _0x9e57d8=_0x3fd7af;if(this[_0x9e57d8(0x4ec)])return this['_battleLayoutStyle'];return this[_0x9e57d8(0x4ec)]=SceneManager[_0x9e57d8(0x450)]['battleLayoutStyle'](),this[_0x9e57d8(0x4ec)];},Window_PartyCommand[_0x3fd7af(0x9fd)][_0x3fd7af(0x4f5)]=function(){const _0x26f15b=_0x3fd7af,_0x29f2b4=VisuMZ[_0x26f15b(0x941)][_0x26f15b(0xa6b)]['PartyCmd'],_0x1a9cda=this[_0x26f15b(0x109)]();switch(_0x1a9cda){case'fight':this[_0x26f15b(0xa76)][_0x26f15b(0x50c)](_0x29f2b4[_0x26f15b(0x2d2)]);break;case _0x26f15b(0x428):this['_helpWindow'][_0x26f15b(0x50c)](_0x29f2b4['HelpAutoBattle']);break;case _0x26f15b(0xae2):this['_helpWindow'][_0x26f15b(0x50c)](_0x29f2b4[_0x26f15b(0x12c)]);break;case _0x26f15b(0x362):this['_helpWindow'][_0x26f15b(0x50c)](_0x29f2b4[_0x26f15b(0x3df)]);break;default:this[_0x26f15b(0xa76)][_0x26f15b(0x50c)]('');break;}},VisuMZ[_0x3fd7af(0x941)][_0x3fd7af(0x212)]=Window_ActorCommand[_0x3fd7af(0x9fd)][_0x3fd7af(0x709)],Window_ActorCommand[_0x3fd7af(0x9fd)]['initialize']=function(_0x4ab04c){const _0x4a94e4=_0x3fd7af;VisuMZ[_0x4a94e4(0x941)][_0x4a94e4(0x212)][_0x4a94e4(0x145)](this,_0x4ab04c),this[_0x4a94e4(0x301)](_0x4ab04c);},Window_ActorCommand[_0x3fd7af(0x9fd)]['createCommandNameWindow']=function(_0x492135){const _0xa03ea=_0x3fd7af,_0x22077e=new Rectangle(0x0,0x0,_0x492135[_0xa03ea(0xad0)],_0x492135[_0xa03ea(0x26a)]);this['_commandNameWindow']=new Window_Base(_0x22077e),this['_commandNameWindow'][_0xa03ea(0x824)]=0x0,this[_0xa03ea(0x96c)](this[_0xa03ea(0x3a0)]),this[_0xa03ea(0x3ef)]();},Window_ActorCommand[_0x3fd7af(0x9fd)][_0x3fd7af(0x5b9)]=function(){const _0x3359b1=_0x3fd7af;Window_Command[_0x3359b1(0x9fd)][_0x3359b1(0x5b9)][_0x3359b1(0x145)](this);if(this[_0x3359b1(0x3a0)])this['updateCommandNameWindow']();},Window_ActorCommand[_0x3fd7af(0x9fd)][_0x3fd7af(0x3ef)]=function(){const _0x522769=_0x3fd7af,_0x109b89=this[_0x522769(0x3a0)];_0x109b89[_0x522769(0x421)]['clear']();const _0x3abbb3=this[_0x522769(0x7b3)](this[_0x522769(0x417)]());if(_0x3abbb3===_0x522769(0x444)&&this[_0x522769(0x84f)]()>0x0){const _0x165c67=this['itemLineRect'](this[_0x522769(0x417)]());let _0x1e8abd=this['commandName'](this['index']());_0x1e8abd=_0x1e8abd[_0x522769(0x256)](/\\I\[(\d+)\]/gi,''),_0x109b89[_0x522769(0xa64)](),this[_0x522769(0x225)](_0x1e8abd,_0x165c67),this[_0x522769(0xa87)](_0x1e8abd,_0x165c67),this[_0x522769(0x529)](_0x1e8abd,_0x165c67);}},Window_ActorCommand[_0x3fd7af(0x9fd)][_0x3fd7af(0x225)]=function(_0x2eaa85,_0x1aacd0){},Window_ActorCommand[_0x3fd7af(0x9fd)]['commandNameWindowDrawText']=function(_0x59ddaa,_0x14c9ae){const _0x5ee821=_0x3fd7af,_0x3cc28f=this[_0x5ee821(0x3a0)];_0x3cc28f[_0x5ee821(0x9d0)](_0x59ddaa,0x0,_0x14c9ae['y'],_0x3cc28f[_0x5ee821(0x6f1)],_0x5ee821(0x8ff));},Window_ActorCommand[_0x3fd7af(0x9fd)][_0x3fd7af(0x529)]=function(_0x52d144,_0x58710d){const _0x3b9291=_0x3fd7af,_0x19e1cb=this[_0x3b9291(0x3a0)],_0x8aa3f1=$gameSystem[_0x3b9291(0x684)](),_0x49bb44=_0x58710d['x']+Math[_0x3b9291(0x63b)](_0x58710d[_0x3b9291(0xad0)]/0x2)+_0x8aa3f1;_0x19e1cb['x']=_0x19e1cb[_0x3b9291(0xad0)]/-0x2+_0x49bb44,_0x19e1cb['y']=Math[_0x3b9291(0x63b)](_0x58710d[_0x3b9291(0x26a)]/0x2);},Window_ActorCommand[_0x3fd7af(0x9fd)][_0x3fd7af(0x65a)]=function(){const _0x22eb0c=_0x3fd7af;if(!this[_0x22eb0c(0x804)])return;const _0x48f640=this['_actor'][_0x22eb0c(0x14b)]();for(const _0x5b4f94 of _0x48f640){_0x22eb0c(0x7a0)!==_0x22eb0c(0x7a0)?(_0x27a631+=_0x23814f[_0x22eb0c(0x520)]['OffsetX']||0x0,_0x3a0c92+=_0x573154[_0x22eb0c(0x520)]['OffsetY']||0x0):this[_0x22eb0c(0x1b3)](_0x5b4f94[_0x22eb0c(0x989)]()[_0x22eb0c(0x306)]());}},Window_ActorCommand[_0x3fd7af(0x9fd)][_0x3fd7af(0x1b3)]=function(_0x1f1a19){const _0x4f883b=_0x3fd7af;_0x1f1a19==='ATTACK'&&(_0x4f883b(0x7bd)!==_0x4f883b(0xa1f)?this[_0x4f883b(0x4f2)]():this[_0x4f883b(0x9a3)]());['STYPES',_0x4f883b(0xab9)][_0x4f883b(0x402)](_0x1f1a19)&&this[_0x4f883b(0x677)]();_0x1f1a19==='GUARD'&&(_0x4f883b(0x822)===_0x4f883b(0x822)?this[_0x4f883b(0x546)]():this[_0x4f883b(0x18b)](_0x4f883b(0xff),_0x1ef8e));_0x1f1a19==='ITEM'&&this[_0x4f883b(0x614)]();_0x1f1a19===_0x4f883b(0x9c4)&&(_0x4f883b(0xf5)!==_0x4f883b(0xf5)?(_0x11a7b7[_0x4f883b(0xe9)]()[_0x4f883b(0x2e5)](),_0x470a55[_0x4f883b(0x85d)](),_0x59b04f['selectNextActor'](),this[_0x4f883b(0x365)]()):this['addEscapeCommand']());if(_0x1f1a19===_0x4f883b(0x101)){if(_0x4f883b(0x70c)===_0x4f883b(0x894)){if(!_0x39338f[_0x4f883b(0x970)]())return;const _0x45dacb=_0xcdec7['getLastPluginCommandInterpreter']();if(!_0x45dacb)return;_0x45dacb[_0x4f883b(0x992)]('battleOpacity');}else this[_0x4f883b(0x49d)]();}if(_0x1f1a19['match'](/STYPE: (\d+)/i)){if('rcMCx'==='uCTgS')this['battleStatusWindowAnimationContainer']()[_0x4f883b(0x5f7)](_0x5e9c3b);else{const _0x480f95=Number(RegExp['$1']);this[_0x4f883b(0x90a)](_0x480f95);}}else{if(_0x1f1a19['match'](/STYPE: (.*)/i)){if(_0x4f883b(0x59c)!==_0x4f883b(0xb7)){const _0x223bb7=DataManager[_0x4f883b(0x2c3)](RegExp['$1']);this[_0x4f883b(0x90a)](_0x223bb7);}else return this[_0x4f883b(0x9ab)]();}}_0x1f1a19===_0x4f883b(0x2a7)&&('GqcWx'===_0x4f883b(0x27c)?this[_0x4f883b(0x852)]():this[_0x4f883b(0x6f6)](_0x39ac42,_0x1e9cb6,_0x44a029));if(_0x1f1a19[_0x4f883b(0x265)](/SKILL: (\d+)/i)){const _0x43ce02=Number(RegExp['$1']);this[_0x4f883b(0x2b7)]($dataSkills[_0x43ce02]);}else{if(_0x1f1a19['match'](/SKILL: (.*)/i)){const _0x4c1132=DataManager['getSkillIdWithName'](RegExp['$1']);this[_0x4f883b(0x2b7)]($dataSkills[_0x4c1132]);}}_0x1f1a19===_0x4f883b(0x234)&&Imported['VisuMZ_2_PartySystem']&&(_0x4f883b(0x6c5)===_0x4f883b(0x6c5)?this['addPartyCommand']():(this[_0x4f883b(0x69f)]=this[_0x4f883b(0x933)],this['_angleRevertOnFinish']&&(this[_0x4f883b(0x933)]=0x0,this[_0x4f883b(0x69f)]=0x0))),[_0x4f883b(0xa49),_0x4f883b(0x4de)][_0x4f883b(0x402)](_0x1f1a19)&&Imported['VisuMZ_4_CombatLog']&&this['addCombatLogCommand'](),_0x1f1a19===_0x4f883b(0x6db)&&Imported[_0x4f883b(0x6e3)]&&this['addWeaponSwapCommand'](!![]);},Window_ActorCommand['prototype'][_0x3fd7af(0x4f2)]=function(){const _0x1b3f63=_0x3fd7af,_0x56d959=$dataSkills[this[_0x1b3f63(0x804)][_0x1b3f63(0xc2)]()];if(!_0x56d959)return;if(!this['canAddSkillCommand'](_0x56d959))return;const _0xbd14c9=this[_0x1b3f63(0x4fb)](),_0x269060=DataManager[_0x1b3f63(0xaa6)](_0x56d959),_0x7fe148=DataManager[_0x1b3f63(0x1d4)](_0x56d959),_0x55aa7e=_0xbd14c9===_0x1b3f63(0x21b)?_0x269060:'\x5cI[%1]%2'[_0x1b3f63(0xab2)](_0x7fe148,_0x269060);this[_0x1b3f63(0xf7)](_0x55aa7e,'attack',this[_0x1b3f63(0x804)][_0x1b3f63(0x505)]());},Window_ActorCommand[_0x3fd7af(0x9fd)]['addGuardCommand']=function(){const _0xbd335f=_0x3fd7af,_0x4dfe63=$dataSkills[this[_0xbd335f(0x804)]['guardSkillId']()];if(!_0x4dfe63)return;if(!this[_0xbd335f(0x70f)](_0x4dfe63))return;const _0x3696eb=this['commandStyle'](),_0x333793=DataManager['battleCommandName'](_0x4dfe63),_0x43c0ef=DataManager[_0xbd335f(0x1d4)](_0x4dfe63),_0x12bc23=_0x3696eb===_0xbd335f(0x21b)?_0x333793:'\x5cI[%1]%2'[_0xbd335f(0xab2)](_0x43c0ef,_0x333793);this[_0xbd335f(0xf7)](_0x12bc23,_0xbd335f(0x2ff),this['_actor'][_0xbd335f(0x4ef)]());},Window_ActorCommand[_0x3fd7af(0x9fd)][_0x3fd7af(0x614)]=function(){const _0x555862=_0x3fd7af,_0x2471df=this[_0x555862(0x4fb)](),_0x153a2c=VisuMZ[_0x555862(0x941)][_0x555862(0xa6b)][_0x555862(0x3a9)][_0x555862(0xe2)],_0x1050ca=_0x2471df===_0x555862(0x21b)?TextManager[_0x555862(0xaf4)]:_0x555862(0x80e)['format'](_0x153a2c,TextManager[_0x555862(0xaf4)]),_0x35c908=this[_0x555862(0x1c6)]();this[_0x555862(0xf7)](_0x1050ca,'item',_0x35c908);},Window_ActorCommand[_0x3fd7af(0x9fd)][_0x3fd7af(0x1c6)]=function(){const _0x547361=_0x3fd7af;return this[_0x547361(0x804)]&&this[_0x547361(0x804)][_0x547361(0x434)]();},Window_ActorCommand[_0x3fd7af(0x9fd)][_0x3fd7af(0x677)]=function(){const _0x4363e8=_0x3fd7af,_0x4c9012=this[_0x4363e8(0x804)][_0x4363e8(0x376)]();for(const _0x3bcc02 of _0x4c9012){this[_0x4363e8(0x90a)](_0x3bcc02);}},Window_ActorCommand['prototype'][_0x3fd7af(0x90a)]=function(_0x282351){const _0xa405d=_0x3fd7af;let _0x3f43df=$dataSystem[_0xa405d(0x376)][_0x282351];if(!_0x3f43df)return;let _0x3c8189=_0x3f43df;const _0x5603f4=this['commandStyle']();if(_0x5603f4===_0xa405d(0x21b))_0xa405d(0x840)===_0xa405d(0x840)?(_0x3c8189=_0x3c8189['replace'](/\x1I\[(\d+)\]/gi,''),_0x3c8189=_0x3c8189[_0xa405d(0x256)](/\\I\[(\d+)\]/gi,'')):(this['_battlerName']=_0x498102,this[_0xa405d(0x6dd)][_0xa405d(0x2cf)]=_0x2ebef6[_0xa405d(0xace)](_0x3fffb5));else{if(!_0x3f43df[_0xa405d(0x265)](/\\I\[(\d+)\]/i)){if(_0xa405d(0xac7)!==_0xa405d(0x86d)){const _0x4d8498=Imported[_0xa405d(0x4aa)]?VisuMZ[_0xa405d(0x40c)]['Settings'][_0xa405d(0x4d9)]:VisuMZ['BattleCore'][_0xa405d(0xa6b)][_0xa405d(0x3a9)],_0x477619=$dataSystem['magicSkills']['includes'](_0x282351),_0x2145cd=_0x477619?_0x4d8498['IconStypeMagic']:_0x4d8498[_0xa405d(0x510)];_0x3c8189=_0xa405d(0x80e)[_0xa405d(0xab2)](_0x2145cd,_0x3f43df);}else{let _0x27f4d5=_0x49ab8a[_0xa405d(0x13a)](_0x5b381f[_0xa405d(0x3eb)]);_0x463994[_0xa405d(0x84d)]<0x0&&(_0x27f4d5+=_0x51e034[_0xa405d(0x278)](_0x11b37d[_0xa405d(0x84d)])),_0x55e241[_0xa405d(0x950)](_0x46075a['VariableHeal'],_0x27f4d5);}}}this['addCommand'](_0x3c8189,_0xa405d(0x13d),!![],_0x282351);},Window_ActorCommand[_0x3fd7af(0x9fd)][_0x3fd7af(0x852)]=function(){const _0x2b073c=_0x3fd7af,_0x1c06f9=this[_0x2b073c(0x804)][_0x2b073c(0x376)](),_0x58b01b=this[_0x2b073c(0x804)][_0x2b073c(0x4f7)]();for(const _0x133cc7 of _0x58b01b){if(!_0x133cc7)continue;if(Imported[_0x2b073c(0x4aa)]){if(_0x2b073c(0x9e9)!==_0x2b073c(0x9e9))this[_0x2b073c(0x17e)]['visible']=this['isOpen']();else{if(this[_0x2b073c(0x8b7)](_0x133cc7))continue;if(this[_0x2b073c(0x122)](_0x133cc7))continue;}}else{if(!_0x1c06f9['includes'](_0x133cc7[_0x2b073c(0x40e)])){if('iUXDx'!==_0x2b073c(0x8e8))continue;else{const _0x511f90=_0x296dac[0x0]['format'](_0x16f399[0x0]),_0xe1f747=_0x14e2d8[0x1]['format'](_0x512c99[0x1]),_0x12a6ca=new _0xc78ffe(_0x262ffc[_0x2b073c(0xab2)](_0xe1f747),'i');_0x496cfa[_0x511f90]=_0x12a6ca;}}}this[_0x2b073c(0x2b7)](_0x133cc7);}},Window_ActorCommand[_0x3fd7af(0x9fd)][_0x3fd7af(0x8b7)]=function(_0x2a8443){const _0x12f3a9=_0x3fd7af,_0x59471c=this[_0x12f3a9(0x804)][_0x12f3a9(0x376)](),_0x34c236=_0x59471c[_0x12f3a9(0xa8)](_0x58770e=>DataManager[_0x12f3a9(0x33e)](_0x2a8443)['includes'](_0x58770e));return _0x34c236[_0x12f3a9(0x732)]<=0x0;},Window_ActorCommand[_0x3fd7af(0x9fd)][_0x3fd7af(0x122)]=function(_0x739d9a){const _0x14e32b=_0x3fd7af;if(!Window_SkillList['prototype'][_0x14e32b(0x38f)]['call'](this,_0x739d9a))return!![];if(!Window_SkillList[_0x14e32b(0x9fd)]['checkShowHideSwitchNotetags'][_0x14e32b(0x145)](this,_0x739d9a))return!![];if(!Window_SkillList[_0x14e32b(0x9fd)][_0x14e32b(0x14e)]['call'](this,_0x739d9a))return!![];return![];},Window_ActorCommand[_0x3fd7af(0x9fd)][_0x3fd7af(0x2b7)]=function(_0x23189f){const _0xe8849c=_0x3fd7af;if(!_0x23189f)return;if(!this[_0xe8849c(0x70f)](_0x23189f))return;const _0x506a12=this[_0xe8849c(0x4fb)](),_0x50af04=DataManager[_0xe8849c(0xaa6)](_0x23189f),_0x2ab351=DataManager[_0xe8849c(0x1d4)](_0x23189f),_0x4949b7=_0x506a12===_0xe8849c(0x21b)?_0x50af04:_0xe8849c(0x80e)['format'](_0x2ab351,_0x50af04),_0x35905e=this[_0xe8849c(0x804)][_0xe8849c(0x865)](_0x23189f);this['addCommand'](_0x4949b7,_0xe8849c(0xd3),_0x35905e,_0x23189f['id']);},Window_ActorCommand[_0x3fd7af(0x9fd)][_0x3fd7af(0x70f)]=function(_0x386f88){const _0x35bd84=_0x3fd7af,_0xae29c8=_0x386f88[_0x35bd84(0x7b9)];if(_0xae29c8['match'](/<COMMAND REQUIRE LEARN>/i)){if(!this[_0x35bd84(0x804)][_0x35bd84(0x237)](_0x386f88['id']))return![];}if(_0xae29c8['match'](/<COMMAND REQUIRE ACCESS>/i)){if('UhWpp'===_0x35bd84(0x197)){if(!_0x5bd743[_0x35bd84(0x970)]())return;_0x17b027[_0x35bd84(0x187)](_0x2a106f,_0x14d4de);const _0x16db41=_0x3b1af7[_0x35bd84(0x2dd)],_0x4f7f8e={'criticalHitRate':_0x54cddc[_0x35bd84(0x65e)],'criticalHitFlat':_0x73c77['CriticalHitFlat'],'criticalDmgRate':_0x2fef14['CriticalDmgRate'],'criticalDmgFlat':_0x32dc66[_0x35bd84(0x439)],'damageRate':_0x5064b8['DamageRate'],'damageFlat':_0x2b26c6[_0x35bd84(0x464)],'hitRate':_0x509007['HitRate'],'hitFlat':_0x39376a[_0x35bd84(0x4f0)]};_0x16db41[_0x35bd84(0x445)]=_0x4f7f8e;}else{if(!this[_0x35bd84(0x804)][_0x35bd84(0x9ca)](_0x386f88['id']))return![];}}const _0x16bf6b=VisuMZ[_0x35bd84(0x941)][_0x35bd84(0xd2)](_0x386f88,_0x35bd84(0x76a));if(VisuMZ[_0x35bd84(0x941)]['JS'][_0x16bf6b]){if(!VisuMZ[_0x35bd84(0x941)]['JS'][_0x16bf6b][_0x35bd84(0x145)](this,this[_0x35bd84(0x804)],_0x386f88))return![];}return VisuMZ['BattleCore']['CheckSkillCommandShowSwitches'](_0x386f88);},VisuMZ[_0x3fd7af(0x941)]['CheckSkillCommandShowSwitches']=function(_0x33b310){const _0xb41c86=_0x3fd7af,_0x1cba3d=_0x33b310[_0xb41c86(0x7b9)];if(_0x1cba3d[_0xb41c86(0x265)](/<COMMAND SHOW[ ](?:SW|SWITCH|SWITCHES):[ ]*(\d+(?:\s*,\s*\d+)*)>/i)){if(_0xb41c86(0x1c4)!=='vWwMD')return this['skillItemWindowRectMiddle']();else{const _0x370166=JSON[_0xb41c86(0x266)]('['+RegExp['$1'][_0xb41c86(0x265)](/\d+/g)+']');for(const _0x265036 of _0x370166){if(!$gameSwitches[_0xb41c86(0x13a)](_0x265036))return![];}return!![];}}if(_0x1cba3d['match'](/<COMMAND SHOW ALL[ ](?:SW|SWITCH|SWITCHES):[ ]*(\d+(?:\s*,\s*\d+)*)>/i)){const _0x245d6f=JSON[_0xb41c86(0x266)]('['+RegExp['$1']['match'](/\d+/g)+']');for(const _0x45c4ab of _0x245d6f){if(!$gameSwitches[_0xb41c86(0x13a)](_0x45c4ab))return![];}return!![];}if(_0x1cba3d['match'](/<COMMAND SHOW ANY[ ](?:SW|SWITCH|SWITCHES):[ ]*(\d+(?:\s*,\s*\d+)*)>/i)){if(_0xb41c86(0x52d)===_0xb41c86(0x52d)){const _0x1e5423=JSON[_0xb41c86(0x266)]('['+RegExp['$1']['match'](/\d+/g)+']');for(const _0x69c275 of _0x1e5423){if($gameSwitches[_0xb41c86(0x13a)](_0x69c275))return!![];}return![];}else return this['isDTB']();}if(_0x1cba3d['match'](/<COMMAND HIDE[ ](?:SW|SWITCH|SWITCHES):[ ]*(\d+(?:\s*,\s*\d+)*)>/i)){const _0x94c08c=JSON['parse']('['+RegExp['$1']['match'](/\d+/g)+']');for(const _0x5a5245 of _0x94c08c){if(!$gameSwitches[_0xb41c86(0x13a)](_0x5a5245))return!![];}return![];}if(_0x1cba3d[_0xb41c86(0x265)](/<COMMAND HIDE ALL[ ](?:SW|SWITCH|SWITCHES):[ ]*(\d+(?:\s*,\s*\d+)*)>/i)){const _0x3da94d=JSON['parse']('['+RegExp['$1'][_0xb41c86(0x265)](/\d+/g)+']');for(const _0x50be4d of _0x3da94d){if(!$gameSwitches['value'](_0x50be4d))return!![];}return![];}if(_0x1cba3d['match'](/<COMMAND HIDE ANY[ ](?:SW|SWITCH|SWITCHES):[ ]*(\d+(?:\s*,\s*\d+)*)>/i)){if(_0xb41c86(0x512)!==_0xb41c86(0x512))return _0x51a00b[_0xb41c86(0x381)];else{const _0x44a5fd=JSON['parse']('['+RegExp['$1']['match'](/\d+/g)+']');for(const _0x15f0a1 of _0x44a5fd){if(_0xb41c86(0x3d6)===_0xb41c86(0x5ba))_0x565425[_0xb41c86(0x941)][_0xb41c86(0x472)]&&_0x409729[_0xb41c86(0x941)][_0xb41c86(0x472)][_0xb41c86(0x145)](this,_0x9242bc),_0x217330['BattleCore'][_0xb41c86(0x5c6)](_0x3916ba),_0x3dc59a[_0xb41c86(0x941)][_0xb41c86(0x167)](_0x527e69);else{if($gameSwitches[_0xb41c86(0x13a)](_0x15f0a1))return![];}}return!![];}}return!![];},Window_ActorCommand[_0x3fd7af(0x9fd)][_0x3fd7af(0x6b3)]=function(){const _0x5ea068=_0x3fd7af,_0x43ac48=this[_0x5ea068(0x4fb)](),_0x4aded8=VisuMZ[_0x5ea068(0x941)]['Settings'][_0x5ea068(0xa2b)][_0x5ea068(0xaf9)],_0xa8d5ab=_0x43ac48===_0x5ea068(0x21b)?TextManager['escape']:_0x5ea068(0x80e)['format'](_0x4aded8,TextManager[_0x5ea068(0x362)]),_0x366b53=this[_0x5ea068(0x754)]();this[_0x5ea068(0xf7)](_0xa8d5ab,_0x5ea068(0x362),_0x366b53);},Window_ActorCommand[_0x3fd7af(0x9fd)][_0x3fd7af(0x754)]=function(){const _0x4479c5=_0x3fd7af;return BattleManager[_0x4479c5(0x9bc)]();},Window_ActorCommand[_0x3fd7af(0x9fd)]['addAutoBattleCommand']=function(){const _0x58358b=_0x3fd7af,_0x235c59=this[_0x58358b(0x4fb)](),_0x3a1321=VisuMZ['BattleCore'][_0x58358b(0xa6b)]['PartyCmd'][_0x58358b(0xa22)],_0xe40fee=_0x235c59===_0x58358b(0x21b)?TextManager[_0x58358b(0x428)]:_0x58358b(0x80e)['format'](_0x3a1321,TextManager['autoBattle']),_0x3e9ed6=this[_0x58358b(0x99c)]();this[_0x58358b(0xf7)](_0xe40fee,_0x58358b(0x428),_0x3e9ed6);},Window_ActorCommand[_0x3fd7af(0x9fd)][_0x3fd7af(0x99c)]=function(){return!![];},Window_ActorCommand[_0x3fd7af(0x9fd)][_0x3fd7af(0x872)]=function(){const _0x9ff473=_0x3fd7af;return VisuMZ[_0x9ff473(0x941)][_0x9ff473(0xa6b)][_0x9ff473(0x3a9)][_0x9ff473(0x4d8)];},Window_ActorCommand[_0x3fd7af(0x9fd)][_0x3fd7af(0x539)]=function(_0x54c3da){const _0x220fc5=_0x3fd7af,_0x3613a5=this[_0x220fc5(0x7b3)](_0x54c3da);if(_0x3613a5===_0x220fc5(0x84a))this['drawItemStyleIconText'](_0x54c3da);else _0x3613a5===_0x220fc5(0x444)?'quetP'!=='quetP'?!this['_logWindow'][_0x220fc5(0x2a0)]()&&this[_0x220fc5(0x318)]():this[_0x220fc5(0x5be)](_0x54c3da):Window_Command['prototype'][_0x220fc5(0x539)][_0x220fc5(0x145)](this,_0x54c3da);this[_0x220fc5(0x91a)](_0x54c3da);},Window_ActorCommand[_0x3fd7af(0x9fd)][_0x3fd7af(0x4fb)]=function(){const _0x117e3d=_0x3fd7af;return VisuMZ[_0x117e3d(0x941)][_0x117e3d(0xa6b)][_0x117e3d(0x3a9)][_0x117e3d(0x89e)];},Window_ActorCommand[_0x3fd7af(0x9fd)][_0x3fd7af(0x7b3)]=function(_0x3148ac){const _0x46fb90=_0x3fd7af;if(_0x3148ac<0x0)return _0x46fb90(0x21b);const _0x4888d3=this[_0x46fb90(0x4fb)]();if(_0x4888d3!=='auto'){if(_0x46fb90(0x8df)===_0x46fb90(0x560)){const _0x5656c5=_0x26e223(_0x299368['$1'])['toUpperCase']()[_0x46fb90(0x306)]();return _0x5656c5;}else return _0x4888d3;}else{if(this[_0x46fb90(0x84f)]()>0x0){const _0x539ecb=this['commandName'](_0x3148ac);if(_0x539ecb['match'](/\\I\[(\d+)\]/i)){const _0x574df2=this['itemLineRect'](_0x3148ac),_0x118f22=this[_0x46fb90(0x4f6)](_0x539ecb)[_0x46fb90(0xad0)];return _0x118f22<=_0x574df2[_0x46fb90(0xad0)]?'iconText':_0x46fb90(0x444);}}}return _0x46fb90(0x21b);},Window_ActorCommand[_0x3fd7af(0x9fd)]['drawItemStyleIconText']=function(_0x4c4c42){const _0x2ba625=_0x3fd7af,_0x27a17b=this['itemLineRect'](_0x4c4c42),_0x194c99=this[_0x2ba625(0x704)](_0x4c4c42),_0x30ea85=this['textSizeEx'](_0x194c99)[_0x2ba625(0xad0)];this[_0x2ba625(0x45e)](this[_0x2ba625(0x6e0)](_0x4c4c42));const _0x4d299f=this[_0x2ba625(0x872)]();if(_0x4d299f===_0x2ba625(0x6d0)){if(_0x2ba625(0xaf1)!==_0x2ba625(0x307))this['drawTextEx'](_0x194c99,_0x27a17b['x']+_0x27a17b[_0x2ba625(0xad0)]-_0x30ea85,_0x27a17b['y'],_0x30ea85);else return _0x2ba625(0x84a);}else{if(_0x4d299f===_0x2ba625(0x8ff)){if(_0x2ba625(0xae)===_0x2ba625(0xae)){const _0x100040=_0x27a17b['x']+Math[_0x2ba625(0x63b)]((_0x27a17b[_0x2ba625(0xad0)]-_0x30ea85)/0x2);this['drawTextEx'](_0x194c99,_0x100040,_0x27a17b['y'],_0x30ea85);}else this[_0x2ba625(0x24f)]['visible']=![];}else this['drawTextEx'](_0x194c99,_0x27a17b['x'],_0x27a17b['y'],_0x30ea85);}},Window_ActorCommand['prototype']['drawItemStyleIcon']=function(_0xd7dc33){const _0x32afe1=_0x3fd7af;this[_0x32afe1(0x704)](_0xd7dc33)['match'](/\\I\[(\d+)\]/i);const _0x126a32=Number(RegExp['$1'])||0x0,_0x409c17=this[_0x32afe1(0x25b)](_0xd7dc33),_0xfca5dd=_0x409c17['x']+Math[_0x32afe1(0x63b)]((_0x409c17['width']-ImageManager[_0x32afe1(0x542)])/0x2),_0x507408=_0x409c17['y']+(_0x409c17[_0x32afe1(0x26a)]-ImageManager['iconHeight'])/0x2;this[_0x32afe1(0x5a3)](_0x126a32,_0xfca5dd,_0x507408);},Window_ActorCommand[_0x3fd7af(0x9fd)][_0x3fd7af(0x91a)]=function(_0x32149f){const _0x43065e=_0x3fd7af;if(!(VisuMZ[_0x43065e(0x941)][_0x43065e(0xa6b)][_0x43065e(0x3a9)][_0x43065e(0x489)]??!![]))return;const _0x39d27f=this[_0x43065e(0x75d)](_0x32149f);if(![_0x43065e(0x910),_0x43065e(0x2ff),_0x43065e(0xd3)][_0x43065e(0x402)](_0x39d27f))return;const _0x5606a3=this[_0x43065e(0x25b)](_0x32149f);let _0x2d91ef=null;if(_0x39d27f===_0x43065e(0x910))_0x2d91ef=$dataSkills[this['_actor'][_0x43065e(0xc2)]()];else _0x39d27f==='guard'?_0x2d91ef=$dataSkills[this[_0x43065e(0x804)][_0x43065e(0x1d5)]()]:_0x2d91ef=$dataSkills[this['_list'][_0x32149f][_0x43065e(0x839)]];this[_0x43065e(0x796)](this[_0x43065e(0x804)],_0x2d91ef,_0x5606a3['x'],_0x5606a3['y'],_0x5606a3[_0x43065e(0xad0)]);},Window_ActorCommand[_0x3fd7af(0x9fd)][_0x3fd7af(0x796)]=function(_0x272f6c,_0x5d6637,_0x8ca442,_0x2ecfe1,_0x17e67e){const _0x3bb34f=_0x3fd7af;if(!_0x5d6637)return;if(Imported[_0x3bb34f(0x4aa)]){if('BBRLE'==='EuRXc'){if(!_0x3dc64d['isSideView']()&&this['constructor']===_0x96b9d3){const _0x418b07=_0xbff914[_0x3bb34f(0x9fd)][_0x3bb34f(0xafe)]();[_0x3bb34f(0x986),_0x3bb34f(0xfb),_0x3bb34f(0x833),_0x3bb34f(0x2bf)]['includes'](_0x418b07)&&(this[_0x3bb34f(0x824)]=0x0);}}else Window_Command['prototype'][_0x3bb34f(0x796)][_0x3bb34f(0x145)](this,_0x272f6c,_0x5d6637,_0x8ca442,_0x2ecfe1,_0x17e67e);}else{if(_0x3bb34f(0x602)==='fHNbQ'){const _0x15d66a=_0x39d98d['isBattleFlipped']()?-0x1:0x1;let _0x2c8f70=this[_0x3bb34f(0x62e)];_0x2c8f70+=this[_0x3bb34f(0x92a)]();let _0x120048=this[_0x3bb34f(0x69d)];const _0xf02c9e=this[_0x3bb34f(0xa0e)][_0x3bb34f(0x1c9)]['y'];_0x120048+=this[_0x3bb34f(0x682)]();const _0x19e4ce=_0x5f3406[_0x3bb34f(0x450)][_0x3bb34f(0x6bb)];if(_0x19e4ce&&this['parent']===_0x19e4ce){_0x2c8f70+=_0x19e4ce['x']-this[_0x3bb34f(0xa7)]();const _0x129ec7=_0x19e4ce['lineHeight']()*0x3/0x4;_0x120048=_0x19e4ce['y']+_0x129ec7,_0x120048=_0xf89b31[_0x3bb34f(0x88d)](_0x120048,_0x19e4ce['y']+this['y']-this[_0x3bb34f(0x26a)]+_0x129ec7);}_0x5fde07['x']=_0x354c60[_0x3bb34f(0x819)](_0x2c8f70+this[_0x3bb34f(0xa7)]()*_0x15d66a),_0x3982a0['y']=_0x412e55[_0x3bb34f(0x819)](_0x120048+this['damageOffsetY']());}else Window_SkillList[_0x3bb34f(0x9fd)]['drawSkillCost'][_0x3bb34f(0x145)](this,_0x5d6637,_0x8ca442,_0x2ecfe1,_0x17e67e);}},Window_ActorCommand[_0x3fd7af(0x9fd)]['hide']=function(){},Window_ActorCommand[_0x3fd7af(0x9fd)][_0x3fd7af(0x67e)]=function(){const _0x537380=_0x3fd7af;Window_Command['prototype'][_0x537380(0x67e)]['call'](this);const _0x39dd65=this[_0x537380(0xafe)]();_0x39dd65===_0x537380(0x2bf)&&this[_0x537380(0x28b)]();},Window_ActorCommand['prototype'][_0x3fd7af(0xafe)]=function(){const _0x5403ad=_0x3fd7af;if(this[_0x5403ad(0x4ec)])return this[_0x5403ad(0x4ec)];return this[_0x5403ad(0x4ec)]=SceneManager[_0x5403ad(0x450)][_0x5403ad(0xafe)](),this['_battleLayoutStyle'];},VisuMZ['BattleCore'][_0x3fd7af(0xcd)]=Window_ActorCommand[_0x3fd7af(0x9fd)][_0x3fd7af(0xbb)],Window_ActorCommand[_0x3fd7af(0x9fd)][_0x3fd7af(0xbb)]=function(_0x1a74ec){const _0x247d0d=_0x3fd7af,_0x1537af=this[_0x247d0d(0xafe)]();if(_0x1a74ec&&['xp',_0x247d0d(0x833)]['includes'](_0x1537af)){if(_0x247d0d(0x1d2)!==_0x247d0d(0x1d2)){if(!_0xa6297f[_0x247d0d(0x941)][_0x247d0d(0xa6b)][_0x247d0d(0x501)][_0x247d0d(0x508)])return;const _0x31dae4=this[_0x247d0d(0xe9)](_0x4e6de2),_0x3eea29=this[_0x247d0d(0x864)](_0xacb95f);_0x3eea29[_0x247d0d(0xad0)]=_0x45202a[_0x247d0d(0x7fc)],_0x3eea29[_0x247d0d(0x26a)]-=0x2,this[_0x247d0d(0x90d)](_0x31dae4,_0x3eea29['x']+0x1,_0x3eea29['y']+0x1,_0x3eea29[_0x247d0d(0xad0)],_0x3eea29[_0x247d0d(0x26a)]);}else this['resizeWindowXPStyle'](_0x1a74ec);}else _0x1a74ec&&[_0x247d0d(0x2bf)]['includes'](_0x1537af)&&(this[_0x247d0d(0x572)](_0x1a74ec),this['showHelpWindow']());VisuMZ[_0x247d0d(0x941)]['Window_ActorCommand_setup'][_0x247d0d(0x145)](this,_0x1a74ec),_0x1a74ec&&$gameTroop[_0x247d0d(0x813)]()['length']>0x0&&_0x1a74ec[_0x247d0d(0x181)]()&&_0x1a74ec[_0x247d0d(0x181)]()[_0x247d0d(0x9f0)]();},Window_ActorCommand[_0x3fd7af(0x9fd)]['resizeWindowXPStyle']=function(_0x441259){const _0x22c854=_0x3fd7af,_0x485221=Math['round'](Graphics[_0x22c854(0xa4b)]/0x3),_0xdf3530=Math['round'](Graphics['boxWidth']/$gameParty[_0x22c854(0x892)]()[_0x22c854(0x732)]),_0x4d37f1=Math[_0x22c854(0x88d)](_0x485221,_0xdf3530),_0x36e28f=this[_0x22c854(0x9f5)](VisuMZ[_0x22c854(0x941)][_0x22c854(0xa6b)]['BattleLayout']['XPActorCommandLines']),_0x22e10a=_0xdf3530*_0x441259[_0x22c854(0x417)]()+(_0xdf3530-_0x4d37f1)/0x2,_0x2b3b8a=SceneManager[_0x22c854(0x450)]['_statusWindow']['y']-_0x36e28f;this[_0x22c854(0x334)](_0x22e10a,_0x2b3b8a,_0x4d37f1,_0x36e28f),this['createContents'](),this[_0x22c854(0x793)](0x1);},Window_ActorCommand['prototype'][_0x3fd7af(0x572)]=function(_0x3922ae){const _0x29b980=_0x3fd7af,_0x240218=SceneManager['_scene'][_0x29b980(0xa9b)]();this['move'](_0x240218['x'],_0x240218['y'],_0x240218['width'],_0x240218[_0x29b980(0x26a)]),this[_0x29b980(0x199)](),this[_0x29b980(0x793)](0x0);},Window_ActorCommand[_0x3fd7af(0x9fd)][_0x3fd7af(0x33f)]=function(){const _0x1acba1=_0x3fd7af;if(this[_0x1acba1(0x116)]){if(_0x1acba1(0x6f4)===_0x1acba1(0xa26))this[_0x1acba1(0x18d)]=_0x13fd33[_0x1acba1(0x18d)];else{const _0x3d5838=this[_0x1acba1(0x116)][_0x1acba1(0x2cf)],_0x1e4666=this['width']-0x8,_0x36c4a7=this[_0x1acba1(0x26a)],_0x1cbeca=this[_0x1acba1(0x46a)],_0x485a8e=ColorManager[_0x1acba1(0xa1c)](),_0x4ccbd4=ColorManager[_0x1acba1(0x8f6)]();this[_0x1acba1(0x116)]['x']=0x4,_0x3d5838[_0x1acba1(0x783)](_0x1e4666,_0x36c4a7),_0x3d5838[_0x1acba1(0xa16)](0x0,0x0,_0x1e4666,_0x1cbeca,_0x4ccbd4,_0x485a8e,!![]),_0x3d5838[_0x1acba1(0x425)](0x0,_0x1cbeca,_0x1e4666,_0x36c4a7-_0x1cbeca*0x2,_0x485a8e),_0x3d5838[_0x1acba1(0xa16)](0x0,_0x36c4a7-_0x1cbeca,_0x1e4666,_0x1cbeca,_0x485a8e,_0x4ccbd4,!![]),this[_0x1acba1(0x116)][_0x1acba1(0x4e1)](0x0,0x0,_0x1e4666,_0x36c4a7);}}},Window_ActorCommand[_0x3fd7af(0x9fd)][_0x3fd7af(0x4f5)]=function(){const _0x4c44e3=_0x3fd7af;if(!this['_actor'])return;const _0x37110b=VisuMZ[_0x4c44e3(0x941)]['Settings'][_0x4c44e3(0x3a9)],_0x47e2d0=this[_0x4c44e3(0x109)]();switch(_0x47e2d0){case _0x4c44e3(0x910):this['setHelpWindowItem']($dataSkills[this['_actor'][_0x4c44e3(0xc2)]()]);break;case _0x4c44e3(0x2ff):this['setHelpWindowItem']($dataSkills[this['_actor'][_0x4c44e3(0x1d5)]()]);break;case _0x4c44e3(0x13d):const _0xb244f5=_0x37110b['HelpSkillType'],_0x21c37e=_0xb244f5[_0x4c44e3(0xab2)]($dataSystem[_0x4c44e3(0x376)][this[_0x4c44e3(0x976)]()]);this[_0x4c44e3(0xa76)][_0x4c44e3(0x50c)](_0x21c37e);break;case _0x4c44e3(0xd3):this[_0x4c44e3(0x629)]($dataSkills[this[_0x4c44e3(0x976)]()]);break;case _0x4c44e3(0xaf4):this['_helpWindow'][_0x4c44e3(0x50c)](_0x37110b['HelpItem']);break;case _0x4c44e3(0x362):this['_helpWindow'][_0x4c44e3(0x50c)](_0x37110b[_0x4c44e3(0x3df)]);break;case _0x4c44e3(0x428):this[_0x4c44e3(0xa76)][_0x4c44e3(0x50c)](_0x37110b[_0x4c44e3(0x92d)]);break;default:this[_0x4c44e3(0xa76)][_0x4c44e3(0x50c)]('');break;}},VisuMZ[_0x3fd7af(0x941)][_0x3fd7af(0x8b5)]=Window_BattleStatus['prototype'][_0x3fd7af(0x709)],Window_BattleStatus[_0x3fd7af(0x9fd)]['initialize']=function(_0x5eed52){const _0x2de41b=_0x3fd7af;VisuMZ[_0x2de41b(0x941)][_0x2de41b(0x8b5)][_0x2de41b(0x145)](this,_0x5eed52),this[_0x2de41b(0x708)](),this[_0x2de41b(0x50e)]();},Window_BattleStatus[_0x3fd7af(0x9fd)]['battleLayoutStyle']=function(){const _0x32a5ef=_0x3fd7af;if(this[_0x32a5ef(0x4ec)])return this['_battleLayoutStyle'];return this[_0x32a5ef(0x4ec)]=SceneManager[_0x32a5ef(0x450)]['battleLayoutStyle'](),this[_0x32a5ef(0x4ec)];},Window_BattleStatus['prototype']['initBattleCore']=function(){const _0x3272bc=_0x3fd7af;this[_0x3272bc(0x47b)]=this['isFrameVisible']();const _0x5580b7=VisuMZ[_0x3272bc(0x941)][_0x3272bc(0xa6b)]['BattleLayout'];_0x5580b7[_0x3272bc(0x98b)]&&(this['opacity']=0x0);},Window_BattleStatus[_0x3fd7af(0x9fd)][_0x3fd7af(0x99d)]=function(){const _0x843dc8=_0x3fd7af,_0x4cbb0c=VisuMZ['BattleCore']['Settings'][_0x843dc8(0x501)];if(_0x4cbb0c[_0x843dc8(0x74c)])return!![];const _0xfb9385=this['battleLayoutStyle']();switch(_0xfb9385){case _0x843dc8(0xfb):case _0x843dc8(0x2bf):return!![];break;case _0x843dc8(0x986):case'xp':case'portrait':default:return![];break;}},Window_BattleStatus[_0x3fd7af(0x9fd)]['extraHeight']=function(){const _0x94cbaf=_0x3fd7af;if(this[_0x94cbaf(0x99d)]())return 0x0;else{if(_0x94cbaf(0x6ac)!==_0x94cbaf(0x6ac))_0x486b32=this['_back1Sprite'][_0x94cbaf(0x2ec)](),_0x42c79a=this[_0x94cbaf(0x502)][_0x94cbaf(0x9d3)]();else return 0xa;}},Window_BattleStatus[_0x3fd7af(0x9fd)][_0x3fd7af(0x414)]=function(){const _0x1dc6f1=_0x3fd7af,_0x243df1=this[_0x1dc6f1(0xafe)]();switch(_0x243df1){case'list':return 0x1;break;case'xp':case _0x1dc6f1(0x833):return $gameParty[_0x1dc6f1(0x892)]()['length'];break;case _0x1dc6f1(0x986):default:return $gameParty[_0x1dc6f1(0x55f)]();break;}},Window_BattleStatus['prototype'][_0x3fd7af(0x1be)]=function(){const _0x2e6795=_0x3fd7af,_0x3fdbf6=this[_0x2e6795(0xafe)]();switch(_0x3fdbf6){case _0x2e6795(0xfb):return Window_StatusBase[_0x2e6795(0x9fd)][_0x2e6795(0x1be)]['call'](this);break;case _0x2e6795(0x986):case'xp':case'portrait':default:return this['innerHeight'];break;}},Window_BattleStatus[_0x3fd7af(0x9fd)][_0x3fd7af(0x9b8)]=function(){const _0x5365c3=_0x3fd7af,_0x4d49a4=this['battleLayoutStyle']();switch(_0x4d49a4){case _0x5365c3(0xfb):return Window_StatusBase[_0x5365c3(0x9fd)][_0x5365c3(0x9b8)][_0x5365c3(0x145)](this);break;case _0x5365c3(0x986):case'xp':case _0x5365c3(0x833):default:return 0x0;break;}},Window_BattleStatus['prototype'][_0x3fd7af(0x746)]=function(){const _0xeb3aa6=_0x3fd7af;if(this[_0xeb3aa6(0x99d)]()){if('uhXls'!==_0xeb3aa6(0x31b))return _0x1b5d00[_0xeb3aa6(0x9bc)]();else Window_StatusBase['prototype']['updatePadding'][_0xeb3aa6(0x145)](this);}else this[_0xeb3aa6(0x46a)]=0x8;},Window_BattleStatus[_0x3fd7af(0x9fd)][_0x3fd7af(0x660)]=function(){const _0xd8e3b4=_0x3fd7af,_0x1f0413=VisuMZ[_0xd8e3b4(0x941)][_0xd8e3b4(0xa6b)]['BattleLayout'];if(_0x1f0413[_0xd8e3b4(0x74c)])'AIVZW'==='llgBW'?(_0x507d3a=_0x46cbf9[_0xd8e3b4(0xad0)]/_0x3147ae[_0xd8e3b4(0x892)]()[_0xd8e3b4(0x732)],_0x5a669a*=_0x1748c2,_0x11a2a5+=_0x46897d[_0xd8e3b4(0xad0)]/_0x1ec0bb[_0xd8e3b4(0x892)]()['length']/0x2):this['windowskin']=ImageManager[_0xd8e3b4(0x802)](_0x1f0413['StatusWindowSkinFilename']);else{if(_0xd8e3b4(0xadf)!=='aUQis')return![];else Window_StatusBase[_0xd8e3b4(0x9fd)][_0xd8e3b4(0x660)]['call'](this);}},Window_BattleStatus[_0x3fd7af(0x9fd)][_0x3fd7af(0x902)]=function(_0x1c6621){const _0x3262d9=_0x3fd7af,_0x72e466=VisuMZ[_0x3262d9(0x941)]['Settings'][_0x3262d9(0x501)];if(_0x72e466[_0x3262d9(0x458)])return;Window_StatusBase['prototype'][_0x3262d9(0x902)][_0x3262d9(0x145)](this,_0x1c6621);},Window_BattleStatus[_0x3fd7af(0x9fd)][_0x3fd7af(0x48a)]=function(){const _0x4baf7e=_0x3fd7af;this[_0x4baf7e(0x87b)]=!![];},Window_BattleStatus[_0x3fd7af(0x9fd)][_0x3fd7af(0x2e0)]=function(){const _0x953f6b=_0x3fd7af;Window_StatusBase[_0x953f6b(0x9fd)][_0x953f6b(0x2e0)][_0x953f6b(0x145)](this),this['updateRefresh'](),this[_0x953f6b(0x8dc)]();if(this['battleLayoutStyle']()==='border')this['updateBorderStyle']();},Window_BattleStatus['prototype']['updateRefresh']=function(){const _0xcac5bd=_0x3fd7af;if($gameTemp[_0xcac5bd(0x359)]()){if(_0xcac5bd(0x127)!==_0xcac5bd(0xa1e))this[_0xcac5bd(0x10f)](),this['_requestRefresh']=![],$gameTemp['clearBattleRefreshRequest']();else{if(this[_0xcac5bd(0xaf4)]()['note'][_0xcac5bd(0x265)](/<DAMAGE STYLE:[ ](.*)>/i)){const _0x45fcfb=_0x2cd191(_0x8e08e8['$1'])[_0xcac5bd(0x989)]()['trim']();return _0x45fcfb;}return'MANUAL';}}else{if(this['_requestRefresh']){if(_0xcac5bd(0x527)!==_0xcac5bd(0x527)){if(!_0x538b1a[_0xcac5bd(0x970)]())return;if(!_0x4ee8e1['VisuMZ_3_ActSeqCamera'])return;const _0x235d77=_0x1dcb2d[_0xcac5bd(0x8be)]();if(!_0x235d77)return;_0x235d77[_0xcac5bd(0x992)](_0xcac5bd(0x899));}else this[_0xcac5bd(0x87b)]=![],this['refresh'](),this[_0xcac5bd(0x584)]();}}},Window_BattleStatus[_0x3fd7af(0x9fd)][_0x3fd7af(0x35d)]=function(){const _0xee1c1f=_0x3fd7af;Window_StatusBase['prototype']['show']['call'](this);if(!$gameSystem[_0xee1c1f(0x151)]())this['refresh']();},Window_BattleStatus[_0x3fd7af(0x9fd)][_0x3fd7af(0x96a)]=function(){const _0x4a5ea4=_0x3fd7af;if(this[_0x4a5ea4(0x26b)]===Window_BattleStatus)return;Window_StatusBase['prototype'][_0x4a5ea4(0x96a)][_0x4a5ea4(0x145)](this);},Window_BattleStatus[_0x3fd7af(0x9fd)][_0x3fd7af(0x396)]=function(_0x3fdbe0){const _0x2e1372=_0x3fd7af,_0x5a57ae=this['battleLayoutStyle']();switch(_0x5a57ae){case'xp':case'portrait':break;case _0x2e1372(0x986):case'list':case'border':default:return Window_StatusBase[_0x2e1372(0x9fd)]['drawBackgroundRect']['call'](this,_0x3fdbe0);break;}},VisuMZ[_0x3fd7af(0x941)][_0x3fd7af(0x6fd)]=Window_BattleStatus[_0x3fd7af(0x9fd)][_0x3fd7af(0x4e4)],Window_BattleStatus['prototype'][_0x3fd7af(0x4e4)]=function(_0x29fb9e){const _0x887830=_0x3fd7af,_0x1a8d75=this[_0x887830(0xafe)]();switch(_0x1a8d75){case _0x887830(0xfb):this[_0x887830(0x8f5)](_0x29fb9e);break;case'xp':this[_0x887830(0x451)](_0x29fb9e);break;case _0x887830(0x833):this['drawItemImagePortraitStyle'](_0x29fb9e);break;case _0x887830(0x986):case _0x887830(0x2bf):default:VisuMZ[_0x887830(0x941)][_0x887830(0x6fd)]['call'](this,_0x29fb9e);break;}},Window_BattleStatus[_0x3fd7af(0x9fd)][_0x3fd7af(0x7c6)]=function(_0x19b943){const _0x477127=_0x3fd7af,_0x1a42af=this['battleLayoutStyle']();if(!$gameSystem[_0x477127(0x151)]())this['centerFrontViewSprite'](_0x19b943);switch(_0x1a42af){case _0x477127(0xfb):this['drawItemStatusListStyle'](_0x19b943);break;case'xp':case _0x477127(0x833):case _0x477127(0x986):case'border':default:this[_0x477127(0x24e)](_0x19b943);break;}},Window_BattleStatus[_0x3fd7af(0x9fd)][_0x3fd7af(0x1d3)]=function(){const _0x5cf991=_0x3fd7af,_0x34317d=this[_0x5cf991(0xafe)]();if(['xp'][_0x5cf991(0x402)](_0x34317d)&&!$gameSystem[_0x5cf991(0x151)]()){this[_0x5cf991(0x65b)](0x0,0x0,0x0,0x0);return;}Window_StatusBase[_0x5cf991(0x9fd)][_0x5cf991(0x1d3)][_0x5cf991(0x145)](this);},Window_BattleStatus[_0x3fd7af(0x9fd)][_0x3fd7af(0x1ef)]=function(_0x4a28fb){const _0x5102cf=_0x3fd7af,_0x1006a7=this[_0x5102cf(0xe9)](_0x4a28fb)[_0x5102cf(0x181)]();if(!_0x1006a7)return;const _0x506716=this[_0x5102cf(0xafe)](),_0x4d4bcb=this['itemRect'](_0x4a28fb);let _0x9f4e79=Math['round'](_0x4d4bcb['x']+_0x4d4bcb[_0x5102cf(0xad0)]/0x2)+this[_0x5102cf(0x46a)];[_0x5102cf(0xfb)][_0x5102cf(0x402)](_0x506716)&&(_0x9f4e79=_0x4d4bcb[_0x5102cf(0xad0)]/$gameParty['battleMembers']()[_0x5102cf(0x732)],_0x9f4e79*=_0x4a28fb,_0x9f4e79+=_0x4d4bcb[_0x5102cf(0xad0)]/$gameParty['battleMembers']()[_0x5102cf(0x732)]/0x2);let _0x5f32bd=Math[_0x5102cf(0x819)](this['frontviewSpriteY'](_0x4a28fb,_0x1006a7,_0x4d4bcb));_0x1006a7['setHome'](_0x9f4e79,_0x5f32bd),this[_0x5102cf(0x11a)](_0x1006a7,0x1),_0x1006a7[_0x5102cf(0x35d)](),this[_0x5102cf(0x75c)](),this['updateAttachmentSprites']();},Window_BattleStatus[_0x3fd7af(0x9fd)]['frontviewSpriteY']=function(_0x12ae13,_0x287d4c,_0x268754){const _0x4ed68d=_0x3fd7af,_0x486cb6=VisuMZ[_0x4ed68d(0x941)][_0x4ed68d(0xa6b)][_0x4ed68d(0x501)],_0x2381b1=this[_0x4ed68d(0xafe)]();if(_0x2381b1==='xp'){const _0x54acdb=_0x486cb6[_0x4ed68d(0x196)];switch(_0x54acdb[_0x4ed68d(0x81b)]()[_0x4ed68d(0x306)]()){case _0x4ed68d(0x2b8):return _0x268754[_0x4ed68d(0x26a)]-_0x287d4c[_0x4ed68d(0xac2)]['height']/0x4;break;case _0x4ed68d(0x8ff):const _0x19ff3e=_0x486cb6['XPActorDefaultHeight'];return(_0x268754['height']+(_0x287d4c['height']||_0x19ff3e))/0x2;break;case _0x4ed68d(0x21e):return 0x0;case'name':default:return this['nameY'](_0x268754);break;}}else{if(_0x2381b1===_0x4ed68d(0x833)){}}return _0x287d4c[_0x4ed68d(0x26a)];},Window_BattleStatus[_0x3fd7af(0x9fd)][_0x3fd7af(0x8f5)]=function(_0x4037dd){const _0x468c15=_0x3fd7af;if(!VisuMZ['BattleCore'][_0x468c15(0xa6b)][_0x468c15(0x501)][_0x468c15(0x508)])return;const _0x57c9e6=this[_0x468c15(0xe9)](_0x4037dd),_0x399a4d=this['itemRect'](_0x4037dd);_0x399a4d['width']=ImageManager[_0x468c15(0x7fc)],_0x399a4d[_0x468c15(0x26a)]-=0x2,this['drawActorFace'](_0x57c9e6,_0x399a4d['x']+0x1,_0x399a4d['y']+0x1,_0x399a4d[_0x468c15(0xad0)],_0x399a4d[_0x468c15(0x26a)]);},Window_BattleStatus[_0x3fd7af(0x9fd)][_0x3fd7af(0x28c)]=function(_0x2fa1d9){const _0x45a5f0=_0x3fd7af,_0x5d90b5=VisuMZ['BattleCore'][_0x45a5f0(0xa6b)][_0x45a5f0(0x501)],_0x5a9f95=$dataSystem[_0x45a5f0(0x64d)]?0x4:0x3,_0x1ed68d=_0x5a9f95*0x80+(_0x5a9f95-0x1)*0x8+0x4,_0x2d9732=this[_0x45a5f0(0xe9)](_0x2fa1d9),_0x1720bd=this['itemRect'](_0x2fa1d9);let _0x51dd66=_0x1720bd['x']+this[_0x45a5f0(0x46a)];if(_0x5d90b5[_0x45a5f0(0x508)])_0x51dd66=_0x1720bd['x']+ImageManager[_0x45a5f0(0x7fc)]+0x8;else{if(_0x45a5f0(0x2e1)!==_0x45a5f0(0x2e1))return _0x591c12[_0x45a5f0(0xa8)](_0x392682=>_0x392682[_0x45a5f0(0x7fd)]()&&_0x392682!==_0x5df05e);else _0x51dd66+=ImageManager[_0x45a5f0(0x542)];}const _0x2bc455=Math[_0x45a5f0(0x819)](Math['min'](_0x1720bd['x']+_0x1720bd[_0x45a5f0(0xad0)]-_0x1ed68d,_0x51dd66)),_0x501dac=Math['round'](_0x1720bd['y']+(_0x1720bd[_0x45a5f0(0x26a)]-Sprite_Name['prototype']['bitmapHeight']())/0x2),_0x485318=Math[_0x45a5f0(0x819)](_0x2bc455-ImageManager[_0x45a5f0(0x542)]/0x2-0x4),_0xb8e857=Math[_0x45a5f0(0x819)](_0x1720bd['y']+(_0x1720bd['height']-ImageManager[_0x45a5f0(0x5b6)])/0x2+ImageManager[_0x45a5f0(0x5b6)]/0x2);let _0xe0938e=_0x2bc455+0x88;const _0x418dc2=_0x501dac;this[_0x45a5f0(0x24d)](_0x2d9732,_0x2bc455-0x4+(_0x5d90b5[_0x45a5f0(0x745)]||0x0),_0x501dac+(_0x5d90b5[_0x45a5f0(0x597)]||0x0)),this['placeActorName'](_0x2d9732,_0x2bc455+(_0x5d90b5[_0x45a5f0(0x27a)]||0x0),_0x501dac+(_0x5d90b5[_0x45a5f0(0xa48)]||0x0)),this[_0x45a5f0(0x6b1)](_0x2d9732,_0x485318+(_0x5d90b5[_0x45a5f0(0xa20)]||0x0),_0xb8e857+(_0x5d90b5[_0x45a5f0(0x315)]||0x0)),this[_0x45a5f0(0x8b3)](_0x2d9732,'hp',_0xe0938e+0x88*0x0+(_0x5d90b5[_0x45a5f0(0x1f4)]||0x0),_0x418dc2+(_0x5d90b5[_0x45a5f0(0x85b)]||0x0)),this[_0x45a5f0(0x8b3)](_0x2d9732,'mp',_0xe0938e+0x88*0x1+(_0x5d90b5['MpGaugeOffsetX']||0x0),_0x418dc2+(_0x5d90b5['MpGaugeOffsetY']||0x0)),$dataSystem[_0x45a5f0(0x64d)]&&this[_0x45a5f0(0x8b3)](_0x2d9732,'tp',_0xe0938e+0x88*0x2+(_0x5d90b5['TpGaugeOffsetX']||0x0),_0x418dc2+(_0x5d90b5[_0x45a5f0(0x102)]||0x0));},Window_BattleStatus[_0x3fd7af(0x9fd)][_0x3fd7af(0x451)]=function(_0x390718){const _0x22e215=_0x3fd7af;if(!$gameSystem[_0x22e215(0x151)]())return;VisuMZ['BattleCore'][_0x22e215(0x6fd)][_0x22e215(0x145)](this,_0x390718);},Window_BattleStatus['prototype'][_0x3fd7af(0x24e)]=function(_0x14824f){const _0x901a9d=_0x3fd7af,_0x3c8313=VisuMZ['BattleCore'][_0x901a9d(0xa6b)][_0x901a9d(0x501)],_0x3554c9=this[_0x901a9d(0xe9)](_0x14824f),_0x509302=this[_0x901a9d(0x864)](_0x14824f),_0x5827f7=Math[_0x901a9d(0x819)](_0x509302['x']+(_0x509302[_0x901a9d(0xad0)]-0x80)/0x2),_0x386fce=this[_0x901a9d(0x66c)](_0x509302);let _0x387acb=_0x5827f7-ImageManager[_0x901a9d(0x542)]/0x2-0x4,_0x431713=_0x386fce+ImageManager[_0x901a9d(0x5b6)]/0x2;_0x387acb-ImageManager[_0x901a9d(0x542)]/0x2<_0x509302['x']&&(_0x387acb=_0x5827f7+ImageManager[_0x901a9d(0x542)]/0x2-0x4,_0x431713=_0x386fce-ImageManager[_0x901a9d(0x5b6)]/0x2);const _0x54da09=_0x5827f7,_0x59aac5=this['basicGaugesY'](_0x509302);this[_0x901a9d(0x24d)](_0x3554c9,_0x5827f7+(_0x3c8313[_0x901a9d(0x745)]||0x0),_0x386fce+(_0x3c8313['TpbGaugeOffsetY']||0x0)),this[_0x901a9d(0xa6f)](_0x3554c9,_0x5827f7+(_0x3c8313[_0x901a9d(0x27a)]||0x0),_0x386fce+(_0x3c8313[_0x901a9d(0xa48)]||0x0)),this['placeStateIcon'](_0x3554c9,_0x387acb+(_0x3c8313[_0x901a9d(0xa20)]||0x0),_0x431713+(_0x3c8313[_0x901a9d(0x315)]||0x0)),this[_0x901a9d(0x8b3)](_0x3554c9,'hp',_0x54da09+(_0x3c8313['HpGaugeOffsetX']||0x0),_0x59aac5+(_0x3c8313[_0x901a9d(0x85b)]||0x0)),this[_0x901a9d(0x8b3)](_0x3554c9,'mp',_0x54da09+(_0x3c8313[_0x901a9d(0x287)]||0x0),_0x59aac5+this[_0x901a9d(0x665)]()+(_0x3c8313[_0x901a9d(0xac0)]||0x0)),$dataSystem[_0x901a9d(0x64d)]&&this[_0x901a9d(0x8b3)](_0x3554c9,'tp',_0x54da09+(_0x3c8313['TpGaugeOffsetX']||0x0),_0x59aac5+this['gaugeLineHeight']()*0x2+(_0x3c8313['TpGaugeOffsetY']||0x0));},Window_BattleStatus['prototype'][_0x3fd7af(0x8e3)]=function(_0x5d2e51){const _0x544034=_0x3fd7af;if(!VisuMZ[_0x544034(0x941)][_0x544034(0xa6b)][_0x544034(0x501)][_0x544034(0x622)])return![];if(_0x5d2e51['getBattlePortrait']())return!![];return Imported[_0x544034(0xa3b)]&&_0x5d2e51[_0x544034(0x4ae)]();},Game_Actor[_0x3fd7af(0x9fd)][_0x3fd7af(0x44f)]=function(){const _0xa12cb0=_0x3fd7af;if(this[_0xa12cb0(0xe9)]()[_0xa12cb0(0x7b9)][_0xa12cb0(0x265)](/<BATTLE (?:IMAGE|PORTRAIT) OFFSET X:[ ]([\+\-]\d+)>/i))return Number(RegExp['$1']);else{if(this[_0xa12cb0(0xe9)]()[_0xa12cb0(0x7b9)][_0xa12cb0(0x265)](/<BATTLE (?:IMAGE|PORTRAIT) OFFSET:[ ]([\+\-]\d+),[ ]([\+\-]\d+)>/i)){if('CIZeF'==='gpahR'){let _0x37c868=_0x173719(_0x48ed1e['$1']);while(_0x37c868--){_0x25fcf1[_0xa12cb0(0x18b)](this['opponentsUnit']()[_0xa12cb0(0x943)]());}return this[_0xa12cb0(0x4e5)](_0x5ad6cd);}else return Number(RegExp['$1']);}}return 0x0;},Game_Actor[_0x3fd7af(0x9fd)][_0x3fd7af(0x113)]=function(){const _0x3eb00d=_0x3fd7af;if(this[_0x3eb00d(0xe9)]()['note'][_0x3eb00d(0x265)](/<BATTLE (?:IMAGE|PORTRAIT) OFFSET Y:[ ]([\+\-]\d+)>/i))return Number(RegExp['$1']);else{if(this[_0x3eb00d(0xe9)]()[_0x3eb00d(0x7b9)]['match'](/<BATTLE (?:IMAGE|PORTRAIT) OFFSET:[ ]([\+\-]\d+),[ ]([\+\-]\d+)>/i)){if(_0x3eb00d(0x2e8)!==_0x3eb00d(0x2f1))return Number(RegExp['$2']);else _0x5aacef['push'](_0x3eb00d(0x16c),_0x3a9afe);}}return 0x0;},Window_BattleStatus['prototype'][_0x3fd7af(0x8d8)]=function(_0x28de1a){const _0x3701f3=_0x3fd7af,_0xe4c2d3=this[_0x3701f3(0xe9)](_0x28de1a);if(this[_0x3701f3(0x8e3)](_0xe4c2d3)){const _0x2f6609=_0x3701f3(0x1a6)[_0x3701f3(0xab2)](_0xe4c2d3[_0x3701f3(0x2aa)]()),_0x28e897=this['createInnerPortrait'](_0x2f6609,Sprite),_0x13e3d1=_0xe4c2d3[_0x3701f3(0x468)]();_0x13e3d1!==''?'oeaia'==='TgdtG'?this['_phase']=_0x3701f3(0xac3):_0x28e897[_0x3701f3(0x2cf)]=ImageManager[_0x3701f3(0x2fc)](_0x13e3d1):_0x28e897[_0x3701f3(0x2cf)]=ImageManager['_emptyBitmap'];const _0x30fefb=this['itemRect'](_0x28de1a);_0x28e897[_0x3701f3(0x39b)]['x']=0.5,_0x28e897['anchor']['y']=0x1;let _0x5d905b=Math[_0x3701f3(0x819)](_0x30fefb['x']+_0x30fefb['width']/0x2)+this[_0x3701f3(0x46a)];_0x5d905b+=_0xe4c2d3[_0x3701f3(0x44f)]();let _0x100845=Math[_0x3701f3(0x819)](this['height']);_0x100845+=_0xe4c2d3['getBattlePortraitOffsetY'](),_0x28e897[_0x3701f3(0x334)](_0x5d905b,_0x100845);const _0x321f81=VisuMZ['BattleCore'][_0x3701f3(0xa6b)][_0x3701f3(0x501)][_0x3701f3(0x583)];_0x28e897['scale']['x']=_0x321f81,_0x28e897['scale']['y']=_0x321f81,_0x28e897[_0x3701f3(0x35d)]();}else{const _0x1a2502=this[_0x3701f3(0x2bd)](_0x28de1a);this[_0x3701f3(0x90d)](_0xe4c2d3,_0x1a2502['x'],_0x1a2502['y'],_0x1a2502[_0x3701f3(0xad0)],_0x1a2502[_0x3701f3(0x26a)]);}},Window_BattleStatus[_0x3fd7af(0x9fd)][_0x3fd7af(0x366)]=function(_0x1a8a49,_0x59a19e){const _0x447ccf=_0x3fd7af,_0x4cd282=this['_additionalSprites'];if(_0x4cd282[_0x1a8a49]){if('nCxVi'==='bFcdJ')this['_tpbSceneChangeCacheActor']=null;else return _0x4cd282[_0x1a8a49];}else{const _0x1b64e9=new _0x59a19e();return _0x4cd282[_0x1a8a49]=_0x1b64e9,this[_0x447ccf(0x3f2)](_0x1b64e9),this['addChildToBack'](this[_0x447ccf(0x17e)]),_0x1b64e9;}},Window_BattleStatus['prototype'][_0x3fd7af(0x5ca)]=function(){const _0x576a05=_0x3fd7af;this[_0x576a05(0x2f7)](),this[_0x576a05(0xc7)](),Window_StatusBase[_0x576a05(0x9fd)][_0x576a05(0x5ca)][_0x576a05(0x145)](this),this[_0x576a05(0x7dc)]();},Window_BattleStatus[_0x3fd7af(0x9fd)][_0x3fd7af(0x2f7)]=function(){const _0x282497=_0x3fd7af;this[_0x282497(0x17e)]=new Sprite(),this[_0x282497(0x17e)]['filters']=[new PIXI['filters']['AlphaFilter']()],this[_0x282497(0x17e)]['filterArea']=new Rectangle(),this[_0x282497(0x17e)][_0x282497(0x334)](this['_padding'],this['_padding']),this[_0x282497(0x96c)](this['_cursorArea']);},Window_BattleStatus[_0x3fd7af(0x9fd)][_0x3fd7af(0xc7)]=function(){const _0x5e9632=_0x3fd7af;this[_0x5e9632(0x1de)]=new Sprite(),this[_0x5e9632(0x96c)](this[_0x5e9632(0x1de)]);},Window_BattleStatus[_0x3fd7af(0x9fd)][_0x3fd7af(0x75c)]=function(){const _0x2c64f1=_0x3fd7af;this[_0x2c64f1(0x1de)]&&this[_0x2c64f1(0x96c)](this[_0x2c64f1(0x1de)]);},Window_BattleStatus[_0x3fd7af(0x9fd)][_0x3fd7af(0x7dc)]=function(){const _0x19cf48=_0x3fd7af;this[_0x19cf48(0x5ee)]=new Sprite(),this[_0x19cf48(0x96c)](this[_0x19cf48(0x5ee)]);},Window_BattleStatus['prototype'][_0x3fd7af(0x4ea)]=function(){const _0x774a9f=_0x3fd7af;this[_0x774a9f(0x757)]=new Sprite();for(let _0x299b76=0x0;_0x299b76<0x9;_0x299b76++){if(_0x774a9f(0x23e)===_0x774a9f(0x89a)){if(!_0xdbe7e8[_0x774a9f(0x941)]['JS'][_0x2515f0][_0x774a9f(0x145)](this,this[_0x774a9f(0x804)],_0x3ed923))return![];}else this[_0x774a9f(0x757)][_0x774a9f(0x96c)](new Sprite());}this[_0x774a9f(0x17e)][_0x774a9f(0x96c)](this['_cursorSprite']);},Window_BattleStatus[_0x3fd7af(0x9fd)][_0x3fd7af(0x17f)]=function(){const _0x5b6d9e=_0x3fd7af;Window_StatusBase[_0x5b6d9e(0x9fd)]['_updateClientArea'][_0x5b6d9e(0x145)](this),this[_0x5b6d9e(0x213)]();},Window_BattleStatus['prototype']['_updateCursorArea']=function(){const _0x4980bf=_0x3fd7af,_0x13bfe3=this['_padding'];this[_0x4980bf(0x17e)][_0x4980bf(0x334)](_0x13bfe3,_0x13bfe3),this[_0x4980bf(0x17e)]['x']=_0x13bfe3-this['origin']['x'],this[_0x4980bf(0x17e)]['y']=_0x13bfe3-this[_0x4980bf(0x7b0)]['y'],this[_0x4980bf(0x6f1)]>0x0&&this[_0x4980bf(0x8f7)]>0x0?'JmykX'!==_0x4980bf(0x2a3)?(this[_0x4980bf(0x780)](),this['_currentActor']=null,this[_0x4980bf(0x533)]=![]):this[_0x4980bf(0x17e)][_0x4980bf(0x596)]=this[_0x4980bf(0x235)]():this[_0x4980bf(0x17e)][_0x4980bf(0x596)]=![];},Window_BattleStatus[_0x3fd7af(0x9fd)][_0x3fd7af(0x14a)]=function(){const _0x24271c=_0x3fd7af;Window_StatusBase['prototype'][_0x24271c(0x14a)][_0x24271c(0x145)](this),this[_0x24271c(0x7b4)]();},Window_BattleStatus[_0x3fd7af(0x9fd)]['_updateCursorFilterArea']=function(){const _0x1963ce=_0x3fd7af,_0x2967d2=this['_cursorArea'][_0x1963ce(0x8ed)][_0x1963ce(0x3ca)](new Point(0x0,0x0)),_0x5e421e=this[_0x1963ce(0x17e)]['filterArea'];_0x5e421e['x']=_0x2967d2['x']+this[_0x1963ce(0x7b0)]['x'],_0x5e421e['y']=_0x2967d2['y']+this[_0x1963ce(0x7b0)]['y'],_0x5e421e['width']=this[_0x1963ce(0x6f1)],_0x5e421e[_0x1963ce(0x26a)]=this[_0x1963ce(0x8f7)];},Window_BattleStatus[_0x3fd7af(0x9fd)][_0x3fd7af(0x1e3)]=function(_0x1a8690){const _0x46d7e7=_0x3fd7af;if(this['battleLayoutStyle']()!==_0x46d7e7(0x833))return;this[_0x46d7e7(0x8d8)](_0x1a8690['index']());},Window_BattleStatus[_0x3fd7af(0x9fd)][_0x3fd7af(0x50d)]=function(_0x1664aa,_0x22f277){const _0x2052b2=_0x3fd7af;if(!this['_damageContainer'])return;if(!_0x1664aa)return;if(!_0x22f277)return;const _0x149128=this[_0x2052b2(0x864)](_0x22f277[_0x2052b2(0x417)]());_0x149128['x']+=_0x149128[_0x2052b2(0xad0)]/0x2+this['padding'],_0x1664aa['x']=_0x149128['x'],_0x1664aa['y']=_0x149128['y'],this[_0x2052b2(0x5ee)][_0x2052b2(0x96c)](_0x1664aa);},Window_BattleStatus['prototype']['removeDamageSprite']=function(_0x500eab){const _0x3bed6e=_0x3fd7af;if(!this[_0x3bed6e(0x5ee)])return;if(!_0x500eab)return;this[_0x3bed6e(0x5ee)]['removeChild'](_0x500eab);},Window_BattleStatus['prototype'][_0x3fd7af(0x19e)]=function(){const _0x2c36fa=_0x3fd7af;if(!this[_0x2c36fa(0x870)]())return;if(!this[_0x2c36fa(0xf6)])this[_0x2c36fa(0x3c1)]();this['prepareBorderActor'](),this[_0x2c36fa(0x161)]();},Window_BattleStatus[_0x3fd7af(0x9fd)]['isBorderStylePortraitShown']=function(){const _0x28dd47=_0x3fd7af;if(this['constructor']!==Window_BattleStatus)return![];if(!SceneManager[_0x28dd47(0x970)]())return![];return VisuMZ['BattleCore'][_0x28dd47(0xa6b)][_0x28dd47(0x501)]['ShowPortraitsBorderStyle'];},Window_BattleStatus[_0x3fd7af(0x9fd)][_0x3fd7af(0x3c1)]=function(){const _0x52f0d7=_0x3fd7af;this[_0x52f0d7(0xf6)]=new Sprite();const _0x494af5=SceneManager[_0x52f0d7(0x450)],_0xf88d02=_0x494af5['children'][_0x52f0d7(0x760)](_0x494af5[_0x52f0d7(0x78a)]);_0x494af5['addChildAt'](this['_borderPortraitSprite'],_0xf88d02),this[_0x52f0d7(0xf6)][_0x52f0d7(0x39b)]['x']=0.5,this['_borderPortraitSprite'][_0x52f0d7(0x39b)]['y']=0x1;const _0x147d7b=VisuMZ[_0x52f0d7(0x941)]['Settings'][_0x52f0d7(0x501)]['PortraitScaleBorderStyle'];this['_borderPortraitSprite'][_0x52f0d7(0x1c9)]['x']=_0x147d7b,this[_0x52f0d7(0xf6)][_0x52f0d7(0x1c9)]['y']=_0x147d7b,this[_0x52f0d7(0xf6)]['y']=this['y']+this['height'],this[_0x52f0d7(0x517)]=0x0;},Window_BattleStatus[_0x3fd7af(0x9fd)][_0x3fd7af(0x15a)]=function(){const _0x51d5cd=_0x3fd7af;this[_0x51d5cd(0xf6)][_0x51d5cd(0x596)]=BattleManager[_0x51d5cd(0x12e)]();const _0x24a8e0=BattleManager[_0x51d5cd(0xe9)]();if(_0x24a8e0===this[_0x51d5cd(0xf6)][_0x51d5cd(0xe9)])return;this[_0x51d5cd(0xf6)][_0x51d5cd(0xe9)]=_0x24a8e0||this[_0x51d5cd(0xf6)][_0x51d5cd(0xe9)];if(!_0x24a8e0)return;else{if(_0x24a8e0[_0x51d5cd(0x468)]()===''){if(_0x51d5cd(0x658)===_0x51d5cd(0x3a2)){if(!_0x17c520)return![];return _0x562cd4[_0x51d5cd(0x79d)]===0x0||_0x170d30[_0x51d5cd(0x79d)]===0x1;}else{this[_0x51d5cd(0xf6)][_0x51d5cd(0x2cf)]=ImageManager[_0x51d5cd(0x6f8)];return;}}else{const _0x53b57e=ImageManager[_0x51d5cd(0x2fc)](_0x24a8e0[_0x51d5cd(0x468)]());_0x53b57e[_0x51d5cd(0x251)](this[_0x51d5cd(0xa13)][_0x51d5cd(0x769)](this,_0x53b57e));}}},Window_BattleStatus['prototype'][_0x3fd7af(0xa13)]=function(_0x49052d){const _0x528358=_0x3fd7af;this['_borderPortraitDuration']=0x14,this[_0x528358(0xf6)]['bitmap']=_0x49052d;SceneManager[_0x528358(0x450)][_0x528358(0x557)]()?'dBuPu'!=='TIpiM'?(this[_0x528358(0xf6)]['x']=0x0,this[_0x528358(0x8c3)]=Math[_0x528358(0x821)](_0x49052d[_0x528358(0xad0)]/0x2)):this[_0x528358(0xa9a)]['isSpriteVisible']()&&this[_0x528358(0x34a)]():(this[_0x528358(0xf6)]['x']=this['width'],this['_borderPortraitTargetX']=this['width']*0x3/0x4);this[_0x528358(0xf6)][_0x528358(0x824)]=0x0,this[_0x528358(0xf6)]['y']=this['y']+this[_0x528358(0x26a)];const _0x4b8ebc=BattleManager['actor']();_0x4b8ebc&&(_0x528358(0x8b1)!==_0x528358(0x8a8)?(this[_0x528358(0x8c3)]+=_0x4b8ebc[_0x528358(0x44f)](),this[_0x528358(0xf6)]['y']+=_0x4b8ebc['getBattlePortraitOffsetY']()):this['_forcedBattleLayout']=_0x528358(0x986));},Window_BattleStatus[_0x3fd7af(0x9fd)][_0x3fd7af(0x161)]=function(){const _0x35f023=_0x3fd7af;if(this[_0x35f023(0x517)]>0x0){const _0x558d8b=this['_borderPortraitDuration'],_0x3c531f=this[_0x35f023(0xf6)];_0x3c531f['x']=(_0x3c531f['x']*(_0x558d8b-0x1)+this[_0x35f023(0x8c3)])/_0x558d8b,_0x3c531f[_0x35f023(0x824)]=(_0x3c531f[_0x35f023(0x824)]*(_0x558d8b-0x1)+0xff)/_0x558d8b,this[_0x35f023(0x517)]--;}},Window_BattleStatus[_0x3fd7af(0x9fd)][_0x3fd7af(0x8dc)]=function(){const _0x4a7ed4=_0x3fd7af;return;this[_0x4a7ed4(0x1de)]&&(this['_effectsContainer']['x']=this['x'],this[_0x4a7ed4(0x1de)]['y']=this['y']),this[_0x4a7ed4(0x5ee)]&&(_0x4a7ed4(0x4b0)===_0x4a7ed4(0x978)?this[_0x4a7ed4(0x42a)](_0x4a7ed4(0x486)):(this['_damageContainer']['x']=this['x'],this[_0x4a7ed4(0x5ee)]['y']=this['y']));},Window_BattleStatus[_0x3fd7af(0x9fd)][_0x3fd7af(0x50e)]=function(){const _0x4b5e5d=_0x3fd7af,_0x247f72=VisuMZ[_0x4b5e5d(0x941)][_0x4b5e5d(0xa6b)][_0x4b5e5d(0x501)];if(_0x247f72['StatusWindowAttachmentBack']){const _0x34672e=new Sprite();_0x34672e[_0x4b5e5d(0x2cf)]=ImageManager[_0x4b5e5d(0x802)](_0x247f72[_0x4b5e5d(0x74a)]),_0x34672e['x']=_0x247f72['StatusWindowAttachmentBackOffsetX']||0x0,_0x34672e['y']=_0x247f72[_0x4b5e5d(0xf4)]||0x0,this['addChildToBack'](_0x34672e),this['_backAttachmentSprite']=_0x34672e;}if(_0x247f72[_0x4b5e5d(0x8c4)]){const _0x18d21c=new Sprite();_0x18d21c[_0x4b5e5d(0x2cf)]=ImageManager[_0x4b5e5d(0x802)](_0x247f72['StatusWindowAttachmentFront']),_0x18d21c['x']=_0x247f72['StatusWindowAttachmentFrontOffsetX']||0x0,_0x18d21c['y']=_0x247f72[_0x4b5e5d(0x30f)]||0x0,this['addChild'](_0x18d21c),this['_frontAttachmentSprite']=_0x18d21c;}},Window_BattleStatus[_0x3fd7af(0x9fd)][_0x3fd7af(0x584)]=function(){const _0x15b6de=_0x3fd7af;this[_0x15b6de(0x77c)]&&this[_0x15b6de(0x96c)](this[_0x15b6de(0x77c)]),this[_0x15b6de(0x20e)]&&this[_0x15b6de(0x3f2)](this[_0x15b6de(0x20e)]);},Window_BattleActor[_0x3fd7af(0x9fd)][_0x3fd7af(0x13b)]=function(){const _0x2036e0=_0x3fd7af;return Window_BattleStatus[_0x2036e0(0x9fd)][_0x2036e0(0x13b)][_0x2036e0(0x145)](this)&&this[_0x2036e0(0x26c)]();},Window_BattleActor[_0x3fd7af(0x9fd)]['isActionSelectionValid']=function(){const _0x434f6a=_0x3fd7af,_0x4086f4=BattleManager[_0x434f6a(0x681)](),_0x146341=this['actor'](this[_0x434f6a(0x417)]());if(!_0x4086f4)return!![];if(!_0x4086f4[_0x434f6a(0xaf4)]())return!![];const _0x1c6c2e=_0x4086f4['item']()['note'];if(_0x1c6c2e[_0x434f6a(0x265)](/<CANNOT TARGET (?:USER|SELF)>/i)){if(_0x434f6a(0x675)!=='qCLkJ'){if(_0x146341===BattleManager['actor']())return![];}else this[_0x434f6a(0x8c3)]+=_0x3c577a['getBattlePortraitOffsetX'](),this['_borderPortraitSprite']['y']+=_0x1d99fa[_0x434f6a(0x113)]();}return!![];},VisuMZ[_0x3fd7af(0x941)]['Window_BattleEnemy_initialize']=Window_BattleEnemy[_0x3fd7af(0x9fd)][_0x3fd7af(0x709)],Window_BattleEnemy[_0x3fd7af(0x9fd)][_0x3fd7af(0x709)]=function(_0x103cd8){const _0x4f35f0=_0x3fd7af;this['_lastEnemy']=null,VisuMZ['BattleCore'][_0x4f35f0(0x3d8)][_0x4f35f0(0x145)](this,_0x103cd8);},Window_BattleEnemy[_0x3fd7af(0x9fd)][_0x3fd7af(0x414)]=function(){const _0x1c5c88=_0x3fd7af;return this[_0x1c5c88(0x84f)]();},VisuMZ[_0x3fd7af(0x941)]['Window_BattleEnemy_show']=Window_BattleEnemy[_0x3fd7af(0x9fd)][_0x3fd7af(0x35d)],Window_BattleEnemy['prototype'][_0x3fd7af(0x35d)]=function(){const _0x495f98=_0x3fd7af;VisuMZ[_0x495f98(0x941)][_0x495f98(0x230)][_0x495f98(0x145)](this),this['y']=Graphics['height']*0xa;},Window_BattleEnemy[_0x3fd7af(0x9fd)]['validTargets']=function(){const _0x202e61=_0x3fd7af;return $gameTroop[_0x202e61(0x813)]()[_0x202e61(0x7c7)](0x0);},Window_BattleEnemy['prototype']['refresh']=function(){const _0x43b582=_0x3fd7af;this[_0x43b582(0x397)]=this[_0x43b582(0x1db)](),this[_0x43b582(0x329)](),Window_Selectable[_0x43b582(0x9fd)][_0x43b582(0x898)][_0x43b582(0x145)](this);},Window_BattleEnemy[_0x3fd7af(0x9fd)][_0x3fd7af(0x329)]=function(){const _0x779e05=_0x3fd7af;this[_0x779e05(0x397)][_0x779e05(0x65c)]((_0x1d91a9,_0xb53eed)=>{const _0x2380b9=_0x779e05;return _0x1d91a9[_0x2380b9(0x181)]()[_0x2380b9(0x62e)]===_0xb53eed['battler']()[_0x2380b9(0x62e)]?_0x1d91a9['battler']()[_0x2380b9(0x69d)]-_0xb53eed[_0x2380b9(0x181)]()[_0x2380b9(0x69d)]:_0x1d91a9[_0x2380b9(0x181)]()[_0x2380b9(0x62e)]-_0xb53eed['battler']()[_0x2380b9(0x62e)];}),SceneManager[_0x779e05(0xb6)]()&&this[_0x779e05(0x397)][_0x779e05(0x38d)]();},Window_BattleEnemy[_0x3fd7af(0x9fd)][_0x3fd7af(0x535)]=function(){const _0x353250=_0x3fd7af,_0x4ec0fc=VisuMZ['BattleCore'][_0x353250(0xa6b)][_0x353250(0x520)];_0x4ec0fc[_0x353250(0x71a)]?this[_0x353250(0x1dd)]():this[_0x353250(0x66e)]();},Window_BattleEnemy[_0x3fd7af(0x9fd)][_0x3fd7af(0x1dd)]=function(){const _0x220ab4=_0x3fd7af;if(this[_0x220ab4(0x176)]&&this[_0x220ab4(0x397)][_0x220ab4(0x402)](this['_lastEnemy'])){const _0x27b632=this[_0x220ab4(0x397)][_0x220ab4(0x760)](this[_0x220ab4(0x176)]);this[_0x220ab4(0xe8)](_0x27b632);}else{if(_0x220ab4(0x66f)!=='LTVeT'){const _0x4262dc=_0x45e4e8[_0x220ab4(0xab2)](_0x199693[_0x220ab4(0x504)](),_0x448be0[_0x220ab4(0x2fe)](_0x5992fa));this[_0x220ab4(0x18b)](_0x220ab4(0xe7)),this[_0x220ab4(0x18b)](_0x220ab4(0x86f)),this[_0x220ab4(0x18b)](_0x220ab4(0x2d6),_0x4262dc),this[_0x220ab4(0x18b)]('wait');}else this['autoSelectPriority']();}},Window_BattleEnemy[_0x3fd7af(0x9fd)][_0x3fd7af(0x66e)]=function(){const _0x130c0a=_0x3fd7af,_0x2136b2=VisuMZ[_0x130c0a(0x941)][_0x130c0a(0xa6b)][_0x130c0a(0x520)];let _0x27928d=![];$gameSystem['isSideView']()?'EHIZt'===_0x130c0a(0x7ea)?(_0x228099+=_0x3fd9f0,_0x236259+=_0x2fdbb1[_0x130c0a(0x91d)]()?-_0x390d25:_0x5c5663):_0x27928d=_0x2136b2[_0x130c0a(0x338)]:_0x27928d=_0x2136b2[_0x130c0a(0xa0c)],this[_0x130c0a(0xe8)](_0x27928d?this['maxItems']()-0x1:0x0);},Window_BattleEnemy[_0x3fd7af(0x9fd)][_0x3fd7af(0x8af)]=function(){const _0x152df4=_0x3fd7af;Window_Selectable['prototype']['callOkHandler'][_0x152df4(0x145)](this),this['_lastEnemy']=this[_0x152df4(0xb4)]();},Window_BattleItem[_0x3fd7af(0x9fd)][_0x3fd7af(0x402)]=function(_0x5e05c4){const _0x3f2f4a=_0x3fd7af;if(!_0x5e05c4)return![];return _0x5e05c4[_0x3f2f4a(0x79d)]===0x0||_0x5e05c4[_0x3f2f4a(0x79d)]===0x1;};function Window_AutoBattleCancel(){this['initialize'](...arguments);}Window_AutoBattleCancel[_0x3fd7af(0x9fd)]=Object[_0x3fd7af(0x56f)](Window_Base[_0x3fd7af(0x9fd)]),Window_AutoBattleCancel[_0x3fd7af(0x9fd)]['constructor']=Window_AutoBattleCancel,Window_AutoBattleCancel[_0x3fd7af(0x9fd)][_0x3fd7af(0x709)]=function(_0x45182c){const _0x55a30b=_0x3fd7af;Window_Base[_0x55a30b(0x9fd)][_0x55a30b(0x709)][_0x55a30b(0x145)](this,_0x45182c),this[_0x55a30b(0x793)](this[_0x55a30b(0x6b5)]()),this[_0x55a30b(0x898)]();},Window_AutoBattleCancel[_0x3fd7af(0x9fd)][_0x3fd7af(0x6b5)]=function(){const _0x37f9b4=_0x3fd7af;return VisuMZ[_0x37f9b4(0x941)][_0x37f9b4(0xa6b)][_0x37f9b4(0x79a)][_0x37f9b4(0x136)];},Window_AutoBattleCancel[_0x3fd7af(0x9fd)][_0x3fd7af(0x898)]=function(){const _0x54f6e7=_0x3fd7af;this[_0x54f6e7(0x421)][_0x54f6e7(0x8b9)]();const _0x32df56=VisuMZ['BattleCore'][_0x54f6e7(0xa6b)][_0x54f6e7(0x79a)][_0x54f6e7(0x837)],_0x4281bd=_0x32df56[_0x54f6e7(0xab2)](this[_0x54f6e7(0x4bf)](),this['cancelButtonText']()),_0x2c70cd=this[_0x54f6e7(0x4f6)](_0x4281bd)[_0x54f6e7(0xad0)],_0x16335c=Math[_0x54f6e7(0x63b)]((this[_0x54f6e7(0x6f1)]-_0x2c70cd)/0x2);this[_0x54f6e7(0x5c1)](_0x4281bd,_0x16335c,0x0,_0x2c70cd);},Window_AutoBattleCancel[_0x3fd7af(0x9fd)]['okButtonText']=function(){const _0x5effa2=_0x3fd7af;if(Imported['VisuMZ_0_CoreEngine']){if(_0x5effa2(0x3f5)===_0x5effa2(0x3f5))return TextManager[_0x5effa2(0xa2e)]('ok');else{_0x16b8e6[_0x5effa2(0x941)][_0x5effa2(0x770)]['call'](this,_0xdd825e,_0x3c305b);if(!_0x51bdbd[_0x5effa2(0xa0b)]())return;if(_0x301ea1[_0x5effa2(0x320)]!==_0x4f7a01['deathStateId']())return;let _0x5b0092=_0x16c943[_0x5effa2(0x4e6)];!this[_0x5effa2(0x884)]()&&(_0x5b0092*=_0x3c362d[_0x5effa2(0x7ec)](_0x3d69fe[_0x5effa2(0x320)]),_0x5b0092*=this[_0x5effa2(0x649)](_0x3de166)),_0x1832b4[_0x5effa2(0x562)]()<_0x5b0092&&(_0x54a68a[_0x5effa2(0x2a2)]=!![],this['makeSuccess'](_0x5d6275));}}else{if(_0x5effa2(0x5b1)!=='VaMiC')this[_0x5effa2(0x4bd)][_0x5effa2(0x18b)](_0x5effa2(0x2d6),_0xa0bb2d[_0x5effa2(0x3ab)][_0x5effa2(0xab2)](_0x661bf7[_0x5effa2(0x504)]())),this[_0x5effa2(0x4bd)]['push'](_0x5effa2(0x474));else return VisuMZ[_0x5effa2(0x941)][_0x5effa2(0xa6b)][_0x5effa2(0x79a)][_0x5effa2(0x7e3)];}},Window_AutoBattleCancel[_0x3fd7af(0x9fd)][_0x3fd7af(0x35e)]=function(){const _0x12a14a=_0x3fd7af;if(Imported[_0x12a14a(0x28a)])return TextManager['getInputButtonString'](_0x12a14a(0xac4));else{if('SLwWA'===_0x12a14a(0xa14))return VisuMZ[_0x12a14a(0x941)][_0x12a14a(0xa6b)][_0x12a14a(0x79a)][_0x12a14a(0x203)];else{if(_0x165f2a['type']===0x0)this[_0x12a14a(0x42a)]('thrust');else{if(_0x427865['type']===0x1)this['requestMotion'](_0x12a14a(0x384));else _0x4f110d[_0x12a14a(0x28f)]===0x2&&this[_0x12a14a(0x42a)](_0x12a14a(0x486));}this['startWeaponAnimation'](_0xf02390['weaponImageId']);}}},Window_AutoBattleCancel['prototype'][_0x3fd7af(0x2e0)]=function(){const _0x252450=_0x3fd7af;Window_Base[_0x252450(0x9fd)][_0x252450(0x2e0)][_0x252450(0x145)](this),this[_0x252450(0x8f8)](),this[_0x252450(0x846)]();},Window_AutoBattleCancel[_0x3fd7af(0x9fd)][_0x3fd7af(0x8f8)]=function(){const _0x18ecb5=_0x3fd7af;this[_0x18ecb5(0x596)]=BattleManager['_autoBattle'];},Window_AutoBattleCancel['prototype'][_0x3fd7af(0x846)]=function(){const _0x23a85c=_0x3fd7af;if(!BattleManager[_0x23a85c(0x435)])return;(Input[_0x23a85c(0x34e)]('ok')||Input['isTriggered'](_0x23a85c(0xac4))||TouchInput[_0x23a85c(0x4be)]()||TouchInput['isCancelled']())&&(_0x23a85c(0x121)==='WLGcs'?(SoundManager[_0x23a85c(0xaef)](),BattleManager[_0x23a85c(0x435)]=![],Input[_0x23a85c(0x8b9)](),TouchInput[_0x23a85c(0x8b9)]()):(this[_0x23a85c(0x6bb)][_0x23a85c(0x35d)](),this['_actorWindow'][_0x23a85c(0x96a)](),this[_0x23a85c(0x44e)]['activate']()));};function Window_EnemyName(){const _0x41739b=_0x3fd7af;this[_0x41739b(0x709)](...arguments);}Window_EnemyName[_0x3fd7af(0x9fd)]=Object['create'](Window_StatusBase[_0x3fd7af(0x9fd)]),Window_EnemyName[_0x3fd7af(0x9fd)][_0x3fd7af(0x26b)]=Window_EnemyName,Window_EnemyName[_0x3fd7af(0x9fd)][_0x3fd7af(0x709)]=function(_0x3fde34){const _0x448188=_0x3fd7af;this[_0x448188(0x979)]=_0x3fde34,this[_0x448188(0x81e)]='';const _0x41affb=new Rectangle(0x0,0x0,Graphics[_0x448188(0xa4b)],this[_0x448188(0x41c)]()*0x4);Window_StatusBase[_0x448188(0x9fd)][_0x448188(0x709)][_0x448188(0x145)](this,_0x41affb),this[_0x448188(0x793)](0x2),this[_0x448188(0x9b0)]=0x0;},Window_EnemyName[_0x3fd7af(0x9fd)]['updatePadding']=function(){const _0x39306e=_0x3fd7af;this[_0x39306e(0x46a)]=0x0;},Window_EnemyName[_0x3fd7af(0x9fd)]['enemy']=function(){const _0x265f21=_0x3fd7af;return $gameTroop[_0x265f21(0xec)]()[this[_0x265f21(0x979)]];},Window_EnemyName[_0x3fd7af(0x9fd)][_0x3fd7af(0x2e0)]=function(){const _0x24d280=_0x3fd7af;Window_StatusBase['prototype'][_0x24d280(0x2e0)][_0x24d280(0x145)](this),this[_0x24d280(0xb4)]()&&this['enemy']()['name']()!==this[_0x24d280(0x81e)]&&(this['_text']=this[_0x24d280(0xb4)]()[_0x24d280(0x504)](),this[_0x24d280(0x898)]()),this[_0x24d280(0x632)](),this[_0x24d280(0x700)]();},Window_EnemyName[_0x3fd7af(0x9fd)][_0x3fd7af(0x632)]=function(){const _0x58571e=_0x3fd7af;if(!this[_0x58571e(0xb4)]()){if(this[_0x58571e(0x9b0)]>0x0)this[_0x58571e(0x9b0)]-=0x10;}else{if(this[_0x58571e(0xb4)]()[_0x58571e(0x217)]()){if(_0x58571e(0x9b3)!=='SGdpD')this['_uiContainer']=new _0x4277ce(),this[_0x58571e(0x17a)][_0x58571e(0x96c)](this['_uiContainer']);else{if(this['contentsOpacity']>0x0)this['contentsOpacity']-=0x10;}}else{if(SceneManager[_0x58571e(0x450)]['_enemyWindow']&&SceneManager[_0x58571e(0x450)][_0x58571e(0x873)][_0x58571e(0x246)]&&SceneManager['_scene'][_0x58571e(0x873)][_0x58571e(0x397)][_0x58571e(0x402)](this[_0x58571e(0xb4)]())){if('YMyQk'!==_0x58571e(0x591)){if(this[_0x58571e(0x9b0)]<0xff)this[_0x58571e(0x9b0)]+=0x10;}else _0x2146a1[_0x58571e(0x941)][_0x58571e(0x977)][_0x58571e(0x145)](this);}else{if(this[_0x58571e(0x9b0)]>0x0){if(_0x58571e(0x72f)===_0x58571e(0xa71))return this['getAttackMotion']();else this[_0x58571e(0x9b0)]-=0x10;}}}}},Window_EnemyName[_0x3fd7af(0x9fd)][_0x3fd7af(0x700)]=function(){const _0x33e08f=_0x3fd7af;if(!this[_0x33e08f(0xb4)]())return;if(SceneManager[_0x33e08f(0xb6)]())this['x']=Graphics[_0x33e08f(0xa4b)]-this[_0x33e08f(0xb4)]()[_0x33e08f(0x181)]()[_0x33e08f(0x62e)];else{if(_0x33e08f(0x33a)==='skonk')this['x']=this[_0x33e08f(0xb4)]()[_0x33e08f(0x181)]()['_baseX'];else{if(this[_0x33e08f(0x48d)]['loop'])this[_0x33e08f(0x1fc)]=(this[_0x33e08f(0x1fc)]+0x1)%0x4;else this[_0x33e08f(0x1fc)]<0x2?this[_0x33e08f(0x1fc)]++:this['refreshMotion']();this[_0x33e08f(0x51d)]=0x0;}}this['x']-=Math[_0x33e08f(0x819)](this['width']/0x2),this['y']=this[_0x33e08f(0xb4)]()[_0x33e08f(0x181)]()[_0x33e08f(0x69d)]-Math[_0x33e08f(0x819)](this[_0x33e08f(0x41c)]()*1.5);const _0x520c6a=VisuMZ[_0x33e08f(0x941)][_0x33e08f(0xa6b)]['Enemy'];this['x']+=_0x520c6a[_0x33e08f(0x27a)]||0x0,this['y']+=_0x520c6a[_0x33e08f(0xa48)]||0x0;},Window_EnemyName[_0x3fd7af(0x9fd)]['resetFontSettings']=function(){const _0x3d6a9e=_0x3fd7af;Window_Base[_0x3d6a9e(0x9fd)][_0x3d6a9e(0xa64)][_0x3d6a9e(0x145)](this),this[_0x3d6a9e(0x421)][_0x3d6a9e(0x854)]=VisuMZ[_0x3d6a9e(0x941)][_0x3d6a9e(0xa6b)][_0x3d6a9e(0x520)][_0x3d6a9e(0x5d9)];},Window_EnemyName['prototype']['refresh']=function(){const _0x22d87e=_0x3fd7af;Window_StatusBase[_0x22d87e(0x9fd)]['refresh'][_0x22d87e(0x145)](this),this[_0x22d87e(0x421)][_0x22d87e(0x8b9)]();if(!this[_0x22d87e(0xb4)]())return;this[_0x22d87e(0x98d)]();},Window_EnemyName[_0x3fd7af(0x9fd)]['drawEnemyName']=function(){const _0x128876=_0x3fd7af;this[_0x128876(0x81e)]=this[_0x128876(0xb4)]()[_0x128876(0x504)]();const _0x5e8d5f=this[_0x128876(0x4f6)](this['_text'])['width'],_0x5b5008=Math[_0x128876(0x819)]((this[_0x128876(0x6f1)]-_0x5e8d5f)/0x2);this[_0x128876(0x5c1)](this[_0x128876(0x81e)],_0x5b5008,0x0,_0x5e8d5f+0x8);},Window_BattleLog['prototype'][_0x3fd7af(0x189)]=function(){const _0x37f720=_0x3fd7af;return VisuMZ['BattleCore'][_0x37f720(0xa6b)][_0x37f720(0x83a)][_0x37f720(0x576)];},Window_BattleLog[_0x3fd7af(0x9fd)]['messageSpeed']=function(){const _0x3e47f8=_0x3fd7af;return VisuMZ[_0x3e47f8(0x941)]['Settings'][_0x3e47f8(0x83a)][_0x3e47f8(0xd0)];},Window_BattleLog[_0x3fd7af(0x9fd)]['backColor']=function(){const _0x15f6d7=_0x3fd7af;return VisuMZ[_0x15f6d7(0x941)][_0x15f6d7(0xa6b)][_0x15f6d7(0x83a)]['BackColor'];},Window_BattleLog[_0x3fd7af(0x9fd)]['isFastForward']=function(){return![];},Window_BattleLog['prototype']['actionEffect']=function(_0x1a4211,_0x37352c){const _0x522974=_0x3fd7af;this[_0x522974(0x7a6)]('actionSplicePoint'),BattleManager[_0x522974(0x25c)](_0x1a4211,_0x37352c),this[_0x522974(0x9a3)]();},Window_BattleLog[_0x3fd7af(0x9fd)][_0x3fd7af(0x683)]=function(){const _0x156e61=_0x3fd7af;this[_0x156e61(0x9a3)]();},Window_BattleLog[_0x3fd7af(0x9fd)][_0x3fd7af(0x18b)]=function(_0x3e5702){const _0xf40258=_0x3fd7af,_0x43be59=Array[_0xf40258(0x9fd)][_0xf40258(0x7c7)][_0xf40258(0x145)](arguments,0x1),_0x47d79f={'name':_0x3e5702,'params':_0x43be59},_0x2923d7=this[_0xf40258(0x4ba)][_0xf40258(0x826)](_0x4ee91c=>_0x4ee91c['name'])[_0xf40258(0x760)](_0xf40258(0x683));if(_0x2923d7>=0x0)this[_0xf40258(0x4ba)][_0xf40258(0xb00)](_0x2923d7,0x0,_0x47d79f);else{if('vAzYF'===_0xf40258(0x419)){const _0x3f99e2=_0x26ced1(_0x530a00['$1']);return[_0x148aea[_0xf40258(0xaae)]()[_0xf40258(0xec)]()[_0x3f99e2]];}else this[_0xf40258(0x4ba)][_0xf40258(0x18b)](_0x47d79f);}},Window_BattleLog[_0x3fd7af(0x9fd)][_0x3fd7af(0x7a6)]=function(_0x39dd3e){const _0x3506a4=_0x3fd7af,_0x510990=Array[_0x3506a4(0x9fd)][_0x3506a4(0x7c7)][_0x3506a4(0x145)](arguments,0x1);this['_methods'][_0x3506a4(0x7a6)]({'name':_0x39dd3e,'params':_0x510990});},Window_BattleLog['prototype']['logActionList']=function(){const _0x5f1733=_0x3fd7af;if(!$gameTemp[_0x5f1733(0x887)]())return;console[_0x5f1733(0x712)](this[_0x5f1733(0x4ba)][_0x5f1733(0x826)](_0x5dd5dd=>_0x5dd5dd[_0x5f1733(0x504)])[_0x5f1733(0x4b8)]('\x0a'));},VisuMZ[_0x3fd7af(0x941)][_0x3fd7af(0x7d4)]=Window_BattleLog[_0x3fd7af(0x9fd)][_0x3fd7af(0x898)],Window_BattleLog['prototype']['refresh']=function(){const _0x23bad4=_0x3fd7af;this[_0x23bad4(0x87b)]=!![];},VisuMZ[_0x3fd7af(0x941)][_0x3fd7af(0x890)]=Window_BattleLog['prototype'][_0x3fd7af(0x2e0)],Window_BattleLog[_0x3fd7af(0x9fd)]['update']=function(){const _0x92518f=_0x3fd7af;VisuMZ[_0x92518f(0x941)][_0x92518f(0x890)][_0x92518f(0x145)](this);if(this[_0x92518f(0x87b)])this[_0x92518f(0x28d)]();},Window_BattleLog[_0x3fd7af(0x9fd)][_0x3fd7af(0x28d)]=function(){const _0x402589=_0x3fd7af;this['_requestRefresh']=![],VisuMZ['BattleCore']['Window_BattleLog_refresh'][_0x402589(0x145)](this);},Window_BattleLog['prototype']['drawLineText']=function(_0x23d2b8){const _0x2e050a=_0x3fd7af;let _0x30c089=VisuMZ[_0x2e050a(0x941)][_0x2e050a(0xa6b)][_0x2e050a(0x83a)][_0x2e050a(0x561)][_0x2e050a(0x81b)]()[_0x2e050a(0x306)](),_0xaaf97c=this[_0x2e050a(0xa7c)][_0x23d2b8];if(_0xaaf97c[_0x2e050a(0x265)](/<LEFT>/i))'iFgNP'===_0x2e050a(0xa28)?_0x30c089=_0x2e050a(0x1e8):(_0x55e338[_0x2e050a(0x941)][_0x2e050a(0x31d)][_0x2e050a(0x145)](this),this[_0x2e050a(0x7f5)]());else{if(_0xaaf97c['match'](/<CENTER>/i))_0x30c089=_0x2e050a(0x8ff);else _0xaaf97c['match'](/<RIGHT>/i)&&(_0x2e050a(0x26f)!==_0x2e050a(0x26f)?_0xa7c37d['isNextSceneBattleTransitionable']()?_0x5ed819[_0x2e050a(0x9fd)][_0x2e050a(0x1eb)]['call'](this):_0x310d85[_0x2e050a(0x941)][_0x2e050a(0x85f)][_0x2e050a(0x145)](this):_0x30c089=_0x2e050a(0x6d0));}_0xaaf97c=_0xaaf97c[_0x2e050a(0x256)](/<(?:LEFT|CENTER|RIGHT)>/gi,''),_0xaaf97c=_0xaaf97c['replace'](/\\I\[0\]/gi,'');const _0x1c3784=this['lineRect'](_0x23d2b8);this[_0x2e050a(0x421)][_0x2e050a(0x2a8)](_0x1c3784['x'],_0x1c3784['y'],_0x1c3784[_0x2e050a(0xad0)],_0x1c3784['height']);const _0x3ce00f=this['textSizeEx'](_0xaaf97c)[_0x2e050a(0xad0)];let _0x5c5ec2=_0x1c3784['x'];if(_0x30c089===_0x2e050a(0x8ff))_0x5c5ec2+=(_0x1c3784[_0x2e050a(0xad0)]-_0x3ce00f)/0x2;else{if(_0x30c089===_0x2e050a(0x6d0)){if(_0x2e050a(0x369)!==_0x2e050a(0x2d0))_0x5c5ec2+=_0x1c3784[_0x2e050a(0xad0)]-_0x3ce00f;else{this[_0x2e050a(0x48d)]=_0x55bcad[_0x2e050a(0x2f4)]['dead'];return;}}}this[_0x2e050a(0x5c1)](_0xaaf97c,_0x5c5ec2,_0x1c3784['y'],_0x3ce00f+0x8);},Window_BattleLog[_0x3fd7af(0x9fd)][_0x3fd7af(0x2d6)]=function(_0x498008){const _0x2ad28d=_0x3fd7af;this['_lines'][_0x2ad28d(0x18b)](_0x498008),this[_0x2ad28d(0x898)](),this[_0x2ad28d(0x9a3)]();},Window_BattleLog[_0x3fd7af(0x9fd)][_0x3fd7af(0x271)]=function(){const _0x854db9=_0x3fd7af;let _0x4f5e9f=![];switch(this[_0x854db9(0x954)]){case _0x854db9(0x63e):_0x4f5e9f=this[_0x854db9(0x3b4)][_0x854db9(0x957)]();break;case _0x854db9(0xa23):_0x4f5e9f=this[_0x854db9(0x3b4)][_0x854db9(0x7d6)]();break;case _0x854db9(0xb2):_0x4f5e9f=this['_spriteset']['isAnimationPlaying']();break;case _0x854db9(0x3d0):_0x4f5e9f=this[_0x854db9(0x3b4)][_0x854db9(0xe0)]();break;case _0x854db9(0x805):_0x4f5e9f=this[_0x854db9(0x3b4)][_0x854db9(0x59e)]();break;case _0x854db9(0x824):_0x4f5e9f=this['_spriteset'][_0x854db9(0x579)]();break;}if(!_0x4f5e9f){if(_0x854db9(0x139)!==_0x854db9(0x139))return this[_0x854db9(0xa68)]>0x0;else this['_waitMode']='';}return _0x4f5e9f;},Window_BattleLog['prototype'][_0x3fd7af(0x7e0)]=function(){const _0x49c009=_0x3fd7af;this[_0x49c009(0x992)](_0x49c009(0xb2));},Window_BattleLog[_0x3fd7af(0x9fd)][_0x3fd7af(0x9d7)]=function(){const _0x15d276=_0x3fd7af;this[_0x15d276(0x992)](_0x15d276(0x3d0));},Window_BattleLog[_0x3fd7af(0x9fd)]['waitForJump']=function(){const _0x3b5310=_0x3fd7af;this['setWaitMode'](_0x3b5310(0x805));},Window_BattleLog['prototype'][_0x3fd7af(0x8a7)]=function(){const _0x247c5d=_0x3fd7af;this[_0x247c5d(0x992)](_0x247c5d(0x824));},Window_BattleLog['prototype']['startTurn']=function(){const _0x8168d8=_0x3fd7af,_0x2e10cd=VisuMZ[_0x8168d8(0x941)][_0x8168d8(0xa6b)][_0x8168d8(0x83a)];if(!_0x2e10cd['StartTurnShow'])return;this['push'](_0x8168d8(0x2d6),_0x2e10cd[_0x8168d8(0x448)][_0x8168d8(0xab2)]($gameTroop[_0x8168d8(0x4b4)]())),this[_0x8168d8(0x18b)](_0x8168d8(0x485),_0x2e10cd[_0x8168d8(0x9a4)]),this[_0x8168d8(0x18b)](_0x8168d8(0x8b9));},Window_BattleLog['prototype'][_0x3fd7af(0x514)]=function(_0x386279,_0x144a94,_0x20fa2f){const _0x4cde35=_0x3fd7af;if(this[_0x4cde35(0x95a)](_0x144a94)){if(_0x4cde35(0x93b)===_0x4cde35(0x69a)){if(this[_0x4cde35(0x9b0)]>0x0)this[_0x4cde35(0x9b0)]-=0x10;}else BattleManager[_0x4cde35(0xa31)]();}else{if(_0x4cde35(0x756)===_0x4cde35(0xfe)){const _0x2ef5ca=this[_0x4cde35(0xa9a)][_0x4cde35(0x84e)];this[_0x4cde35(0x48d)]=_0x5dfb3b[_0x4cde35(0x2f4)][_0x2ef5ca[_0x4cde35(0x606)]],this['_pattern']=_0x2ef5ca[_0x4cde35(0x817)];const _0x570aad=this[_0x4cde35(0xaa4)];_0x570aad[_0x4cde35(0x229)](_0x2ef5ca['weaponImageId'],_0x2ef5ca[_0x4cde35(0x817)]),this['adjustWeaponSpriteOffset']();}else this[_0x4cde35(0xac)](_0x386279,_0x144a94,_0x20fa2f);}},Window_BattleLog[_0x3fd7af(0x9fd)][_0x3fd7af(0x95a)]=function(_0x418fda){const _0x3a8bcc=_0x3fd7af;if(!SceneManager[_0x3a8bcc(0x970)]())return![];if(!_0x418fda)return![];if(!_0x418fda['item']())return![];if(_0x418fda['item']()[_0x3a8bcc(0x7b9)]['match'](/<CUSTOM ACTION SEQUENCE>/i))return!![];if(DataManager[_0x3a8bcc(0x3b1)](_0x418fda['item']()))return!![];return![];},Window_BattleLog[_0x3fd7af(0x9fd)][_0x3fd7af(0xac)]=function(_0xd14d5f,_0x305f64,_0x2bd8f8){const _0x40bb12=_0x3fd7af,_0x130ada=_0x305f64['item']();this[_0x40bb12(0x956)](_0xd14d5f,_0x305f64,_0x2bd8f8),this[_0x40bb12(0x64a)](_0xd14d5f,_0x305f64,_0x2bd8f8),this['finishActionSet'](_0xd14d5f,_0x305f64,_0x2bd8f8);},Window_BattleLog[_0x3fd7af(0x9fd)][_0x3fd7af(0x674)]=function(_0x4615bf,_0x3fd4a6){const _0xb8b964=_0x3fd7af,_0x364fa3=VisuMZ['BattleCore'][_0xb8b964(0xa6b)][_0xb8b964(0x83a)];_0x364fa3['ActionCenteredName']&&this[_0xb8b964(0x18b)]('addText',_0xb8b964(0x48e)[_0xb8b964(0xab2)](DataManager[_0xb8b964(0x58e)](_0x3fd4a6)));if(DataManager['isSkill'](_0x3fd4a6)){if(_0x364fa3['ActionSkillMsg1'])this[_0xb8b964(0x37f)](_0x3fd4a6[_0xb8b964(0x247)],_0x4615bf,_0x3fd4a6);if(_0x364fa3[_0xb8b964(0x21c)])this['displayItemMessage'](_0x3fd4a6[_0xb8b964(0x4a5)],_0x4615bf,_0x3fd4a6);}else{if(_0x364fa3[_0xb8b964(0x2c6)])this[_0xb8b964(0x37f)](TextManager[_0xb8b964(0xac6)],_0x4615bf,_0x3fd4a6);}},Window_BattleLog[_0x3fd7af(0x9fd)][_0x3fd7af(0x956)]=function(_0x5ee2a0,_0x4e24c7,_0x3938d8){const _0x1ec6e3=_0x3fd7af,_0x3018d4=_0x4e24c7[_0x1ec6e3(0xaf4)]();this['displayAction'](_0x5ee2a0,_0x3018d4),this[_0x1ec6e3(0x18b)]('applyImmortal',_0x5ee2a0,_0x3938d8,!![]),this[_0x1ec6e3(0x18b)](_0x1ec6e3(0xaea),_0x5ee2a0,_0x4e24c7),this[_0x1ec6e3(0x18b)](_0x1ec6e3(0x798)),this[_0x1ec6e3(0x18b)](_0x1ec6e3(0x3ec),_0x5ee2a0,_0x4e24c7),this[_0x1ec6e3(0x18b)](_0x1ec6e3(0x7e0));},Window_BattleLog[_0x3fd7af(0x9fd)][_0x3fd7af(0x64a)]=function(_0x218435,_0x44d7f3,_0x33c734){const _0x3111b3=_0x3fd7af;if(this['isMeleeSingleTargetAction'](_0x44d7f3)){if(_0x3111b3(0x7a7)===_0x3111b3(0x7a7))this['autoMeleeSingleTargetActionSet'](_0x218435,_0x44d7f3,_0x33c734);else{const _0x26a1f4=_0x1d8472[_0x3111b3(0x941)][_0x3111b3(0xa6b)][_0x3111b3(0x9fe)];if(_0x26a1f4[_0x3111b3(0x4f3)]>0x0&&_0x327c90[_0x26a1f4[_0x3111b3(0x4f3)]]){const _0x1c2849=_0x411362[_0x26a1f4[_0x3111b3(0x4f3)]],_0x3369b6=_0x1c2849[_0x3111b3(0xfb)][_0x3111b3(0x732)]-0x2,_0x336a7a=_0x1c2849[_0x3111b3(0xfb)][_0x3369b6];if(_0x336a7a&&_0x336a7a[_0x3111b3(0x205)]!==0xe6){const _0x157897={'code':0xe6,'indent':0x0,'parameters':[0x1]},_0x1c19f1=_0x1c2849[_0x3111b3(0xfb)]['pop']();_0x1c2849['list'][_0x3111b3(0x7a6)](_0x157897),_0x1c2849[_0x3111b3(0xfb)][_0x3111b3(0x7a6)](_0x1c19f1);}}}}else{if(this[_0x3111b3(0x3b9)](_0x44d7f3))_0x3111b3(0x144)==='klRuV'?this[_0x3111b3(0x731)](_0x218435,_0x44d7f3,_0x33c734):(_0x247981=_0x212c7a[_0x3111b3(0x181)]()['_homeX'],_0x252a4d=_0x5ef6e5[_0x3111b3(0x181)]()[_0x3111b3(0x939)]);else _0x44d7f3[_0x3111b3(0x368)]()?this[_0x3111b3(0xbc)](_0x218435,_0x44d7f3,_0x33c734):this['wholeActionSet'](_0x218435,_0x44d7f3,_0x33c734);}},Window_BattleLog[_0x3fd7af(0x9fd)][_0x3fd7af(0x3f7)]=function(_0xd4b17){const _0x53cd11=_0x3fd7af;if(!_0xd4b17['isPhysical']())return![];if(!_0xd4b17['isForOne']())return![];if(!_0xd4b17[_0x53cd11(0x558)]())return![];return VisuMZ[_0x53cd11(0x941)][_0x53cd11(0xa6b)][_0x53cd11(0x844)][_0x53cd11(0x91e)];},Window_BattleLog['prototype'][_0x3fd7af(0x53f)]=function(_0x201b3f,_0x1abe83,_0x34479f){const _0x1106c7=_0x3fd7af,_0x11e452=_0x201b3f[_0x1106c7(0x125)]()[_0x1106c7(0x28f)]<0x2,_0x506fa5=0x14,_0x1aee82=0x30;_0x11e452&&(_0x1106c7(0x779)===_0x1106c7(0x779)?(this[_0x1106c7(0x18b)](_0x1106c7(0x621),[_0x201b3f],_0x1aee82,_0x506fa5),this['push'](_0x1106c7(0x959),_0x201b3f,_0x34479f,_0x1106c7(0x333),_0x506fa5,!![],_0x1106c7(0xa2d),!![]),this[_0x1106c7(0x18b)](_0x1106c7(0x42a),[_0x201b3f],_0x1106c7(0x8cb)),this['push'](_0x1106c7(0x798))):(this[_0x1106c7(0x1de)]['x']=this['x'],this['_effectsContainer']['y']=this['y']));let _0x4ed359=_0x1abe83[_0x1106c7(0x77e)]()?this[_0x1106c7(0x1da)](_0x201b3f):0x1;for(let _0x44768d=0x0;_0x44768d<_0x4ed359;_0x44768d++){_0x1abe83[_0x1106c7(0x77e)]()&&_0x201b3f['isActor']()&&this[_0x1106c7(0x18b)](_0x1106c7(0x5c9),_0x201b3f,_0x44768d);if(_0x1abe83[_0x1106c7(0xaf4)]()['animationId']<0x0)this['targetActionSet'](_0x201b3f,_0x1abe83,_0x34479f);else{if(_0x1106c7(0x8ab)!=='aUGlD')this[_0x1106c7(0x6f6)](_0x201b3f,_0x1abe83,_0x34479f);else{this[_0x1106c7(0xad0)]=_0x1d22c8[_0x1106c7(0xad0)],this[_0x1106c7(0x26a)]=_0x4c9660[_0x1106c7(0x26a)];const _0x542343=_0x215b9f[_0x1106c7(0x305)](0x1,this[_0x1106c7(0xad0)]/this['bitmap']['width']),_0x1cda64=_0x2a6874[_0x1106c7(0x305)](0x1,this[_0x1106c7(0x26a)]/this['bitmap']['height']),_0x2a984e=_0x29db7e[_0x1106c7(0x305)](_0x542343,_0x1cda64);this[_0x1106c7(0x1c9)]['x']=_0x2a984e,this[_0x1106c7(0x1c9)]['y']=_0x2a984e,this['x']=(_0x5ba783[_0x1106c7(0xad0)]-this[_0x1106c7(0xad0)])/0x2,this['y']=_0x585878[_0x1106c7(0x26a)]-this['height'];}}}_0x1abe83[_0x1106c7(0x77e)]()&&_0x201b3f[_0x1106c7(0x91d)]()&&(_0x1106c7(0x295)!==_0x1106c7(0x295)?_0x29d24f[_0x1106c7(0x941)][_0x1106c7(0xa6b)][_0x1106c7(0x520)]['NameAttachStateIcon']&&(this[_0x1106c7(0x25f)]=new _0x5dfe6f(),this[_0x1106c7(0x96c)](this[_0x1106c7(0x25f)])):this[_0x1106c7(0x18b)](_0x1106c7(0x16c),_0x201b3f));this[_0x1106c7(0x18b)](_0x1106c7(0x52b),_0x201b3f,_0x34479f,![]);if(_0x11e452){if(_0x1106c7(0x551)===_0x1106c7(0x551)){const _0x2368ea=_0x201b3f[_0x1106c7(0x181)]();this[_0x1106c7(0x18b)]('performJump',[_0x201b3f],_0x1aee82,_0x506fa5),this['push'](_0x1106c7(0xa11),_0x201b3f,_0x2368ea[_0x1106c7(0x2e7)],_0x2368ea[_0x1106c7(0x939)],_0x506fa5,![],_0x1106c7(0xa2d)),this['push'](_0x1106c7(0x42a),[_0x201b3f],_0x1106c7(0x940)),this[_0x1106c7(0x18b)](_0x1106c7(0x798)),this[_0x1106c7(0x18b)](_0x1106c7(0x42a),[_0x201b3f],_0x1106c7(0x8cb));}else this[_0x1106c7(0x82b)]=_0x426576;}},Window_BattleLog[_0x3fd7af(0x9fd)]['isMeleeMultiTargetAction']=function(_0x5cd8eb){const _0x1231e8=_0x3fd7af;if(!_0x5cd8eb[_0x1231e8(0x782)]())return![];if(!_0x5cd8eb['isForAll']())return![];if(!_0x5cd8eb['isForOpponent']())return![];return VisuMZ['BattleCore'][_0x1231e8(0xa6b)][_0x1231e8(0x844)][_0x1231e8(0x5bf)];},Window_BattleLog[_0x3fd7af(0x9fd)]['autoMeleeMultiTargetActionSet']=function(_0x22835d,_0x597335,_0x45b307){const _0x28fccb=_0x3fd7af,_0xe4f51a=_0x22835d[_0x28fccb(0x125)]()['type']<0x2,_0x2895ab=0x14,_0xa278a0=0x30;if(_0xe4f51a){if(_0x28fccb(0x4cd)===_0x28fccb(0x4cd))this[_0x28fccb(0x18b)]('performJump',[_0x22835d],_0xa278a0,_0x2895ab),this[_0x28fccb(0x18b)](_0x28fccb(0x959),_0x22835d,_0x45b307,_0x28fccb(0x919),_0x2895ab,!![],'Linear',!![]),this[_0x28fccb(0x18b)](_0x28fccb(0x42a),[_0x22835d],'walk'),this[_0x28fccb(0x18b)](_0x28fccb(0x798));else{let _0x1ffde5=this[_0x28fccb(0xa08)](_0x40d6ac);const _0x33e4e7=this[_0x28fccb(0x854)](),_0x5bc5cf=_0x547e17['floor'](_0x33e4e7*0.75);for(let _0x2d789c=0x0;_0x2d789c<_0x1ffde5['length'];_0x2d789c++){const _0x124ac6=this[_0x28fccb(0x67f)](_0x5bc5cf,_0x33e4e7);_0x124ac6[_0x28fccb(0x2cf)]['drawText'](_0x1ffde5[_0x2d789c],0x0,0x0,_0x5bc5cf,_0x33e4e7,_0x28fccb(0x8ff)),_0x124ac6['x']=(_0x2d789c-(_0x1ffde5[_0x28fccb(0x732)]-0x1)/0x2)*_0x5bc5cf,_0x124ac6['dy']=-_0x2d789c;}}}let _0x56009e=_0x597335[_0x28fccb(0x77e)]()?this[_0x28fccb(0x1da)](_0x22835d):0x1;for(let _0x164778=0x0;_0x164778<_0x56009e;_0x164778++){_0x597335['isAttack']()&&_0x22835d[_0x28fccb(0x91d)]()&&this[_0x28fccb(0x18b)](_0x28fccb(0x5c9),_0x22835d,_0x164778),this['wholeActionSet'](_0x22835d,_0x597335,_0x45b307);}_0x597335['isAttack']()&&_0x22835d[_0x28fccb(0x91d)]()&&this[_0x28fccb(0x18b)](_0x28fccb(0x16c),_0x22835d);this['push'](_0x28fccb(0x52b),_0x22835d,_0x45b307,![]);if(_0xe4f51a){if('pBQgD'!==_0x28fccb(0xaf6)){if(this['enemy']()[_0x28fccb(0x7b9)]['match'](/<BATTLER SPRITE CANNOT MOVE>/i))return![];return _0x542823['prototype'][_0x28fccb(0x6e8)][_0x28fccb(0x145)](this);}else{const _0x32c16e=_0x22835d['battler']();this[_0x28fccb(0x18b)](_0x28fccb(0x621),[_0x22835d],_0xa278a0,_0x2895ab),this[_0x28fccb(0x18b)](_0x28fccb(0xa11),_0x22835d,_0x32c16e[_0x28fccb(0x2e7)],_0x32c16e[_0x28fccb(0x939)],_0x2895ab,![],_0x28fccb(0xa2d)),this[_0x28fccb(0x18b)](_0x28fccb(0x42a),[_0x22835d],'evade'),this[_0x28fccb(0x18b)]('waitForMovement'),this[_0x28fccb(0x18b)]('requestMotion',[_0x22835d],_0x28fccb(0x8cb));}}},Window_BattleLog['prototype']['targetActionSet']=function(_0x2cbcef,_0x3e3d9d,_0x3765b9){const _0xcb1f8f=_0x3fd7af,_0x14ff7b=_0x3e3d9d[_0xcb1f8f(0xaf4)]();for(const _0x1c2eaa of _0x3765b9){if(_0xcb1f8f(0x4ca)!==_0xcb1f8f(0x5aa)){if(!_0x1c2eaa)continue;this['push'](_0xcb1f8f(0x386),_0x2cbcef,_0x3e3d9d),this['push'](_0xcb1f8f(0x485),Sprite_Battler[_0xcb1f8f(0x41d)]),this[_0xcb1f8f(0x18b)](_0xcb1f8f(0x1bb),_0x2cbcef,[_0x1c2eaa],_0x14ff7b[_0xcb1f8f(0x15f)]),this['push']('waitCount',0x18),this['push'](_0xcb1f8f(0x182),_0x2cbcef,_0x1c2eaa);}else _0x3876ab[_0xcb1f8f(0x941)][_0xcb1f8f(0x778)][_0xcb1f8f(0x145)](this),this['_damagePopupArray']=[];}},Window_BattleLog['prototype'][_0x3fd7af(0x6f6)]=function(_0x461507,_0x8b2e08,_0x238886){const _0x303655=_0x3fd7af,_0x530181=_0x8b2e08[_0x303655(0xaf4)]();this[_0x303655(0x18b)](_0x303655(0x386),_0x461507,_0x8b2e08),this[_0x303655(0x18b)](_0x303655(0x485),Sprite_Battler['_motionSpeed']),this[_0x303655(0x18b)](_0x303655(0x1bb),_0x461507,_0x238886['clone'](),_0x530181[_0x303655(0x15f)]),this[_0x303655(0x18b)](_0x303655(0x7e0));for(const _0x3788c7 of _0x238886){if(!_0x3788c7)continue;this[_0x303655(0x18b)](_0x303655(0x182),_0x461507,_0x3788c7);}},Window_BattleLog['prototype'][_0x3fd7af(0x9ce)]=function(_0x2b7f1f,_0x10f5eb,_0xc87055){const _0x52a9be=_0x3fd7af,_0x5dd3f9=_0x10f5eb[_0x52a9be(0xaf4)]();this['push']('applyImmortal',_0x2b7f1f,_0xc87055,![]),this['push']('waitForNewLine'),this['push'](_0x52a9be(0x5f4)),this[_0x52a9be(0x18b)](_0x52a9be(0x8b9)),this['push'](_0x52a9be(0xadc),_0x2b7f1f),this[_0x52a9be(0x18b)]('waitForMovement');},Window_BattleLog['prototype']['endAction']=function(_0x133db7){},VisuMZ[_0x3fd7af(0x941)][_0x3fd7af(0x8ea)]=Window_BattleLog['prototype'][_0x3fd7af(0x773)],Window_BattleLog['prototype']['displayCurrentState']=function(_0x561341){const _0x2b4e20=_0x3fd7af;if(!VisuMZ['BattleCore']['Settings'][_0x2b4e20(0x83a)]['ShowCurrentState'])return;VisuMZ[_0x2b4e20(0x941)][_0x2b4e20(0x8ea)][_0x2b4e20(0x145)](this,_0x561341);},Window_BattleLog['prototype']['displayCounter']=function(_0xdf69c){const _0x5eccac=_0x3fd7af;this[_0x5eccac(0x18b)](_0x5eccac(0x39c),_0xdf69c);if(VisuMZ['BattleCore'][_0x5eccac(0xa6b)][_0x5eccac(0x844)][_0x5eccac(0x540)]){if(_0x5eccac(0x394)!==_0x5eccac(0x394)){const _0x35f5be=_0xb6676c['x']+_0x1d774c[_0x5eccac(0x63b)]((_0x31edf3['width']-_0x2ea6fe)/0x2);this[_0x5eccac(0x5c1)](_0x2af780,_0x35f5be,_0x99f62f['y'],_0x150dd7);}else this[_0x5eccac(0x18b)](_0x5eccac(0x1bb),_0xdf69c,[BattleManager[_0x5eccac(0x470)]],-0x1);}if(!VisuMZ[_0x5eccac(0x941)]['Settings'][_0x5eccac(0x83a)]['ShowCounter'])return;this[_0x5eccac(0x18b)](_0x5eccac(0x2d6),TextManager['counterAttack']['format'](_0xdf69c['name']()));},Window_BattleLog['prototype'][_0x3fd7af(0x64f)]=function(_0xaa42d){const _0x13fa17=_0x3fd7af;this[_0x13fa17(0x18b)](_0x13fa17(0x696),_0xaa42d);if(!VisuMZ['BattleCore'][_0x13fa17(0xa6b)]['BattleLog'][_0x13fa17(0x563)])return;this['push'](_0x13fa17(0x2d6),TextManager['magicReflection'][_0x13fa17(0xab2)](_0xaa42d[_0x13fa17(0x504)]()));},Window_BattleLog[_0x3fd7af(0x9fd)][_0x3fd7af(0x5da)]=function(_0x480ae6,_0x216543){const _0x29b0c7=_0x3fd7af;if(VisuMZ[_0x29b0c7(0x941)]['Settings'][_0x29b0c7(0x844)][_0x29b0c7(0x45a)]){const _0x503ece=_0x216543['item']();this['push'](_0x29b0c7(0x1bb),_0x480ae6,[_0x480ae6],_0x503ece[_0x29b0c7(0x15f)]);}},Window_BattleLog['prototype']['displaySubstitute']=function(_0x379cb7,_0x121a10){const _0x4c67c4=_0x3fd7af;this['push'](_0x4c67c4(0x1e0),_0x379cb7,_0x121a10);if(!VisuMZ[_0x4c67c4(0x941)]['Settings'][_0x4c67c4(0x83a)][_0x4c67c4(0x446)])return;const _0x1dd52b=_0x379cb7['name'](),_0x52ad56=TextManager[_0x4c67c4(0x3fb)][_0x4c67c4(0xab2)](_0x1dd52b,_0x121a10['name']());this[_0x4c67c4(0x18b)](_0x4c67c4(0x2d6),_0x52ad56);},VisuMZ['BattleCore']['Window_BattleLog_displayActionResults']=Window_BattleLog[_0x3fd7af(0x9fd)][_0x3fd7af(0xa24)],Window_BattleLog['prototype'][_0x3fd7af(0xa24)]=function(_0x3c5d1a,_0x50a621){const _0x1c4d39=_0x3fd7af;VisuMZ[_0x1c4d39(0x941)][_0x1c4d39(0x105)][_0x1c4d39(0x145)](this,_0x3c5d1a,_0x50a621),this[_0x1c4d39(0x18b)](_0x1c4d39(0x8b9));},VisuMZ[_0x3fd7af(0x941)]['Window_BattleLog_displayFailure']=Window_BattleLog[_0x3fd7af(0x9fd)][_0x3fd7af(0x934)],Window_BattleLog['prototype'][_0x3fd7af(0x934)]=function(_0x4568ce){const _0x443550=_0x3fd7af;if(!VisuMZ[_0x443550(0x941)][_0x443550(0xa6b)]['BattleLog']['ShowFailure'])return;VisuMZ[_0x443550(0x941)][_0x443550(0x15d)][_0x443550(0x145)](this,_0x4568ce);},VisuMZ[_0x3fd7af(0x941)]['Window_BattleLog_displayCritical']=Window_BattleLog[_0x3fd7af(0x9fd)][_0x3fd7af(0x500)],Window_BattleLog[_0x3fd7af(0x9fd)][_0x3fd7af(0x500)]=function(_0x2a7ecb){const _0x1c96c5=_0x3fd7af;if(!VisuMZ[_0x1c96c5(0x941)]['Settings'][_0x1c96c5(0x83a)][_0x1c96c5(0x519)])return;VisuMZ[_0x1c96c5(0x941)][_0x1c96c5(0xa2)]['call'](this,_0x2a7ecb);},VisuMZ[_0x3fd7af(0x941)][_0x3fd7af(0x73c)]=Window_BattleLog[_0x3fd7af(0x9fd)][_0x3fd7af(0xa78)],Window_BattleLog[_0x3fd7af(0x9fd)][_0x3fd7af(0xa78)]=function(_0x3483f5){const _0x31b063=_0x3fd7af;!VisuMZ['BattleCore'][_0x31b063(0xa6b)][_0x31b063(0x83a)]['ShowMissEvasion']?_0x31b063(0x815)!=='vrTsy'?_0x28e3e9[_0x31b063(0x28a)]?_0x5b3241[_0x31b063(0x476)]([this],_0x58f41e):_0x365ae1[_0x31b063(0x97f)]([this],_0x2e52ee):this[_0x31b063(0x18b)]('performMiss',_0x3483f5):VisuMZ['BattleCore'][_0x31b063(0x73c)][_0x31b063(0x145)](this,_0x3483f5);},VisuMZ[_0x3fd7af(0x941)][_0x3fd7af(0x6e4)]=Window_BattleLog['prototype'][_0x3fd7af(0x586)],Window_BattleLog['prototype'][_0x3fd7af(0x586)]=function(_0x3fe189){const _0x543823=_0x3fd7af;!VisuMZ[_0x543823(0x941)][_0x543823(0xa6b)]['BattleLog'][_0x543823(0x8c2)]?_0x3fe189['result']()[_0x543823(0x8ef)]?_0x543823(0x823)===_0x543823(0x823)?this[_0x543823(0x18b)](_0x543823(0xff),_0x3fe189):(this['push'](_0x543823(0xa82)),this[_0x543823(0x18b)](_0x543823(0xe7)),this[_0x543823(0x18b)](_0x543823(0x86f)),this[_0x543823(0x18b)]('addText',_0x5627f7[_0x543823(0xab2)](_0x5be79a[_0x543823(0x504)]())),this[_0x543823(0x18b)](_0x543823(0x474))):_0x543823(0x3ba)!=='evXhK'?_0x581440[_0x543823(0x9fd)][_0x543823(0x75b)][_0x543823(0x145)](this):this[_0x543823(0x18b)](_0x543823(0x869),_0x3fe189):VisuMZ[_0x543823(0x941)][_0x543823(0x6e4)]['call'](this,_0x3fe189);},Window_BattleLog[_0x3fd7af(0x9fd)]['displayHpDamage']=function(_0x18315c){const _0x423f2d=_0x3fd7af;if(_0x18315c[_0x423f2d(0x2c7)]()[_0x423f2d(0x3ac)]){if(_0x423f2d(0x65f)===_0x423f2d(0x7ef))_0x2c7d60['_battleCoreBattleStartEvent']?this[_0x423f2d(0x77b)]():_0x36cb57['BattleCore'][_0x423f2d(0x22e)][_0x423f2d(0x145)](this);else{if(_0x18315c[_0x423f2d(0x2c7)]()[_0x423f2d(0x84d)]>0x0&&!_0x18315c[_0x423f2d(0x2c7)]()[_0x423f2d(0x85e)]){if('EmMbq'!==_0x423f2d(0x759)){const _0x5c8c70=this[_0x423f2d(0xaf4)]()[_0x423f2d(0x3e1)];return _0x5c8c70[_0x423f2d(0x265)](/(?:RAND|RANDOM)/i);}else this[_0x423f2d(0x18b)](_0x423f2d(0x236),_0x18315c);}_0x18315c[_0x423f2d(0x2c7)]()[_0x423f2d(0x84d)]<0x0&&this[_0x423f2d(0x18b)](_0x423f2d(0x1d0),_0x18315c),VisuMZ[_0x423f2d(0x941)][_0x423f2d(0xa6b)][_0x423f2d(0x83a)][_0x423f2d(0x4e7)]&&(_0x423f2d(0x32e)===_0x423f2d(0x653)?this[_0x423f2d(0x661)]():this['push']('addText',this['makeHpDamageText'](_0x18315c)));}}},VisuMZ[_0x3fd7af(0x941)]['Window_BattleLog_displayMpDamage']=Window_BattleLog[_0x3fd7af(0x9fd)][_0x3fd7af(0x713)],Window_BattleLog[_0x3fd7af(0x9fd)][_0x3fd7af(0x713)]=function(_0x430e97){const _0x33bb6b=_0x3fd7af;if(!VisuMZ['BattleCore'][_0x33bb6b(0xa6b)][_0x33bb6b(0x83a)]['ShowMpDmg'])return;VisuMZ['BattleCore']['Window_BattleLog_displayMpDamage'][_0x33bb6b(0x145)](this,_0x430e97);},VisuMZ[_0x3fd7af(0x941)][_0x3fd7af(0x302)]=Window_BattleLog['prototype'][_0x3fd7af(0xa69)],Window_BattleLog[_0x3fd7af(0x9fd)][_0x3fd7af(0xa69)]=function(_0x531184){const _0x44e173=_0x3fd7af;if(!VisuMZ[_0x44e173(0x941)]['Settings'][_0x44e173(0x83a)][_0x44e173(0x718)])return;VisuMZ[_0x44e173(0x941)]['Window_BattleLog_displayTpDamage'][_0x44e173(0x145)](this,_0x531184);},Window_BattleLog[_0x3fd7af(0x9fd)]['displayAffectedStatus']=function(_0x3fe95b){const _0x790125=_0x3fd7af;_0x3fe95b[_0x790125(0x2c7)]()[_0x790125(0x800)]()&&(this['push'](_0x790125(0x86f)),this['displayChangedStates'](_0x3fe95b),this[_0x790125(0x646)](_0x3fe95b),this[_0x790125(0x18b)](_0x790125(0x363)));},Window_BattleLog[_0x3fd7af(0x9fd)][_0x3fd7af(0x3f1)]=function(_0x16b1ce){const _0xdebf51=_0x3fd7af,_0x4a6124=_0x16b1ce[_0xdebf51(0x2c7)](),_0x1d438e=_0x4a6124[_0xdebf51(0x876)]();for(const _0x24a568 of _0x1d438e){const _0x3f57ee=_0x16b1ce[_0xdebf51(0x91d)]()?_0x24a568[_0xdebf51(0x247)]:_0x24a568['message2'];_0x3f57ee&&VisuMZ[_0xdebf51(0x941)][_0xdebf51(0xa6b)][_0xdebf51(0x83a)][_0xdebf51(0x3ff)]&&(this[_0xdebf51(0x18b)](_0xdebf51(0xa82)),this[_0xdebf51(0x18b)]('popBaseLine'),this[_0xdebf51(0x18b)](_0xdebf51(0x86f)),this[_0xdebf51(0x18b)]('addText',_0x3f57ee[_0xdebf51(0xab2)](_0x16b1ce[_0xdebf51(0x504)]())),this[_0xdebf51(0x18b)](_0xdebf51(0x474))),_0x24a568['id']===_0x16b1ce['deathStateId']()&&this[_0xdebf51(0x18b)]('performCollapse',_0x16b1ce);}},Window_BattleLog[_0x3fd7af(0x9fd)]['fnordAddedStates']=function(){},Window_BattleLog[_0x3fd7af(0x9fd)]['displayRemovedStates']=function(_0x23bac9){const _0x331e9f=_0x3fd7af;if(!VisuMZ[_0x331e9f(0x941)][_0x331e9f(0xa6b)][_0x331e9f(0x83a)][_0x331e9f(0x22d)])return;const _0x5ea54a=_0x23bac9[_0x331e9f(0x2c7)](),_0x3fe662=_0x5ea54a[_0x331e9f(0x393)]();for(const _0x6aafd9 of _0x3fe662){_0x6aafd9[_0x331e9f(0x788)]&&(this['push'](_0x331e9f(0x285)),this['push'](_0x331e9f(0xe7)),this[_0x331e9f(0x18b)](_0x331e9f(0x86f)),this[_0x331e9f(0x18b)](_0x331e9f(0x2d6),_0x6aafd9[_0x331e9f(0x788)][_0x331e9f(0xab2)](_0x23bac9[_0x331e9f(0x504)]())),this['push'](_0x331e9f(0x474)));}},Window_BattleLog[_0x3fd7af(0x9fd)][_0x3fd7af(0x285)]=function(){},Window_BattleLog[_0x3fd7af(0x9fd)]['displayChangedBuffs']=function(_0x27afab){const _0x29064e=_0x3fd7af,_0x3ea078=VisuMZ[_0x29064e(0x941)]['Settings'][_0x29064e(0x83a)],_0x153a35=_0x27afab[_0x29064e(0x2c7)]();if(_0x3ea078[_0x29064e(0xa83)])this[_0x29064e(0x1cb)](_0x27afab,_0x153a35[_0x29064e(0x427)],TextManager['buffAdd']);if(_0x3ea078[_0x29064e(0xfc)])this[_0x29064e(0x1cb)](_0x27afab,_0x153a35['addedDebuffs'],TextManager['debuffAdd']);if(_0x3ea078[_0x29064e(0x18a)])this['displayBuffs'](_0x27afab,_0x153a35[_0x29064e(0x3a7)],TextManager[_0x29064e(0x449)]);},Window_BattleLog[_0x3fd7af(0x9fd)][_0x3fd7af(0x1cb)]=function(_0x3a554d,_0x281af1,_0x4d896c){const _0x394673=_0x3fd7af;for(const _0x4a6293 of _0x281af1){const _0x14f398=_0x4d896c['format'](_0x3a554d[_0x394673(0x504)](),TextManager['param'](_0x4a6293));this[_0x394673(0x18b)](_0x394673(0xe7)),this[_0x394673(0x18b)](_0x394673(0x86f)),this['push'](_0x394673(0x2d6),_0x14f398),this[_0x394673(0x18b)]('wait');}},VisuMZ[_0x3fd7af(0x941)][_0x3fd7af(0x436)]=Window_BattleLog['prototype'][_0x3fd7af(0x8b9)],Window_BattleLog[_0x3fd7af(0x9fd)][_0x3fd7af(0x8b9)]=function(){const _0x361ad1=_0x3fd7af;VisuMZ[_0x361ad1(0x941)][_0x361ad1(0x436)][_0x361ad1(0x145)](this),this[_0x361ad1(0x9a3)]();},VisuMZ[_0x3fd7af(0x941)][_0x3fd7af(0x6a1)]=Window_BattleLog['prototype'][_0x3fd7af(0x86f)],Window_BattleLog[_0x3fd7af(0x9fd)][_0x3fd7af(0x86f)]=function(){const _0x22071e=_0x3fd7af;VisuMZ['BattleCore'][_0x22071e(0x6a1)][_0x22071e(0x145)](this),this[_0x22071e(0x9a3)]();},VisuMZ[_0x3fd7af(0x941)][_0x3fd7af(0x9ef)]=Window_BattleLog['prototype'][_0x3fd7af(0xe7)],Window_BattleLog['prototype']['popBaseLine']=function(){const _0x4041aa=_0x3fd7af;VisuMZ[_0x4041aa(0x941)]['Window_BattleLog_popBaseLine']['call'](this),this[_0x4041aa(0x28d)](),this['callNextMethod']();},VisuMZ[_0x3fd7af(0x941)]['Window_BattleLog_popupDamage']=Window_BattleLog[_0x3fd7af(0x9fd)]['popupDamage'],Window_BattleLog[_0x3fd7af(0x9fd)][_0x3fd7af(0x995)]=function(_0x3c177d){const _0x34db2a=_0x3fd7af;VisuMZ[_0x34db2a(0x941)][_0x34db2a(0x2e9)][_0x34db2a(0x145)](this,_0x3c177d),this[_0x34db2a(0x9a3)]();},Window_BattleLog[_0x3fd7af(0x9fd)]['waitForNewLine']=function(){const _0x420bbe=_0x3fd7af;let _0x22e48a=0x0;this[_0x420bbe(0x784)]['length']>0x0&&(_0x22e48a=this[_0x420bbe(0x784)][this['_baseLineStack'][_0x420bbe(0x732)]-0x1]);if(this[_0x420bbe(0xa7c)][_0x420bbe(0x732)]>_0x22e48a)this[_0x420bbe(0x474)]();else{if(_0x420bbe(0x634)===_0x420bbe(0x2bb)){this['_stateIconSprite'][_0x420bbe(0x824)]=0x0;return;}else this[_0x420bbe(0x9a3)]();}},VisuMZ[_0x3fd7af(0x941)][_0x3fd7af(0x160)]=Window_BattleLog[_0x3fd7af(0x9fd)][_0x3fd7af(0xaea)],Window_BattleLog['prototype'][_0x3fd7af(0xaea)]=function(_0x4cead0,_0x230098){const _0x267572=_0x3fd7af;VisuMZ[_0x267572(0x941)][_0x267572(0x160)][_0x267572(0x145)](this,_0x4cead0,_0x230098),this[_0x267572(0x9a3)]();},VisuMZ[_0x3fd7af(0x941)][_0x3fd7af(0x219)]=Window_BattleLog[_0x3fd7af(0x9fd)][_0x3fd7af(0x386)],Window_BattleLog[_0x3fd7af(0x9fd)][_0x3fd7af(0x386)]=function(_0x92b1c,_0x1f9b4d){const _0x4a1097=_0x3fd7af;VisuMZ[_0x4a1097(0x941)][_0x4a1097(0x219)][_0x4a1097(0x145)](this,_0x92b1c,_0x1f9b4d),this[_0x4a1097(0x9a3)]();},VisuMZ['BattleCore'][_0x3fd7af(0x6df)]=Window_BattleLog[_0x3fd7af(0x9fd)][_0x3fd7af(0xadc)],Window_BattleLog[_0x3fd7af(0x9fd)][_0x3fd7af(0xadc)]=function(_0x3ddc4f){const _0x3aaab5=_0x3fd7af;VisuMZ[_0x3aaab5(0x941)][_0x3aaab5(0x6df)][_0x3aaab5(0x145)](this,_0x3ddc4f);for(const _0x2813da of BattleManager[_0x3aaab5(0x801)]()){if(_0x3aaab5(0x4c8)!==_0x3aaab5(0x279)){if(!_0x2813da)continue;if(_0x2813da[_0x3aaab5(0x217)]())continue;_0x2813da[_0x3aaab5(0x664)]();}else _0x38e315['clearForcedGameTroopSettingsBattleCore'](),_0x4b7a67['applyForcedGameTroopSettingsBattleCore'](_0x4e0d82),_0x10db44[_0x3aaab5(0x941)]['Game_Troop_setup']['call'](this,_0x5e6b33);}this['callNextMethod']();},VisuMZ['BattleCore']['Window_BattleLog_performDamage']=Window_BattleLog[_0x3fd7af(0x9fd)]['performDamage'],Window_BattleLog[_0x3fd7af(0x9fd)][_0x3fd7af(0x236)]=function(_0x2234ff){const _0x4d18eb=_0x3fd7af;VisuMZ['BattleCore'][_0x4d18eb(0x651)][_0x4d18eb(0x145)](this,_0x2234ff),this[_0x4d18eb(0x9a3)]();},VisuMZ[_0x3fd7af(0x941)][_0x3fd7af(0xa4c)]=Window_BattleLog[_0x3fd7af(0x9fd)][_0x3fd7af(0x3f9)],Window_BattleLog[_0x3fd7af(0x9fd)][_0x3fd7af(0x3f9)]=function(_0x5ccf5f){const _0x73875a=_0x3fd7af;VisuMZ[_0x73875a(0x941)][_0x73875a(0xa4c)]['call'](this,_0x5ccf5f),this[_0x73875a(0x9a3)]();},VisuMZ['BattleCore']['Window_BattleLog_performRecovery']=Window_BattleLog[_0x3fd7af(0x9fd)][_0x3fd7af(0x1d0)],Window_BattleLog[_0x3fd7af(0x9fd)]['performRecovery']=function(_0x227f33){const _0x3714e8=_0x3fd7af;VisuMZ['BattleCore'][_0x3714e8(0xc6)]['call'](this,_0x227f33),this['callNextMethod']();},VisuMZ['BattleCore']['Window_BattleLog_performEvasion']=Window_BattleLog['prototype']['performEvasion'],Window_BattleLog[_0x3fd7af(0x9fd)][_0x3fd7af(0xff)]=function(_0x5d6082){const _0x1eb6b4=_0x3fd7af;VisuMZ[_0x1eb6b4(0x941)][_0x1eb6b4(0x67b)][_0x1eb6b4(0x145)](this,_0x5d6082),this[_0x1eb6b4(0x9a3)]();},VisuMZ[_0x3fd7af(0x941)][_0x3fd7af(0x888)]=Window_BattleLog[_0x3fd7af(0x9fd)][_0x3fd7af(0x869)],Window_BattleLog[_0x3fd7af(0x9fd)][_0x3fd7af(0x869)]=function(_0xe5f265){const _0x1f684a=_0x3fd7af;VisuMZ[_0x1f684a(0x941)][_0x1f684a(0x888)][_0x1f684a(0x145)](this,_0xe5f265),this['callNextMethod']();},VisuMZ['BattleCore'][_0x3fd7af(0x12f)]=Window_BattleLog['prototype'][_0x3fd7af(0x39c)],Window_BattleLog[_0x3fd7af(0x9fd)][_0x3fd7af(0x39c)]=function(_0x3c1468){const _0x5ab1dc=_0x3fd7af;VisuMZ[_0x5ab1dc(0x941)][_0x5ab1dc(0x12f)]['call'](this,_0x3c1468),this[_0x5ab1dc(0x9a3)]();},VisuMZ['BattleCore'][_0x3fd7af(0x626)]=Window_BattleLog[_0x3fd7af(0x9fd)][_0x3fd7af(0x696)],Window_BattleLog[_0x3fd7af(0x9fd)][_0x3fd7af(0x696)]=function(_0x21e1e6){const _0x48b6f6=_0x3fd7af;VisuMZ[_0x48b6f6(0x941)][_0x48b6f6(0x626)]['call'](this,_0x21e1e6),this[_0x48b6f6(0x9a3)]();},VisuMZ[_0x3fd7af(0x941)][_0x3fd7af(0x53b)]=Window_BattleLog['prototype'][_0x3fd7af(0x1e0)],Window_BattleLog[_0x3fd7af(0x9fd)][_0x3fd7af(0x1e0)]=function(_0x27f6e7,_0x4dfb1a){const _0x33e345=_0x3fd7af;VisuMZ[_0x33e345(0x941)]['Window_BattleLog_performSubstitute'][_0x33e345(0x145)](this,_0x27f6e7,_0x4dfb1a),this[_0x33e345(0x9a3)]();},VisuMZ['BattleCore'][_0x3fd7af(0x2a4)]=Window_BattleLog[_0x3fd7af(0x9fd)][_0x3fd7af(0x75f)],Window_BattleLog[_0x3fd7af(0x9fd)][_0x3fd7af(0x75f)]=function(_0x2fb3e5){const _0xe98223=_0x3fd7af;VisuMZ[_0xe98223(0x941)][_0xe98223(0x2a4)][_0xe98223(0x145)](this,_0x2fb3e5),this[_0xe98223(0x9a3)]();},Window_BattleLog['prototype']['performCastAnimation']=function(_0x150d27,_0x148af8){const _0x4d9cff=_0x3fd7af;_0x150d27[_0x4d9cff(0x3ec)](_0x148af8),this[_0x4d9cff(0x9a3)]();},Window_BattleLog[_0x3fd7af(0x9fd)][_0x3fd7af(0x8ce)]=function(_0x32c658,_0x3452d5){const _0x282c26=_0x3fd7af,_0x18f010=_0x32c658[_0x282c26(0x8f1)]();_0x18f010<=0x0?SoundManager[_0x282c26(0x536)]():this['showNormalAnimation'](_0x3452d5,_0x18f010);},Window_BattleLog[_0x3fd7af(0x9fd)][_0x3fd7af(0x52b)]=function(_0x3aa61a,_0x2c6437,_0x57b8c9){const _0x20729b=_0x3fd7af,_0x5307ee=[_0x3aa61a][_0x20729b(0x795)](_0x2c6437);for(const _0x3e30ff of _0x5307ee){if('TIROD'==='TIROD'){if(!_0x3e30ff)continue;_0x3e30ff[_0x20729b(0x68b)](_0x57b8c9);}else{if(!this['_linkedSprite'])return;this[_0x20729b(0x82f)]=this[_0x20729b(0x82f)]||_0x354fae[_0x20729b(0x9fd)][_0x20729b(0x41c)](),this['x']=this[_0x20729b(0x82b)][_0x20729b(0x62e)],this['y']=this[_0x20729b(0x82b)]['_baseY']-this['_lineHeight']*0.5;const _0x26232c=_0x29557d['BattleCore']['Settings']['Enemy'];this['x']+=_0x26232c['NameOffsetX']||0x0,this['y']+=_0x26232c[_0x20729b(0xa48)]||0x0;}}this[_0x20729b(0x9a3)]();},Window_BattleLog[_0x3fd7af(0x9fd)][_0x3fd7af(0x485)]=function(_0x4ca198){this['_waitCount']=_0x4ca198;},Window_BattleLog[_0x3fd7af(0x9fd)][_0x3fd7af(0x42a)]=function(_0x2e2502,_0x517efa){const _0x28a044=_0x3fd7af;for(const _0x314a94 of _0x2e2502){if(!_0x314a94)continue;_0x314a94[_0x28a044(0x42a)](_0x517efa);}this[_0x28a044(0x9a3)]();},Window_BattleLog[_0x3fd7af(0x9fd)][_0x3fd7af(0xa11)]=function(_0x197873,_0x33bce4,_0x447d17,_0x5ec830,_0x50bc42,_0x4b2ebd){const _0x15a67d=_0x3fd7af;_0x197873[_0x15a67d(0xa44)](_0x33bce4,_0x447d17,_0x5ec830,_0x50bc42,_0x4b2ebd,-0x1),this[_0x15a67d(0x9a3)]();},Window_BattleLog['prototype']['performMoveToTargets']=function(_0x5c95a6,_0x5d0a98,_0x497c5b,_0xc68d59,_0xb08970,_0x2ffb4d,_0x5389cf){const _0x45d814=_0x3fd7af,_0x53b8a0=Math['min'](..._0x5d0a98[_0x45d814(0x826)](_0x54a45b=>_0x54a45b[_0x45d814(0x181)]()[_0x45d814(0x62e)]-_0x54a45b[_0x45d814(0x181)]()[_0x45d814(0x159)]()/0x2)),_0x34ebe8=Math[_0x45d814(0x305)](..._0x5d0a98[_0x45d814(0x826)](_0x262a03=>_0x262a03['battler']()[_0x45d814(0x62e)]+_0x262a03['battler']()[_0x45d814(0x159)]()/0x2)),_0x5974cd=Math['min'](..._0x5d0a98[_0x45d814(0x826)](_0x259bca=>_0x259bca['battler']()[_0x45d814(0x69d)]-_0x259bca[_0x45d814(0x181)]()[_0x45d814(0x2ca)]())),_0x15e89b=Math[_0x45d814(0x305)](..._0x5d0a98['map'](_0x3ec720=>_0x3ec720[_0x45d814(0x181)]()[_0x45d814(0x69d)])),_0x8a9b10=_0x5d0a98['filter'](_0x3f14ed=>_0x3f14ed[_0x45d814(0x91d)]())[_0x45d814(0x732)],_0x1835ec=_0x5d0a98[_0x45d814(0xa8)](_0x2af3d6=>_0x2af3d6[_0x45d814(0x7e8)]())['length'];let _0x3f2cf3=0x0,_0x2dfe1c=0x0;if(_0x497c5b['match'](/front/i))_0x3f2cf3=_0x8a9b10>=_0x1835ec?_0x53b8a0:_0x34ebe8;else{if(_0x497c5b[_0x45d814(0x265)](/middle/i)){if('edCVm'!=='VRYKa')_0x3f2cf3=(_0x53b8a0+_0x34ebe8)/0x2,_0x5389cf=-0x1;else{_0x4c150b[_0x45d814(0x941)][_0x45d814(0xae9)][_0x45d814(0x145)](this),this[_0x45d814(0x768)]();if(this[_0x45d814(0x26b)]===_0x2fa36c)this[_0x45d814(0x41b)]();this[_0x45d814(0x571)]();}}else _0x497c5b['match'](/back/i)&&(_0x3f2cf3=_0x8a9b10>=_0x1835ec?_0x34ebe8:_0x53b8a0);}if(_0x497c5b[_0x45d814(0x265)](/head/i))_0x2dfe1c=_0x5974cd;else{if(_0x497c5b[_0x45d814(0x265)](/center/i))_0x2dfe1c=(_0x5974cd+_0x15e89b)/0x2;else _0x497c5b[_0x45d814(0x265)](/base/i)&&(_0x2dfe1c=_0x15e89b);}_0x5c95a6[_0x45d814(0xa44)](_0x3f2cf3,_0x2dfe1c,_0xc68d59,_0xb08970,_0x2ffb4d,_0x5389cf),this['callNextMethod']();},Window_BattleLog['prototype'][_0x3fd7af(0x621)]=function(_0x37d3de,_0x1ebaa0,_0xde8855){const _0x264bf4=_0x3fd7af;for(const _0x2e8596 of _0x37d3de){if(!_0x2e8596)continue;_0x2e8596[_0x264bf4(0x6c0)](_0x1ebaa0,_0xde8855);}this[_0x264bf4(0x9a3)]();};function _0x21db(){const _0x304315=['drawEnemyName','myMDU','Sprite_Enemy_updateCollapse','_battlerName','_regionBattleback1','setWaitMode','DTB','ngqHR','popupDamage','ActSeq_Movement_HomeReset','shift','YOGjk','setHorrorEffectSettings','actionBattleCoreJS','Game_Battler_forceAction','isAutoBattleCommandEnabled','isFrameVisible','_actionInputIndex','StyleON','selectPreviousCommand','Scene_Battle_onEnemyCancel','nshjr','callNextMethod','StartTurnWait','VisuMZ_2_BattleSystemFTB','KWlur','uFgST','OOHfe','RWYGz','DisablePartyCmd','isForOpponentBattleCore','LkCBp','UNxce','PreStartActionJS','evaded','contentsOpacity','Sprite_Actor_updateFrame','Sprite_Weapon_loadBitmap','SGdpD','Amp','DamageStyles','ActSeq_Impact_ShockwavePoint','getItemDamageAmountLabelOriginal','rowSpacing','suOuI','WfxfU','ActSeq_Angle_WaitForAngle','canEscape','JhRBS','onEnemyOk','performAttackSlot','hYsQX','skewBattler','createMiss','AGI','ESCAPE','FlinchDuration','applyDamageCaps','_active','wuHOz','updateStyleOpacity','hasSkill','isHidden','\x20to\x20%1\x20midbattle.','ActSeq_Movement_Scale','finishActionSet','applyResultSwitches','drawText','moveToStartPositionBattleCore','onEscapeSuccess','battleback2Name','isNextScene','ConvertActionSequenceTarget','IIQxV','waitForFloat','currentAction','addImmortal','IgbEH','addOnceParallelInterpreter','XIoKG','command119','Actor','isChangingOpacity','SnXic','alive\x20friends\x20not\x20user','SceneManager_push','Window_PartyCommand_initialize','isBattleMember','isOptionsCommandEnabled','SvMotionIdleMass-%1-%2','gUfmp','jWuEH','idGyq','Variable','regenerateAll','processDefeat','_battleCoreForcedElements','RkzeS','Window_BattleLog_popBaseLine','stepForward','applyEasing','damageOffsetY','AsUser','ActSeq_Movement_WaitForScale','fittingHeight','EasingType','dragonbonesData','ActSeq_Animation_AttackAnimation2','AnchorX','isTpb','_battleCoreNoElement','Game_Enemy_setup','prototype','Mechanics','makeTargetSprites','SfFSm','GOkdq','_weather','BattleManager_startInput','ARRAYFUNC','statusText','updateJump','CCsDz','createString','needsSelectionBattleCore','NseRD','isImmortal','FrontViewSelect','alive\x20opponents\x20not\x20target','_distortionSprite','text\x20target','SntZz','performMoveToPoint','createEnemies','processBorderActor','SLwWA','DyBtN','gradientFillRect','_back1Sprite','jHqfw','createEmptyBitmap','isTurnBased','setSvBattlerSprite','dimColor1','notFocusValid','qiAGg','MLeae','StateIconOffsetX','Text','CmdIconAutoBattle','movement','displayActionResults','unchanged','LiRWU','UQcFr','iFgNP','ScaleToFit','floatBattler','PartyCmd','startTurn','Linear','getInputButtonString','%1\x20is\x20missing\x20a\x20required\x20plugin.\x0aPlease\x20install\x20%2\x20into\x20the\x20Plugin\x20Manager.','Width','prepareCustomActionSequence','Game_Troop_setup','clearOnceParallelInterpreters','statusWindowRectDefaultStyle','AECJL','birnH','SlotID','addDebuff','processBattleCoreJS','VeBQh','VisuMZ_1_MainMenuCore','getBattlePortrait','pxtVq','getCommonEventIdWithName','JsrTz','attachSpritesToDistortionSprite','_floatDuration','clearForcedGameTroopSettingsBattleCore','isBattleTest','moveBattlerToPoint','_actionBattlers','NCqxR','ouHdM','NameOffsetY','COMBATLOG','JAXnJ','boxWidth','Window_BattleLog_performMiss','Game_Battler_onTurnEnd','ScaleUp','Game_BattlerBase_addNewState','AyCgy','damageFlat','displayBattleCoreTransitionErrorMsg','Scene_Battle_onActorOk','pNwWr','YLxZB','DamageDisplay','alive\x20actors','UcGrQ','damage','startBattle','battleCameraData','_damages','Scene_Battle_skillWindowRect','WaitCount','Armor-%1-%2','playOnceParallelInterpreter','zLmkQ','CreateActionSequenceTargets','changeTurnOrderByCTB','resetFontSettings','putActiveBattlerOnTop','isSelected','damageRate','_angleDuration','displayTpDamage','_currentActor','Settings','chant','_speed','tcVEx','placeActorName','WaitCount1','rwQKr','saNcN','Game_Battler_performActionStart','setCustomDamageFormula','checkTpbInputClose','_helpWindow','critical','displayMiss','isDeathStateAffected','BindCommonEventKeysForObj','updateSpin','_lines','UxMEc','_autoBattleWindow','Sprite_SvEnemy','_endBattle','Window_ItemList_maxCols','fnordAddedStates','ShowAddedBuff','setBattler','xjyKx','ActSeq_Weapon_ClearActiveWeapon','commandNameWindowDrawText','Class-%1-%2','FlinchDistanceY','ActSeq_BattleLog_DisplayAction','statusTextAutoBattleStyle','ActSeq_Mechanics_CtbOrder','softDamageCap','process_VisuMZ_BattleCore_Notetags','CajPw','_opacityDuration','iGeeZ','growBattler','hYarT','process_VisuMZ_BattleCore_Failsafes','SvWeaponMass-%1-%2','_jumpMaxHeight','getWtypeIdWithName','svShadow','RBvvc','_battler','partyCommandWindowRectBorderStyle','dlUPK','DIqSS','callOptions','CalcEscapeRatioJS','processForcedAction','MotionIdle','CalcActionSpeedJS','split','_weaponSprite','adjustPosition','battleCommandName','WaitForAnimation','ActSeq_Motion_WaitMotionFrame','JS\x20BATTLE\x20DEFEAT','hCiMa','textColor','QaEdL','zoomDuration','opponentsUnit','setupMotion','setupZoomBlurImpactFilter','dxYiN','format','SkewY','reserveCommonEvent','_effectType','_targets','_commonEventKey','ActSeq_Animation_ChangeBattlePortrait','SKILLS','isAlwaysVisible','+%1\x20MP','ARRAYNUM','setGuard','TP_Rate','_ptbActionCost','MpGaugeOffsetY','BattleManager_onEscapeFailure','_shadowSprite','turn','cancel','applyArmorModifiers','useItem','jbzvD','_growEasing','_targetSkewX','VisuMZ_3_ActSeqProjectiles','battleFloat','ZaAJZ','_flashDuration','loadSvActor','BattleManager_selectNextCommand','width','_target','_lastAction','_tempActor','FollowTurn','gBVJd','_actorWindow','applyTargetFilters','randomTargets','TPnfr','targetObjects','myRwc','performActionEnd','regionId','deadMembers','aUQis','oxOcU','evalDamageFormula','options','weapons','isDuringNonLoopingMotion','setHalfActionsPTB','ActSeq_Horror_NoiseRemove','kJPhS','ActSeq_Motion_RefreshMotion','Sprite_Battler_initMembers','performActionStart','8489304SgDaBL','isOnCurrentMap','status','isFlipped','playCancel','ActSeq_Mechanics_WaitForEffect','Cletv','fight','command301_PreBattleEvent','item','sliceMax','pBQgD','alterActionCostPTB','ActSeq_Movement_Jump','CmdIconEscape','description','command283','setupFont','MP_Rate','battleLayoutStyle','EjXWh','splice','missed','applyCritical','updateBattlebackBitmap2','Sprite_Enemy_setBattler','evalDamageFormulaBattleCore','Window_BattleLog_displayCritical','clearFreezeMotionForWeapons','getItemDamageAmountTextOriginal','Game_BattlerBase_initMembers','okTargetSelectionVisibility','damageOffsetX','filter','softDamageCapRate','AnchorY','parameters','usePremadeActionSequence','Scene_Battle_commandFight','ALoTj','forceWeaponAnimation','Game_Actor_setup','oFxkW','animation','FlashDuration','enemy','ygFwM','isBattleFlipped','QzIRY','some','czFmY','ActSeq_DB_DragonbonesTimeScale','setup','targetActionSet','StatusWindowAttachmentBackOffsetX','Cjnzg','ActSeq_Impact_ShockwaveEachTargets','BattleManager_endBattle','setupBattleCore','attackSkillId','chantStyle','canAlterActionCostPTB','Targets','Window_BattleLog_performRecovery','_createEffectsContainer','_surprise','refreshBattlerMotions','performActionMotions','svAnchorX','cThLa','Window_ActorCommand_setup','UJkJp','IRjwL','MessageWait','addAnimationSpriteToContainer','createKeyJS','singleSkill','UUlbf','wAahA','makeSuccess','launchBattle','_totalValue','sortDamageSprites','Shadow2','mhp','isCharging','VisuMZ_4_BreakShields','VariableID','autoBattleWindowRect','isAnyoneFloating','Game_BattlerBase_canGuard','CmdIconItem','ParseStateNotetags','addShowHpGaugeCommand','AttackAnimation','switchToWeaponType','popBaseLine','forceSelect','actor','Game_Map_setupBattleback','_forcedBattlers','members','MgQfY','kxaMR','inBattle','bvqaO','noise','base','ERkdC','StatusWindowAttachmentBackOffsetY','JhAZM','_borderPortraitSprite','addCommand','WaitForSpin','mOUMa','alterChange','list','ShowAddedDebuff','itemCri','npBhL','performEvasion','_interpreter','AUTO\x20BATTLE','TpGaugeOffsetY','CKBeI','processEscape','Window_BattleLog_displayActionResults','Game_BattlerBase_die','makeTargets','Parse_Notetags_TraitObjects','currentSymbol','ActSeq_Mechanics_RemoveBuffDebuff','isMoving','ojLBq','getColor','maxCommands','preparePartyRefresh','lPdQv','user','xxPYd','getBattlePortraitOffsetY','MQQhJ','spinBattler','_dimmerSprite','battleUIOffsetX','ActSeq_BattleLog_PopBaseLine','Sprite_Actor_updateBitmap','addChildAt','VariableDmg','command339','Buffs','version','TqjkN','CheckMapBattleEventValid','WLGcs','isHiddenSkill','isAutoBattleCommandAdded','needsActorInputCancel','getAttackMotion','_offsetX','dzUnH','changeBattlebacks','setHelpWindow','Scene_Battle_createCancelButton','_cancelButton','HelpOptions','PopupPosition','isInputting','Window_BattleLog_performCounter','mainSpriteScaleX','setHome','AddOption','action','hasBeenDefeatedBefore','isAnimationPlaying','AutoBattleBgType','isBTB','onBattleStart','BkBIh','value','isOkEnabled','removeAnimation','skill','makeSpeed','_battleCoreBattleResumeAfter','MlQps','hitFlat','sleep','PSgZJ','klRuV','call','ActSeq_Animation_WaitForAnimation','setBattlerBattleCore','charging','getConfigValue','_updateFilterArea','battleCommands','BattleManager_processDefeat','wtypeId','checkShowHideSkillNotetags','Scene_Battle_createPartyCommandWindow','_forceAction','isSideView','EmergeText','bFKaU','GZxlN','Scene_ItemBase_applyItem','alive\x20friends\x20not\x20target','aTJSC','battleSpin','mainSpriteWidth','prepareBorderActor','changeCtbCastTime','zhUnA','Window_BattleLog_displayFailure','applyFreezeMotionFrames','animationId','Window_BattleLog_performActionStart','updateBorderSprite','WaitForZoom','applyBattleCoreJS','isAnyProjectilePresent','zRuvK','Scene_Boot_onDatabaseLoaded','Parse_Notetags_Targets','updateShadowVisibility','setActionState','hgVJl','PostStartTurnJS','clearActiveWeaponSet','removeHorrorEffect','Sprite_Actor_update','SwitchMissEvade','_displayBattleCoreTransitionErrorMsg','ActSeq_Camera_FocusTarget','Game_Action_makeTargets','requestDragonbonesAnimation','Game_Interpreter_command283','ARRAYSTRUCT','_lastEnemy','OaZnZ','playReflection','inputting','_battleField','ChangeOrderBy','MPduE','_enemyIDs','_cursorArea','_updateClientArea','_battleCoreAddedElements','battler','actionEffect','Strength','ActSeq_Target_RandTarget','addBuff','ggRde','ConvertParams','isNonSubmenuCancel','maxLines','ShowRemovedBuff','push','xpahY','visualHpGauge','onDatabaseLoaded','loadBattleback2','freezeMotion','zCNIz','visibilityState','windowAreaHeight','PujNx','DWniO','XPSpriteYLocation','WiWly','_escapeRatio','createContents','State-%1-%2','BTestBypass','EDbzn','battleMove','updateBorderStyle','kOyGz','bitmapWidth','WaitForMovement','alignBattleCoreDamageSprite','createActorCommandWindowBattleCore','ConfigManager_makeData','clearMotion','actor%1-portrait','zRKeN','Game_Battler_performEvasion','battleAngle','_animationSprites','battleJump','TargetLocation','command236','process_VisuMZ_BattleCore_CreateRegExp','isATB','45626whydQC','startFloat','sliceMin','makeBattleCommand','ActSeq_Motion_PerformAction','createMainSprite','ConfigManager_applyData','CriticalHitMultiplier','CastMagical','-%1','_activeWeaponSlot','showAnimation','children','PostApplyAsTargetJS','itemHeight','itemEffectAddNormalState','process_VisuMZ_BattleCore_PreBattleCommonEvent','getDamageStyle','Scene_Party','ActSeq_Camera_WaitForCamera','vWwMD','destroy','isItemCommandEnabled','sYXkF','setBattlerFacePoint','scale','addActor','displayBuffs','battleSpriteSkew','%1RegenerateJS','_flipScaleX','_regionBattleback2','performRecovery','_floatEasing','huEmm','refreshCursor','battleCommandIcon','guardSkillId','JoaqR','ActSeq_Set_WholeActionSet','edGDZ','clearResult','getDualWieldTimes','validTargets','Exploiter','autoSelectLastSelected','_effectsContainer','AmtOh','performSubstitute','process_VisuMZ_BattleCore_PluginParams','_forcedBattleLayout','refreshActorPortrait','_shadowScaleY','FullActions','iUKTy','uYWCF','left','setBattleCameraOffset','startGrow','stop','Sprite_Enemy_setHue','cbygj','removeActor','centerFrontViewSprite','PostEndActionJS','zTtDT','Game_Action_needsSelection','Jbdao','HpGaugeOffsetX','ActSeq_Movement_FaceDirection','refreshMotion','power','jZyff','Scene_Battle_startEnemySelection','oVzLo','JS\x20%1APPLY\x20%2','_pattern','VisuMZ_2_HorrorEffects','process_VisuMZ_BattleCore_BaseTroops','ActSeq_Mechanics_AddState','Duration','playEnemyDamage','fptnz','AutoBattleCancel','damageStyle','code','ActSeq_Camera_Clamp','_jumpWholeDuration','DualWield','UTseP','isSkill','YmWNk','skillItemWindowRectBorderStyle','vOpum','_backAttachmentSprite','createSeparateDamagePopups','gainTp','updateFloat','Window_ActorCommand_initialize','_updateCursorArea','EscapeSuccess','DigitGroupingDamageSprites','Index','isDead','reduce','Window_BattleLog_performAction','POST-','text','ActionSkillMsg2','onJumpEnd','top','collapseType','Direction','JSON','nextActiveWeaponSlot','_damagePopupArray','isBypassDamageCap','commandNameWindowDrawBackground','Onfto','ShuffleArray','isPreviousSceneBattleTransitionable','freezeFrame','subject','atbInterrupt','mNZdX','ShowRemovedState','Scene_Map_launchBattle','HbbKb','Window_BattleEnemy_show','TextColor','_allTargets','ActSeq_Mechanics_EnemyEscape','PARTY','isOpen','performDamage','isLearnedSkill','refreshRequest','updateStateSpriteBattleCore','FlashColor','isDTB','PrioritySortActive','pointX','nDAib','isForRandomBattleCore','RegExp','transform','isForFriendBattleCore','updateBattlebackBitmap1','Weapon-%1-%2','FocusX','active','message1','isBreakStunned','skew','getAttackMotionSlot','KBHkl','onEscapeFailure','placeTimeGauge','drawItemStatusXPStyle','_hpGaugeSprite','addTextToCombatLog','addLoadListener','animationWait','createLowerLayer','ActSeq_Impact_ColorBreak','FUNC','replace','kxLJt','TpGaugeOffsetX','PopupDuration','dmLFr','itemLineRect','invokeAction','TVibr','xdUyP','_stateIconSprite','removeOnceParallelInterpreter','RequiresDefeat','cduzJ','ActSeq_Mechanics_EtbAction','VzXil','match','parse','SmoothImage','afpVU','commandEscape','height','constructor','isActionSelectionValid','ActSeq_Impact_ShockwaveCenterTargets','setActiveWeaponSlot','Lwqca','WaitForEffect','updateWaitMode','ClearBattleLog','HUwgm','YPvXi','anchorX','buzRP','_angleRevertOnFinish','abs','cFvek','NameOffsetX','EuxQi','GqcWx','alterCost','ShowPopup','DefaultStyle','KpZEa','PlPts','WaitComplete','setupBattleCoreData','drawItemStyleIconText','fnordRemovedStates','FlinchDistanceX','MpGaugeOffsetX','GtFAV','AfTdH','VisuMZ_0_CoreEngine','showHelpWindow','drawItemStatusListStyle','processRefresh','DZrPU','type','Avjtk','lzpah','MAT','TpbActiveChangeEnabled','displayStartMessages','xYDye','ElBPx','applyGuard','head','_jumpHeight','onBattleStartBattleCore','Game_Action_apply','setVisibleUI','addGeneralOptions','targetSpritePosition','_callSceneOptions','isBusy','updateForceAction','_deathStateApplied','JmykX','Window_BattleLog_performCollapse','PLugB','makeActions','ALL\x20SKILLS','clearRect','ZAClX','actorId','_enemyNameContainer','TIxjF','criticalHitRate','oPYUc','StartName','_isBattlerFlipped','DefaultDamageStyle','WEhVp','startInput','ScaleX','removeAnimationFromContainer','CopyCombatLog','addSingleSkillCommand','bottom','Psnue','\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Declare\x20Arguments\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20user\x20=\x20arguments[0];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20target\x20=\x20arguments[1];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20obj\x20=\x20arguments[2];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20let\x20value\x20=\x20arguments[3]\x20||\x200;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20let\x20originalValue\x20=\x20value;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Declare\x20Constants\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20action\x20=\x20(this.constructor\x20===\x20Game_Action)\x20?\x20this\x20:\x20user.currentAction();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20a\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20b\x20=\x20target;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20attacker\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20defender\x20=\x20target;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20healer\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20receiver\x20=\x20target;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20actor\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20currentClass\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20skill\x20=\x20(this.constructor\x20===\x20Game_Action)\x20?\x20this.item()\x20:\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20item\x20=\x20(this.constructor\x20===\x20Game_Action)\x20?\x20this.item()\x20:\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20weapon\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20armor\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20enemy\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20state\x20=\x20obj;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Create\x20Compatibility\x20Variables\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20let\x20origin\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(Imported.VisuMZ_1_SkillsStatesCore\x20&&\x20$dataStates.includes(obj))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20origin\x20=\x20target.getStateOrigin(obj.id);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Process\x20Code\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20try\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20%1\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x20catch\x20(e)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20($gameTemp.isPlaytest())\x20console.log(e);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20NaN\x20Check\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(isNaN(value)){\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20($gameTemp.isPlaytest())\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20console.log(\x27NaN\x20value\x20created\x20by\x20%2\x27.format(\x27\x27,obj.name));\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20console.log(\x27Restoring\x20value\x20to\x20%2\x27.format(\x27\x27,originalValue));\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20value\x20=\x20originalValue;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Return\x20Value\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20value;\x0a\x20\x20\x20\x20\x20\x20\x20\x20','PEGex','ActSeq_Movement_Opacity','faceRect','States','border','attackStatesRate','pages','battleCoreResumeLaunchBattle','getStypeIdWithName','initMembers','mqwoU','ActionItemMsg','result','yVKYq','Game_Actor_makeActionList','mainSpriteHeight','WZmHQ','PreDamage%1JS','#ffffff','Targets2','bitmap','wedEt','skewDuration','HelpFight','ActSeq_Mechanics_PtbFullHalfAction','YRwOp','ForceExploited','addText','updatePositionBattleCore','isFightCommandEnabled','Game_Action_evalDamageFormula','setHandler','Scene_Battle_terminate','cameraClamp','_action','JibFS','WnGkf','update','RdOsb','addCustomCommands','DisplayAction','createEnemyNameContainer','makeAutoBattleActions','TBWsQ','_homeX','KCjIi','Window_BattleLog_popupDamage','XkxYk','isSkewing','battleback1Name','partyCommandWindowRectXPStyle','process_VisuMZ_BattleCore_CommonEventKeys','EkmdR','isOptionsCommandAdded','yMXmM','FaceAway','_wtypeIDs','MOTIONS','Game_System_initialize','ActSeq_Camera_Offset','_createCursorArea','basicGaugesY','endAnimation','current\x20target','ohTME','loadPicture','BattleManager_updatePhase','param','guard','emerge','createCommandNameWindow','Window_BattleLog_displayTpDamage','needsSelection','commandFight','max','trim','TzFwi','updateSkew','PostRegenerateJS','_targetSkewY','bqVkm','PreEndActionJS','Window_Options_statusText','SvWeaponSolo-%1-%2','StatusWindowAttachmentFrontOffsetY','_shadowScaleX','MP_Flat','wmrcf','toUseBoostPoints','not\x20focus','StateIconOffsetY','NHTYW','EVAL','endAction','startOpacity','CriticalHitFlat','uhXls','21329fzvxvA','Scene_Battle_startActorSelection','AttachStateOffsetY','NameAttachStateIcon','dataId','mytlO','removeBuffsAuto','TimeScale','glitch','Game_Action_executeDamage','PtIro','ActSeq_Mechanics_PtbAlterCost','clearActiveWeaponSlot','sortEnemies','updateHpGaugePosition','gainFullActionsPTB','Radius','_duration','jsObp','gainCurrentActionsETB','ENQNG','Game_Action_itemEffectAddAttackState','FTdpl','front\x20base','move','StyleOFF','ZKwer','createBattleFieldContainer','SideviewSelect','ULeZK','skonk','resetBreakShield','iZaLo','ZBwvg','getSkillTypes','refreshDimmerBitmap','createWeather','onGrowEnd','hZSaU','createActionSequenceProjectile','isTickBased','Scene_Battle_updateStatusWindowPosition','_stypeIDs','isDamagePopupRequested','opacityStart','MotionAni','createDamageSprite','KXRMC','ParseClassNotetags','turnOrderChangeOTB','isTriggered','isShownOnBattlePortrait','Sprite_Battler_updateMain','getItemDamageAmountLabelBattleCore','_tpbState','Game_Interpreter_PluginCommand','Game_Action_applyGlobal','_uiContainer','XUhjM','BattleManager_onEncounter','WWLCK','isBattleRefreshRequested','xWHjz','forceEscapeSprite','isTpbMainPhase','show','cancelButtonText','ActSeq_Mechanics_ArmorPenetration','VisuMZ_1_BattleCore\x20does\x20NOT\x20support\x20changing','Game_Map_battleback1Name','escape','waitForNewLine','executeDamage','changeInputWindow','createInnerPortrait','ekDKN','isForRandom','Ddddm','svBattlerData','performFlinch','onSelectAction','+%1','_growY','itemWindowRect','MNUDk','NameLegacy','clamp','coreEngineRepositionEnemies','sKUYT','YCDaY','skillTypes','IZXBZ','getNextDamagePopup','BattleManager_endAction','ActionCount','Mute','AsTarget','Window_Options_addGeneralOptions','isBuffAffected','displayItemMessage','addFightCommand','iconIndex','setCommonEvent','_skillIDs','swing','ZwAQs','performAction','CgTnB','isConfused','PreApply%1JS','BattleManager_initMembers','MedAm','WaitForProjectile','reverse','animationNextDelay','checkShowHideBattleNotetags','snapForBackground','createAttachedSprites','Game_Interpreter_terminate','removedStateObjects','uiFdW','bsNVs','drawBackgroundRect','_enemies','SCvDP','zyaMD','Scene_Options_maxCommands','anchor','performCounter','startDamagePopup','IUPyw','AutoNotetag','_commandNameWindow','ActSeq_Mechanics_BoostPointsStoreData','uuZSG','isAutoBattle','Game_Action_numRepeats','cameraOffsetDuration','isCTB','removedBuffs','parseForcedGameTroopSettingsBattleCore','ActorCmd','startEnemySelection','surprise','hpAffected','useDigitGrouping','DamageRate','_visualHpGauge_JustDied','attackMotions','checkAutoCustomActionSequenceNotetagEffect','isPartyTpbInputtable','ActSeq_Mechanics_RemoveState','_spriteset','CreateCommonEventKeys','UKDyf','_opacityEasing','xBlEQ','isMeleeMultiTargetAction','evXhK','onEncounterBattleCore','battlerSmoothImage','isPartyCommandWindowDisabled','updateCustomActionSequence','ScaleDown','_checkOn','createBorderStylePortraitSprite','DoSOV','setupIconTextPopup','createHelpWindow','stbGainInstant','getSkillIdWithName','forceAction','VisuMZ_3_ActSeqImpact','checkSceneBattleTransitionable','apply','qsXAk','oDlKd','CombatLogIcon','EndEV','weatherPower','float','QoL','URWLN','setLastPluginCommandInterpreter','Spriteset_Battle_createBattleField','GthqV','ubunv','iqsEc','Window_BattleEnemy_initialize','LtBzg','ActSeq_Element_AddElements','updateBitmap','extraHeight','\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Declare\x20Arguments\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20user\x20=\x20arguments[0];\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20a\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20b\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20let\x20targets\x20=\x20arguments[1];\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Process\x20Code\x0a\x20\x20\x20\x20\x20\x20\x20\x20try\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20%1\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x20catch\x20(e)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20($gameTemp.isPlaytest())\x20console.log(e);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Return\x20Value\x0a\x20\x20\x20\x20\x20\x20\x20\x20return\x20targets\x20||\x20[];\x0a\x20\x20\x20\x20','alive\x20actors\x20not\x20target','HelpEscape','gizrn','scope','Game_Action_clear','stateMotionIndex','itemEffectAddAttackState','BattleManager_cancelActorInput','BattleManager_startAction','IconSet','ParseActorNotetags','OZYSU','JS\x20%1DAMAGE\x20%2','VariableHeal','performCastAnimation','MotionSpeed','gainMp','updateCommandNameWindow','Sprite_Battler_updatePosition','displayAddedStates','addChildToBack','process_VisuMZ_BattleCore_Action_Notetags','4GwhYAH','jKaLN','tpbActorSwitchConditionsMet','isMeleeSingleTargetAction','_attackAnimationId','performMiss','IIsGJ','substitute','frameCount','ARRAYJSON','Name','ShowAddedState','createBattleUIOffsetY','vvNqK','includes','battleProjectiles','isGuard','Scene_Battle_itemWindowRect','encounterList','BjqlO','kphVh','_reflectionTarget','ForceDeath','SkipPartyCmd','SkillsStatesCore','makeTargetsBattleCore','stypeId','AllowRandomSpeed','_handlers','gxGfJ','SceneManager_isSceneChanging','BattleVictoryJS','maxCols','createJS','canMove','index','initElementStatusCore','PXpsp','YyiQl','createShadowSprite','lineHeight','_motionSpeed','LSnnv','FocusY','DigitGrouping','contents','boxHeight','autoBattleStyle','ActSeq_Horror_TVCreate','fillRect','fYtLJ','addedBuffs','autoBattle','ActSeq_Motion_FreezeMotionFrame','requestMotion','commandOptions','SkillItemMiddleLayout','_lastPluginCommandInterpreter','updateStatusWindowPosition','JumpToLabel','mpDamage','updateShadowScale','VisuMZ_2_DragonbonesUnion','updateAttachedSprites','canUseItemCommand','_autoBattle','Window_BattleLog_clear','_tempEquipCheck','BmPig','CriticalDmgFlat','changeWeather','HZzoR','processVictory','mxAsd','PrioritySortActors','isFTB','moveBattlerDistance','traitSet','qrqfE','WfVMw','icon','_multipliers','ShowSubstitute','kIlng','StartTurnMsg','buffRemove','UolZo','oPOOX','BravePoints','ActSeq_Mechanics_AnalyzeWeakness','_actorCommandWindow','getBattlePortraitOffsetX','_scene','drawItemImageXPStyle','setBattlePortrait','angleDuration','EnableDamageCap','expTotal','createBattleUIOffsetX','statusWindowRect','StatusWindowSelectableBackHide','MotionFrameWait','ReflectPlayback','createActors','helpWindowRectBorderStyle','swapEnemyIDs','changePaintOpacity','TP_Flat','performSTBExploiter','isAlwaysHidden','Angle','helpWindowRect','DamageFlat','mainFontSize','isOpponent','revertTpbCachedActor','getBattlePortraitFilename','svAnchorY','padding','retreat','updateFrame','ActSeq_Mechanics_CustomDmgFormula','createDamageContainer','setBattleZoom','_subject','zTvko','ParseItemNotetags','YXnja','wait','Game_Interpreter_command301','requestFauxAnimation','moveToStartPosition','KNuSO','JS\x20%1END\x20ACTION','createPartyCommandWindow','frameVisible','GlIbQ','APrcN','BreakShields','fFTaU','zuEwW','Game_BattlerBase_isStateResist','currentValue','getNextSubjectFromPool','BaseTroopIDs','waitCount','missile','ActSeq_Mechanics_HpMpTp','partyCommandWindowRect','ShowCosts','requestRefresh','ActSeq_Mechanics_OnceParallel','tmVcM','_motion','<CENTER>%1','loadEnemy','_dragonbonesSpriteContainer','iOgRl','traitObjects','_immortal','SurQS','onDisabledPartyCommandSelection','BattleManager_startBattle','TPJuR','sjgLX','LaIXm','changeCtbChargeTime','TPB','gainHp','addAutoBattleCommand','repositionCancelButtonBorderStyle','setBattlerFlip','createDigits','HP_Rate','JNALw','aBTAM','Game_Battler_makeSpeed','message2','rOzbM','getHalfActionsPTB','showNormalAnimation','iikEI','VisuMZ_1_SkillsStatesCore','_index','battleUIOffsetY','makeDeepCopy','getMenuImage','updateBattlebackBitmap','qymwP','aoirj','skillWindowRect','mVqtJ','turnCount','ActSeq_Impact_MotionBlurTarget','sEHtu','Game_Actor_equips','join','ReflectAnimation','_methods','uBDzb','sjenx','_logWindow','isClicked','okButtonText','isPTB','ApplyImmortal','XLmZE','ForceExploiter','PreEndBattleJS','svBattlerName','isAtbChargingState','gYkem','MQMmO','custom','pVOsr','IIQFr','svBattlerShadowVisible','YKMVm','alterPriority','compatibilityVisible','setupDamagePopup','BindCommonEventKeysForGroup','zTTCh','-%1\x20MP','adjustPosition_ScaleDown','CmdIconOptions','zXxFd','MZiCQ','CmdTextAlign','Skills','requestMotionRefresh','SkillItemBorderCols','battleSys','Yfsst','COMBAT\x20LOG','setupWeaponAnimation','ShowEnemyGauge','setFrame','VisuMZ_4_CombatLog','applyItem','drawItemImage','repeatTargets','value1','ShowHpDmg','ZHnrk','process_VisuMZ_BattleCore_TraitObject_Notetags','_createCursorSprite','lJjAV','_battleLayoutStyle','_enemySprites','OffsetY','canGuard','HitFlat','aoEnm','addAttackCommand','BattleStartEvent','AS\x20USER','updateHelp','textSizeEx','skills','ActSeq_Element_ForceElements','PerformAction','delay','commandStyle','qqgVh','Game_Battler_onBattleStart','xUdmJ','isSpinning','displayCritical','BattleLayout','_back2Sprite','applyForcedGameTroopSettingsBattleCore','name','canAttack','onOpacityEnd','VisuMZ_3_SideviewBattleUI','ShowFacesListStyle','battleCoreTpbMainPhase','ActSeq_Impact_MotionTrailRemove','regenerateAllBattleCore','setText','addDamageSprite','createAttachmentSprites','extraPositionScaledY','IconStypeNorm','battleZoom','xmgGh','applyGlobalCommonEventNotetags','startAction','setEventCallback','%1\x20is\x20incorrectly\x20placed\x20on\x20the\x20plugin\x20list.\x0aIt\x20is\x20a\x20Tier\x20%2\x20plugin\x20placed\x20over\x20other\x20Tier\x20%3\x20plugins.\x0aPlease\x20reorder\x20the\x20plugin\x20list\x20from\x20smallest\x20to\x20largest\x20tier\x20numbers.','_borderPortraitDuration','Sprite_Actor_setBattler','ShowCritical','Sprite_Battler_setHome','TuiLQ','Height','_motionCount','destroyDamageSprite','Sprite_Battler_update','Enemy','27591sJjpFP','_angleEasing','Sprite_Actor_initMembers','Sprite_Actor_setActorHome','kmJwc','AttachStateOffsetX','bBciO','flashDuration','commandNameWindowCenter','_floatHeight','applyImmortal','registerDefeatedEnemy','YbOiU','alterBreakShield','weatherType','ActSeq_BattleLog_Clear','yVpIb','_iconIndex','_inputting','Reveal','autoSelect','playEnemyAttack','setAttack','applyGlobal','drawItem','preemptive','Window_BattleLog_performSubstitute','ShowWeapon','duration','PopupShiftY','autoMeleeSingleTargetActionSet','CounterPlayback','_skewY','iconWidth','addBattleCoreAutoBattleStartupCommand','bwmKm','randomInt','addGuardCommand','PostApplyAsUserJS','battlelog','atgOF','SAntX','updateShadowBattleCore','EYkOv','DEF','MAXMP','Actor-%1-%2','customDamageFormula','NSHIu','WKZju','lJlyy','attackAnimationIdSlot','gainStoredBoostPoints','sideview_ui','isRightInputMode','isForOpponent','qJPRT','BoostPoints','jkNLo','Scene_Battle_helpWindowRect','PostApply%1JS','isSceneChanging','maxBattleMembers','XbFZx','TextAlign','random','ShowReflect','HTBGC','setBattleCameraTargets','PopupOffsetX','performWeaponAnimation','gainHalfActionsPTB','command3011','DDuEj','ActSeq_Set_FinishAction','_colorType','dqvTS','createHpGaugeSprite','create','clearDamagePopup','createDistortionSprite','resizeWindowBorderStyle','isAnyoneGrowing','_enemy','numTargets','MaxLines','tYXJY','canAttackBattleCore','isAnyoneChangingOpacity','_battlerContainer','Scene_Map_initialize','setBattleSkew','PRE-','ActSeq_BattleLog_AddText','ActSeq_BattleLog_UI','PreEndTurnJS','ZdmOs','PostStartActionJS','PortraitScale','updateAttachmentSprites','dying','displayEvasion','ActSeq_Movement_WaitForMovement','deathStateId','_tpbNeedsPartyCommand','revealNewWeaknesses','command357','Wnsjh','kZlHs','battleDisplayText','forceMotion','PostDamageAsTargetJS','qtJvk','OffsetX','xBBnK','rkqdw','setBattleCameraPoint','visible','TpbGaugeOffsetY','process_VisuMZ_BattleCore_jsFunctions','auto','processAnimationRequests','Scene_Battle_onEnemyOk','oRLRk','pow','isAnyoneJumping','Odmcs','_battleCoreBattleStartEvent','ParseAllNotetags','CommandWidth','drawIcon','performAttack','ActSeq_DB_DragonbonesMotionAni','Sprite_Battler_damageOffsetX','dead\x20battlers','isTpbCharged','mainSprite','SEclg','ActSeq_Movement_FacePoint','mpDamageFmt','dACxo','zAMsK','Post','createPartyCommandWindowBattleCore','VaMiC','TeyTH','PopupShiftX','Shadow','_targetOpacity','iconHeight','isDebuffAffected','adIRF','callUpdateHelp','SZVKS','updateShadowPosition','Targets1','Ovbwd','drawItemStyleIcon','AutoMeleeAoE','yzTlV','drawTextEx','die','PostEndBattleJS','_skewWholeDuration','JS\x20ESCAPE\x20FAILURE','Parse_Notetags_Action','ArRedFlat','HyPTt','setActiveWeaponSet','_createClientArea','updateMain','WveSb','isAnyoneSkewing','isStateResist','peINv','isJumping','WaitForJump','PopupOffsetY','arPenFlat','VisuMZ_2_BattleSystemATB','isBattleCoreTargetScope','slices','createCommandVisibleJS','processRandomizedData','NameFontSize','displayReflectionPlayBack','hasSvBattler','loadBitmap','svBattlerAnchorY','ActionEffect','bossCollapse','IZqhN','makeActionList','command301','applySoftDamageCap','WaitForScale','onActorOk','numRepeats','angle','ActSeq_Mechanics_StbRemoveExcessActions','getNextSubject','onFloatEnd','Sprite_Enemy_initVisibility','adjustPosition_ScaleUp','NqkYR','_damageContainer','Wave','Scene_Battle_createAllWindows','selectNextActor','updateShadow','expRate','waitForEffect','isSTB','attackAnimationId2','removeChild','%1Apply%2JS','getAttackWeaponAnimationId','ixxWz','initBattlePortrait','TmBXz','isChanting','repeats','977328OYYGFR','PostStartBattleJS','SvBattlerMass-%1-%2','XjLRE','ParseSkillNotetags','uiMenuStyle','_indent','motionType','ActSeq_Movement_WaitForOpacity','Sprite_Actor_updateShadow','_skewEasing','victory','IZrHx','setupBattleback','stStP','VisuMZ_3_WeaknessDisplay','XgSol','ActionEnd','ZlqeF','ATK','actorCommandCancelTPB','addItemCommand','EdrFO','afSCM','gaoSQ','VisuMZ_1_ElementStatusCore','setBattleAngle','CmdIconFight','rqJpP','Game_Party_removeActor','Actions','vsmPm','isForFriend','battleStatusWindowAnimationContainer','performJump','ShowPortraits','MANUAL','MAXHP','Game_Party_addActor','Window_BattleLog_performReflection','startMove','Slot','setHelpWindowItem','_skewX','_customDamageFormula','parent','startActorCommandSelection','_baseX','mqdvI','qchVZ','SkillItemStandardCols','updateOpacity','Sprite_Enemy_update','ugCFr','JMUnM','makeDamageValue','setupChild','Scene_Battle_selectNextCommand','mainSpriteScaleY','dead\x20friends','floor','ParseEnemyNotetags','close','effect','UrVgL','IiLgl','onTurnEnd','Defeat','nhZcv','qMtML','createBattleFieldBattleCore','displayChangedBuffs','removeStatesAuto','OffsetAdjust','lukEffectRate','createEffectActionSet','setMoveEasingType','isDisplayEmergedEnemies','optDisplayTp','casting','displayReflection','updateCollapse','Window_BattleLog_performDamage','Game_Battler_startTpbTurn','eHafV','createAnimationSprite','CriticalDuration','UNTITLED','BattleManager_processVictory','JPsYI','JhurY','makeCommandList','setCursorRect','sort','PreDamageJS','CriticalHitRate','ByJDl','loadWindowskin','recoverAll','Game_Map_battleback2Name','ActSeq_Mechanics_FtbAction','performActionEndMembers','gaugeLineHeight','createStateIconSprite','autoBattleAtStart','Scene_Map_initializeAfter','createHelpWindowBattleCore','createAutoBattleWindow','updateStateSprite','nameY','ActSeq_Animation_ActionAnimation','autoSelectPriority','LTVeT','wRYIl','onMoveEnd','AnimationID','HfpPh','displayAction','QyjAL','battleEffect','addSkillCommands','compareBattlerSprites','onRegeneratePlayStateAnimation','clearFreezeMotion','Window_BattleLog_performEvasion','isQueueOptionsMenu','setupShockwaveImpactFilter','activate','createChildSprite','criticalDmgFlat','inputtingAction','extraPositionY','actionSplicePoint','windowPadding','Yvzbu','createEnemyNames','10416MUauhX','ActionAnimation','Spriteset_Battle_update','selectNextCommandTpb','setImmortal','Scene_Battle_startActorCommandSelection','startWeaponAnimation','356Yjgoxu','BattleManager_isTpbMainPhase','uiInputPosition','isBattlerGrounded','autoBattleUseSkills','plcqC','Scene_Battle_createHelpWindow','isMagical','performReflection','Game_BattlerBase_eraseState','oqxmQ','_angleWholeDuration','PFjLs','Game_BattlerBase_canAttack','UPauI','_baseY','Debuffs','_currentAngle','_growDuration','Window_BattleLog_pushBaseLine','weaponTypes','endBattle','aCyyy','NIxKo','_preBattleCommonEvent','logWindowRect','smooth','shouldPopupDamage','ActSeq_Movement_Skew','_branch','dNwjN','updateAction','JS\x20%1START\x20TURN','textWidth','eWTfN','placeStateIcon','applyData','addEscapeCommand','DrINu','bgType','ActSeq_Motion_MotionType','OverallFormulaJS','gHvmM','charged','ActSeq_Skew_Reset','_statusWindow','_svBattlerSprite','NiAeI','isAffectedByBreakShield','spriteId','jumpBattler','hZozF','BattleManager_onEscapeSuccess','tpbCommandFight','BattleDefeatJS','XVyzq','alive\x20opponents','open','MQyaq','updateFlip','VisuMZ_2_BattleSystemOTB','updateBossCollapse','mvLdf','iEYqG','itemHit','updateOnceParallelInterpreters','right','alive\x20friends','Sprite_Actor_moveToStartPosition','canGuardBattleCore','_commonEventQueue','cancelTargetSelectionVisibility','plHPw','findTargetSprite','alive\x20enemies\x20not\x20user','Scene_Options','setupMotionBlurImpactFilter','WEAPON\x20SWAP','createAnimationContainer','_mainSprite','ActSeq_Horror_TVRemove','Window_BattleLog_performActionEnd','isCommandEnabled','NUM','_svBattlerData','VisuMZ_2_WeaponSwapSystem','Window_BattleLog_displayEvasion','ActSeq_Mechanics_BoostPointsChange','VisuMZ_2_BattleSystemSTB','eMcmk','canBattlerMove','iHDps','getFullActionsPTB','_targetFloatHeight','Sprite_Battler_startMove','BqyPi','effects','redraw','ActSeq_BattleLog_Refresh','innerWidth','isCustomBattleScope','_partyCommandWindow','JUeah','dead','wholeActionSet','GiINm','_emptyBitmap','alterType','autoBattleStart','IorKO','helpAreaHeight','Window_BattleStatus_drawItemImage','TnETv','Turns','updatePosition','LvZqo','DefaultSoftScaler','BattleEndEvent','commandName','updatePhase','speed','VaAdJ','initBattleCore','initialize','Sprite_Battler_setBattler','CTtJp','UzLzc','isUndecided','oIGxY','canAddSkillCommand','BGagX','MuZnc','log','displayMpDamage','createTroopNote','onSkewEnd','ActSeq_Mechanics_AtbGauge','updateLink','ShowTpDmg','kXmvm','LastSelected','ActSeq_Horror_GlitchRemove','BattleLogRectJS','ActiveTpbOptionsMessage','PostEndTurnJS','Tfvit','MeleeDistance','CastPhysical','isNextSceneBattleTransitionable','Game_Battler_performDamage','clearElementChanges','IsRkJ','NameAlwaysSelectOnly','TLzqa','xRqMW','arRedRate','statusWindowRectXPStyle','invokeMagicReflection','_onceParallelInterpreters','_item','WaitCount2','bEbvY','updateGrow','autoMeleeMultiTargetActionSet','length','_executedValue','ActSeq_Impact_ZoomBlurPoint','Spriteset_Battle_updateActors','Game_Battler_regenerateAll','ActSeq_Zoom_Scale','JS\x20%1END\x20BATTLE','startSkew','svBattlerAnchorX','#%1','Window_BattleLog_displayMiss','ChargeRate','allowRandomSpeed','startActorSelection','KWQep','300602OduRlI','qeqXy','ActSeq_Mechanics_CtbSpeed','setBattlerMotionTrailData','TpbGaugeOffsetX','updatePadding','WrLqQ','LwOhm','YwYfp','StatusWindowAttachmentBack','BAkGC','StatusWindowSkinFilename','likgJ','dwzpS','EscapeFailureJS','JayAn','VisuMZ_2_BattleSystemPTB','applyAngleChange','cLQqV','isEscapeCommandEnabled','makeEscapeRatio','zclUP','_cursorSprite','WaitForOpacity','EmMbq','commandAutoBattle','terminate','updateEffectsContainer','commandSymbol','_armorPenetration','performCollapse','indexOf','HpLif','weaponImageId','_skillWindow','ZYNdq','Window_SkillList_maxCols','NameAlwaysHidden','updateActors','initMembersBattleCore','bind','CommandVisible','ActSeq_Target_PrevTarget','%1Event','makeData','battleOpacity','STR','Game_Action_itemEffectAddNormalState','battleGrow','WeINy','displayCurrentState','EkNyq','isVisualHpGaugeDisplayed','_itemWindow','qhXfw','Game_Battler_clearDamagePopup','yQFzr','battleAnimation','battleCorePreBattleCommonEvent','_frontAttachmentSprite','isBattlerFlipped','isAttack','HomePosJS','cancelActorInput','JS\x20BATTLE\x20VICTORY','isPhysical','resize','_baseLineStack','loop','actorCommandAutoBattle','clearBattlerMotionTrailData','message4','LUK','_windowLayer','isSkipPartyCommandWindow','isFloating','nTvpO','VNhgX','start','SvMotionIdleSolo-%1-%2','StyleName','qXCYf','setBackgroundType','getTraitSetKeys','concat','drawSkillCost','createActorCommandWindow','waitForMovement','hardDamageCap','AutoBattle','ImuGw','GVkOB','occasion','setupBattlebackBattleCore','getEnemyIdWithName','efGQC','Game_Action_setAttack','mmp','sPTLr','mcEum','skillItemWindowRectMiddle','unshift','TIstE','EtOBU','actorCommandEscape','DistanceX','ActSeq_Mechanics_VariablePopup','nVPmw','removeState','cOIXw','SkewX','origin','SEVBS','abnormal','commandStyleCheck','_updateCursorFilterArea','_phase','CheckSkillCommandShowSwitches','EscapeSuccessJS','ddnLt','note','_list','selectNextCommand','_skewDuration','xxoxP','isSkillItemWindowsMiddle','battleSkew','prev\x20target','FaceDirection','ActSeq_Set_SetupAction','measureTextWidth','FWAzQ','setupHpGaugeSprite','drawItemStatus','slice','onAngleEnd','ActSeq_Target_NextTarget','HqWTy','ZNUAv','NRqWe','tkQKg','isMagicSkill','flashColor','laUnn','QUEqY','nMVBy','STRUCT','Window_BattleLog_refresh','_defeatedEnemies','isAnyoneMoving','ARRAYEVAL','Scale','loadBattleback1','Point','setupCriticalEffect','_createDamageContainer','MotionType','tdBWO','criticalDmgRate','waitForAnimation','ABxWW','stepFlinch','AutoBattleOK','ActSeq_ChangeAngle','updateStateIconSprite','Sprite_Battleback_adjustPosition','DefaultSoftCap','isEnemy','finalizeScale','tXCDK','_animationContainer','stateRate','damageContainer','ActSeq_Movement_MoveToPoint','bZrta','processPostBattleCommonEvents','adjustWeaponSpriteOffset','isSideButtonLayout','HQFhY','DDtde','makeTargetSelectionMoreVisible','2862825RMqERm','WaitForCamera','ActSeq_Camera_Reset','ActSeq_Set_TargetActionSet','Sprite_Battler_isMoving','_tpbSceneChangeCacheActor','faceWidth','isAlive','HpGauge','ActSeq_Movement_Float','isStatusAffected','allBattleMembers','loadSystem','formula','_actor','jump','animationShouldMirror','removeImmortal','BhsUC','_eventId','updateCallMenu','ActSeq_Impact_MotionBlurScreen','ArPenRate','applyHardDamageCap','\x5cI[%1]%2','ParseArmorNotetags','SaQeS','BattleManager_inputtingAction','addBattleCoreAutoBattleStyleCommand','aliveMembers','_floatWholeDuration','vrTsy','VPgKS','pattern','startPartyCommandSelection','round','DamageType%1','toLowerCase','RQwCV','uoCfE','_text','Damage','nEPVJ','ceil','aEiFv','RUIRW','opacity','Filename','map','createAllWindows','_growX','updateBattleProcess','_targetIndex','_linkedSprite','linkSprite','_battlePortrait','Game_Battler_performMiss','_lineHeight','exit','_stateSprite','CmdTextAutoBattle','portrait','pEacN','updateWeather','JixAT','AutoBattleMsg','updateScale','ext','BattleLog','helpAreaBottom','BqecI','updateTargetPosition','WaitForAngle','JS\x20%1START\x20ACTION','xamUZ','statusWindowRectBorderStyle','izVvr','eraseState','ActionSequence','KAhxK','updateCancel','FEAbe','Cquml','sbDDg','iconText','BFfRE','BattleManager_makeActionOrders','hpDamage','_freezeMotionData','maxItems','PostDamage%1JS','NewPopupBottom','addSingleSkillCommands','ActSeq_Skew_WaitForSkew','fontSize','_flashColor','actorCommandWindowRect','EnableSoftCap','Spriteset_Battle_createLowerLayer','_targetGrowY','_targetGrowX','HpGaugeOffsetY','eQeby','finishActorInput','drain','Scene_Battle_stop','HalfActions','remove','onEncounter','updateBattlerContainer','itemRect','canUse','addState','StatusWindowAttachmentFrontOffsetX','vZAOh','performMagicEvasion','KOSIa','setupTextPopup','motionSpeed','QmIjZ','ActSeq_Projectile_Picture','pushBaseLine','isBorderStylePortraitShown','performTpbActiveCheckSwitch','itemTextAlign','_enemyWindow','WgMch','timeScale','addedStateObjects','DLMhl','setHue','VisuMZ_2_BattleSystemCTB','ActSeq_Movement_WaitForSkew','_requestRefresh','alive\x20enemies','canInput','lpzLd','arRedFlat','PreRegenerateJS','80nOJEez','ActSeq_Movement_WaitForSpin','Game_Enemy_transform','isCertainHit','%1Damage%2JS','shadow','isPlaytest','Window_BattleLog_performMagicEvasion','getHardDamageCap','BattleManager_startTurn','applyVariance','Game_Battler_clearMotion','min','removeDamageSprite','_enemyId','Window_BattleLog_update','_jumpDuration','battleMembers','Sprite_Enemy_updateStateSprite','bhLEI','addAutoBattleCommands','makeActionListAutoAttack','battlerShadowScaleY','refresh','battleCamera','qRBeC','ActionEndUpdate','PreApplyJS','adjustPosition_ScaleToFit','CmdStyle','StepDuration','Game_Action_isForFriend','qRzia','_opacityWholeDuration','checkCacheKey','ActSeq_Motion_ClearFreezeFrame','ZBsso','_flinched','waitForOpacity','zaotF','battleEnd','changeAtbChargeTime','NVVkB','isAppeared','startSpin','Scene_Battle_startPartyCommandSelection','callOkHandler','friendsUnit','OlcCm','VisuMZ_3_ActSeqCamera','placeGauge','startJump','Window_BattleStatus_initialize','lUJSS','noSimilarSTypes','ParseWeaponNotetags','clear','Sprite_Animation_targetSpritePosition','ActSeq_Angle_Reset','isSpriteVisible','onAllActionsEnd','getLastPluginCommandInterpreter','eufUM','makeActionOrders','Intensity','ShowMissEvasion','_borderPortraitTargetX','StatusWindowAttachmentFront','initVisibility','changeBattlerOpacity','bLirV','MLVDx','uILOM','qQkNO','walk','QNhfV','dPAeI','showEnemyAttackAnimation','PreStartTurnJS','isDying','lcFiO','1216VJRaBE','pdEHi','_cache','EVaQY','updateMotionCount','_growWholeDuration','drawItemImagePortraitStyle','AS\x20TARGET','vLBci','%1\x27s\x20version\x20does\x20not\x20match\x20plugin\x27s.\x20Please\x20update\x20it\x20in\x20the\x20Plugin\x20Manager.','updateEffectContainers','Scene_Battle_logWindowRect','_tempBattler','LPYBs','arPenRate','ActSeq_Horror_NoiseCreate','DamageStyleList','showPortraits','isAnyoneSpinning','ScaleY','processActorCommandCancelTPB','collapse','kNWuT','DefaultHardCap','Window_BattleLog_displayCurrentState','SwitchCritical','_motionType','worldTransform','calcWindowHeight','physical','ActSeq_Movement_WaitForFloat','attackAnimationId1','ActSeq_Mechanics_DeathBreak','eKPAE','dead\x20opponents','drawItemImageListStyle','dimColor2','innerHeight','updateVisibility','Sprite_Enemy_createStateIconSprite','isActing','%1StartActionJS','TetOv','Sprite_Enemy_updateBossCollapse','enemyId','center','PostApplyJS','undecided','drawItemBackground','WaitForSkew','QeywM','getItemDamageAmountTextBattleCore','compareEnemySprite','drawGauge','partyCommandWindowRectDefaultStyle','XbNrA','addSkillTypeCommand','ugqgC','isPreviousScene','drawActorFace','_commonEventIDs','_actions','attack','ActSeq_Mechanics_BreakShieldReset','isGuardWaiting','Game_Temp_requestAnimation','ActSeq_Impact_ZoomBlurTargetCenter','WaitForNewLine','process_VisuMZ_BattleCore_DamageStyles','yWXXl','_effectDuration','front\x20center','drawSingleSkillCost','qeqPd','Game_Action_itemHit','isActor','AutoMeleeSolo','Scene_Battle_windowAreaHeight','Game_Action_isForRandom','Game_BattlerBase_refresh','isActiveTpb','startMotion','motionIdle','targetDistortionSpritePosition','ArPenFlat','ElementStatusCore','yQrAC','ConvertCount','extraPositionX','Elements','StepDistanceY','HelpAutoBattle','refreshStatusWindow','updateStart','setActorHome','all\x20targets','WeaponTypeID','_targetAngle','displayFailure','ActSeq_Movement_MoveBy','isItem','UgxTv','hgncg','_homeY','_animationCount','nyRsi','addNewState','Scene_Battle_initialize','msUDy','clearBattleCoreData','evade','BattleCore','battlerSprites','trueRandomTarget','allowCollapse','ActSeq_Mechanics_StbExtraAction','pop','Game_Action_setGuard','Style','BattleCmdList','_appeared','PZaKL','repositionEnemiesByResolution','CastCertain','createTargetsJS','PreStartBattleJS','setValue','Mirror','Scene_Battle_createActorCommandWindow','Yvnzt','_waitMode','zMKUE','setupActionSet','isEffecting','battlerShadowScaleX','performMoveToTargets','isCustomActionSequence','onActorCancel','registerCommand','isETB','HbpHZ','setSTBExploited','Scene_Battle_updateBattleProcess','isAnimationShownOnBattlePortrait','CriticalDmgRate','createCancelButton','removeBuff','stepBack','animationBaseDelay','lBsnd','actions','isBattleSys','hide','ActSeq_Movement_FaceTarget','addChild','thrust','lqudF','Game_Troop_expTotal','isSceneBattle','addOptionsCommand','spell','Sprite_Battler_damageOffsetY','VisuMZ_3_BoostAction','isGrowing','currentExt','Scene_Battle_start','zewBl','_enemyID','clearWeaponAnimation','mpHealingFmt','adjustFlippedBattlefield','resetResultSwitches','XZXkn','requestAnimation','YSrFC','cameraDuration','tbEmN','wPCYK','ActSeq_Zoom_WaitForZoom','ActSeq_Element_NullElements','default','_cacheTextWidth','GroupDigits','toUpperCase','ShowHide','StatusWindowSkinHide','Sprite_StateIcon_updateFrame'];_0x21db=function(){return _0x304315;};return _0x21db();}